<?php
// PHP Quickref generated at 2015-01-01T23:26:38+0100
return array (
    'abs' =>
        array (
            'file' => 'function.abs.php',
            'desc' => 'Absolute value',
        ),
    'acos' =>
        array (
            'file' => 'function.acos.php',
            'desc' => 'Arc cosine',
        ),
    'acosh' =>
        array (
            'file' => 'function.acosh.php',
            'desc' => 'Inverse hyperbolic cosine',
        ),
    'addcslashes' =>
        array (
            'file' => 'function.addcslashes.php',
            'desc' => 'Quote string with slashes in a C style',
        ),
    'addslashes' =>
        array (
            'file' => 'function.addslashes.php',
            'desc' => 'Quote string with slashes',
        ),
    'apache_child_terminate' =>
        array (
            'file' => 'function.apache-child-terminate.php',
            'desc' => 'Terminate apache process after this request',
        ),
    'apache_getenv' =>
        array (
            'file' => 'function.apache-getenv.php',
            'desc' => 'Get an Apache subprocess_env variable',
        ),
    'apache_get_modules' =>
        array (
            'file' => 'function.apache-get-modules.php',
            'desc' => 'Get a list of loaded Apache modules',
        ),
    'apache_get_version' =>
        array (
            'file' => 'function.apache-get-version.php',
            'desc' => 'Fetch Apache version',
        ),
    'apache_lookup_uri' =>
        array (
            'file' => 'function.apache-lookup-uri.php',
            'desc' => 'Perform a partial request for the specified URI and return all info about it',
        ),
    'apache_note' =>
        array (
            'file' => 'function.apache-note.php',
            'desc' => 'Get and set apache request notes',
        ),
    'apache_request_headers' =>
        array (
            'file' => 'function.apache-request-headers.php',
            'desc' => 'Fetch all HTTP request headers',
        ),
    'apache_reset_timeout' =>
        array (
            'file' => 'function.apache-reset-timeout.php',
            'desc' => 'Reset the Apache write timer',
        ),
    'apache_response_headers' =>
        array (
            'file' => 'function.apache-response-headers.php',
            'desc' => 'Fetch all HTTP response headers',
        ),
    'apache_setenv' =>
        array (
            'file' => 'function.apache-setenv.php',
            'desc' => 'Set an Apache subprocess_env variable',
        ),
    'APCIterator::current' =>
        array (
            'file' => 'apciterator.current.php',
            'desc' => 'Get current item',
        ),
    'APCIterator::getTotalCount' =>
        array (
            'file' => 'apciterator.gettotalcount.php',
            'desc' => 'Get total count',
        ),
    'APCIterator::getTotalHits' =>
        array (
            'file' => 'apciterator.gettotalhits.php',
            'desc' => 'Get total cache hits',
        ),
    'APCIterator::getTotalSize' =>
        array (
            'file' => 'apciterator.gettotalsize.php',
            'desc' => 'Get total cache size',
        ),
    'APCIterator::key' =>
        array (
            'file' => 'apciterator.key.php',
            'desc' => 'Get iterator key',
        ),
    'APCIterator::next' =>
        array (
            'file' => 'apciterator.next.php',
            'desc' => 'Move pointer to next item',
        ),
    'APCIterator::rewind' =>
        array (
            'file' => 'apciterator.rewind.php',
            'desc' => 'Rewinds iterator',
        ),
    'APCIterator::valid' =>
        array (
            'file' => 'apciterator.valid.php',
            'desc' => 'Checks if current position is valid',
        ),
    'APCIterator::__construct' =>
        array (
            'file' => 'apciterator.construct.php',
            'desc' => 'Constructs an APCIterator iterator object',
        ),
    'apc_add' =>
        array (
            'file' => 'function.apc-add.php',
            'desc' => 'Cache a new variable in the data store',
        ),
    'apc_bin_dump' =>
        array (
            'file' => 'function.apc-bin-dump.php',
            'desc' => 'Get a binary dump of the given files and user variables',
        ),
    'apc_bin_dumpfile' =>
        array (
            'file' => 'function.apc-bin-dumpfile.php',
            'desc' => 'Output a binary dump of cached files and user variables to a file',
        ),
    'apc_bin_load' =>
        array (
            'file' => 'function.apc-bin-load.php',
            'desc' => 'Load a binary dump into the APC file/user cache',
        ),
    'apc_bin_loadfile' =>
        array (
            'file' => 'function.apc-bin-loadfile.php',
            'desc' => 'Load a binary dump from a file into the APC file/user cache',
        ),
    'apc_cache_info' =>
        array (
            'file' => 'function.apc-cache-info.php',
            'desc' => 'Retrieves cached information from APC\'s data store',
        ),
    'apc_cas' =>
        array (
            'file' => 'function.apc-cas.php',
            'desc' => 'Updates an old value with a new value',
        ),
    'apc_clear_cache' =>
        array (
            'file' => 'function.apc-clear-cache.php',
            'desc' => 'Clears the APC cache',
        ),
    'apc_compile_file' =>
        array (
            'file' => 'function.apc-compile-file.php',
            'desc' => 'Stores a file in the bytecode cache, bypassing all filters.',
        ),
    'apc_dec' =>
        array (
            'file' => 'function.apc-dec.php',
            'desc' => 'Decrease a stored number',
        ),
    'apc_define_constants' =>
        array (
            'file' => 'function.apc-define-constants.php',
            'desc' => 'Defines a set of constants for retrieval and mass-definition',
        ),
    'apc_delete' =>
        array (
            'file' => 'function.apc-delete.php',
            'desc' => 'Removes a stored variable from the cache',
        ),
    'apc_delete_file' =>
        array (
            'file' => 'function.apc-delete-file.php',
            'desc' => 'Deletes files from the opcode cache',
        ),
    'apc_exists' =>
        array (
            'file' => 'function.apc-exists.php',
            'desc' => 'Checks if APC key exists',
        ),
    'apc_fetch' =>
        array (
            'file' => 'function.apc-fetch.php',
            'desc' => 'Fetch a stored variable from the cache',
        ),
    'apc_inc' =>
        array (
            'file' => 'function.apc-inc.php',
            'desc' => 'Increase a stored number',
        ),
    'apc_load_constants' =>
        array (
            'file' => 'function.apc-load-constants.php',
            'desc' => 'Loads a set of constants from the cache',
        ),
    'apc_sma_info' =>
        array (
            'file' => 'function.apc-sma-info.php',
            'desc' => 'Retrieves APC\'s Shared Memory Allocation information',
        ),
    'apc_store' =>
        array (
            'file' => 'function.apc-store.php',
            'desc' => 'Cache a variable in the data store',
        ),
    'apd_breakpoint' =>
        array (
            'file' => 'function.apd-breakpoint.php',
            'desc' => 'Stops the interpreter and waits on a CR from the socket',
        ),
    'apd_callstack' =>
        array (
            'file' => 'function.apd-callstack.php',
            'desc' => 'Returns the current call stack as an array',
        ),
    'apd_clunk' =>
        array (
            'file' => 'function.apd-clunk.php',
            'desc' => 'Throw a warning and a callstack',
        ),
    'apd_continue' =>
        array (
            'file' => 'function.apd-continue.php',
            'desc' => 'Restarts the interpreter',
        ),
    'apd_croak' =>
        array (
            'file' => 'function.apd-croak.php',
            'desc' => 'Throw an error, a callstack and then exit',
        ),
    'apd_dump_function_table' =>
        array (
            'file' => 'function.apd-dump-function-table.php',
            'desc' => 'Outputs the current function table',
        ),
    'apd_dump_persistent_resources' =>
        array (
            'file' => 'function.apd-dump-persistent-resources.php',
            'desc' => 'Return all persistent resources as an array',
        ),
    'apd_dump_regular_resources' =>
        array (
            'file' => 'function.apd-dump-regular-resources.php',
            'desc' => 'Return all current regular resources as an array',
        ),
    'apd_echo' =>
        array (
            'file' => 'function.apd-echo.php',
            'desc' => 'Echo to the debugging socket',
        ),
    'apd_get_active_symbols' =>
        array (
            'file' => 'function.apd-get-active-symbols.php',
            'desc' => 'Get an array of the current variables names in the local scope',
        ),
    'apd_set_pprof_trace' =>
        array (
            'file' => 'function.apd-set-pprof-trace.php',
            'desc' => 'Starts the session debugging',
        ),
    'apd_set_session' =>
        array (
            'file' => 'function.apd-set-session.php',
            'desc' => 'Changes or sets the current debugging level',
        ),
    'apd_set_session_trace' =>
        array (
            'file' => 'function.apd-set-session-trace.php',
            'desc' => 'Starts the session debugging',
        ),
    'apd_set_session_trace_socket' =>
        array (
            'file' => 'function.apd-set-session-trace-socket.php',
            'desc' => 'Starts the remote session debugging',
        ),
    'AppendIterator::append' =>
        array (
            'file' => 'appenditerator.append.php',
            'desc' => 'Appends an iterator',
        ),
    'AppendIterator::current' =>
        array (
            'file' => 'appenditerator.current.php',
            'desc' => 'Gets the current value',
        ),
    'AppendIterator::getArrayIterator' =>
        array (
            'file' => 'appenditerator.getarrayiterator.php',
            'desc' => 'Gets the ArrayIterator',
        ),
    'AppendIterator::getInnerIterator' =>
        array (
            'file' => 'appenditerator.getinneriterator.php',
            'desc' => 'Gets the inner iterator',
        ),
    'AppendIterator::getIteratorIndex' =>
        array (
            'file' => 'appenditerator.getiteratorindex.php',
            'desc' => 'Gets an index of iterators',
        ),
    'AppendIterator::key' =>
        array (
            'file' => 'appenditerator.key.php',
            'desc' => 'Gets the current key',
        ),
    'AppendIterator::next' =>
        array (
            'file' => 'appenditerator.next.php',
            'desc' => 'Moves to the next element',
        ),
    'AppendIterator::rewind' =>
        array (
            'file' => 'appenditerator.rewind.php',
            'desc' => 'Rewinds the Iterator',
        ),
    'AppendIterator::valid' =>
        array (
            'file' => 'appenditerator.valid.php',
            'desc' => 'Checks validity of the current element',
        ),
    'AppendIterator::__construct' =>
        array (
            'file' => 'appenditerator.construct.php',
            'desc' => 'Constructs an AppendIterator',
        ),
    'array' =>
        array (
            'file' => 'function.array.php',
            'desc' => 'Create an array',
        ),
    'ArrayAccess::offsetExists' =>
        array (
            'file' => 'arrayaccess.offsetexists.php',
            'desc' => 'Whether a offset exists',
        ),
    'ArrayAccess::offsetGet' =>
        array (
            'file' => 'arrayaccess.offsetget.php',
            'desc' => 'Offset to retrieve',
        ),
    'ArrayAccess::offsetSet' =>
        array (
            'file' => 'arrayaccess.offsetset.php',
            'desc' => 'Offset to set',
        ),
    'ArrayAccess::offsetUnset' =>
        array (
            'file' => 'arrayaccess.offsetunset.php',
            'desc' => 'Offset to unset',
        ),
    'ArrayIterator::append' =>
        array (
            'file' => 'arrayiterator.append.php',
            'desc' => 'Append an element',
        ),
    'ArrayIterator::asort' =>
        array (
            'file' => 'arrayiterator.asort.php',
            'desc' => 'Sort array by values',
        ),
    'ArrayIterator::count' =>
        array (
            'file' => 'arrayiterator.count.php',
            'desc' => 'Count elements',
        ),
    'ArrayIterator::current' =>
        array (
            'file' => 'arrayiterator.current.php',
            'desc' => 'Return current array entry',
        ),
    'ArrayIterator::getArrayCopy' =>
        array (
            'file' => 'arrayiterator.getarraycopy.php',
            'desc' => 'Get array copy',
        ),
    'ArrayIterator::getFlags' =>
        array (
            'file' => 'arrayiterator.getflags.php',
            'desc' => 'Get flags',
        ),
    'ArrayIterator::key' =>
        array (
            'file' => 'arrayiterator.key.php',
            'desc' => 'Return current array key',
        ),
    'ArrayIterator::ksort' =>
        array (
            'file' => 'arrayiterator.ksort.php',
            'desc' => 'Sort array by keys',
        ),
    'ArrayIterator::natcasesort' =>
        array (
            'file' => 'arrayiterator.natcasesort.php',
            'desc' => 'Sort an array naturally, case insensitive',
        ),
    'ArrayIterator::natsort' =>
        array (
            'file' => 'arrayiterator.natsort.php',
            'desc' => 'Sort an array naturally',
        ),
    'ArrayIterator::next' =>
        array (
            'file' => 'arrayiterator.next.php',
            'desc' => 'Move to next entry',
        ),
    'ArrayIterator::offsetExists' =>
        array (
            'file' => 'arrayiterator.offsetexists.php',
            'desc' => 'Check if offset exists',
        ),
    'ArrayIterator::offsetGet' =>
        array (
            'file' => 'arrayiterator.offsetget.php',
            'desc' => 'Get value for an offset',
        ),
    'ArrayIterator::offsetSet' =>
        array (
            'file' => 'arrayiterator.offsetset.php',
            'desc' => 'Set value for an offset',
        ),
    'ArrayIterator::offsetUnset' =>
        array (
            'file' => 'arrayiterator.offsetunset.php',
            'desc' => 'Unset value for an offset',
        ),
    'ArrayIterator::rewind' =>
        array (
            'file' => 'arrayiterator.rewind.php',
            'desc' => 'Rewind array back to the start',
        ),
    'ArrayIterator::seek' =>
        array (
            'file' => 'arrayiterator.seek.php',
            'desc' => 'Seek to position',
        ),
    'ArrayIterator::serialize' =>
        array (
            'file' => 'arrayiterator.serialize.php',
            'desc' => 'Serialize',
        ),
    'ArrayIterator::setFlags' =>
        array (
            'file' => 'arrayiterator.setflags.php',
            'desc' => 'Set behaviour flags',
        ),
    'ArrayIterator::uasort' =>
        array (
            'file' => 'arrayiterator.uasort.php',
            'desc' => 'User defined sort',
        ),
    'ArrayIterator::uksort' =>
        array (
            'file' => 'arrayiterator.uksort.php',
            'desc' => 'User defined sort',
        ),
    'ArrayIterator::unserialize' =>
        array (
            'file' => 'arrayiterator.unserialize.php',
            'desc' => 'Unserialize',
        ),
    'ArrayIterator::valid' =>
        array (
            'file' => 'arrayiterator.valid.php',
            'desc' => 'Check whether array contains more entries',
        ),
    'ArrayIterator::__construct' =>
        array (
            'file' => 'arrayiterator.construct.php',
            'desc' => 'Construct an ArrayIterator',
        ),
    'ArrayObject::append' =>
        array (
            'file' => 'arrayobject.append.php',
            'desc' => 'Appends the value',
        ),
    'ArrayObject::asort' =>
        array (
            'file' => 'arrayobject.asort.php',
            'desc' => 'Sort the entries by value',
        ),
    'ArrayObject::count' =>
        array (
            'file' => 'arrayobject.count.php',
            'desc' => 'Get the number of public properties in the ArrayObject',
        ),
    'ArrayObject::exchangeArray' =>
        array (
            'file' => 'arrayobject.exchangearray.php',
            'desc' => 'Exchange the array for another one.',
        ),
    'ArrayObject::getArrayCopy' =>
        array (
            'file' => 'arrayobject.getarraycopy.php',
            'desc' => 'Creates a copy of the ArrayObject.',
        ),
    'ArrayObject::getFlags' =>
        array (
            'file' => 'arrayobject.getflags.php',
            'desc' => 'Gets the behavior flags.',
        ),
    'ArrayObject::getIterator' =>
        array (
            'file' => 'arrayobject.getiterator.php',
            'desc' => 'Create a new iterator from an ArrayObject instance',
        ),
    'ArrayObject::getIteratorClass' =>
        array (
            'file' => 'arrayobject.getiteratorclass.php',
            'desc' => 'Gets the iterator classname for the ArrayObject.',
        ),
    'ArrayObject::ksort' =>
        array (
            'file' => 'arrayobject.ksort.php',
            'desc' => 'Sort the entries by key',
        ),
    'ArrayObject::natcasesort' =>
        array (
            'file' => 'arrayobject.natcasesort.php',
            'desc' => 'Sort an array using a case insensitive &quot;natural order&quot; algorithm',
        ),
    'ArrayObject::natsort' =>
        array (
            'file' => 'arrayobject.natsort.php',
            'desc' => 'Sort entries using a &quot;natural order&quot; algorithm',
        ),
    'ArrayObject::offsetExists' =>
        array (
            'file' => 'arrayobject.offsetexists.php',
            'desc' => 'Returns whether the requested index exists',
        ),
    'ArrayObject::offsetGet' =>
        array (
            'file' => 'arrayobject.offsetget.php',
            'desc' => 'Returns the value at the specified index',
        ),
    'ArrayObject::offsetSet' =>
        array (
            'file' => 'arrayobject.offsetset.php',
            'desc' => 'Sets the value at the specified index to newval',
        ),
    'ArrayObject::offsetUnset' =>
        array (
            'file' => 'arrayobject.offsetunset.php',
            'desc' => 'Unsets the value at the specified index',
        ),
    'ArrayObject::serialize' =>
        array (
            'file' => 'arrayobject.serialize.php',
            'desc' => 'Serialize an ArrayObject',
        ),
    'ArrayObject::setFlags' =>
        array (
            'file' => 'arrayobject.setflags.php',
            'desc' => 'Sets the behavior flags.',
        ),
    'ArrayObject::setIteratorClass' =>
        array (
            'file' => 'arrayobject.setiteratorclass.php',
            'desc' => 'Sets the iterator classname for the ArrayObject.',
        ),
    'ArrayObject::uasort' =>
        array (
            'file' => 'arrayobject.uasort.php',
            'desc' => 'Sort the entries with a user-defined comparison function and maintain key association',
        ),
    'ArrayObject::uksort' =>
        array (
            'file' => 'arrayobject.uksort.php',
            'desc' => 'Sort the entries by keys using a user-defined comparison function',
        ),
    'ArrayObject::unserialize' =>
        array (
            'file' => 'arrayobject.unserialize.php',
            'desc' => 'Unserialize an ArrayObject',
        ),
    'ArrayObject::__construct' =>
        array (
            'file' => 'arrayobject.construct.php',
            'desc' => 'Construct a new array object',
        ),
    'array_change_key_case' =>
        array (
            'file' => 'function.array-change-key-case.php',
            'desc' => 'Changes the case of all keys in an array',
        ),
    'array_chunk' =>
        array (
            'file' => 'function.array-chunk.php',
            'desc' => 'Split an array into chunks',
        ),
    'array_column' =>
        array (
            'file' => 'function.array-column.php',
            'desc' => 'Return the values from a single column in the input array',
        ),
    'array_combine' =>
        array (
            'file' => 'function.array-combine.php',
            'desc' => 'Creates an array by using one array for keys and another for its values',
        ),
    'array_count_values' =>
        array (
            'file' => 'function.array-count-values.php',
            'desc' => 'Counts all the values of an array',
        ),
    'array_diff' =>
        array (
            'file' => 'function.array-diff.php',
            'desc' => 'Computes the difference of arrays',
        ),
    'array_diff_assoc' =>
        array (
            'file' => 'function.array-diff-assoc.php',
            'desc' => 'Computes the difference of arrays with additional index check',
        ),
    'array_diff_key' =>
        array (
            'file' => 'function.array-diff-key.php',
            'desc' => 'Computes the difference of arrays using keys for comparison',
        ),
    'array_diff_uassoc' =>
        array (
            'file' => 'function.array-diff-uassoc.php',
            'desc' => 'Computes the difference of arrays with additional index check which is performed by a user supplied callback function',
        ),
    'array_diff_ukey' =>
        array (
            'file' => 'function.array-diff-ukey.php',
            'desc' => 'Computes the difference of arrays using a callback function on the keys for comparison',
        ),
    'array_fill' =>
        array (
            'file' => 'function.array-fill.php',
            'desc' => 'Fill an array with values',
        ),
    'array_fill_keys' =>
        array (
            'file' => 'function.array-fill-keys.php',
            'desc' => 'Fill an array with values, specifying keys',
        ),
    'array_filter' =>
        array (
            'file' => 'function.array-filter.php',
            'desc' => 'Filters elements of an array using a callback function',
        ),
    'array_flip' =>
        array (
            'file' => 'function.array-flip.php',
            'desc' => 'Exchanges all keys with their associated values in an array',
        ),
    'array_intersect' =>
        array (
            'file' => 'function.array-intersect.php',
            'desc' => 'Computes the intersection of arrays',
        ),
    'array_intersect_assoc' =>
        array (
            'file' => 'function.array-intersect-assoc.php',
            'desc' => 'Computes the intersection of arrays with additional index check',
        ),
    'array_intersect_key' =>
        array (
            'file' => 'function.array-intersect-key.php',
            'desc' => 'Computes the intersection of arrays using keys for comparison',
        ),
    'array_intersect_uassoc' =>
        array (
            'file' => 'function.array-intersect-uassoc.php',
            'desc' => 'Computes the intersection of arrays with additional index check, compares indexes by a callback function',
        ),
    'array_intersect_ukey' =>
        array (
            'file' => 'function.array-intersect-ukey.php',
            'desc' => 'Computes the intersection of arrays using a callback function on the keys for comparison',
        ),
    'array_keys' =>
        array (
            'file' => 'function.array-keys.php',
            'desc' => 'Return all the keys or a subset of the keys of an array',
        ),
    'array_key_exists' =>
        array (
            'file' => 'function.array-key-exists.php',
            'desc' => 'Checks if the given key or index exists in the array',
        ),
    'array_map' =>
        array (
            'file' => 'function.array-map.php',
            'desc' => 'Applies the callback to the elements of the given arrays',
        ),
    'array_merge' =>
        array (
            'file' => 'function.array-merge.php',
            'desc' => 'Merge one or more arrays',
        ),
    'array_merge_recursive' =>
        array (
            'file' => 'function.array-merge-recursive.php',
            'desc' => 'Merge two or more arrays recursively',
        ),
    'array_multisort' =>
        array (
            'file' => 'function.array-multisort.php',
            'desc' => 'Sort multiple or multi-dimensional arrays',
        ),
    'array_pad' =>
        array (
            'file' => 'function.array-pad.php',
            'desc' => 'Pad array to the specified length with a value',
        ),
    'array_pop' =>
        array (
            'file' => 'function.array-pop.php',
            'desc' => 'Pop the element off the end of array',
        ),
    'array_product' =>
        array (
            'file' => 'function.array-product.php',
            'desc' => 'Calculate the product of values in an array',
        ),
    'array_push' =>
        array (
            'file' => 'function.array-push.php',
            'desc' => 'Push one or more elements onto the end of array',
        ),
    'array_rand' =>
        array (
            'file' => 'function.array-rand.php',
            'desc' => 'Pick one or more random entries out of an array',
        ),
    'array_reduce' =>
        array (
            'file' => 'function.array-reduce.php',
            'desc' => 'Iteratively reduce the array to a single value using a callback function',
        ),
    'array_replace' =>
        array (
            'file' => 'function.array-replace.php',
            'desc' => 'Replaces elements from passed arrays into the first array',
        ),
    'array_replace_recursive' =>
        array (
            'file' => 'function.array-replace-recursive.php',
            'desc' => 'Replaces elements from passed arrays into the first array recursively',
        ),
    'array_reverse' =>
        array (
            'file' => 'function.array-reverse.php',
            'desc' => 'Return an array with elements in reverse order',
        ),
    'array_search' =>
        array (
            'file' => 'function.array-search.php',
            'desc' => 'Searches the array for a given value and returns the corresponding key if successful',
        ),
    'array_shift' =>
        array (
            'file' => 'function.array-shift.php',
            'desc' => 'Shift an element off the beginning of array',
        ),
    'array_slice' =>
        array (
            'file' => 'function.array-slice.php',
            'desc' => 'Extract a slice of the array',
        ),
    'array_splice' =>
        array (
            'file' => 'function.array-splice.php',
            'desc' => 'Remove a portion of the array and replace it with something else',
        ),
    'array_sum' =>
        array (
            'file' => 'function.array-sum.php',
            'desc' => 'Calculate the sum of values in an array',
        ),
    'array_udiff' =>
        array (
            'file' => 'function.array-udiff.php',
            'desc' => 'Computes the difference of arrays by using a callback function for data comparison',
        ),
    'array_udiff_assoc' =>
        array (
            'file' => 'function.array-udiff-assoc.php',
            'desc' => 'Computes the difference of arrays with additional index check, compares data by a callback function',
        ),
    'array_udiff_uassoc' =>
        array (
            'file' => 'function.array-udiff-uassoc.php',
            'desc' => 'Computes the difference of arrays with additional index check, compares data and indexes by a callback function',
        ),
    'array_uintersect' =>
        array (
            'file' => 'function.array-uintersect.php',
            'desc' => 'Computes the intersection of arrays, compares data by a callback function',
        ),
    'array_uintersect_assoc' =>
        array (
            'file' => 'function.array-uintersect-assoc.php',
            'desc' => 'Computes the intersection of arrays with additional index check, compares data by a callback function',
        ),
    'array_uintersect_uassoc' =>
        array (
            'file' => 'function.array-uintersect-uassoc.php',
            'desc' => 'Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions',
        ),
    'array_unique' =>
        array (
            'file' => 'function.array-unique.php',
            'desc' => 'Removes duplicate values from an array',
        ),
    'array_unshift' =>
        array (
            'file' => 'function.array-unshift.php',
            'desc' => 'Prepend one or more elements to the beginning of an array',
        ),
    'array_values' =>
        array (
            'file' => 'function.array-values.php',
            'desc' => 'Return all the values of an array',
        ),
    'array_walk' =>
        array (
            'file' => 'function.array-walk.php',
            'desc' => 'Apply a user supplied function to every member of an array',
        ),
    'array_walk_recursive' =>
        array (
            'file' => 'function.array-walk-recursive.php',
            'desc' => 'Apply a user function recursively to every member of an array',
        ),
    'arsort' =>
        array (
            'file' => 'function.arsort.php',
            'desc' => 'Sort an array in reverse order and maintain index association',
        ),
    'asin' =>
        array (
            'file' => 'function.asin.php',
            'desc' => 'Arc sine',
        ),
    'asinh' =>
        array (
            'file' => 'function.asinh.php',
            'desc' => 'Inverse hyperbolic sine',
        ),
    'asort' =>
        array (
            'file' => 'function.asort.php',
            'desc' => 'Sort an array and maintain index association',
        ),
    'assert' =>
        array (
            'file' => 'function.assert.php',
            'desc' => 'Checks if assertion is FALSE',
        ),
    'assert_options' =>
        array (
            'file' => 'function.assert-options.php',
            'desc' => 'Set/get the various assert flags',
        ),
    'atan' =>
        array (
            'file' => 'function.atan.php',
            'desc' => 'Arc tangent',
        ),
    'atan2' =>
        array (
            'file' => 'function.atan2.php',
            'desc' => 'Arc tangent of two variables',
        ),
    'atanh' =>
        array (
            'file' => 'function.atanh.php',
            'desc' => 'Inverse hyperbolic tangent',
        ),
    'base64_decode' =>
        array (
            'file' => 'function.base64-decode.php',
            'desc' => 'Decodes data encoded with MIME base64',
        ),
    'base64_encode' =>
        array (
            'file' => 'function.base64-encode.php',
            'desc' => 'Encodes data with MIME base64',
        ),
    'basename' =>
        array (
            'file' => 'function.basename.php',
            'desc' => 'Returns trailing name component of path',
        ),
    'base_convert' =>
        array (
            'file' => 'function.base-convert.php',
            'desc' => 'Convert a number between arbitrary bases',
        ),
    'bbcode_add_element' =>
        array (
            'file' => 'function.bbcode-add-element.php',
            'desc' => 'Adds a bbcode element',
        ),
    'bbcode_add_smiley' =>
        array (
            'file' => 'function.bbcode-add-smiley.php',
            'desc' => 'Adds a smiley to the parser',
        ),
    'bbcode_create' =>
        array (
            'file' => 'function.bbcode-create.php',
            'desc' => 'Create a BBCode Resource',
        ),
    'bbcode_destroy' =>
        array (
            'file' => 'function.bbcode-destroy.php',
            'desc' => 'Close BBCode_container resource',
        ),
    'bbcode_parse' =>
        array (
            'file' => 'function.bbcode-parse.php',
            'desc' => 'Parse a string following a given rule set',
        ),
    'bbcode_set_arg_parser' =>
        array (
            'file' => 'function.bbcode-set-arg-parser.php',
            'desc' => 'Attach another parser in order to use another rule set for argument parsing',
        ),
    'bbcode_set_flags' =>
        array (
            'file' => 'function.bbcode-set-flags.php',
            'desc' => 'Set or alter parser options',
        ),
    'bcadd' =>
        array (
            'file' => 'function.bcadd.php',
            'desc' => 'Add two arbitrary precision numbers',
        ),
    'bccomp' =>
        array (
            'file' => 'function.bccomp.php',
            'desc' => 'Compare two arbitrary precision numbers',
        ),
    'bcdiv' =>
        array (
            'file' => 'function.bcdiv.php',
            'desc' => 'Divide two arbitrary precision numbers',
        ),
    'bcmod' =>
        array (
            'file' => 'function.bcmod.php',
            'desc' => 'Get modulus of an arbitrary precision number',
        ),
    'bcmul' =>
        array (
            'file' => 'function.bcmul.php',
            'desc' => 'Multiply two arbitrary precision numbers',
        ),
    'bcompiler_load' =>
        array (
            'file' => 'function.bcompiler-load.php',
            'desc' => 'Reads and creates classes from a bz compressed file',
        ),
    'bcompiler_load_exe' =>
        array (
            'file' => 'function.bcompiler-load-exe.php',
            'desc' => 'Reads and creates classes from a bcompiler exe file',
        ),
    'bcompiler_parse_class' =>
        array (
            'file' => 'function.bcompiler-parse-class.php',
            'desc' => 'Reads the bytecodes of a class and calls back to a user function',
        ),
    'bcompiler_read' =>
        array (
            'file' => 'function.bcompiler-read.php',
            'desc' => 'Reads and creates classes from a filehandle',
        ),
    'bcompiler_write_class' =>
        array (
            'file' => 'function.bcompiler-write-class.php',
            'desc' => 'Writes a defined class as bytecodes',
        ),
    'bcompiler_write_constant' =>
        array (
            'file' => 'function.bcompiler-write-constant.php',
            'desc' => 'Writes a defined constant as bytecodes',
        ),
    'bcompiler_write_exe_footer' =>
        array (
            'file' => 'function.bcompiler-write-exe-footer.php',
            'desc' => 'Writes the start pos, and sig to the end of a exe type file',
        ),
    'bcompiler_write_file' =>
        array (
            'file' => 'function.bcompiler-write-file.php',
            'desc' => 'Writes a php source file as bytecodes',
        ),
    'bcompiler_write_footer' =>
        array (
            'file' => 'function.bcompiler-write-footer.php',
            'desc' => 'Writes the single character \\x00 to indicate End of compiled data',
        ),
    'bcompiler_write_function' =>
        array (
            'file' => 'function.bcompiler-write-function.php',
            'desc' => 'Writes a defined function as bytecodes',
        ),
    'bcompiler_write_functions_from_file' =>
        array (
            'file' => 'function.bcompiler-write-functions-from-file.php',
            'desc' => 'Writes all functions defined in a file as bytecodes',
        ),
    'bcompiler_write_header' =>
        array (
            'file' => 'function.bcompiler-write-header.php',
            'desc' => 'Writes the bcompiler header',
        ),
    'bcompiler_write_included_filename' =>
        array (
            'file' => 'function.bcompiler-write-included-filename.php',
            'desc' => 'Writes an included file as bytecodes',
        ),
    'bcpow' =>
        array (
            'file' => 'function.bcpow.php',
            'desc' => 'Raise an arbitrary precision number to another',
        ),
    'bcpowmod' =>
        array (
            'file' => 'function.bcpowmod.php',
            'desc' => 'Raise an arbitrary precision number to another, reduced by a specified modulus',
        ),
    'bcscale' =>
        array (
            'file' => 'function.bcscale.php',
            'desc' => 'Set default scale parameter for all bc math functions',
        ),
    'bcsqrt' =>
        array (
            'file' => 'function.bcsqrt.php',
            'desc' => 'Get the square root of an arbitrary precision number',
        ),
    'bcsub' =>
        array (
            'file' => 'function.bcsub.php',
            'desc' => 'Subtract one arbitrary precision number from another',
        ),
    'bin2hex' =>
        array (
            'file' => 'function.bin2hex.php',
            'desc' => 'Convert binary data into hexadecimal representation',
        ),
    'bindec' =>
        array (
            'file' => 'function.bindec.php',
            'desc' => 'Binary to decimal',
        ),
    'bindtextdomain' =>
        array (
            'file' => 'function.bindtextdomain.php',
            'desc' => 'Sets the path for a domain',
        ),
    'bind_textdomain_codeset' =>
        array (
            'file' => 'function.bind-textdomain-codeset.php',
            'desc' => 'Specify the character encoding in which the messages from the DOMAIN message catalog will be returned',
        ),
    'blenc_encrypt' =>
        array (
            'file' => 'function.blenc-encrypt.php',
            'desc' => 'Encrypt a PHP script with BLENC.',
        ),
    'boolval' =>
        array (
            'file' => 'function.boolval.php',
            'desc' => 'Get the boolean value of a variable',
        ),
    'bson_decode' =>
        array (
            'file' => 'function.bson-decode.php',
            'desc' => 'Deserializes a BSON object into a PHP array',
        ),
    'bson_encode' =>
        array (
            'file' => 'function.bson-encode.php',
            'desc' => 'Serializes a PHP variable into a BSON string',
        ),
    'bzclose' =>
        array (
            'file' => 'function.bzclose.php',
            'desc' => 'Close a bzip2 file',
        ),
    'bzcompress' =>
        array (
            'file' => 'function.bzcompress.php',
            'desc' => 'Compress a string into bzip2 encoded data',
        ),
    'bzdecompress' =>
        array (
            'file' => 'function.bzdecompress.php',
            'desc' => 'Decompresses bzip2 encoded data',
        ),
    'bzerrno' =>
        array (
            'file' => 'function.bzerrno.php',
            'desc' => 'Returns a bzip2 error number',
        ),
    'bzerror' =>
        array (
            'file' => 'function.bzerror.php',
            'desc' => 'Returns the bzip2 error number and error string in an array',
        ),
    'bzerrstr' =>
        array (
            'file' => 'function.bzerrstr.php',
            'desc' => 'Returns a bzip2 error string',
        ),
    'bzflush' =>
        array (
            'file' => 'function.bzflush.php',
            'desc' => 'Force a write of all buffered data',
        ),
    'bzopen' =>
        array (
            'file' => 'function.bzopen.php',
            'desc' => 'Opens a bzip2 compressed file',
        ),
    'bzread' =>
        array (
            'file' => 'function.bzread.php',
            'desc' => 'Binary safe bzip2 file read',
        ),
    'bzwrite' =>
        array (
            'file' => 'function.bzwrite.php',
            'desc' => 'Binary safe bzip2 file write',
        ),
    'CachingIterator::count' =>
        array (
            'file' => 'cachingiterator.count.php',
            'desc' => 'The number of elements in the iterator',
        ),
    'CachingIterator::current' =>
        array (
            'file' => 'cachingiterator.current.php',
            'desc' => 'Return the current element',
        ),
    'CachingIterator::getCache' =>
        array (
            'file' => 'cachingiterator.getcache.php',
            'desc' => 'Retrieve the contents of the cache',
        ),
    'CachingIterator::getFlags' =>
        array (
            'file' => 'cachingiterator.getflags.php',
            'desc' => 'Get flags used',
        ),
    'CachingIterator::getInnerIterator' =>
        array (
            'file' => 'cachingiterator.getinneriterator.php',
            'desc' => 'Returns the inner iterator',
        ),
    'CachingIterator::hasNext' =>
        array (
            'file' => 'cachingiterator.hasnext.php',
            'desc' => 'Check whether the inner iterator has a valid next element',
        ),
    'CachingIterator::key' =>
        array (
            'file' => 'cachingiterator.key.php',
            'desc' => 'Return the key for the current element',
        ),
    'CachingIterator::next' =>
        array (
            'file' => 'cachingiterator.next.php',
            'desc' => 'Move the iterator forward',
        ),
    'CachingIterator::offsetExists' =>
        array (
            'file' => 'cachingiterator.offsetexists.php',
        ),
    'CachingIterator::offsetGet' =>
        array (
            'file' => 'cachingiterator.offsetget.php',
        ),
    'CachingIterator::offsetSet' =>
        array (
            'file' => 'cachingiterator.offsetset.php',
        ),
    'CachingIterator::offsetUnset' =>
        array (
            'file' => 'cachingiterator.offsetunset.php',
        ),
    'CachingIterator::rewind' =>
        array (
            'file' => 'cachingiterator.rewind.php',
            'desc' => 'Rewind the iterator',
        ),
    'CachingIterator::setFlags' =>
        array (
            'file' => 'cachingiterator.setflags.php',
        ),
    'CachingIterator::valid' =>
        array (
            'file' => 'cachingiterator.valid.php',
            'desc' => 'Check whether the current element is valid',
        ),
    'CachingIterator::__construct' =>
        array (
            'file' => 'cachingiterator.construct.php',
            'desc' => 'Construct a new CachingIterator object for the iterator.',
        ),
    'CachingIterator::__toString' =>
        array (
            'file' => 'cachingiterator.tostring.php',
            'desc' => 'Return the string representation of the current element',
        ),
    'Cairo::availableFonts' =>
        array (
            'file' => 'cairo.availablefonts.php',
            'desc' => 'Retrieves the availables font types',
        ),
    'Cairo::availableSurfaces' =>
        array (
            'file' => 'cairo.availablesurfaces.php',
            'desc' => 'Retrieves all available surfaces',
        ),
    'Cairo::statusToString' =>
        array (
            'file' => 'cairo.statustostring.php',
            'desc' => 'Retrieves the current status as string',
        ),
    'Cairo::version' =>
        array (
            'file' => 'cairo.version.php',
            'desc' => 'Retrives cairo\'s library version',
        ),
    'Cairo::versionString' =>
        array (
            'file' => 'cairo.versionstring.php',
            'desc' => 'Retrieves cairo version as string',
        ),
    'CairoContext::appendPath' =>
        array (
            'file' => 'cairocontext.appendpath.php',
            'desc' => 'Appends a path to current path',
        ),
    'CairoContext::arc' =>
        array (
            'file' => 'cairocontext.arc.php',
            'desc' => 'Adds a circular arc',
        ),
    'CairoContext::arcNegative' =>
        array (
            'file' => 'cairocontext.arcnegative.php',
            'desc' => 'Adds a negative arc',
        ),
    'CairoContext::clip' =>
        array (
            'file' => 'cairocontext.clip.php',
            'desc' => 'Establishes a new clip region',
        ),
    'CairoContext::clipExtents' =>
        array (
            'file' => 'cairocontext.clipextents.php',
            'desc' => 'Computes the area inside the current clip',
        ),
    'CairoContext::clipPreserve' =>
        array (
            'file' => 'cairocontext.clippreserve.php',
            'desc' => 'Establishes a new clip region from the current clip',
        ),
    'CairoContext::clipRectangleList' =>
        array (
            'file' => 'cairocontext.cliprectanglelist.php',
            'desc' => 'Retrieves the current clip as a list of rectangles',
        ),
    'CairoContext::closePath' =>
        array (
            'file' => 'cairocontext.closepath.php',
            'desc' => 'Closes the current path',
        ),
    'CairoContext::copyPage' =>
        array (
            'file' => 'cairocontext.copypage.php',
            'desc' => 'Emits the current page',
        ),
    'CairoContext::copyPath' =>
        array (
            'file' => 'cairocontext.copypath.php',
            'desc' => 'Creates a copy of the current path',
        ),
    'CairoContext::copyPathFlat' =>
        array (
            'file' => 'cairocontext.copypathflat.php',
            'desc' => 'Gets a flattened copy of the current path',
        ),
    'CairoContext::curveTo' =>
        array (
            'file' => 'cairocontext.curveto.php',
            'desc' => 'Adds a curve',
        ),
    'CairoContext::deviceToUser' =>
        array (
            'file' => 'cairocontext.devicetouser.php',
            'desc' => 'Transform a coordinate',
        ),
    'CairoContext::deviceToUserDistance' =>
        array (
            'file' => 'cairocontext.devicetouserdistance.php',
            'desc' => 'Transform a distance',
        ),
    'CairoContext::fill' =>
        array (
            'file' => 'cairocontext.fill.php',
            'desc' => 'Fills the current path',
        ),
    'CairoContext::fillExtents' =>
        array (
            'file' => 'cairocontext.fillextents.php',
            'desc' => 'Computes the filled area',
        ),
    'CairoContext::fillPreserve' =>
        array (
            'file' => 'cairocontext.fillpreserve.php',
            'desc' => 'Fills and preserve the current path',
        ),
    'CairoContext::fontExtents' =>
        array (
            'file' => 'cairocontext.fontextents.php',
            'desc' => 'Get the font extents',
        ),
    'CairoContext::getAntialias' =>
        array (
            'file' => 'cairocontext.getantialias.php',
            'desc' => 'Retrives the current antialias mode',
        ),
    'CairoContext::getCurrentPoint' =>
        array (
            'file' => 'cairocontext.getcurrentpoint.php',
        ),
    'CairoContext::getDash' =>
        array (
            'file' => 'cairocontext.getdash.php',
        ),
    'CairoContext::getDashCount' =>
        array (
            'file' => 'cairocontext.getdashcount.php',
        ),
    'CairoContext::getFillRule' =>
        array (
            'file' => 'cairocontext.getfillrule.php',
        ),
    'CairoContext::getFontFace' =>
        array (
            'file' => 'cairocontext.getfontface.php',
        ),
    'CairoContext::getFontMatrix' =>
        array (
            'file' => 'cairocontext.getfontmatrix.php',
        ),
    'CairoContext::getFontOptions' =>
        array (
            'file' => 'cairocontext.getfontoptions.php',
        ),
    'CairoContext::getGroupTarget' =>
        array (
            'file' => 'cairocontext.getgrouptarget.php',
        ),
    'CairoContext::getLineCap' =>
        array (
            'file' => 'cairocontext.getlinecap.php',
        ),
    'CairoContext::getLineJoin' =>
        array (
            'file' => 'cairocontext.getlinejoin.php',
        ),
    'CairoContext::getLineWidth' =>
        array (
            'file' => 'cairocontext.getlinewidth.php',
        ),
    'CairoContext::getMatrix' =>
        array (
            'file' => 'cairocontext.getmatrix.php',
        ),
    'CairoContext::getMiterLimit' =>
        array (
            'file' => 'cairocontext.getmiterlimit.php',
        ),
    'CairoContext::getOperator' =>
        array (
            'file' => 'cairocontext.getoperator.php',
        ),
    'CairoContext::getScaledFont' =>
        array (
            'file' => 'cairocontext.getscaledfont.php',
        ),
    'CairoContext::getSource' =>
        array (
            'file' => 'cairocontext.getsource.php',
        ),
    'CairoContext::getTarget' =>
        array (
            'file' => 'cairocontext.gettarget.php',
        ),
    'CairoContext::getTolerance' =>
        array (
            'file' => 'cairocontext.gettolerance.php',
        ),
    'CairoContext::glyphPath' =>
        array (
            'file' => 'cairocontext.glyphpath.php',
        ),
    'CairoContext::hasCurrentPoint' =>
        array (
            'file' => 'cairocontext.hascurrentpoint.php',
        ),
    'CairoContext::identityMatrix' =>
        array (
            'file' => 'cairocontext.identitymatrix.php',
        ),
    'CairoContext::inFill' =>
        array (
            'file' => 'cairocontext.infill.php',
        ),
    'CairoContext::inStroke' =>
        array (
            'file' => 'cairocontext.instroke.php',
        ),
    'CairoContext::lineTo' =>
        array (
            'file' => 'cairocontext.lineto.php',
        ),
    'CairoContext::mask' =>
        array (
            'file' => 'cairocontext.mask.php',
        ),
    'CairoContext::maskSurface' =>
        array (
            'file' => 'cairocontext.masksurface.php',
        ),
    'CairoContext::moveTo' =>
        array (
            'file' => 'cairocontext.moveto.php',
        ),
    'CairoContext::newPath' =>
        array (
            'file' => 'cairocontext.newpath.php',
        ),
    'CairoContext::newSubPath' =>
        array (
            'file' => 'cairocontext.newsubpath.php',
        ),
    'CairoContext::paint' =>
        array (
            'file' => 'cairocontext.paint.php',
        ),
    'CairoContext::paintWithAlpha' =>
        array (
            'file' => 'cairocontext.paintwithalpha.php',
        ),
    'CairoContext::pathExtents' =>
        array (
            'file' => 'cairocontext.pathextents.php',
        ),
    'CairoContext::popGroup' =>
        array (
            'file' => 'cairocontext.popgroup.php',
        ),
    'CairoContext::popGroupToSource' =>
        array (
            'file' => 'cairocontext.popgrouptosource.php',
        ),
    'CairoContext::pushGroup' =>
        array (
            'file' => 'cairocontext.pushgroup.php',
        ),
    'CairoContext::pushGroupWithContent' =>
        array (
            'file' => 'cairocontext.pushgroupwithcontent.php',
        ),
    'CairoContext::rectangle' =>
        array (
            'file' => 'cairocontext.rectangle.php',
        ),
    'CairoContext::relCurveTo' =>
        array (
            'file' => 'cairocontext.relcurveto.php',
        ),
    'CairoContext::relLineTo' =>
        array (
            'file' => 'cairocontext.rellineto.php',
        ),
    'CairoContext::relMoveTo' =>
        array (
            'file' => 'cairocontext.relmoveto.php',
        ),
    'CairoContext::resetClip' =>
        array (
            'file' => 'cairocontext.resetclip.php',
        ),
    'CairoContext::restore' =>
        array (
            'file' => 'cairocontext.restore.php',
        ),
    'CairoContext::rotate' =>
        array (
            'file' => 'cairocontext.rotate.php',
        ),
    'CairoContext::save' =>
        array (
            'file' => 'cairocontext.save.php',
        ),
    'CairoContext::scale' =>
        array (
            'file' => 'cairocontext.scale.php',
        ),
    'CairoContext::selectFontFace' =>
        array (
            'file' => 'cairocontext.selectfontface.php',
        ),
    'CairoContext::setAntialias' =>
        array (
            'file' => 'cairocontext.setantialias.php',
        ),
    'CairoContext::setDash' =>
        array (
            'file' => 'cairocontext.setdash.php',
        ),
    'CairoContext::setFillRule' =>
        array (
            'file' => 'cairocontext.setfillrule.php',
        ),
    'CairoContext::setFontFace' =>
        array (
            'file' => 'cairocontext.setfontface.php',
        ),
    'CairoContext::setFontMatrix' =>
        array (
            'file' => 'cairocontext.setfontmatrix.php',
        ),
    'CairoContext::setFontOptions' =>
        array (
            'file' => 'cairocontext.setfontoptions.php',
        ),
    'CairoContext::setFontSize' =>
        array (
            'file' => 'cairocontext.setfontsize.php',
        ),
    'CairoContext::setLineCap' =>
        array (
            'file' => 'cairocontext.setlinecap.php',
        ),
    'CairoContext::setLineJoin' =>
        array (
            'file' => 'cairocontext.setlinejoin.php',
        ),
    'CairoContext::setLineWidth' =>
        array (
            'file' => 'cairocontext.setlinewidth.php',
        ),
    'CairoContext::setMatrix' =>
        array (
            'file' => 'cairocontext.setmatrix.php',
        ),
    'CairoContext::setMiterLimit' =>
        array (
            'file' => 'cairocontext.setmiterlimit.php',
        ),
    'CairoContext::setOperator' =>
        array (
            'file' => 'cairocontext.setoperator.php',
        ),
    'CairoContext::setScaledFont' =>
        array (
            'file' => 'cairocontext.setscaledfont.php',
        ),
    'CairoContext::setSource' =>
        array (
            'file' => 'cairocontext.setsource.php',
        ),
    'CairoContext::setSourceRGB' =>
        array (
            'file' => 'cairocontext.setsourcergb.php',
        ),
    'CairoContext::setSourceRGBA' =>
        array (
            'file' => 'cairocontext.setsourcergba.php',
        ),
    'CairoContext::setSourceSurface' =>
        array (
            'file' => 'cairocontext.setsourcesurface.php',
        ),
    'CairoContext::setTolerance' =>
        array (
            'file' => 'cairocontext.settolerance.php',
        ),
    'CairoContext::showPage' =>
        array (
            'file' => 'cairocontext.showpage.php',
        ),
    'CairoContext::showText' =>
        array (
            'file' => 'cairocontext.showtext.php',
        ),
    'CairoContext::status' =>
        array (
            'file' => 'cairocontext.status.php',
        ),
    'CairoContext::stroke' =>
        array (
            'file' => 'cairocontext.stroke.php',
        ),
    'CairoContext::strokeExtents' =>
        array (
            'file' => 'cairocontext.strokeextents.php',
        ),
    'CairoContext::strokePreserve' =>
        array (
            'file' => 'cairocontext.strokepreserve.php',
        ),
    'CairoContext::textExtents' =>
        array (
            'file' => 'cairocontext.textextents.php',
        ),
    'CairoContext::textPath' =>
        array (
            'file' => 'cairocontext.textpath.php',
        ),
    'CairoContext::transform' =>
        array (
            'file' => 'cairocontext.transform.php',
        ),
    'CairoContext::translate' =>
        array (
            'file' => 'cairocontext.translate.php',
        ),
    'CairoContext::userToDevice' =>
        array (
            'file' => 'cairocontext.usertodevice.php',
        ),
    'CairoContext::userToDeviceDistance' =>
        array (
            'file' => 'cairocontext.usertodevicedistance.php',
        ),
    'CairoContext::__construct' =>
        array (
            'file' => 'cairocontext.construct.php',
            'desc' => 'Creates a new CairoContext',
        ),
    'CairoFontFace::getType' =>
        array (
            'file' => 'cairofontface.gettype.php',
            'desc' => 'Retrieves the font face type',
        ),
    'CairoFontFace::status' =>
        array (
            'file' => 'cairofontface.status.php',
            'desc' => 'Check for CairoFontFace errors',
        ),
    'CairoFontFace::__construct' =>
        array (
            'file' => 'cairofontface.construct.php',
            'desc' => 'Creates a new CairoFontFace object',
        ),
    'CairoFontOptions::equal' =>
        array (
            'file' => 'cairofontoptions.equal.php',
        ),
    'CairoFontOptions::getAntialias' =>
        array (
            'file' => 'cairofontoptions.getantialias.php',
        ),
    'CairoFontOptions::getHintMetrics' =>
        array (
            'file' => 'cairofontoptions.gethintmetrics.php',
        ),
    'CairoFontOptions::getHintStyle' =>
        array (
            'file' => 'cairofontoptions.gethintstyle.php',
        ),
    'CairoFontOptions::getSubpixelOrder' =>
        array (
            'file' => 'cairofontoptions.getsubpixelorder.php',
        ),
    'CairoFontOptions::hash' =>
        array (
            'file' => 'cairofontoptions.hash.php',
        ),
    'CairoFontOptions::merge' =>
        array (
            'file' => 'cairofontoptions.merge.php',
        ),
    'CairoFontOptions::setAntialias' =>
        array (
            'file' => 'cairofontoptions.setantialias.php',
        ),
    'CairoFontOptions::setHintMetrics' =>
        array (
            'file' => 'cairofontoptions.sethintmetrics.php',
        ),
    'CairoFontOptions::setHintStyle' =>
        array (
            'file' => 'cairofontoptions.sethintstyle.php',
        ),
    'CairoFontOptions::setSubpixelOrder' =>
        array (
            'file' => 'cairofontoptions.setsubpixelorder.php',
        ),
    'CairoFontOptions::status' =>
        array (
            'file' => 'cairofontoptions.status.php',
        ),
    'CairoFontOptions::__construct' =>
        array (
            'file' => 'cairofontoptions.construct.php',
        ),
    'CairoFormat::strideForWidth' =>
        array (
            'file' => 'cairoformat.strideforwidth.php',
            'desc' => 'Provides an appropiate stride to use',
        ),
    'CairoGradientPattern::addColorStopRgb' =>
        array (
            'file' => 'cairogradientpattern.addcolorstoprgb.php',
        ),
    'CairoGradientPattern::addColorStopRgba' =>
        array (
            'file' => 'cairogradientpattern.addcolorstoprgba.php',
        ),
    'CairoGradientPattern::getColorStopCount' =>
        array (
            'file' => 'cairogradientpattern.getcolorstopcount.php',
        ),
    'CairoGradientPattern::getColorStopRgba' =>
        array (
            'file' => 'cairogradientpattern.getcolorstoprgba.php',
        ),
    'CairoGradientPattern::getExtend' =>
        array (
            'file' => 'cairogradientpattern.getextend.php',
        ),
    'CairoGradientPattern::setExtend' =>
        array (
            'file' => 'cairogradientpattern.setextend.php',
        ),
    'CairoImageSurface::createForData' =>
        array (
            'file' => 'cairoimagesurface.createfordata.php',
        ),
    'CairoImageSurface::createFromPng' =>
        array (
            'file' => 'cairoimagesurface.createfrompng.php',
            'desc' => 'Creates a new CairoImageSurface form a png image file',
        ),
    'CairoImageSurface::getData' =>
        array (
            'file' => 'cairoimagesurface.getdata.php',
            'desc' => 'Gets the image data as string',
        ),
    'CairoImageSurface::getFormat' =>
        array (
            'file' => 'cairoimagesurface.getformat.php',
            'desc' => 'Get the image format',
        ),
    'CairoImageSurface::getHeight' =>
        array (
            'file' => 'cairoimagesurface.getheight.php',
            'desc' => 'Retrieves the height of the CairoImageSurface',
        ),
    'CairoImageSurface::getStride' =>
        array (
            'file' => 'cairoimagesurface.getstride.php',
        ),
    'CairoImageSurface::getWidth' =>
        array (
            'file' => 'cairoimagesurface.getwidth.php',
            'desc' => 'Retrieves the width of the CairoImageSurface',
        ),
    'CairoImageSurface::__construct' =>
        array (
            'file' => 'cairoimagesurface.construct.php',
            'desc' => 'Creates a new CairoImageSurface',
        ),
    'CairoLinearGradient::getPoints' =>
        array (
            'file' => 'cairolineargradient.getpoints.php',
        ),
    'CairoLinearGradient::__construct' =>
        array (
            'file' => 'cairolineargradient.construct.php',
        ),
    'CairoMatrix::initIdentity' =>
        array (
            'file' => 'cairomatrix.initidentity.php',
            'desc' => 'Creates a new identity matrix',
        ),
    'CairoMatrix::initRotate' =>
        array (
            'file' => 'cairomatrix.initrotate.php',
            'desc' => 'Creates a new rotated matrix',
        ),
    'CairoMatrix::initScale' =>
        array (
            'file' => 'cairomatrix.initscale.php',
            'desc' => 'Creates a new scaling matrix',
        ),
    'CairoMatrix::initTranslate' =>
        array (
            'file' => 'cairomatrix.inittranslate.php',
            'desc' => 'Creates a new translation matrix',
        ),
    'CairoMatrix::invert' =>
        array (
            'file' => 'cairomatrix.invert.php',
        ),
    'CairoMatrix::multiply' =>
        array (
            'file' => 'cairomatrix.multiply.php',
        ),
    'CairoMatrix::rotate' =>
        array (
            'file' => 'cairomatrix.rotate.php',
        ),
    'CairoMatrix::scale' =>
        array (
            'file' => 'cairomatrix.scale.php',
            'desc' => 'Applies scaling to a matrix',
        ),
    'CairoMatrix::transformDistance' =>
        array (
            'file' => 'cairomatrix.transformdistance.php',
        ),
    'CairoMatrix::transformPoint' =>
        array (
            'file' => 'cairomatrix.transformpoint.php',
        ),
    'CairoMatrix::translate' =>
        array (
            'file' => 'cairomatrix.translate.php',
        ),
    'CairoMatrix::__construct' =>
        array (
            'file' => 'cairomatrix.construct.php',
            'desc' => 'Creates a new CairoMatrix object',
        ),
    'CairoPattern::getMatrix' =>
        array (
            'file' => 'cairopattern.getmatrix.php',
        ),
    'CairoPattern::getType' =>
        array (
            'file' => 'cairopattern.gettype.php',
        ),
    'CairoPattern::setMatrix' =>
        array (
            'file' => 'cairopattern.setmatrix.php',
        ),
    'CairoPattern::status' =>
        array (
            'file' => 'cairopattern.status.php',
        ),
    'CairoPattern::__construct' =>
        array (
            'file' => 'cairopattern.construct.php',
        ),
    'CairoPdfSurface::setSize' =>
        array (
            'file' => 'cairopdfsurface.setsize.php',
        ),
    'CairoPdfSurface::__construct' =>
        array (
            'file' => 'cairopdfsurface.construct.php',
        ),
    'CairoPsSurface::dscBeginPageSetup' =>
        array (
            'file' => 'cairopssurface.dscbeginpagesetup.php',
        ),
    'CairoPsSurface::dscBeginSetup' =>
        array (
            'file' => 'cairopssurface.dscbeginsetup.php',
        ),
    'CairoPsSurface::dscComment' =>
        array (
            'file' => 'cairopssurface.dsccomment.php',
        ),
    'CairoPsSurface::getEps' =>
        array (
            'file' => 'cairopssurface.geteps.php',
        ),
    'CairoPsSurface::getLevels' =>
        array (
            'file' => 'cairopssurface.getlevels.php',
        ),
    'CairoPsSurface::levelToString' =>
        array (
            'file' => 'cairopssurface.leveltostring.php',
        ),
    'CairoPsSurface::restrictToLevel' =>
        array (
            'file' => 'cairopssurface.restricttolevel.php',
        ),
    'CairoPsSurface::setEps' =>
        array (
            'file' => 'cairopssurface.seteps.php',
        ),
    'CairoPsSurface::setSize' =>
        array (
            'file' => 'cairopssurface.setsize.php',
        ),
    'CairoPsSurface::__construct' =>
        array (
            'file' => 'cairopssurface.construct.php',
        ),
    'CairoRadialGradient::getCircles' =>
        array (
            'file' => 'cairoradialgradient.getcircles.php',
        ),
    'CairoRadialGradient::__construct' =>
        array (
            'file' => 'cairoradialgradient.construct.php',
        ),
    'CairoScaledFont::extents' =>
        array (
            'file' => 'cairoscaledfont.extents.php',
        ),
    'CairoScaledFont::getCtm' =>
        array (
            'file' => 'cairoscaledfont.getctm.php',
        ),
    'CairoScaledFont::getFontFace' =>
        array (
            'file' => 'cairoscaledfont.getfontface.php',
        ),
    'CairoScaledFont::getFontMatrix' =>
        array (
            'file' => 'cairoscaledfont.getfontmatrix.php',
        ),
    'CairoScaledFont::getFontOptions' =>
        array (
            'file' => 'cairoscaledfont.getfontoptions.php',
        ),
    'CairoScaledFont::getScaleMatrix' =>
        array (
            'file' => 'cairoscaledfont.getscalematrix.php',
        ),
    'CairoScaledFont::getType' =>
        array (
            'file' => 'cairoscaledfont.gettype.php',
        ),
    'CairoScaledFont::glyphExtents' =>
        array (
            'file' => 'cairoscaledfont.glyphextents.php',
        ),
    'CairoScaledFont::status' =>
        array (
            'file' => 'cairoscaledfont.status.php',
        ),
    'CairoScaledFont::textExtents' =>
        array (
            'file' => 'cairoscaledfont.textextents.php',
        ),
    'CairoScaledFont::__construct' =>
        array (
            'file' => 'cairoscaledfont.construct.php',
        ),
    'CairoSolidPattern::getRgba' =>
        array (
            'file' => 'cairosolidpattern.getrgba.php',
        ),
    'CairoSolidPattern::__construct' =>
        array (
            'file' => 'cairosolidpattern.construct.php',
        ),
    'CairoSurface::copyPage' =>
        array (
            'file' => 'cairosurface.copypage.php',
        ),
    'CairoSurface::createSimilar' =>
        array (
            'file' => 'cairosurface.createsimilar.php',
        ),
    'CairoSurface::finish' =>
        array (
            'file' => 'cairosurface.finish.php',
        ),
    'CairoSurface::flush' =>
        array (
            'file' => 'cairosurface.flush.php',
        ),
    'CairoSurface::getContent' =>
        array (
            'file' => 'cairosurface.getcontent.php',
        ),
    'CairoSurface::getDeviceOffset' =>
        array (
            'file' => 'cairosurface.getdeviceoffset.php',
        ),
    'CairoSurface::getFontOptions' =>
        array (
            'file' => 'cairosurface.getfontoptions.php',
        ),
    'CairoSurface::getType' =>
        array (
            'file' => 'cairosurface.gettype.php',
        ),
    'CairoSurface::markDirty' =>
        array (
            'file' => 'cairosurface.markdirty.php',
        ),
    'CairoSurface::markDirtyRectangle' =>
        array (
            'file' => 'cairosurface.markdirtyrectangle.php',
        ),
    'CairoSurface::setDeviceOffset' =>
        array (
            'file' => 'cairosurface.setdeviceoffset.php',
        ),
    'CairoSurface::setFallbackResolution' =>
        array (
            'file' => 'cairosurface.setfallbackresolution.php',
        ),
    'CairoSurface::showPage' =>
        array (
            'file' => 'cairosurface.showpage.php',
        ),
    'CairoSurface::status' =>
        array (
            'file' => 'cairosurface.status.php',
        ),
    'CairoSurface::writeToPng' =>
        array (
            'file' => 'cairosurface.writetopng.php',
        ),
    'CairoSurface::__construct' =>
        array (
            'file' => 'cairosurface.construct.php',
        ),
    'CairoSurfacePattern::getExtend' =>
        array (
            'file' => 'cairosurfacepattern.getextend.php',
        ),
    'CairoSurfacePattern::getFilter' =>
        array (
            'file' => 'cairosurfacepattern.getfilter.php',
        ),
    'CairoSurfacePattern::getSurface' =>
        array (
            'file' => 'cairosurfacepattern.getsurface.php',
        ),
    'CairoSurfacePattern::setExtend' =>
        array (
            'file' => 'cairosurfacepattern.setextend.php',
        ),
    'CairoSurfacePattern::setFilter' =>
        array (
            'file' => 'cairosurfacepattern.setfilter.php',
        ),
    'CairoSurfacePattern::__construct' =>
        array (
            'file' => 'cairosurfacepattern.construct.php',
        ),
    'CairoSvgSurface::getVersions' =>
        array (
            'file' => 'cairosvgsurface.getversions.php',
            'desc' => 'Used to retrieve a list of supported SVG versions',
        ),
    'CairoSvgSurface::restrictToVersion' =>
        array (
            'file' => 'cairosvgsurface.restricttoversion.php',
        ),
    'CairoSvgSurface::versionToString' =>
        array (
            'file' => 'cairosvgsurface.versiontostring.php',
        ),
    'CairoSvgSurface::__construct' =>
        array (
            'file' => 'cairosvgsurface.construct.php',
        ),
    'cairo_create' =>
        array (
            'file' => 'function.cairo-create.php',
            'desc' => 'Returns a new CairoContext object on the requested surface.',
        ),
    'cairo_font_face_get_type' =>
        array (
            'file' => 'function.cairo-font-face-get-type.php',
        ),
    'cairo_font_options_create' =>
        array (
            'file' => 'function.cairo-font-options-create.php',
        ),
    'cairo_font_options_equal' =>
        array (
            'file' => 'function.cairo-font-options-equal.php',
        ),
    'cairo_font_options_get_antialias' =>
        array (
            'file' => 'function.cairo-font-options-get-antialias.php',
        ),
    'cairo_font_options_get_hint_metrics' =>
        array (
            'file' => 'function.cairo-font-options-get-hint-metrics.php',
        ),
    'cairo_font_options_get_hint_style' =>
        array (
            'file' => 'function.cairo-font-options-get-hint-style.php',
        ),
    'cairo_font_options_get_subpixel_order' =>
        array (
            'file' => 'function.cairo-font-options-get-subpixel-order.php',
        ),
    'cairo_font_options_hash' =>
        array (
            'file' => 'function.cairo-font-options-hash.php',
        ),
    'cairo_font_options_merge' =>
        array (
            'file' => 'function.cairo-font-options-merge.php',
        ),
    'cairo_font_options_set_antialias' =>
        array (
            'file' => 'function.cairo-font-options-set-antialias.php',
        ),
    'cairo_font_options_set_hint_metrics' =>
        array (
            'file' => 'function.cairo-font-options-set-hint-metrics.php',
        ),
    'cairo_font_options_set_hint_style' =>
        array (
            'file' => 'function.cairo-font-options-set-hint-style.php',
        ),
    'cairo_font_options_set_subpixel_order' =>
        array (
            'file' => 'function.cairo-font-options-set-subpixel-order.php',
        ),
    'cairo_font_options_status' =>
        array (
            'file' => 'function.cairo-font-options-status.php',
        ),
    'cairo_format_stride_for_width' =>
        array (
            'file' => 'function.cairo-format-stride-for-width.php',
        ),
    'cairo_image_surface_create' =>
        array (
            'file' => 'function.cairo-image-surface-create.php',
        ),
    'cairo_image_surface_create_for_data' =>
        array (
            'file' => 'function.cairo-image-surface-create-for-data.php',
        ),
    'cairo_image_surface_create_from_png' =>
        array (
            'file' => 'function.cairo-image-surface-create-from-png.php',
        ),
    'cairo_image_surface_get_data' =>
        array (
            'file' => 'function.cairo-image-surface-get-data.php',
        ),
    'cairo_image_surface_get_format' =>
        array (
            'file' => 'function.cairo-image-surface-get-format.php',
        ),
    'cairo_image_surface_get_height' =>
        array (
            'file' => 'function.cairo-image-surface-get-height.php',
        ),
    'cairo_image_surface_get_stride' =>
        array (
            'file' => 'function.cairo-image-surface-get-stride.php',
        ),
    'cairo_image_surface_get_width' =>
        array (
            'file' => 'function.cairo-image-surface-get-width.php',
        ),
    'cairo_matrix_create_translate' =>
        array (
            'file' => 'function.cairo-matrix-create-translate.php',
            'desc' => 'Alias of CairoMatrix::initTranslate',
        ),
    'cairo_matrix_invert' =>
        array (
            'file' => 'function.cairo-matrix-invert.php',
        ),
    'cairo_matrix_multiply' =>
        array (
            'file' => 'function.cairo-matrix-multiply.php',
        ),
    'cairo_matrix_rotate' =>
        array (
            'file' => 'function.cairo-matrix-rotate.php',
        ),
    'cairo_matrix_transform_distance' =>
        array (
            'file' => 'function.cairo-matrix-transform-distance.php',
        ),
    'cairo_matrix_transform_point' =>
        array (
            'file' => 'function.cairo-matrix-transform-point.php',
        ),
    'cairo_matrix_translate' =>
        array (
            'file' => 'function.cairo-matrix-translate.php',
        ),
    'cairo_pattern_add_color_stop_rgb' =>
        array (
            'file' => 'function.cairo-pattern-add-color-stop-rgb.php',
        ),
    'cairo_pattern_add_color_stop_rgba' =>
        array (
            'file' => 'function.cairo-pattern-add-color-stop-rgba.php',
        ),
    'cairo_pattern_create_for_surface' =>
        array (
            'file' => 'function.cairo-pattern-create-for-surface.php',
        ),
    'cairo_pattern_create_linear' =>
        array (
            'file' => 'function.cairo-pattern-create-linear.php',
        ),
    'cairo_pattern_create_radial' =>
        array (
            'file' => 'function.cairo-pattern-create-radial.php',
        ),
    'cairo_pattern_create_rgb' =>
        array (
            'file' => 'function.cairo-pattern-create-rgb.php',
        ),
    'cairo_pattern_create_rgba' =>
        array (
            'file' => 'function.cairo-pattern-create-rgba.php',
        ),
    'cairo_pattern_get_color_stop_count' =>
        array (
            'file' => 'function.cairo-pattern-get-color-stop-count.php',
        ),
    'cairo_pattern_get_color_stop_rgba' =>
        array (
            'file' => 'function.cairo-pattern-get-color-stop-rgba.php',
        ),
    'cairo_pattern_get_extend' =>
        array (
            'file' => 'function.cairo-pattern-get-extend.php',
        ),
    'cairo_pattern_get_filter' =>
        array (
            'file' => 'function.cairo-pattern-get-filter.php',
        ),
    'cairo_pattern_get_linear_points' =>
        array (
            'file' => 'function.cairo-pattern-get-linear-points.php',
        ),
    'cairo_pattern_get_matrix' =>
        array (
            'file' => 'function.cairo-pattern-get-matrix.php',
        ),
    'cairo_pattern_get_radial_circles' =>
        array (
            'file' => 'function.cairo-pattern-get-radial-circles.php',
        ),
    'cairo_pattern_get_rgba' =>
        array (
            'file' => 'function.cairo-pattern-get-rgba.php',
        ),
    'cairo_pattern_get_surface' =>
        array (
            'file' => 'function.cairo-pattern-get-surface.php',
        ),
    'cairo_pattern_get_type' =>
        array (
            'file' => 'function.cairo-pattern-get-type.php',
        ),
    'cairo_pattern_set_extend' =>
        array (
            'file' => 'function.cairo-pattern-set-extend.php',
        ),
    'cairo_pattern_set_filter' =>
        array (
            'file' => 'function.cairo-pattern-set-filter.php',
        ),
    'cairo_pattern_set_matrix' =>
        array (
            'file' => 'function.cairo-pattern-set-matrix.php',
        ),
    'cairo_pattern_status' =>
        array (
            'file' => 'function.cairo-pattern-status.php',
        ),
    'cairo_pdf_surface_create' =>
        array (
            'file' => 'function.cairo-pdf-surface-create.php',
        ),
    'cairo_pdf_surface_set_size' =>
        array (
            'file' => 'function.cairo-pdf-surface-set-size.php',
        ),
    'cairo_ps_get_levels' =>
        array (
            'file' => 'function.cairo-ps-get-levels.php',
        ),
    'cairo_ps_level_to_string' =>
        array (
            'file' => 'function.cairo-ps-level-to-string.php',
        ),
    'cairo_ps_surface_create' =>
        array (
            'file' => 'function.cairo-ps-surface-create.php',
        ),
    'cairo_ps_surface_dsc_begin_page_setup' =>
        array (
            'file' => 'function.cairo-ps-surface-dsc-begin-page-setup.php',
        ),
    'cairo_ps_surface_dsc_begin_setup' =>
        array (
            'file' => 'function.cairo-ps-surface-dsc-begin-setup.php',
        ),
    'cairo_ps_surface_dsc_comment' =>
        array (
            'file' => 'function.cairo-ps-surface-dsc-comment.php',
        ),
    'cairo_ps_surface_get_eps' =>
        array (
            'file' => 'function.cairo-ps-surface-get-eps.php',
        ),
    'cairo_ps_surface_restrict_to_level' =>
        array (
            'file' => 'function.cairo-ps-surface-restrict-to-level.php',
        ),
    'cairo_ps_surface_set_eps' =>
        array (
            'file' => 'function.cairo-ps-surface-set-eps.php',
        ),
    'cairo_ps_surface_set_size' =>
        array (
            'file' => 'function.cairo-ps-surface-set-size.php',
        ),
    'cairo_scaled_font_create' =>
        array (
            'file' => 'function.cairo-scaled-font-create.php',
        ),
    'cairo_scaled_font_extents' =>
        array (
            'file' => 'function.cairo-scaled-font-extents.php',
        ),
    'cairo_scaled_font_get_ctm' =>
        array (
            'file' => 'function.cairo-scaled-font-get-ctm.php',
        ),
    'cairo_scaled_font_get_font_face' =>
        array (
            'file' => 'function.cairo-scaled-font-get-font-face.php',
        ),
    'cairo_scaled_font_get_font_matrix' =>
        array (
            'file' => 'function.cairo-scaled-font-get-font-matrix.php',
        ),
    'cairo_scaled_font_get_font_options' =>
        array (
            'file' => 'function.cairo-scaled-font-get-font-options.php',
        ),
    'cairo_scaled_font_get_scale_matrix' =>
        array (
            'file' => 'function.cairo-scaled-font-get-scale-matrix.php',
        ),
    'cairo_scaled_font_get_type' =>
        array (
            'file' => 'function.cairo-scaled-font-get-type.php',
        ),
    'cairo_scaled_font_glyph_extents' =>
        array (
            'file' => 'function.cairo-scaled-font-glyph-extents.php',
        ),
    'cairo_scaled_font_status' =>
        array (
            'file' => 'function.cairo-scaled-font-status.php',
        ),
    'cairo_scaled_font_text_extents' =>
        array (
            'file' => 'function.cairo-scaled-font-text-extents.php',
        ),
    'cairo_surface_copy_page' =>
        array (
            'file' => 'function.cairo-surface-copy-page.php',
        ),
    'cairo_surface_create_similar' =>
        array (
            'file' => 'function.cairo-surface-create-similar.php',
        ),
    'cairo_surface_finish' =>
        array (
            'file' => 'function.cairo-surface-finish.php',
        ),
    'cairo_surface_flush' =>
        array (
            'file' => 'function.cairo-surface-flush.php',
        ),
    'cairo_surface_get_content' =>
        array (
            'file' => 'function.cairo-surface-get-content.php',
        ),
    'cairo_surface_get_device_offset' =>
        array (
            'file' => 'function.cairo-surface-get-device-offset.php',
        ),
    'cairo_surface_get_font_options' =>
        array (
            'file' => 'function.cairo-surface-get-font-options.php',
        ),
    'cairo_surface_get_type' =>
        array (
            'file' => 'function.cairo-surface-get-type.php',
        ),
    'cairo_surface_mark_dirty' =>
        array (
            'file' => 'function.cairo-surface-mark-dirty.php',
        ),
    'cairo_surface_mark_dirty_rectangle' =>
        array (
            'file' => 'function.cairo-surface-mark-dirty-rectangle.php',
        ),
    'cairo_surface_set_device_offset' =>
        array (
            'file' => 'function.cairo-surface-set-device-offset.php',
        ),
    'cairo_surface_set_fallback_resolution' =>
        array (
            'file' => 'function.cairo-surface-set-fallback-resolution.php',
        ),
    'cairo_surface_show_page' =>
        array (
            'file' => 'function.cairo-surface-show-page.php',
        ),
    'cairo_surface_status' =>
        array (
            'file' => 'function.cairo-surface-status.php',
        ),
    'cairo_surface_write_to_png' =>
        array (
            'file' => 'function.cairo-surface-write-to-png.php',
        ),
    'cairo_svg_surface_create' =>
        array (
            'file' => 'function.cairo-svg-surface-create.php',
        ),
    'cairo_svg_surface_restrict_to_version' =>
        array (
            'file' => 'function.cairo-svg-surface-restrict-to-version.php',
        ),
    'cairo_svg_version_to_string' =>
        array (
            'file' => 'function.cairo-svg-version-to-string.php',
        ),
    'calculhmac' =>
        array (
            'file' => 'function.calculhmac.php',
            'desc' => 'Obtain a hmac key (needs 2 arguments)',
        ),
    'calcul_hmac' =>
        array (
            'file' => 'function.calcul-hmac.php',
            'desc' => 'Obtain a hmac key (needs 8 arguments)',
        ),
    'CallbackFilterIterator::accept' =>
        array (
            'file' => 'callbackfilteriterator.accept.php',
            'desc' => 'Calls the callback with the current value, the current key and the inner iterator as arguments',
        ),
    'CallbackFilterIterator::__construct' =>
        array (
            'file' => 'callbackfilteriterator.construct.php',
            'desc' => 'Create a filtered iterator from another iterator',
        ),
    'call_user_func' =>
        array (
            'file' => 'function.call-user-func.php',
            'desc' => 'Call the callback given by the first parameter',
        ),
    'call_user_func_array' =>
        array (
            'file' => 'function.call-user-func-array.php',
            'desc' => 'Call a callback with an array of parameters',
        ),
    'call_user_method' =>
        array (
            'file' => 'function.call-user-method.php',
            'desc' => 'Call a user method on an specific object [deprecated]',
        ),
    'call_user_method_array' =>
        array (
            'file' => 'function.call-user-method-array.php',
            'desc' => 'Call a user method given with an array of parameters [deprecated]',
        ),
    'cal_days_in_month' =>
        array (
            'file' => 'function.cal-days-in-month.php',
            'desc' => 'Return the number of days in a month for a given year and calendar',
        ),
    'cal_from_jd' =>
        array (
            'file' => 'function.cal-from-jd.php',
            'desc' => 'Converts from Julian Day Count to a supported calendar',
        ),
    'cal_info' =>
        array (
            'file' => 'function.cal-info.php',
            'desc' => 'Returns information about a particular calendar',
        ),
    'cal_to_jd' =>
        array (
            'file' => 'function.cal-to-jd.php',
            'desc' => 'Converts from a supported calendar to Julian Day Count',
        ),
    'ceil' =>
        array (
            'file' => 'function.ceil.php',
            'desc' => 'Round fractions up',
        ),
    'chdb::get' =>
        array (
            'file' => 'chdb.get.php',
            'desc' => 'Gets the value associated with a key',
        ),
    'chdb::__construct' =>
        array (
            'file' => 'chdb.construct.php',
            'desc' => 'Creates a chdb instance',
        ),
    'chdb_create' =>
        array (
            'file' => 'function.chdb-create.php',
            'desc' => 'Creates a chdb file',
        ),
    'chdir' =>
        array (
            'file' => 'function.chdir.php',
            'desc' => 'Change directory',
        ),
    'checkdate' =>
        array (
            'file' => 'function.checkdate.php',
            'desc' => 'Validate a Gregorian date',
        ),
    'checkdnsrr' =>
        array (
            'file' => 'function.checkdnsrr.php',
            'desc' => 'Check DNS records corresponding to a given Internet host name or IP address',
        ),
    'chgrp' =>
        array (
            'file' => 'function.chgrp.php',
            'desc' => 'Changes file group',
        ),
    'chmod' =>
        array (
            'file' => 'function.chmod.php',
            'desc' => 'Changes file mode',
        ),
    'chop' =>
        array (
            'file' => 'function.chop.php',
            'desc' => 'Alias of rtrim',
        ),
    'chown' =>
        array (
            'file' => 'function.chown.php',
            'desc' => 'Changes file owner',
        ),
    'chr' =>
        array (
            'file' => 'function.chr.php',
            'desc' => 'Return a specific character',
        ),
    'chroot' =>
        array (
            'file' => 'function.chroot.php',
            'desc' => 'Change the root directory',
        ),
    'chunk_split' =>
        array (
            'file' => 'function.chunk-split.php',
            'desc' => 'Split a string into smaller chunks',
        ),
    'classkit_import' =>
        array (
            'file' => 'function.classkit-import.php',
            'desc' => 'Import new class method definitions from a file',
        ),
    'classkit_method_add' =>
        array (
            'file' => 'function.classkit-method-add.php',
            'desc' => 'Dynamically adds a new method to a given class',
        ),
    'classkit_method_copy' =>
        array (
            'file' => 'function.classkit-method-copy.php',
            'desc' => 'Copies a method from class to another',
        ),
    'classkit_method_redefine' =>
        array (
            'file' => 'function.classkit-method-redefine.php',
            'desc' => 'Dynamically changes the code of the given method',
        ),
    'classkit_method_remove' =>
        array (
            'file' => 'function.classkit-method-remove.php',
            'desc' => 'Dynamically removes the given method',
        ),
    'classkit_method_rename' =>
        array (
            'file' => 'function.classkit-method-rename.php',
            'desc' => 'Dynamically changes the name of the given method',
        ),
    'class_alias' =>
        array (
            'file' => 'function.class-alias.php',
            'desc' => 'Creates an alias for a class',
        ),
    'class_exists' =>
        array (
            'file' => 'function.class-exists.php',
            'desc' => 'Checks if the class has been defined',
        ),
    'class_implements' =>
        array (
            'file' => 'function.class-implements.php',
            'desc' => 'Return the interfaces which are implemented by the given class or interface',
        ),
    'class_parents' =>
        array (
            'file' => 'function.class-parents.php',
            'desc' => 'Return the parent classes of the given class',
        ),
    'class_uses' =>
        array (
            'file' => 'function.class-uses.php',
            'desc' => 'Return the traits used by the given class',
        ),
    'clearstatcache' =>
        array (
            'file' => 'function.clearstatcache.php',
            'desc' => 'Clears file status cache',
        ),
    'cli_get_process_title' =>
        array (
            'file' => 'function.cli-get-process-title.php',
            'desc' => 'Returns the current process title',
        ),
    'cli_set_process_title' =>
        array (
            'file' => 'function.cli-set-process-title.php',
            'desc' => 'Sets the process title',
        ),
    'closedir' =>
        array (
            'file' => 'function.closedir.php',
            'desc' => 'Close directory handle',
        ),
    'closelog' =>
        array (
            'file' => 'function.closelog.php',
            'desc' => 'Close connection to system logger',
        ),
    'Closure::bind' =>
        array (
            'file' => 'closure.bind.php',
            'desc' => 'Duplicates a closure with a specific bound object and class scope',
        ),
    'Closure::bindTo' =>
        array (
            'file' => 'closure.bindto.php',
            'desc' => 'Duplicates the closure with a new bound object and class scope',
        ),
    'Closure::__construct' =>
        array (
            'file' => 'closure.construct.php',
            'desc' => 'Constructor that disallows instantiation',
        ),
    'Collator::asort' =>
        array (
            'file' => 'collator.asort.php',
            'desc' => 'Sort array maintaining index association',
        ),
    'Collator::compare' =>
        array (
            'file' => 'collator.compare.php',
            'desc' => 'Compare two Unicode strings',
        ),
    'Collator::create' =>
        array (
            'file' => 'collator.create.php',
            'desc' => 'Create a collator',
        ),
    'Collator::getAttribute' =>
        array (
            'file' => 'collator.getattribute.php',
            'desc' => 'Get collation attribute value',
        ),
    'Collator::getErrorCode' =>
        array (
            'file' => 'collator.geterrorcode.php',
            'desc' => 'Get collator\'s last error code',
        ),
    'Collator::getErrorMessage' =>
        array (
            'file' => 'collator.geterrormessage.php',
            'desc' => 'Get text for collator\'s last error code',
        ),
    'Collator::getLocale' =>
        array (
            'file' => 'collator.getlocale.php',
            'desc' => 'Get the locale name of the collator',
        ),
    'Collator::getSortKey' =>
        array (
            'file' => 'collator.getsortkey.php',
            'desc' => 'Get sorting key for a string',
        ),
    'Collator::getStrength' =>
        array (
            'file' => 'collator.getstrength.php',
            'desc' => 'Get current collation strength',
        ),
    'Collator::setAttribute' =>
        array (
            'file' => 'collator.setattribute.php',
            'desc' => 'Set collation attribute',
        ),
    'Collator::setStrength' =>
        array (
            'file' => 'collator.setstrength.php',
            'desc' => 'Set collation strength',
        ),
    'Collator::sort' =>
        array (
            'file' => 'collator.sort.php',
            'desc' => 'Sort array using specified collator',
        ),
    'Collator::sortWithSortKeys' =>
        array (
            'file' => 'collator.sortwithsortkeys.php',
            'desc' => 'Sort array using specified collator and sort keys',
        ),
    'Collator::__construct' =>
        array (
            'file' => 'collator.construct.php',
            'desc' => 'Create a collator',
        ),
    'Collectable::isGarbage' =>
        array (
            'file' => 'collectable.isgarbage.php',
            'desc' => 'Determine whether an object has been marked as garbage',
        ),
    'Collectable::setGarbage' =>
        array (
            'file' => 'collectable.setgarbage.php',
            'desc' => 'Mark an object as garbage',
        ),
    'compact' =>
        array (
            'file' => 'function.compact.php',
            'desc' => 'Create array containing variables and their values',
        ),
    'com_create_guid' =>
        array (
            'file' => 'function.com-create-guid.php',
            'desc' => 'Generate a globally unique identifier (GUID)',
        ),
    'com_event_sink' =>
        array (
            'file' => 'function.com-event-sink.php',
            'desc' => 'Connect events from a COM object to a PHP object',
        ),
    'com_get_active_object' =>
        array (
            'file' => 'function.com-get-active-object.php',
            'desc' => 'Returns a handle to an already running instance of a COM object',
        ),
    'com_load_typelib' =>
        array (
            'file' => 'function.com-load-typelib.php',
            'desc' => 'Loads a Typelib',
        ),
    'com_message_pump' =>
        array (
            'file' => 'function.com-message-pump.php',
            'desc' => 'Process COM messages, sleeping for up to timeoutms milliseconds',
        ),
    'com_print_typeinfo' =>
        array (
            'file' => 'function.com-print-typeinfo.php',
            'desc' => 'Print out a PHP class definition for a dispatchable interface',
        ),
    'Cond::broadcast' =>
        array (
            'file' => 'cond.broadcast.php',
            'desc' => 'Broadcast a Condition',
        ),
    'Cond::create' =>
        array (
            'file' => 'cond.create.php',
            'desc' => 'Create a Condition',
        ),
    'Cond::destroy' =>
        array (
            'file' => 'cond.destroy.php',
            'desc' => 'Destroy a Condition',
        ),
    'Cond::signal' =>
        array (
            'file' => 'cond.signal.php',
            'desc' => 'Signal a Condition',
        ),
    'Cond::wait' =>
        array (
            'file' => 'cond.wait.php',
            'desc' => 'Wait for Condition',
        ),
    'connection_aborted' =>
        array (
            'file' => 'function.connection-aborted.php',
            'desc' => 'Check whether client disconnected',
        ),
    'connection_status' =>
        array (
            'file' => 'function.connection-status.php',
            'desc' => 'Returns connection status bitfield',
        ),
    'constant' =>
        array (
            'file' => 'function.constant.php',
            'desc' => 'Returns the value of a constant',
        ),
    'Constants for PDO_4D' =>
        array (
            'file' => 'pdo-4d.constants.php',
            'desc' => 'Constants for PDO_4D',
        ),
    'Context parameters' =>
        array (
            'file' => 'context.params.php',
            'desc' => 'Context parameter listing',
        ),
    'convert_cyr_string' =>
        array (
            'file' => 'function.convert-cyr-string.php',
            'desc' => 'Convert from one Cyrillic character set to another',
        ),
    'convert_uudecode' =>
        array (
            'file' => 'function.convert-uudecode.php',
            'desc' => 'Decode a uuencoded string',
        ),
    'convert_uuencode' =>
        array (
            'file' => 'function.convert-uuencode.php',
            'desc' => 'Uuencode a string',
        ),
    'copy' =>
        array (
            'file' => 'function.copy.php',
            'desc' => 'Copies file',
        ),
    'cos' =>
        array (
            'file' => 'function.cos.php',
            'desc' => 'Cosine',
        ),
    'cosh' =>
        array (
            'file' => 'function.cosh.php',
            'desc' => 'Hyperbolic cosine',
        ),
    'count' =>
        array (
            'file' => 'function.count.php',
            'desc' => 'Count all elements in an array, or something in an object',
        ),
    'Countable::count' =>
        array (
            'file' => 'countable.count.php',
            'desc' => 'Count elements of an object',
        ),
    'Counter::bumpValue' =>
        array (
            'file' => 'internals2.counter.counter-class.bumpvalue.php',
            'desc' => 'Change the current value of a counter.',
        ),
    'Counter::getMeta' =>
        array (
            'file' => 'internals2.counter.counter-class.getmeta.php',
            'desc' => 'Return a piece of metainformation about a counter.',
        ),
    'Counter::getNamed' =>
        array (
            'file' => 'internals2.counter.counter-class.getnamed.php',
            'desc' => 'Retrieve an existing named counter.',
        ),
    'Counter::getValue' =>
        array (
            'file' => 'internals2.counter.counter-class.getvalue.php',
            'desc' => 'Get the current value of a counter.',
        ),
    'Counter::resetValue' =>
        array (
            'file' => 'internals2.counter.counter-class.resetvalue.php',
            'desc' => 'Reset the current value of a counter.',
        ),
    'Counter::setCounterClass' =>
        array (
            'file' => 'internals2.counter.counter-class.setcounterclass.php',
            'desc' => 'Set the class returned by Counter::getNamed.',
        ),
    'Counter::__construct' =>
        array (
            'file' => 'internals2.counter.counter-class.construct.php',
            'desc' => 'Creates an instance of a Counter which maintains a single numeric value.',
        ),
    'counter_bump' =>
        array (
            'file' => 'internals2.counter.function.counter-bump.php',
            'desc' => 'Update the current value of the basic counter.',
        ),
    'counter_bump_value' =>
        array (
            'file' => 'internals2.counter.function.counter-bump-value.php',
            'desc' => 'Change the current value of a counter resource.',
        ),
    'counter_create' =>
        array (
            'file' => 'internals2.counter.function.counter-create.php',
            'desc' => 'Creates a counter which maintains a single numeric value.',
        ),
    'counter_get' =>
        array (
            'file' => 'internals2.counter.function.counter-get.php',
            'desc' => 'Get the current value of the basic counter.',
        ),
    'counter_get_meta' =>
        array (
            'file' => 'internals2.counter.function.counter-get-meta.php',
            'desc' => 'Return a piece of metainformation about a counter resource.',
        ),
    'counter_get_named' =>
        array (
            'file' => 'internals2.counter.function.counter-get-named.php',
            'desc' => 'Retrieve an existing named counter as a resource.',
        ),
    'counter_get_value' =>
        array (
            'file' => 'internals2.counter.function.counter-get-value.php',
            'desc' => 'Get the current value of a counter resource.',
        ),
    'counter_reset' =>
        array (
            'file' => 'internals2.counter.function.counter-reset.php',
            'desc' => 'Reset the current value of the basic counter.',
        ),
    'counter_reset_value' =>
        array (
            'file' => 'internals2.counter.function.counter-reset-value.php',
            'desc' => 'Reset the current value of a counter resource.',
        ),
    'count_chars' =>
        array (
            'file' => 'function.count-chars.php',
            'desc' => 'Return information about characters used in a string',
        ),
    'crack_check' =>
        array (
            'file' => 'function.crack-check.php',
            'desc' => 'Performs an obscure check with the given password',
        ),
    'crack_closedict' =>
        array (
            'file' => 'function.crack-closedict.php',
            'desc' => 'Closes an open CrackLib dictionary',
        ),
    'crack_getlastmessage' =>
        array (
            'file' => 'function.crack-getlastmessage.php',
            'desc' => 'Returns the message from the last obscure check',
        ),
    'crack_opendict' =>
        array (
            'file' => 'function.crack-opendict.php',
            'desc' => 'Opens a new CrackLib dictionary',
        ),
    'crc32' =>
        array (
            'file' => 'function.crc32.php',
            'desc' => 'Calculates the crc32 polynomial of a string',
        ),
    'create_function' =>
        array (
            'file' => 'function.create-function.php',
            'desc' => 'Create an anonymous (lambda-style) function',
        ),
    'crypt' =>
        array (
            'file' => 'function.crypt.php',
            'desc' => 'One-way string hashing',
        ),
    'ctype_alnum' =>
        array (
            'file' => 'function.ctype-alnum.php',
            'desc' => 'Check for alphanumeric character(s)',
        ),
    'ctype_alpha' =>
        array (
            'file' => 'function.ctype-alpha.php',
            'desc' => 'Check for alphabetic character(s)',
        ),
    'ctype_cntrl' =>
        array (
            'file' => 'function.ctype-cntrl.php',
            'desc' => 'Check for control character(s)',
        ),
    'ctype_digit' =>
        array (
            'file' => 'function.ctype-digit.php',
            'desc' => 'Check for numeric character(s)',
        ),
    'ctype_graph' =>
        array (
            'file' => 'function.ctype-graph.php',
            'desc' => 'Check for any printable character(s) except space',
        ),
    'ctype_lower' =>
        array (
            'file' => 'function.ctype-lower.php',
            'desc' => 'Check for lowercase character(s)',
        ),
    'ctype_print' =>
        array (
            'file' => 'function.ctype-print.php',
            'desc' => 'Check for printable character(s)',
        ),
    'ctype_punct' =>
        array (
            'file' => 'function.ctype-punct.php',
            'desc' => 'Check for any printable character which is not whitespace or an
   alphanumeric character',
        ),
    'ctype_space' =>
        array (
            'file' => 'function.ctype-space.php',
            'desc' => 'Check for whitespace character(s)',
        ),
    'ctype_upper' =>
        array (
            'file' => 'function.ctype-upper.php',
            'desc' => 'Check for uppercase character(s)',
        ),
    'ctype_xdigit' =>
        array (
            'file' => 'function.ctype-xdigit.php',
            'desc' => 'Check for character(s) representing a hexadecimal digit',
        ),
    'cubrid_affected_rows' =>
        array (
            'file' => 'function.cubrid-affected-rows.php',
            'desc' => 'Return the number of rows affected by the last SQL statement',
        ),
    'cubrid_bind' =>
        array (
            'file' => 'function.cubrid-bind.php',
            'desc' => 'Bind variables to a prepared statement as parameters',
        ),
    'cubrid_client_encoding' =>
        array (
            'file' => 'function.cubrid-client-encoding.php',
            'desc' => 'Return the current CUBRID connection charset',
        ),
    'cubrid_close' =>
        array (
            'file' => 'function.cubrid-close.php',
            'desc' => 'Close CUBRID connection',
        ),
    'cubrid_close_prepare' =>
        array (
            'file' => 'function.cubrid-close-prepare.php',
            'desc' => 'Close the request handle',
        ),
    'cubrid_close_request' =>
        array (
            'file' => 'function.cubrid-close-request.php',
            'desc' => 'Close the request handle',
        ),
    'cubrid_column_names' =>
        array (
            'file' => 'function.cubrid-column-names.php',
            'desc' => 'Get the column names in result',
        ),
    'cubrid_column_types' =>
        array (
            'file' => 'function.cubrid-column-types.php',
            'desc' => 'Get column types in result',
        ),
    'cubrid_col_get' =>
        array (
            'file' => 'function.cubrid-col-get.php',
            'desc' => 'Get contents of collection type column using OID',
        ),
    'cubrid_col_size' =>
        array (
            'file' => 'function.cubrid-col-size.php',
            'desc' => 'Get the number of elements in collection type column using OID',
        ),
    'cubrid_commit' =>
        array (
            'file' => 'function.cubrid-commit.php',
            'desc' => 'Commit a transaction',
        ),
    'cubrid_connect' =>
        array (
            'file' => 'function.cubrid-connect.php',
            'desc' => 'Open a connection to a CUBRID Server',
        ),
    'cubrid_connect_with_url' =>
        array (
            'file' => 'function.cubrid-connect-with-url.php',
            'desc' => 'Establish the environment for connecting to CUBRID server',
        ),
    'cubrid_current_oid' =>
        array (
            'file' => 'function.cubrid-current-oid.php',
            'desc' => 'Get OID of the current cursor location',
        ),
    'cubrid_data_seek' =>
        array (
            'file' => 'function.cubrid-data-seek.php',
            'desc' => 'Move the internal row pointer of the CUBRID result',
        ),
    'cubrid_db_name' =>
        array (
            'file' => 'function.cubrid-db-name.php',
            'desc' => 'Get db name from results of cubrid_list_dbs',
        ),
    'cubrid_disconnect' =>
        array (
            'file' => 'function.cubrid-disconnect.php',
            'desc' => 'Close a database connection',
        ),
    'cubrid_drop' =>
        array (
            'file' => 'function.cubrid-drop.php',
            'desc' => 'Delete an instance using OID',
        ),
    'cubrid_errno' =>
        array (
            'file' => 'function.cubrid-errno.php',
            'desc' => 'Return the numerical value of the error message from previous CUBRID operation',
        ),
    'cubrid_error' =>
        array (
            'file' => 'function.cubrid-error.php',
            'desc' => 'Get the error message',
        ),
    'cubrid_error_code' =>
        array (
            'file' => 'function.cubrid-error-code.php',
            'desc' => 'Get error code for the most recent function call',
        ),
    'cubrid_error_code_facility' =>
        array (
            'file' => 'function.cubrid-error-code-facility.php',
            'desc' => 'Get the facility code of error',
        ),
    'cubrid_error_msg' =>
        array (
            'file' => 'function.cubrid-error-msg.php',
            'desc' => 'Get last error message for the most recent function call',
        ),
    'cubrid_execute' =>
        array (
            'file' => 'function.cubrid-execute.php',
            'desc' => 'Execute a prepared SQL statement',
        ),
    'cubrid_fetch' =>
        array (
            'file' => 'function.cubrid-fetch.php',
            'desc' => 'Fetch the next row from a result set',
        ),
    'cubrid_fetch_array' =>
        array (
            'file' => 'function.cubrid-fetch-array.php',
            'desc' => 'Fetch a result row as an associative array, a numeric array, or both',
        ),
    'cubrid_fetch_assoc' =>
        array (
            'file' => 'function.cubrid-fetch-assoc.php',
            'desc' => 'Return the associative array that corresponds to the fetched row',
        ),
    'cubrid_fetch_field' =>
        array (
            'file' => 'function.cubrid-fetch-field.php',
            'desc' => 'Get column information from a result and return as an object',
        ),
    'cubrid_fetch_lengths' =>
        array (
            'file' => 'function.cubrid-fetch-lengths.php',
            'desc' => 'Return an array with the lengths of the values of each field from the current row',
        ),
    'cubrid_fetch_object' =>
        array (
            'file' => 'function.cubrid-fetch-object.php',
            'desc' => 'Fetche the next row and returns it as an object',
        ),
    'cubrid_fetch_row' =>
        array (
            'file' => 'function.cubrid-fetch-row.php',
            'desc' => 'Return a numerical array with the values of the current row',
        ),
    'cubrid_field_flags' =>
        array (
            'file' => 'function.cubrid-field-flags.php',
            'desc' => 'Return a string with the flags of the given field offset',
        ),
    'cubrid_field_len' =>
        array (
            'file' => 'function.cubrid-field-len.php',
            'desc' => 'Get the maximum length of the specified field',
        ),
    'cubrid_field_name' =>
        array (
            'file' => 'function.cubrid-field-name.php',
            'desc' => 'Return the name of the specified field index',
        ),
    'cubrid_field_seek' =>
        array (
            'file' => 'function.cubrid-field-seek.php',
            'desc' => 'Move the result set cursor to the specified field offset',
        ),
    'cubrid_field_table' =>
        array (
            'file' => 'function.cubrid-field-table.php',
            'desc' => 'Return the name of the table of the specified field',
        ),
    'cubrid_field_type' =>
        array (
            'file' => 'function.cubrid-field-type.php',
            'desc' => 'Return the type of the column corresponding to the given field offset',
        ),
    'cubrid_free_result' =>
        array (
            'file' => 'function.cubrid-free-result.php',
            'desc' => 'Free the memory occupied by the result data',
        ),
    'cubrid_get' =>
        array (
            'file' => 'function.cubrid-get.php',
            'desc' => 'Get a column using OID',
        ),
    'cubrid_get_autocommit' =>
        array (
            'file' => 'function.cubrid-get-autocommit.php',
            'desc' => 'Get auto-commit mode of the connection',
        ),
    'cubrid_get_charset' =>
        array (
            'file' => 'function.cubrid-get-charset.php',
            'desc' => 'Return the current CUBRID connection charset',
        ),
    'cubrid_get_class_name' =>
        array (
            'file' => 'function.cubrid-get-class-name.php',
            'desc' => 'Get the class name using OID',
        ),
    'cubrid_get_client_info' =>
        array (
            'file' => 'function.cubrid-get-client-info.php',
            'desc' => 'Return the client library version',
        ),
    'cubrid_get_db_parameter' =>
        array (
            'file' => 'function.cubrid-get-db-parameter.php',
            'desc' => 'Returns the CUBRID database parameters',
        ),
    'cubrid_get_query_timeout' =>
        array (
            'file' => 'function.cubrid-get-query-timeout.php',
            'desc' => 'Get the query timeout value of the request',
        ),
    'cubrid_get_server_info' =>
        array (
            'file' => 'function.cubrid-get-server-info.php',
            'desc' => 'Return the CUBRID server version',
        ),
    'cubrid_insert_id' =>
        array (
            'file' => 'function.cubrid-insert-id.php',
            'desc' => 'Return the ID generated for the last updated AUTO_INCREMENT column',
        ),
    'cubrid_is_instance' =>
        array (
            'file' => 'function.cubrid-is-instance.php',
            'desc' => 'Check whether the instance pointed by OID exists',
        ),
    'cubrid_list_dbs' =>
        array (
            'file' => 'function.cubrid-list-dbs.php',
            'desc' => 'Return an array with the list of all existing CUBRID databases',
        ),
    'cubrid_load_from_glo' =>
        array (
            'file' => 'function.cubrid-load-from-glo.php',
            'desc' => 'Read data from a GLO instance and save it in a file',
        ),
    'cubrid_lob2_bind' =>
        array (
            'file' => 'function.cubrid-lob2-bind.php',
            'desc' => 'Bind a lob object or a string as a lob object to a prepared statement as parameters.',
        ),
    'cubrid_lob2_close' =>
        array (
            'file' => 'function.cubrid-lob2-close.php',
            'desc' => 'Close LOB object.',
        ),
    'cubrid_lob2_export' =>
        array (
            'file' => 'function.cubrid-lob2-export.php',
            'desc' => 'Export the lob object to a file.',
        ),
    'cubrid_lob2_import' =>
        array (
            'file' => 'function.cubrid-lob2-import.php',
            'desc' => 'Import BLOB/CLOB data from a file.',
        ),
    'cubrid_lob2_new' =>
        array (
            'file' => 'function.cubrid-lob2-new.php',
            'desc' => 'Create a lob object.',
        ),
    'cubrid_lob2_read' =>
        array (
            'file' => 'function.cubrid-lob2-read.php',
            'desc' => 'Read from BLOB/CLOB data.',
        ),
    'cubrid_lob2_seek' =>
        array (
            'file' => 'function.cubrid-lob2-seek.php',
            'desc' => 'Move the cursor of a lob object.',
        ),
    'cubrid_lob2_seek64' =>
        array (
            'file' => 'function.cubrid-lob2-seek64.php',
            'desc' => 'Move the cursor of a lob object.',
        ),
    'cubrid_lob2_size' =>
        array (
            'file' => 'function.cubrid-lob2-size.php',
            'desc' => 'Get a lob object\'s size.',
        ),
    'cubrid_lob2_size64' =>
        array (
            'file' => 'function.cubrid-lob2-size64.php',
            'desc' => 'Get a lob object\'s size.',
        ),
    'cubrid_lob2_tell' =>
        array (
            'file' => 'function.cubrid-lob2-tell.php',
            'desc' => 'Tell the cursor position of the LOB object.',
        ),
    'cubrid_lob2_tell64' =>
        array (
            'file' => 'function.cubrid-lob2-tell64.php',
            'desc' => 'Tell the cursor position of the LOB object.',
        ),
    'cubrid_lob2_write' =>
        array (
            'file' => 'function.cubrid-lob2-write.php',
            'desc' => 'Write to a lob object.',
        ),
    'cubrid_lob_close' =>
        array (
            'file' => 'function.cubrid-lob-close.php',
            'desc' => 'Close BLOB/CLOB data',
        ),
    'cubrid_lob_export' =>
        array (
            'file' => 'function.cubrid-lob-export.php',
            'desc' => 'Export BLOB/CLOB data to file',
        ),
    'cubrid_lob_get' =>
        array (
            'file' => 'function.cubrid-lob-get.php',
            'desc' => 'Get BLOB/CLOB data',
        ),
    'cubrid_lob_send' =>
        array (
            'file' => 'function.cubrid-lob-send.php',
            'desc' => 'Read BLOB/CLOB data and send straight to browser',
        ),
    'cubrid_lob_size' =>
        array (
            'file' => 'function.cubrid-lob-size.php',
            'desc' => 'Get BLOB/CLOB data size',
        ),
    'cubrid_lock_read' =>
        array (
            'file' => 'function.cubrid-lock-read.php',
            'desc' => 'Set a read lock on the given OID',
        ),
    'cubrid_lock_write' =>
        array (
            'file' => 'function.cubrid-lock-write.php',
            'desc' => 'Set a write lock on the given OID',
        ),
    'cubrid_move_cursor' =>
        array (
            'file' => 'function.cubrid-move-cursor.php',
            'desc' => 'Move the cursor in the result',
        ),
    'cubrid_new_glo' =>
        array (
            'file' => 'function.cubrid-new-glo.php',
            'desc' => 'Create a glo instance',
        ),
    'cubrid_next_result' =>
        array (
            'file' => 'function.cubrid-next-result.php',
            'desc' => 'Get result of next query when executing multiple SQL statements',
        ),
    'cubrid_num_cols' =>
        array (
            'file' => 'function.cubrid-num-cols.php',
            'desc' => 'Return the number of columns in the result set',
        ),
    'cubrid_num_fields' =>
        array (
            'file' => 'function.cubrid-num-fields.php',
            'desc' => 'Return the number of columns in the result set',
        ),
    'cubrid_num_rows' =>
        array (
            'file' => 'function.cubrid-num-rows.php',
            'desc' => 'Get the number of rows in the result set',
        ),
    'cubrid_pconnect' =>
        array (
            'file' => 'function.cubrid-pconnect.php',
            'desc' => 'Open a persistent connection to a CUBRID server',
        ),
    'cubrid_pconnect_with_url' =>
        array (
            'file' => 'function.cubrid-pconnect-with-url.php',
            'desc' => 'Open a persistent connection to CUBRID server',
        ),
    'cubrid_ping' =>
        array (
            'file' => 'function.cubrid-ping.php',
            'desc' => 'Ping a server connection or reconnect if there is no connection',
        ),
    'cubrid_prepare' =>
        array (
            'file' => 'function.cubrid-prepare.php',
            'desc' => 'Prepare a SQL statement for execution',
        ),
    'cubrid_put' =>
        array (
            'file' => 'function.cubrid-put.php',
            'desc' => 'Update a column using OID',
        ),
    'cubrid_query' =>
        array (
            'file' => 'function.cubrid-query.php',
            'desc' => 'Send a CUBRID query',
        ),
    'cubrid_real_escape_string' =>
        array (
            'file' => 'function.cubrid-real-escape-string.php',
            'desc' => 'Escape special characters in a string for use in an SQL statement',
        ),
    'cubrid_result' =>
        array (
            'file' => 'function.cubrid-result.php',
            'desc' => 'Return the value of a specific field in a specific row',
        ),
    'cubrid_rollback' =>
        array (
            'file' => 'function.cubrid-rollback.php',
            'desc' => 'Roll back a transaction',
        ),
    'cubrid_save_to_glo' =>
        array (
            'file' => 'function.cubrid-save-to-glo.php',
            'desc' => 'Save requested file in a GLO instance',
        ),
    'cubrid_schema' =>
        array (
            'file' => 'function.cubrid-schema.php',
            'desc' => 'Get the requested schema information',
        ),
    'cubrid_send_glo' =>
        array (
            'file' => 'function.cubrid-send-glo.php',
            'desc' => 'Read data from glo and send it to std output',
        ),
    'cubrid_seq_drop' =>
        array (
            'file' => 'function.cubrid-seq-drop.php',
            'desc' => 'Delete an element from sequence type column using OID',
        ),
    'cubrid_seq_insert' =>
        array (
            'file' => 'function.cubrid-seq-insert.php',
            'desc' => 'Insert an element to a sequence type column using OID',
        ),
    'cubrid_seq_put' =>
        array (
            'file' => 'function.cubrid-seq-put.php',
            'desc' => 'Update the element value of sequence type column using OID',
        ),
    'cubrid_set_add' =>
        array (
            'file' => 'function.cubrid-set-add.php',
            'desc' => 'Insert a single element to set type column using OID',
        ),
    'cubrid_set_autocommit' =>
        array (
            'file' => 'function.cubrid-set-autocommit.php',
            'desc' => 'Set autocommit mode of the connection',
        ),
    'cubrid_set_db_parameter' =>
        array (
            'file' => 'function.cubrid-set-db-parameter.php',
            'desc' => 'Sets the CUBRID database parameters',
        ),
    'cubrid_set_drop' =>
        array (
            'file' => 'function.cubrid-set-drop.php',
            'desc' => 'Delete an element from set type column using OID',
        ),
    'cubrid_set_query_timeout' =>
        array (
            'file' => 'function.cubrid-set-query-timeout.php',
            'desc' => 'Set the timeout time of query execution',
        ),
    'cubrid_unbuffered_query' =>
        array (
            'file' => 'function.cubrid-unbuffered-query.php',
            'desc' => 'Perform a query without fetching the results into memory',
        ),
    'cubrid_version' =>
        array (
            'file' => 'function.cubrid-version.php',
            'desc' => 'Get the CUBRID PHP module\'s version',
        ),
    'CURL context options' =>
        array (
            'file' => 'context.curl.php',
            'desc' => 'CURL context option listing',
        ),
    'CURLFile::getFilename' =>
        array (
            'file' => 'curlfile.getfilename.php',
            'desc' => 'Get file name',
        ),
    'CURLFile::getMimeType' =>
        array (
            'file' => 'curlfile.getmimetype.php',
            'desc' => 'Get MIME type',
        ),
    'CURLFile::getPostFilename' =>
        array (
            'file' => 'curlfile.getpostfilename.php',
            'desc' => 'Get file name for POST',
        ),
    'CURLFile::setMimeType' =>
        array (
            'file' => 'curlfile.setmimetype.php',
            'desc' => 'Set MIME type',
        ),
    'CURLFile::setPostFilename' =>
        array (
            'file' => 'curlfile.setpostfilename.php',
            'desc' => 'Set file name for POST',
        ),
    'CURLFile::__construct' =>
        array (
            'file' => 'curlfile.construct.php',
            'desc' => 'Create a CURLFile object',
        ),
    'CURLFile::__wakeup' =>
        array (
            'file' => 'curlfile.wakeup.php',
            'desc' => 'Unserialization handler',
        ),
    'curl_close' =>
        array (
            'file' => 'function.curl-close.php',
            'desc' => 'Close a cURL session',
        ),
    'curl_copy_handle' =>
        array (
            'file' => 'function.curl-copy-handle.php',
            'desc' => 'Copy a cURL handle along with all of its preferences',
        ),
    'curl_errno' =>
        array (
            'file' => 'function.curl-errno.php',
            'desc' => 'Return the last error number',
        ),
    'curl_error' =>
        array (
            'file' => 'function.curl-error.php',
            'desc' => 'Return a string containing the last error for the current session',
        ),
    'curl_escape' =>
        array (
            'file' => 'function.curl-escape.php',
            'desc' => 'URL encodes the given string',
        ),
    'curl_exec' =>
        array (
            'file' => 'function.curl-exec.php',
            'desc' => 'Perform a cURL session',
        ),
    'curl_getinfo' =>
        array (
            'file' => 'function.curl-getinfo.php',
            'desc' => 'Get information regarding a specific transfer',
        ),
    'curl_init' =>
        array (
            'file' => 'function.curl-init.php',
            'desc' => 'Initialize a cURL session',
        ),
    'curl_multi_add_handle' =>
        array (
            'file' => 'function.curl-multi-add-handle.php',
            'desc' => 'Add a normal cURL handle to a cURL multi handle',
        ),
    'curl_multi_close' =>
        array (
            'file' => 'function.curl-multi-close.php',
            'desc' => 'Close a set of cURL handles',
        ),
    'curl_multi_exec' =>
        array (
            'file' => 'function.curl-multi-exec.php',
            'desc' => 'Run the sub-connections of the current cURL handle',
        ),
    'curl_multi_getcontent' =>
        array (
            'file' => 'function.curl-multi-getcontent.php',
            'desc' => 'Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set',
        ),
    'curl_multi_info_read' =>
        array (
            'file' => 'function.curl-multi-info-read.php',
            'desc' => 'Get information about the current transfers',
        ),
    'curl_multi_init' =>
        array (
            'file' => 'function.curl-multi-init.php',
            'desc' => 'Returns a new cURL multi handle',
        ),
    'curl_multi_remove_handle' =>
        array (
            'file' => 'function.curl-multi-remove-handle.php',
            'desc' => 'Remove a multi handle from a set of cURL handles',
        ),
    'curl_multi_select' =>
        array (
            'file' => 'function.curl-multi-select.php',
            'desc' => 'Wait for activity on any curl_multi connection',
        ),
    'curl_multi_setopt' =>
        array (
            'file' => 'function.curl-multi-setopt.php',
            'desc' => 'Set an option for the cURL multi handle',
        ),
    'curl_multi_strerror' =>
        array (
            'file' => 'function.curl-multi-strerror.php',
            'desc' => 'Return string describing error code',
        ),
    'curl_pause' =>
        array (
            'file' => 'function.curl-pause.php',
            'desc' => 'Pause and unpause a connection',
        ),
    'curl_reset' =>
        array (
            'file' => 'function.curl-reset.php',
            'desc' => 'Reset all options of a libcurl session handle',
        ),
    'curl_setopt' =>
        array (
            'file' => 'function.curl-setopt.php',
            'desc' => 'Set an option for a cURL transfer',
        ),
    'curl_setopt_array' =>
        array (
            'file' => 'function.curl-setopt-array.php',
            'desc' => 'Set multiple options for a cURL transfer',
        ),
    'curl_share_close' =>
        array (
            'file' => 'function.curl-share-close.php',
            'desc' => 'Close a cURL share handle',
        ),
    'curl_share_init' =>
        array (
            'file' => 'function.curl-share-init.php',
            'desc' => 'Initialize a cURL share handle',
        ),
    'curl_share_setopt' =>
        array (
            'file' => 'function.curl-share-setopt.php',
            'desc' => 'Set an option for a cURL share handle.',
        ),
    'curl_strerror' =>
        array (
            'file' => 'function.curl-strerror.php',
            'desc' => 'Return string describing the given error code',
        ),
    'curl_unescape' =>
        array (
            'file' => 'function.curl-unescape.php',
            'desc' => 'Decodes the given URL encoded string',
        ),
    'curl_version' =>
        array (
            'file' => 'function.curl-version.php',
            'desc' => 'Gets cURL version information',
        ),
    'current' =>
        array (
            'file' => 'function.current.php',
            'desc' => 'Return the current element in an array',
        ),
    'cyrus_authenticate' =>
        array (
            'file' => 'function.cyrus-authenticate.php',
            'desc' => 'Authenticate against a Cyrus IMAP server',
        ),
    'cyrus_bind' =>
        array (
            'file' => 'function.cyrus-bind.php',
            'desc' => 'Bind callbacks to a Cyrus IMAP connection',
        ),
    'cyrus_close' =>
        array (
            'file' => 'function.cyrus-close.php',
            'desc' => 'Close connection to a Cyrus IMAP server',
        ),
    'cyrus_connect' =>
        array (
            'file' => 'function.cyrus-connect.php',
            'desc' => 'Connect to a Cyrus IMAP server',
        ),
    'cyrus_query' =>
        array (
            'file' => 'function.cyrus-query.php',
            'desc' => 'Send a query to a Cyrus IMAP server',
        ),
    'cyrus_unbind' =>
        array (
            'file' => 'function.cyrus-unbind.php',
            'desc' => 'Unbind ...',
        ),
    'data://' =>
        array (
            'file' => 'wrappers.data.php',
            'desc' => 'Data (RFC 2397)',
        ),
    'date' =>
        array (
            'file' => 'function.date.php',
            'desc' => 'Format a local time/date',
        ),
    'DateInterval::createFromDateString' =>
        array (
            'file' => 'dateinterval.createfromdatestring.php',
            'desc' => 'Sets up a DateInterval from the relative parts of the string',
        ),
    'DateInterval::format' =>
        array (
            'file' => 'dateinterval.format.php',
            'desc' => 'Formats the interval',
        ),
    'DateInterval::__construct' =>
        array (
            'file' => 'dateinterval.construct.php',
            'desc' => 'Creates a new DateInterval object',
        ),
    'DatePeriod::__construct' =>
        array (
            'file' => 'dateperiod.construct.php',
            'desc' => 'Creates a new DatePeriod object',
        ),
    'DateTime::add' =>
        array (
            'file' => 'datetime.add.php',
            'desc' => 'Adds an amount of days, months, years, hours, minutes and seconds to a
   DateTime object',
        ),
    'DateTime::createFromFormat' =>
        array (
            'file' => 'datetime.createfromformat.php',
            'desc' => 'Returns new DateTime object formatted according to the specified format',
        ),
    'DateTime::diff' =>
        array (
            'file' => 'datetime.diff.php',
            'desc' => 'Returns the difference between two DateTime objects',
        ),
    'DateTime::format' =>
        array (
            'file' => 'datetime.format.php',
            'desc' => 'Returns date formatted according to given format',
        ),
    'DateTime::getLastErrors' =>
        array (
            'file' => 'datetime.getlasterrors.php',
            'desc' => 'Returns the warnings and errors',
        ),
    'DateTime::getOffset' =>
        array (
            'file' => 'datetime.getoffset.php',
            'desc' => 'Returns the timezone offset',
        ),
    'DateTime::getTimestamp' =>
        array (
            'file' => 'datetime.gettimestamp.php',
            'desc' => 'Gets the Unix timestamp',
        ),
    'DateTime::getTimezone' =>
        array (
            'file' => 'datetime.gettimezone.php',
            'desc' => 'Return time zone relative to given DateTime',
        ),
    'DateTime::modify' =>
        array (
            'file' => 'datetime.modify.php',
            'desc' => 'Alters the timestamp',
        ),
    'DateTime::setDate' =>
        array (
            'file' => 'datetime.setdate.php',
            'desc' => 'Sets the date',
        ),
    'DateTime::setISODate' =>
        array (
            'file' => 'datetime.setisodate.php',
            'desc' => 'Sets the ISO date',
        ),
    'DateTime::setTime' =>
        array (
            'file' => 'datetime.settime.php',
            'desc' => 'Sets the time',
        ),
    'DateTime::setTimestamp' =>
        array (
            'file' => 'datetime.settimestamp.php',
            'desc' => 'Sets the date and time based on an Unix timestamp',
        ),
    'DateTime::setTimezone' =>
        array (
            'file' => 'datetime.settimezone.php',
            'desc' => 'Sets the time zone for the DateTime object',
        ),
    'DateTime::sub' =>
        array (
            'file' => 'datetime.sub.php',
            'desc' => 'Subtracts an amount of days, months, years, hours, minutes and seconds from
   a DateTime object',
        ),
    'DateTime::__construct' =>
        array (
            'file' => 'datetime.construct.php',
            'desc' => 'Returns new DateTime object',
        ),
    'DateTime::__set_state' =>
        array (
            'file' => 'datetime.set-state.php',
            'desc' => 'The __set_state handler',
        ),
    'DateTime::__wakeup' =>
        array (
            'file' => 'datetime.wakeup.php',
            'desc' => 'The __wakeup handler',
        ),
    'DateTimeImmutable::add' =>
        array (
            'file' => 'datetimeimmutable.add.php',
            'desc' => 'Adds an amount of days, months, years, hours, minutes and seconds',
        ),
    'DateTimeImmutable::createFromFormat' =>
        array (
            'file' => 'datetimeimmutable.createfromformat.php',
            'desc' => 'Returns new DateTimeImmutable object formatted according to the specified format',
        ),
    'DateTimeImmutable::createFromMutable' =>
        array (
            'file' => 'datetimeimmutable.createfrommutable.php',
            'desc' => 'Returns new DateTimeImmutable object encapsulating the given DateTime object',
        ),
    'DateTimeImmutable::getLastErrors' =>
        array (
            'file' => 'datetimeimmutable.getlasterrors.php',
            'desc' => 'Returns the warnings and errors',
        ),
    'DateTimeImmutable::modify' =>
        array (
            'file' => 'datetimeimmutable.modify.php',
            'desc' => 'Creates a new object with modified timestamp',
        ),
    'DateTimeImmutable::setDate' =>
        array (
            'file' => 'datetimeimmutable.setdate.php',
            'desc' => 'Sets the date',
        ),
    'DateTimeImmutable::setISODate' =>
        array (
            'file' => 'datetimeimmutable.setisodate.php',
            'desc' => 'Sets the ISO date',
        ),
    'DateTimeImmutable::setTime' =>
        array (
            'file' => 'datetimeimmutable.settime.php',
            'desc' => 'Sets the time',
        ),
    'DateTimeImmutable::setTimestamp' =>
        array (
            'file' => 'datetimeimmutable.settimestamp.php',
            'desc' => 'Sets the date and time based on an Unix timestamp',
        ),
    'DateTimeImmutable::setTimezone' =>
        array (
            'file' => 'datetimeimmutable.settimezone.php',
            'desc' => 'Sets the time zone',
        ),
    'DateTimeImmutable::sub' =>
        array (
            'file' => 'datetimeimmutable.sub.php',
            'desc' => 'Subtracts an amount of days, months, years, hours, minutes and seconds',
        ),
    'DateTimeImmutable::__construct' =>
        array (
            'file' => 'datetimeimmutable.construct.php',
            'desc' => 'Returns new DateTimeImmutable object',
        ),
    'DateTimeImmutable::__set_state' =>
        array (
            'file' => 'datetimeimmutable.set-state.php',
            'desc' => 'The __set_state handler',
        ),
    'DateTimeZone::getLocation' =>
        array (
            'file' => 'datetimezone.getlocation.php',
            'desc' => 'Returns location information for a timezone',
        ),
    'DateTimeZone::getName' =>
        array (
            'file' => 'datetimezone.getname.php',
            'desc' => 'Returns the name of the timezone',
        ),
    'DateTimeZone::getOffset' =>
        array (
            'file' => 'datetimezone.getoffset.php',
            'desc' => 'Returns the timezone offset from GMT',
        ),
    'DateTimeZone::getTransitions' =>
        array (
            'file' => 'datetimezone.gettransitions.php',
            'desc' => 'Returns all transitions for the timezone',
        ),
    'DateTimeZone::listAbbreviations' =>
        array (
            'file' => 'datetimezone.listabbreviations.php',
            'desc' => 'Returns associative array containing dst, offset and the timezone name',
        ),
    'DateTimeZone::listIdentifiers' =>
        array (
            'file' => 'datetimezone.listidentifiers.php',
            'desc' => 'Returns a numerically indexed array containing all defined timezone identifiers',
        ),
    'DateTimeZone::__construct' =>
        array (
            'file' => 'datetimezone.construct.php',
            'desc' => 'Creates new DateTimeZone object',
        ),
    'date_add' =>
        array (
            'file' => 'function.date-add.php',
            'desc' => 'Alias of DateTime::add',
        ),
    'date_create' =>
        array (
            'file' => 'function.date-create.php',
            'desc' => 'Alias of DateTime::__construct',
        ),
    'date_create_from_format' =>
        array (
            'file' => 'function.date-create-from-format.php',
            'desc' => 'Alias of DateTime::createFromFormat',
        ),
    'date_create_immutable' =>
        array (
            'file' => 'function.date-create-immutable.php',
            'desc' => 'Alias of DateTimeImmutable::__construct',
        ),
    'date_create_immutable_from_format' =>
        array (
            'file' => 'function.date-create-immutable-from-format.php',
            'desc' => 'Alias of DateTimeImmutable::createFromFormat',
        ),
    'date_date_set' =>
        array (
            'file' => 'function.date-date-set.php',
            'desc' => 'Alias of DateTime::setDate',
        ),
    'date_default_timezone_get' =>
        array (
            'file' => 'function.date-default-timezone-get.php',
            'desc' => 'Gets the default timezone used by all date/time functions in a script',
        ),
    'date_default_timezone_set' =>
        array (
            'file' => 'function.date-default-timezone-set.php',
            'desc' => 'Sets the default timezone used by all date/time functions in a script',
        ),
    'date_diff' =>
        array (
            'file' => 'function.date-diff.php',
            'desc' => 'Alias of DateTime::diff',
        ),
    'date_format' =>
        array (
            'file' => 'function.date-format.php',
            'desc' => 'Alias of DateTime::format',
        ),
    'date_get_last_errors' =>
        array (
            'file' => 'function.date-get-last-errors.php',
            'desc' => 'Alias of DateTime::getLastErrors',
        ),
    'date_interval_create_from_date_string' =>
        array (
            'file' => 'function.date-interval-create-from-date-string.php',
            'desc' => 'Alias of DateInterval::createFromDateString',
        ),
    'date_interval_format' =>
        array (
            'file' => 'function.date-interval-format.php',
            'desc' => 'Alias of DateInterval::format',
        ),
    'date_isodate_set' =>
        array (
            'file' => 'function.date-isodate-set.php',
            'desc' => 'Alias of DateTime::setISODate',
        ),
    'date_modify' =>
        array (
            'file' => 'function.date-modify.php',
            'desc' => 'Alias of DateTime::modify',
        ),
    'date_offset_get' =>
        array (
            'file' => 'function.date-offset-get.php',
            'desc' => 'Alias of DateTime::getOffset',
        ),
    'date_parse' =>
        array (
            'file' => 'function.date-parse.php',
            'desc' => 'Returns associative array with detailed info about given date',
        ),
    'date_parse_from_format' =>
        array (
            'file' => 'function.date-parse-from-format.php',
            'desc' => 'Get info about given date formatted according to the specified format',
        ),
    'date_sub' =>
        array (
            'file' => 'function.date-sub.php',
            'desc' => 'Alias of DateTime::sub',
        ),
    'date_sunrise' =>
        array (
            'file' => 'function.date-sunrise.php',
            'desc' => 'Returns time of sunrise for a given day and location',
        ),
    'date_sunset' =>
        array (
            'file' => 'function.date-sunset.php',
            'desc' => 'Returns time of sunset for a given day and location',
        ),
    'date_sun_info' =>
        array (
            'file' => 'function.date-sun-info.php',
            'desc' => 'Returns an array with information about sunset/sunrise and twilight begin/end',
        ),
    'date_timestamp_get' =>
        array (
            'file' => 'function.date-timestamp-get.php',
            'desc' => 'Alias of DateTime::getTimestamp',
        ),
    'date_timestamp_set' =>
        array (
            'file' => 'function.date-timestamp-set.php',
            'desc' => 'Alias of DateTime::setTimestamp',
        ),
    'date_timezone_get' =>
        array (
            'file' => 'function.date-timezone-get.php',
            'desc' => 'Alias of DateTime::getTimezone',
        ),
    'date_timezone_set' =>
        array (
            'file' => 'function.date-timezone-set.php',
            'desc' => 'Alias of DateTime::setTimezone',
        ),
    'date_time_set' =>
        array (
            'file' => 'function.date-time-set.php',
            'desc' => 'Alias of DateTime::setTime',
        ),
    'db2_autocommit' =>
        array (
            'file' => 'function.db2-autocommit.php',
            'desc' => 'Returns or sets the AUTOCOMMIT state for a database connection',
        ),
    'db2_bind_param' =>
        array (
            'file' => 'function.db2-bind-param.php',
            'desc' => 'Binds a PHP variable to an SQL statement parameter',
        ),
    'db2_client_info' =>
        array (
            'file' => 'function.db2-client-info.php',
            'desc' => 'Returns an object with properties that describe the DB2 database client',
        ),
    'db2_close' =>
        array (
            'file' => 'function.db2-close.php',
            'desc' => 'Closes a database connection',
        ),
    'db2_columns' =>
        array (
            'file' => 'function.db2-columns.php',
            'desc' => 'Returns a result set listing the columns and associated metadata for a table',
        ),
    'db2_column_privileges' =>
        array (
            'file' => 'function.db2-column-privileges.php',
            'desc' => 'Returns a result set listing the columns and associated privileges for a table',
        ),
    'db2_commit' =>
        array (
            'file' => 'function.db2-commit.php',
            'desc' => 'Commits a transaction',
        ),
    'db2_connect' =>
        array (
            'file' => 'function.db2-connect.php',
            'desc' => 'Returns a connection to a database',
        ),
    'db2_conn_error' =>
        array (
            'file' => 'function.db2-conn-error.php',
            'desc' => 'Returns a string containing the SQLSTATE returned by the last connection attempt',
        ),
    'db2_conn_errormsg' =>
        array (
            'file' => 'function.db2-conn-errormsg.php',
            'desc' => 'Returns the last connection error message and SQLCODE value',
        ),
    'db2_cursor_type' =>
        array (
            'file' => 'function.db2-cursor-type.php',
            'desc' => 'Returns the cursor type used by a statement resource',
        ),
    'db2_escape_string' =>
        array (
            'file' => 'function.db2-escape-string.php',
            'desc' => 'Used to escape certain characters',
        ),
    'db2_exec' =>
        array (
            'file' => 'function.db2-exec.php',
            'desc' => 'Executes an SQL statement directly',
        ),
    'db2_execute' =>
        array (
            'file' => 'function.db2-execute.php',
            'desc' => 'Executes a prepared SQL statement',
        ),
    'db2_fetch_array' =>
        array (
            'file' => 'function.db2-fetch-array.php',
            'desc' => 'Returns an array, indexed by column position, representing a row in a result set',
        ),
    'db2_fetch_assoc' =>
        array (
            'file' => 'function.db2-fetch-assoc.php',
            'desc' => 'Returns an array, indexed by column name, representing a row in a result set',
        ),
    'db2_fetch_both' =>
        array (
            'file' => 'function.db2-fetch-both.php',
            'desc' => 'Returns an array, indexed by both column name and position, representing a row in a result set',
        ),
    'db2_fetch_object' =>
        array (
            'file' => 'function.db2-fetch-object.php',
            'desc' => 'Returns an object with properties representing columns in the fetched row',
        ),
    'db2_fetch_row' =>
        array (
            'file' => 'function.db2-fetch-row.php',
            'desc' => 'Sets the result set pointer to the next row or requested row',
        ),
    'db2_field_display_size' =>
        array (
            'file' => 'function.db2-field-display-size.php',
            'desc' => 'Returns the maximum number of bytes required to display a column',
        ),
    'db2_field_name' =>
        array (
            'file' => 'function.db2-field-name.php',
            'desc' => 'Returns the name of the column in the result set',
        ),
    'db2_field_num' =>
        array (
            'file' => 'function.db2-field-num.php',
            'desc' => 'Returns the position of the named column in a result set',
        ),
    'db2_field_precision' =>
        array (
            'file' => 'function.db2-field-precision.php',
            'desc' => 'Returns the precision of the indicated column in a result set',
        ),
    'db2_field_scale' =>
        array (
            'file' => 'function.db2-field-scale.php',
            'desc' => 'Returns the scale of the indicated column in a result set',
        ),
    'db2_field_type' =>
        array (
            'file' => 'function.db2-field-type.php',
            'desc' => 'Returns the data type of the indicated column in a result set',
        ),
    'db2_field_width' =>
        array (
            'file' => 'function.db2-field-width.php',
            'desc' => 'Returns the width of the current value of the indicated column in a result set',
        ),
    'db2_foreign_keys' =>
        array (
            'file' => 'function.db2-foreign-keys.php',
            'desc' => 'Returns a result set listing the foreign keys for a table',
        ),
    'db2_free_result' =>
        array (
            'file' => 'function.db2-free-result.php',
            'desc' => 'Frees resources associated with a result set',
        ),
    'db2_free_stmt' =>
        array (
            'file' => 'function.db2-free-stmt.php',
            'desc' => 'Frees resources associated with the indicated statement resource',
        ),
    'db2_get_option' =>
        array (
            'file' => 'function.db2-get-option.php',
            'desc' => 'Retrieves an option value for a statement resource or a connection resource',
        ),
    'db2_last_insert_id' =>
        array (
            'file' => 'function.db2-last-insert-id.php',
            'desc' => 'Returns the auto generated ID of the last insert query that successfully 
  executed on this connection',
        ),
    'db2_lob_read' =>
        array (
            'file' => 'function.db2-lob-read.php',
            'desc' => 'Gets a user defined size of LOB files with each invocation',
        ),
    'db2_next_result' =>
        array (
            'file' => 'function.db2-next-result.php',
            'desc' => 'Requests the next result set from a stored procedure',
        ),
    'db2_num_fields' =>
        array (
            'file' => 'function.db2-num-fields.php',
            'desc' => 'Returns the number of fields contained in a result set',
        ),
    'db2_num_rows' =>
        array (
            'file' => 'function.db2-num-rows.php',
            'desc' => 'Returns the number of rows affected by an SQL statement',
        ),
    'db2_pclose' =>
        array (
            'file' => 'function.db2-pclose.php',
            'desc' => 'Closes a persistent database connection',
        ),
    'db2_pconnect' =>
        array (
            'file' => 'function.db2-pconnect.php',
            'desc' => 'Returns a persistent connection to a database',
        ),
    'db2_prepare' =>
        array (
            'file' => 'function.db2-prepare.php',
            'desc' => 'Prepares an SQL statement to be executed',
        ),
    'db2_primary_keys' =>
        array (
            'file' => 'function.db2-primary-keys.php',
            'desc' => 'Returns a result set listing primary keys for a table',
        ),
    'db2_procedures' =>
        array (
            'file' => 'function.db2-procedures.php',
            'desc' => 'Returns a result set listing the stored procedures registered in a database',
        ),
    'db2_procedure_columns' =>
        array (
            'file' => 'function.db2-procedure-columns.php',
            'desc' => 'Returns a result set listing stored procedure parameters',
        ),
    'db2_result' =>
        array (
            'file' => 'function.db2-result.php',
            'desc' => 'Returns a single column from a row in the result set',
        ),
    'db2_rollback' =>
        array (
            'file' => 'function.db2-rollback.php',
            'desc' => 'Rolls back a transaction',
        ),
    'db2_server_info' =>
        array (
            'file' => 'function.db2-server-info.php',
            'desc' => 'Returns an object with properties that describe the DB2 database server',
        ),
    'db2_set_option' =>
        array (
            'file' => 'function.db2-set-option.php',
            'desc' => 'Set options for connection or statement resources',
        ),
    'db2_special_columns' =>
        array (
            'file' => 'function.db2-special-columns.php',
            'desc' => 'Returns a result set listing the unique row identifier columns for a table',
        ),
    'db2_statistics' =>
        array (
            'file' => 'function.db2-statistics.php',
            'desc' => 'Returns a result set listing the index and statistics for a table',
        ),
    'db2_stmt_error' =>
        array (
            'file' => 'function.db2-stmt-error.php',
            'desc' => 'Returns a string containing the SQLSTATE returned by an SQL statement',
        ),
    'db2_stmt_errormsg' =>
        array (
            'file' => 'function.db2-stmt-errormsg.php',
            'desc' => 'Returns a string containing the last SQL statement error message',
        ),
    'db2_tables' =>
        array (
            'file' => 'function.db2-tables.php',
            'desc' => 'Returns a result set listing the tables and associated metadata in a database',
        ),
    'db2_table_privileges' =>
        array (
            'file' => 'function.db2-table-privileges.php',
            'desc' => 'Returns a result set listing the tables and associated privileges in a database',
        ),
    'dbase_add_record' =>
        array (
            'file' => 'function.dbase-add-record.php',
            'desc' => 'Adds a record to a database',
        ),
    'dbase_close' =>
        array (
            'file' => 'function.dbase-close.php',
            'desc' => 'Closes a database',
        ),
    'dbase_create' =>
        array (
            'file' => 'function.dbase-create.php',
            'desc' => 'Creates a database',
        ),
    'dbase_delete_record' =>
        array (
            'file' => 'function.dbase-delete-record.php',
            'desc' => 'Deletes a record from a database',
        ),
    'dbase_get_header_info' =>
        array (
            'file' => 'function.dbase-get-header-info.php',
            'desc' => 'Gets the header info of a database',
        ),
    'dbase_get_record' =>
        array (
            'file' => 'function.dbase-get-record.php',
            'desc' => 'Gets a record from a database as an indexed array',
        ),
    'dbase_get_record_with_names' =>
        array (
            'file' => 'function.dbase-get-record-with-names.php',
            'desc' => 'Gets a record from a database as an associative array',
        ),
    'dbase_numfields' =>
        array (
            'file' => 'function.dbase-numfields.php',
            'desc' => 'Gets the number of fields of a database',
        ),
    'dbase_numrecords' =>
        array (
            'file' => 'function.dbase-numrecords.php',
            'desc' => 'Gets the number of records in a database',
        ),
    'dbase_open' =>
        array (
            'file' => 'function.dbase-open.php',
            'desc' => 'Opens a database',
        ),
    'dbase_pack' =>
        array (
            'file' => 'function.dbase-pack.php',
            'desc' => 'Packs a database',
        ),
    'dbase_replace_record' =>
        array (
            'file' => 'function.dbase-replace-record.php',
            'desc' => 'Replaces a record in a database',
        ),
    'dba_close' =>
        array (
            'file' => 'function.dba-close.php',
            'desc' => 'Close a DBA database',
        ),
    'dba_delete' =>
        array (
            'file' => 'function.dba-delete.php',
            'desc' => 'Delete DBA entry specified by key',
        ),
    'dba_exists' =>
        array (
            'file' => 'function.dba-exists.php',
            'desc' => 'Check whether key exists',
        ),
    'dba_fetch' =>
        array (
            'file' => 'function.dba-fetch.php',
            'desc' => 'Fetch data specified by key',
        ),
    'dba_firstkey' =>
        array (
            'file' => 'function.dba-firstkey.php',
            'desc' => 'Fetch first key',
        ),
    'dba_handlers' =>
        array (
            'file' => 'function.dba-handlers.php',
            'desc' => 'List all the handlers available',
        ),
    'dba_insert' =>
        array (
            'file' => 'function.dba-insert.php',
            'desc' => 'Insert entry',
        ),
    'dba_key_split' =>
        array (
            'file' => 'function.dba-key-split.php',
            'desc' => 'Splits a key in string representation into array representation',
        ),
    'dba_list' =>
        array (
            'file' => 'function.dba-list.php',
            'desc' => 'List all open database files',
        ),
    'dba_nextkey' =>
        array (
            'file' => 'function.dba-nextkey.php',
            'desc' => 'Fetch next key',
        ),
    'dba_open' =>
        array (
            'file' => 'function.dba-open.php',
            'desc' => 'Open database',
        ),
    'dba_optimize' =>
        array (
            'file' => 'function.dba-optimize.php',
            'desc' => 'Optimize database',
        ),
    'dba_popen' =>
        array (
            'file' => 'function.dba-popen.php',
            'desc' => 'Open database persistently',
        ),
    'dba_replace' =>
        array (
            'file' => 'function.dba-replace.php',
            'desc' => 'Replace or insert entry',
        ),
    'dba_sync' =>
        array (
            'file' => 'function.dba-sync.php',
            'desc' => 'Synchronize database',
        ),
    'dbplus_add' =>
        array (
            'file' => 'function.dbplus-add.php',
            'desc' => 'Add a tuple to a relation',
        ),
    'dbplus_aql' =>
        array (
            'file' => 'function.dbplus-aql.php',
            'desc' => 'Perform AQL query',
        ),
    'dbplus_chdir' =>
        array (
            'file' => 'function.dbplus-chdir.php',
            'desc' => 'Get/Set database virtual current directory',
        ),
    'dbplus_close' =>
        array (
            'file' => 'function.dbplus-close.php',
            'desc' => 'Close a relation',
        ),
    'dbplus_curr' =>
        array (
            'file' => 'function.dbplus-curr.php',
            'desc' => 'Get current tuple from relation',
        ),
    'dbplus_errcode' =>
        array (
            'file' => 'function.dbplus-errcode.php',
            'desc' => 'Get error string for given errorcode or last error',
        ),
    'dbplus_errno' =>
        array (
            'file' => 'function.dbplus-errno.php',
            'desc' => 'Get error code for last operation',
        ),
    'dbplus_find' =>
        array (
            'file' => 'function.dbplus-find.php',
            'desc' => 'Set a constraint on a relation',
        ),
    'dbplus_first' =>
        array (
            'file' => 'function.dbplus-first.php',
            'desc' => 'Get first tuple from relation',
        ),
    'dbplus_flush' =>
        array (
            'file' => 'function.dbplus-flush.php',
            'desc' => 'Flush all changes made on a relation',
        ),
    'dbplus_freealllocks' =>
        array (
            'file' => 'function.dbplus-freealllocks.php',
            'desc' => 'Free all locks held by this client',
        ),
    'dbplus_freelock' =>
        array (
            'file' => 'function.dbplus-freelock.php',
            'desc' => 'Release write lock on tuple',
        ),
    'dbplus_freerlocks' =>
        array (
            'file' => 'function.dbplus-freerlocks.php',
            'desc' => 'Free all tuple locks on given relation',
        ),
    'dbplus_getlock' =>
        array (
            'file' => 'function.dbplus-getlock.php',
            'desc' => 'Get a write lock on a tuple',
        ),
    'dbplus_getunique' =>
        array (
            'file' => 'function.dbplus-getunique.php',
            'desc' => 'Get an id number unique to a relation',
        ),
    'dbplus_info' =>
        array (
            'file' => 'function.dbplus-info.php',
            'desc' => 'Get information about a relation',
        ),
    'dbplus_last' =>
        array (
            'file' => 'function.dbplus-last.php',
            'desc' => 'Get last tuple from relation',
        ),
    'dbplus_lockrel' =>
        array (
            'file' => 'function.dbplus-lockrel.php',
            'desc' => 'Request write lock on relation',
        ),
    'dbplus_next' =>
        array (
            'file' => 'function.dbplus-next.php',
            'desc' => 'Get next tuple from relation',
        ),
    'dbplus_open' =>
        array (
            'file' => 'function.dbplus-open.php',
            'desc' => 'Open relation file',
        ),
    'dbplus_prev' =>
        array (
            'file' => 'function.dbplus-prev.php',
            'desc' => 'Get previous tuple from relation',
        ),
    'dbplus_rchperm' =>
        array (
            'file' => 'function.dbplus-rchperm.php',
            'desc' => 'Change relation permissions',
        ),
    'dbplus_rcreate' =>
        array (
            'file' => 'function.dbplus-rcreate.php',
            'desc' => 'Creates a new DB++ relation',
        ),
    'dbplus_rcrtexact' =>
        array (
            'file' => 'function.dbplus-rcrtexact.php',
            'desc' => 'Creates an exact but empty copy of a relation including indices',
        ),
    'dbplus_rcrtlike' =>
        array (
            'file' => 'function.dbplus-rcrtlike.php',
            'desc' => 'Creates an empty copy of a relation with default indices',
        ),
    'dbplus_resolve' =>
        array (
            'file' => 'function.dbplus-resolve.php',
            'desc' => 'Resolve host information for relation',
        ),
    'dbplus_restorepos' =>
        array (
            'file' => 'function.dbplus-restorepos.php',
            'desc' => 'Restore position',
        ),
    'dbplus_rkeys' =>
        array (
            'file' => 'function.dbplus-rkeys.php',
            'desc' => 'Specify new primary key for a relation',
        ),
    'dbplus_ropen' =>
        array (
            'file' => 'function.dbplus-ropen.php',
            'desc' => 'Open relation file local',
        ),
    'dbplus_rquery' =>
        array (
            'file' => 'function.dbplus-rquery.php',
            'desc' => 'Perform local (raw) AQL query',
        ),
    'dbplus_rrename' =>
        array (
            'file' => 'function.dbplus-rrename.php',
            'desc' => 'Rename a relation',
        ),
    'dbplus_rsecindex' =>
        array (
            'file' => 'function.dbplus-rsecindex.php',
            'desc' => 'Create a new secondary index for a relation',
        ),
    'dbplus_runlink' =>
        array (
            'file' => 'function.dbplus-runlink.php',
            'desc' => 'Remove relation from filesystem',
        ),
    'dbplus_rzap' =>
        array (
            'file' => 'function.dbplus-rzap.php',
            'desc' => 'Remove all tuples from relation',
        ),
    'dbplus_savepos' =>
        array (
            'file' => 'function.dbplus-savepos.php',
            'desc' => 'Save position',
        ),
    'dbplus_setindex' =>
        array (
            'file' => 'function.dbplus-setindex.php',
            'desc' => 'Set index',
        ),
    'dbplus_setindexbynumber' =>
        array (
            'file' => 'function.dbplus-setindexbynumber.php',
            'desc' => 'Set index by number',
        ),
    'dbplus_sql' =>
        array (
            'file' => 'function.dbplus-sql.php',
            'desc' => 'Perform SQL query',
        ),
    'dbplus_tcl' =>
        array (
            'file' => 'function.dbplus-tcl.php',
            'desc' => 'Execute TCL code on server side',
        ),
    'dbplus_tremove' =>
        array (
            'file' => 'function.dbplus-tremove.php',
            'desc' => 'Remove tuple and return new current tuple',
        ),
    'dbplus_undo' =>
        array (
            'file' => 'function.dbplus-undo.php',
            'desc' => 'Undo',
        ),
    'dbplus_undoprepare' =>
        array (
            'file' => 'function.dbplus-undoprepare.php',
            'desc' => 'Prepare undo',
        ),
    'dbplus_unlockrel' =>
        array (
            'file' => 'function.dbplus-unlockrel.php',
            'desc' => 'Give up write lock on relation',
        ),
    'dbplus_unselect' =>
        array (
            'file' => 'function.dbplus-unselect.php',
            'desc' => 'Remove a constraint from relation',
        ),
    'dbplus_update' =>
        array (
            'file' => 'function.dbplus-update.php',
            'desc' => 'Update specified tuple in relation',
        ),
    'dbplus_xlockrel' =>
        array (
            'file' => 'function.dbplus-xlockrel.php',
            'desc' => 'Request exclusive lock on relation',
        ),
    'dbplus_xunlockrel' =>
        array (
            'file' => 'function.dbplus-xunlockrel.php',
            'desc' => 'Free exclusive lock on relation',
        ),
    'dbx_close' =>
        array (
            'file' => 'function.dbx-close.php',
            'desc' => 'Close an open connection/database',
        ),
    'dbx_compare' =>
        array (
            'file' => 'function.dbx-compare.php',
            'desc' => 'Compare two rows for sorting purposes',
        ),
    'dbx_connect' =>
        array (
            'file' => 'function.dbx-connect.php',
            'desc' => 'Open a connection/database',
        ),
    'dbx_error' =>
        array (
            'file' => 'function.dbx-error.php',
            'desc' => 'Report the error message of the latest function call in the module',
        ),
    'dbx_escape_string' =>
        array (
            'file' => 'function.dbx-escape-string.php',
            'desc' => 'Escape a string so it can safely be used in an sql-statement',
        ),
    'dbx_fetch_row' =>
        array (
            'file' => 'function.dbx-fetch-row.php',
            'desc' => 'Fetches rows from a query-result that had the 
  DBX_RESULT_UNBUFFERED flag set',
        ),
    'dbx_query' =>
        array (
            'file' => 'function.dbx-query.php',
            'desc' => 'Send a query and fetch all results (if any)',
        ),
    'dbx_sort' =>
        array (
            'file' => 'function.dbx-sort.php',
            'desc' => 'Sort a result from a dbx_query by a custom sort function',
        ),
    'dcgettext' =>
        array (
            'file' => 'function.dcgettext.php',
            'desc' => 'Overrides the domain for a single lookup',
        ),
    'dcngettext' =>
        array (
            'file' => 'function.dcngettext.php',
            'desc' => 'Plural version of dcgettext',
        ),
    'debug_backtrace' =>
        array (
            'file' => 'function.debug-backtrace.php',
            'desc' => 'Generates a backtrace',
        ),
    'debug_print_backtrace' =>
        array (
            'file' => 'function.debug-print-backtrace.php',
            'desc' => 'Prints a backtrace',
        ),
    'debug_zval_dump' =>
        array (
            'file' => 'function.debug-zval-dump.php',
            'desc' => 'Dumps a string representation of an internal zend value to output',
        ),
    'decbin' =>
        array (
            'file' => 'function.decbin.php',
            'desc' => 'Decimal to binary',
        ),
    'dechex' =>
        array (
            'file' => 'function.dechex.php',
            'desc' => 'Decimal to hexadecimal',
        ),
    'decoct' =>
        array (
            'file' => 'function.decoct.php',
            'desc' => 'Decimal to octal',
        ),
    'define' =>
        array (
            'file' => 'function.define.php',
            'desc' => 'Defines a named constant',
        ),
    'defined' =>
        array (
            'file' => 'function.defined.php',
            'desc' => 'Checks whether a given named constant exists',
        ),
    'define_syslog_variables' =>
        array (
            'file' => 'function.define-syslog-variables.php',
            'desc' => 'Initializes all syslog related variables',
        ),
    'deg2rad' =>
        array (
            'file' => 'function.deg2rad.php',
            'desc' => 'Converts the number in degrees to the radian equivalent',
        ),
    'delete' =>
        array (
            'file' => 'function.delete.php',
            'desc' => 'See unlink or unset',
        ),
    'dgettext' =>
        array (
            'file' => 'function.dgettext.php',
            'desc' => 'Override the current domain',
        ),
    'die' =>
        array (
            'file' => 'function.die.php',
            'desc' => 'Equivalent to exit',
        ),
    'dio_close' =>
        array (
            'file' => 'function.dio-close.php',
            'desc' => 'Closes the file descriptor given by fd',
        ),
    'dio_fcntl' =>
        array (
            'file' => 'function.dio-fcntl.php',
            'desc' => 'Performs a c library fcntl on fd',
        ),
    'dio_open' =>
        array (
            'file' => 'function.dio-open.php',
            'desc' => 'Opens a file (creating it if necessary) at a lower level than the
   C library input/ouput stream functions allow.',
        ),
    'dio_read' =>
        array (
            'file' => 'function.dio-read.php',
            'desc' => 'Reads bytes from a file descriptor',
        ),
    'dio_seek' =>
        array (
            'file' => 'function.dio-seek.php',
            'desc' => 'Seeks to pos on fd from whence',
        ),
    'dio_stat' =>
        array (
            'file' => 'function.dio-stat.php',
            'desc' => 'Gets stat information about the file descriptor fd',
        ),
    'dio_tcsetattr' =>
        array (
            'file' => 'function.dio-tcsetattr.php',
            'desc' => 'Sets terminal attributes and baud rate for a serial port',
        ),
    'dio_truncate' =>
        array (
            'file' => 'function.dio-truncate.php',
            'desc' => 'Truncates file descriptor fd to offset bytes',
        ),
    'dio_write' =>
        array (
            'file' => 'function.dio-write.php',
            'desc' => 'Writes data to fd with optional truncation at length',
        ),
    'dir' =>
        array (
            'file' => 'function.dir.php',
            'desc' => 'Return an instance of the Directory class',
        ),
    'Directory::close' =>
        array (
            'file' => 'directory.close.php',
            'desc' => 'Close directory handle',
        ),
    'Directory::read' =>
        array (
            'file' => 'directory.read.php',
            'desc' => 'Read entry from directory handle',
        ),
    'Directory::rewind' =>
        array (
            'file' => 'directory.rewind.php',
            'desc' => 'Rewind directory handle',
        ),
    'DirectoryIterator::current' =>
        array (
            'file' => 'directoryiterator.current.php',
            'desc' => 'Return the current DirectoryIterator item.',
        ),
    'DirectoryIterator::getATime' =>
        array (
            'file' => 'directoryiterator.getatime.php',
            'desc' => 'Get last access time of the current DirectoryIterator item',
        ),
    'DirectoryIterator::getBasename' =>
        array (
            'file' => 'directoryiterator.getbasename.php',
            'desc' => 'Get base name of current DirectoryIterator item.',
        ),
    'DirectoryIterator::getCTime' =>
        array (
            'file' => 'directoryiterator.getctime.php',
            'desc' => 'Get inode change time of the current DirectoryIterator item',
        ),
    'DirectoryIterator::getExtension' =>
        array (
            'file' => 'directoryiterator.getextension.php',
            'desc' => 'Gets the file extension',
        ),
    'DirectoryIterator::getFilename' =>
        array (
            'file' => 'directoryiterator.getfilename.php',
            'desc' => 'Return file name of current DirectoryIterator item.',
        ),
    'DirectoryIterator::getGroup' =>
        array (
            'file' => 'directoryiterator.getgroup.php',
            'desc' => 'Get group for the current DirectoryIterator item',
        ),
    'DirectoryIterator::getInode' =>
        array (
            'file' => 'directoryiterator.getinode.php',
            'desc' => 'Get inode for the current DirectoryIterator item',
        ),
    'DirectoryIterator::getMTime' =>
        array (
            'file' => 'directoryiterator.getmtime.php',
            'desc' => 'Get last modification time of current DirectoryIterator item',
        ),
    'DirectoryIterator::getOwner' =>
        array (
            'file' => 'directoryiterator.getowner.php',
            'desc' => 'Get owner of current DirectoryIterator item',
        ),
    'DirectoryIterator::getPath' =>
        array (
            'file' => 'directoryiterator.getpath.php',
            'desc' => 'Get path of current Iterator item without filename',
        ),
    'DirectoryIterator::getPathname' =>
        array (
            'file' => 'directoryiterator.getpathname.php',
            'desc' => 'Return path and file name of current DirectoryIterator item',
        ),
    'DirectoryIterator::getPerms' =>
        array (
            'file' => 'directoryiterator.getperms.php',
            'desc' => 'Get the permissions of current DirectoryIterator item',
        ),
    'DirectoryIterator::getSize' =>
        array (
            'file' => 'directoryiterator.getsize.php',
            'desc' => 'Get size of current DirectoryIterator item',
        ),
    'DirectoryIterator::getType' =>
        array (
            'file' => 'directoryiterator.gettype.php',
            'desc' => 'Determine the type of the current DirectoryIterator item',
        ),
    'DirectoryIterator::isDir' =>
        array (
            'file' => 'directoryiterator.isdir.php',
            'desc' => 'Determine if current DirectoryIterator item is a directory',
        ),
    'DirectoryIterator::isDot' =>
        array (
            'file' => 'directoryiterator.isdot.php',
            'desc' => 'Determine if current DirectoryIterator item is \'.\' or \'..\'',
        ),
    'DirectoryIterator::isExecutable' =>
        array (
            'file' => 'directoryiterator.isexecutable.php',
            'desc' => 'Determine if current DirectoryIterator item is executable',
        ),
    'DirectoryIterator::isFile' =>
        array (
            'file' => 'directoryiterator.isfile.php',
            'desc' => 'Determine if current DirectoryIterator item is a regular file',
        ),
    'DirectoryIterator::isLink' =>
        array (
            'file' => 'directoryiterator.islink.php',
            'desc' => 'Determine if current DirectoryIterator item is a symbolic link',
        ),
    'DirectoryIterator::isReadable' =>
        array (
            'file' => 'directoryiterator.isreadable.php',
            'desc' => 'Determine if current DirectoryIterator item can be read',
        ),
    'DirectoryIterator::isWritable' =>
        array (
            'file' => 'directoryiterator.iswritable.php',
            'desc' => 'Determine if current DirectoryIterator item can be written to',
        ),
    'DirectoryIterator::key' =>
        array (
            'file' => 'directoryiterator.key.php',
            'desc' => 'Return the key for the current DirectoryIterator item',
        ),
    'DirectoryIterator::next' =>
        array (
            'file' => 'directoryiterator.next.php',
            'desc' => 'Move forward to next DirectoryIterator item',
        ),
    'DirectoryIterator::rewind' =>
        array (
            'file' => 'directoryiterator.rewind.php',
            'desc' => 'Rewind the DirectoryIterator back to the start',
        ),
    'DirectoryIterator::seek' =>
        array (
            'file' => 'directoryiterator.seek.php',
            'desc' => 'Seek to a DirectoryIterator item',
        ),
    'DirectoryIterator::valid' =>
        array (
            'file' => 'directoryiterator.valid.php',
            'desc' => 'Check whether current DirectoryIterator position is a valid file',
        ),
    'DirectoryIterator::__construct' =>
        array (
            'file' => 'directoryiterator.construct.php',
            'desc' => 'Constructs a new directory iterator from a path',
        ),
    'DirectoryIterator::__toString' =>
        array (
            'file' => 'directoryiterator.tostring.php',
            'desc' => 'Get file name as a string',
        ),
    'dirname' =>
        array (
            'file' => 'function.dirname.php',
            'desc' => 'Returns parent directory\'s path',
        ),
    'diskfreespace' =>
        array (
            'file' => 'function.diskfreespace.php',
            'desc' => 'Alias of disk_free_space',
        ),
    'disk_free_space' =>
        array (
            'file' => 'function.disk-free-space.php',
            'desc' => 'Returns available space on filesystem or disk partition',
        ),
    'disk_total_space' =>
        array (
            'file' => 'function.disk-total-space.php',
            'desc' => 'Returns the total size of a filesystem or disk partition',
        ),
    'dl' =>
        array (
            'file' => 'function.dl.php',
            'desc' => 'Loads a PHP extension at runtime',
        ),
    'dngettext' =>
        array (
            'file' => 'function.dngettext.php',
            'desc' => 'Plural version of dgettext',
        ),
    'dns_check_record' =>
        array (
            'file' => 'function.dns-check-record.php',
            'desc' => 'Alias of checkdnsrr',
        ),
    'dns_get_mx' =>
        array (
            'file' => 'function.dns-get-mx.php',
            'desc' => 'Alias of getmxrr',
        ),
    'dns_get_record' =>
        array (
            'file' => 'function.dns-get-record.php',
            'desc' => 'Fetch DNS Resource Records associated with a hostname',
        ),
    'DOMAttr::isId' =>
        array (
            'file' => 'domattr.isid.php',
            'desc' => 'Checks if attribute is a defined ID',
        ),
    'DOMAttr::__construct' =>
        array (
            'file' => 'domattr.construct.php',
            'desc' => 'Creates a new DOMAttr object',
        ),
    'DOMCdataSection::__construct' =>
        array (
            'file' => 'domcdatasection.construct.php',
            'desc' => 'Constructs a new DOMCdataSection object',
        ),
    'DOMCharacterData::appendData' =>
        array (
            'file' => 'domcharacterdata.appenddata.php',
            'desc' => 'Append the string to the end of the character data of the node',
        ),
    'DOMCharacterData::deleteData' =>
        array (
            'file' => 'domcharacterdata.deletedata.php',
            'desc' => 'Remove a range of characters from the node',
        ),
    'DOMCharacterData::insertData' =>
        array (
            'file' => 'domcharacterdata.insertdata.php',
            'desc' => 'Insert a string at the specified 16-bit unit offset',
        ),
    'DOMCharacterData::replaceData' =>
        array (
            'file' => 'domcharacterdata.replacedata.php',
            'desc' => 'Replace a substring within the DOMCharacterData node',
        ),
    'DOMCharacterData::substringData' =>
        array (
            'file' => 'domcharacterdata.substringdata.php',
            'desc' => 'Extracts a range of data from the node',
        ),
    'DOMComment::__construct' =>
        array (
            'file' => 'domcomment.construct.php',
            'desc' => 'Creates a new DOMComment object',
        ),
    'DOMDocument::createAttribute' =>
        array (
            'file' => 'domdocument.createattribute.php',
            'desc' => 'Create new attribute',
        ),
    'DOMDocument::createAttributeNS' =>
        array (
            'file' => 'domdocument.createattributens.php',
            'desc' => 'Create new attribute node with an associated namespace',
        ),
    'DOMDocument::createCDATASection' =>
        array (
            'file' => 'domdocument.createcdatasection.php',
            'desc' => 'Create new cdata node',
        ),
    'DOMDocument::createComment' =>
        array (
            'file' => 'domdocument.createcomment.php',
            'desc' => 'Create new comment node',
        ),
    'DOMDocument::createDocumentFragment' =>
        array (
            'file' => 'domdocument.createdocumentfragment.php',
            'desc' => 'Create new document fragment',
        ),
    'DOMDocument::createElement' =>
        array (
            'file' => 'domdocument.createelement.php',
            'desc' => 'Create new element node',
        ),
    'DOMDocument::createElementNS' =>
        array (
            'file' => 'domdocument.createelementns.php',
            'desc' => 'Create new element node with an associated namespace',
        ),
    'DOMDocument::createEntityReference' =>
        array (
            'file' => 'domdocument.createentityreference.php',
            'desc' => 'Create new entity reference node',
        ),
    'DOMDocument::createProcessingInstruction' =>
        array (
            'file' => 'domdocument.createprocessinginstruction.php',
            'desc' => 'Creates new PI node',
        ),
    'DOMDocument::createTextNode' =>
        array (
            'file' => 'domdocument.createtextnode.php',
            'desc' => 'Create new text node',
        ),
    'DOMDocument::getElementById' =>
        array (
            'file' => 'domdocument.getelementbyid.php',
            'desc' => 'Searches for an element with a certain id',
        ),
    'DOMDocument::getElementsByTagName' =>
        array (
            'file' => 'domdocument.getelementsbytagname.php',
            'desc' => 'Searches for all elements with given local tag name',
        ),
    'DOMDocument::getElementsByTagNameNS' =>
        array (
            'file' => 'domdocument.getelementsbytagnamens.php',
            'desc' => 'Searches for all elements with given tag name in specified namespace',
        ),
    'DOMDocument::importNode' =>
        array (
            'file' => 'domdocument.importnode.php',
            'desc' => 'Import node into current document',
        ),
    'DOMDocument::load' =>
        array (
            'file' => 'domdocument.load.php',
            'desc' => 'Load XML from a file',
        ),
    'DOMDocument::loadHTML' =>
        array (
            'file' => 'domdocument.loadhtml.php',
            'desc' => 'Load HTML from a string',
        ),
    'DOMDocument::loadHTMLFile' =>
        array (
            'file' => 'domdocument.loadhtmlfile.php',
            'desc' => 'Load HTML from a file',
        ),
    'DOMDocument::loadXML' =>
        array (
            'file' => 'domdocument.loadxml.php',
            'desc' => 'Load XML from a string',
        ),
    'DOMDocument::normalizeDocument' =>
        array (
            'file' => 'domdocument.normalizedocument.php',
            'desc' => 'Normalizes the document',
        ),
    'DOMDocument::registerNodeClass' =>
        array (
            'file' => 'domdocument.registernodeclass.php',
            'desc' => 'Register extended class used to create base node type',
        ),
    'DOMDocument::relaxNGValidate' =>
        array (
            'file' => 'domdocument.relaxngvalidate.php',
            'desc' => 'Performs relaxNG validation on the document',
        ),
    'DOMDocument::relaxNGValidateSource' =>
        array (
            'file' => 'domdocument.relaxngvalidatesource.php',
            'desc' => 'Performs relaxNG validation on the document',
        ),
    'DOMDocument::save' =>
        array (
            'file' => 'domdocument.save.php',
            'desc' => 'Dumps the internal XML tree back into a file',
        ),
    'DOMDocument::saveHTML' =>
        array (
            'file' => 'domdocument.savehtml.php',
            'desc' => 'Dumps the internal document into a string using HTML formatting',
        ),
    'DOMDocument::saveHTMLFile' =>
        array (
            'file' => 'domdocument.savehtmlfile.php',
            'desc' => 'Dumps the internal document into a file using HTML formatting',
        ),
    'DOMDocument::saveXML' =>
        array (
            'file' => 'domdocument.savexml.php',
            'desc' => 'Dumps the internal XML tree back into a string',
        ),
    'DOMDocument::schemaValidate' =>
        array (
            'file' => 'domdocument.schemavalidate.php',
            'desc' => 'Validates a document based on a schema',
        ),
    'DOMDocument::schemaValidateSource' =>
        array (
            'file' => 'domdocument.schemavalidatesource.php',
            'desc' => 'Validates a document based on a schema',
        ),
    'DOMDocument::validate' =>
        array (
            'file' => 'domdocument.validate.php',
            'desc' => 'Validates the document based on its DTD',
        ),
    'DOMDocument::xinclude' =>
        array (
            'file' => 'domdocument.xinclude.php',
            'desc' => 'Substitutes XIncludes in a DOMDocument Object',
        ),
    'DOMDocument::__construct' =>
        array (
            'file' => 'domdocument.construct.php',
            'desc' => 'Creates a new DOMDocument object',
        ),
    'DOMDocumentFragment::appendXML' =>
        array (
            'file' => 'domdocumentfragment.appendxml.php',
            'desc' => 'Append raw XML data',
        ),
    'DOMElement::getAttribute' =>
        array (
            'file' => 'domelement.getattribute.php',
            'desc' => 'Returns value of attribute',
        ),
    'DOMElement::getAttributeNode' =>
        array (
            'file' => 'domelement.getattributenode.php',
            'desc' => 'Returns attribute node',
        ),
    'DOMElement::getAttributeNodeNS' =>
        array (
            'file' => 'domelement.getattributenodens.php',
            'desc' => 'Returns attribute node',
        ),
    'DOMElement::getAttributeNS' =>
        array (
            'file' => 'domelement.getattributens.php',
            'desc' => 'Returns value of attribute',
        ),
    'DOMElement::getElementsByTagName' =>
        array (
            'file' => 'domelement.getelementsbytagname.php',
            'desc' => 'Gets elements by tagname',
        ),
    'DOMElement::getElementsByTagNameNS' =>
        array (
            'file' => 'domelement.getelementsbytagnamens.php',
            'desc' => 'Get elements by namespaceURI and localName',
        ),
    'DOMElement::hasAttribute' =>
        array (
            'file' => 'domelement.hasattribute.php',
            'desc' => 'Checks to see if attribute exists',
        ),
    'DOMElement::hasAttributeNS' =>
        array (
            'file' => 'domelement.hasattributens.php',
            'desc' => 'Checks to see if attribute exists',
        ),
    'DOMElement::removeAttribute' =>
        array (
            'file' => 'domelement.removeattribute.php',
            'desc' => 'Removes attribute',
        ),
    'DOMElement::removeAttributeNode' =>
        array (
            'file' => 'domelement.removeattributenode.php',
            'desc' => 'Removes attribute',
        ),
    'DOMElement::removeAttributeNS' =>
        array (
            'file' => 'domelement.removeattributens.php',
            'desc' => 'Removes attribute',
        ),
    'DOMElement::setAttribute' =>
        array (
            'file' => 'domelement.setattribute.php',
            'desc' => 'Adds new attribute',
        ),
    'DOMElement::setAttributeNode' =>
        array (
            'file' => 'domelement.setattributenode.php',
            'desc' => 'Adds new attribute node to element',
        ),
    'DOMElement::setAttributeNodeNS' =>
        array (
            'file' => 'domelement.setattributenodens.php',
            'desc' => 'Adds new attribute node to element',
        ),
    'DOMElement::setAttributeNS' =>
        array (
            'file' => 'domelement.setattributens.php',
            'desc' => 'Adds new attribute',
        ),
    'DOMElement::setIdAttribute' =>
        array (
            'file' => 'domelement.setidattribute.php',
            'desc' => 'Declares the attribute specified by name to be of type ID',
        ),
    'DOMElement::setIdAttributeNode' =>
        array (
            'file' => 'domelement.setidattributenode.php',
            'desc' => 'Declares the attribute specified by node to be of type ID',
        ),
    'DOMElement::setIdAttributeNS' =>
        array (
            'file' => 'domelement.setidattributens.php',
            'desc' => 'Declares the attribute specified by local name and namespace URI to be of type ID',
        ),
    'DOMElement::__construct' =>
        array (
            'file' => 'domelement.construct.php',
            'desc' => 'Creates a new DOMElement object',
        ),
    'DOMEntityReference::__construct' =>
        array (
            'file' => 'domentityreference.construct.php',
            'desc' => 'Creates a new DOMEntityReference object',
        ),
    'DOMImplementation::createDocument' =>
        array (
            'file' => 'domimplementation.createdocument.php',
            'desc' => 'Creates a DOMDocument object of the specified type with its document element',
        ),
    'DOMImplementation::createDocumentType' =>
        array (
            'file' => 'domimplementation.createdocumenttype.php',
            'desc' => 'Creates an empty DOMDocumentType object',
        ),
    'DOMImplementation::hasFeature' =>
        array (
            'file' => 'domimplementation.hasfeature.php',
            'desc' => 'Test if the DOM implementation implements a specific feature',
        ),
    'DOMImplementation::__construct' =>
        array (
            'file' => 'domimplementation.construct.php',
            'desc' => 'Creates a new DOMImplementation object',
        ),
    'DOMNamedNodeMap::getNamedItem' =>
        array (
            'file' => 'domnamednodemap.getnameditem.php',
            'desc' => 'Retrieves a node specified by name',
        ),
    'DOMNamedNodeMap::getNamedItemNS' =>
        array (
            'file' => 'domnamednodemap.getnameditemns.php',
            'desc' => 'Retrieves a node specified by local name and namespace URI',
        ),
    'DOMNamedNodeMap::item' =>
        array (
            'file' => 'domnamednodemap.item.php',
            'desc' => 'Retrieves a node specified by index',
        ),
    'DOMNode::appendChild' =>
        array (
            'file' => 'domnode.appendchild.php',
            'desc' => 'Adds new child at the end of the children',
        ),
    'DOMNode::C14N' =>
        array (
            'file' => 'domnode.c14n.php',
            'desc' => 'Canonicalize nodes to a string',
        ),
    'DOMNode::C14NFile' =>
        array (
            'file' => 'domnode.c14nfile.php',
            'desc' => 'Canonicalize nodes to a file',
        ),
    'DOMNode::cloneNode' =>
        array (
            'file' => 'domnode.clonenode.php',
            'desc' => 'Clones a node',
        ),
    'DOMNode::getLineNo' =>
        array (
            'file' => 'domnode.getlineno.php',
            'desc' => 'Get line number for a node',
        ),
    'DOMNode::getNodePath' =>
        array (
            'file' => 'domnode.getnodepath.php',
            'desc' => 'Get an XPath for a node',
        ),
    'DOMNode::hasAttributes' =>
        array (
            'file' => 'domnode.hasattributes.php',
            'desc' => 'Checks if node has attributes',
        ),
    'DOMNode::hasChildNodes' =>
        array (
            'file' => 'domnode.haschildnodes.php',
            'desc' => 'Checks if node has children',
        ),
    'DOMNode::insertBefore' =>
        array (
            'file' => 'domnode.insertbefore.php',
            'desc' => 'Adds a new child before a reference node',
        ),
    'DOMNode::isDefaultNamespace' =>
        array (
            'file' => 'domnode.isdefaultnamespace.php',
            'desc' => 'Checks if the specified namespaceURI is the default namespace or not',
        ),
    'DOMNode::isSameNode' =>
        array (
            'file' => 'domnode.issamenode.php',
            'desc' => 'Indicates if two nodes are the same node',
        ),
    'DOMNode::isSupported' =>
        array (
            'file' => 'domnode.issupported.php',
            'desc' => 'Checks if feature is supported for specified version',
        ),
    'DOMNode::lookupNamespaceURI' =>
        array (
            'file' => 'domnode.lookupnamespaceuri.php',
            'desc' => 'Gets the namespace URI of the node based on the prefix',
        ),
    'DOMNode::lookupPrefix' =>
        array (
            'file' => 'domnode.lookupprefix.php',
            'desc' => 'Gets the namespace prefix of the node based on the namespace URI',
        ),
    'DOMNode::normalize' =>
        array (
            'file' => 'domnode.normalize.php',
            'desc' => 'Normalizes the node',
        ),
    'DOMNode::removeChild' =>
        array (
            'file' => 'domnode.removechild.php',
            'desc' => 'Removes child from list of children',
        ),
    'DOMNode::replaceChild' =>
        array (
            'file' => 'domnode.replacechild.php',
            'desc' => 'Replaces a child',
        ),
    'DOMNodelist::item' =>
        array (
            'file' => 'domnodelist.item.php',
            'desc' => 'Retrieves a node specified by index',
        ),
    'DOMProcessingInstruction::__construct' =>
        array (
            'file' => 'domprocessinginstruction.construct.php',
            'desc' => 'Creates a new DOMProcessingInstruction object',
        ),
    'DOMText::isWhitespaceInElementContent' =>
        array (
            'file' => 'domtext.iswhitespaceinelementcontent.php',
            'desc' => 'Indicates whether this text node contains whitespace',
        ),
    'DOMText::splitText' =>
        array (
            'file' => 'domtext.splittext.php',
            'desc' => 'Breaks this node into two nodes at the specified offset',
        ),
    'DOMText::__construct' =>
        array (
            'file' => 'domtext.construct.php',
            'desc' => 'Creates a new DOMText object',
        ),
    'DOMXPath::evaluate' =>
        array (
            'file' => 'domxpath.evaluate.php',
            'desc' => 'Evaluates the given XPath expression and returns a typed result if possible',
        ),
    'DOMXPath::query' =>
        array (
            'file' => 'domxpath.query.php',
            'desc' => 'Evaluates the given XPath expression',
        ),
    'DOMXPath::registerNamespace' =>
        array (
            'file' => 'domxpath.registernamespace.php',
            'desc' => 'Registers the namespace with the DOMXPath object',
        ),
    'DOMXPath::registerPhpFunctions' =>
        array (
            'file' => 'domxpath.registerphpfunctions.php',
            'desc' => 'Register PHP functions as XPath functions',
        ),
    'DOMXPath::__construct' =>
        array (
            'file' => 'domxpath.construct.php',
            'desc' => 'Creates a new DOMXPath object',
        ),
    'dom_import_simplexml' =>
        array (
            'file' => 'function.dom-import-simplexml.php',
            'desc' => 'Gets a DOMElement object from a
   SimpleXMLElement object',
        ),
    'doubleval' =>
        array (
            'file' => 'function.doubleval.php',
            'desc' => 'Alias of floatval',
        ),
    'each' =>
        array (
            'file' => 'function.each.php',
            'desc' => 'Return the current key and value pair from an array and advance the array cursor',
        ),
    'easter_date' =>
        array (
            'file' => 'function.easter-date.php',
            'desc' => 'Get Unix timestamp for midnight on Easter of a given year',
        ),
    'easter_days' =>
        array (
            'file' => 'function.easter-days.php',
            'desc' => 'Get number of days after March 21 on which Easter falls for a given year',
        ),
    'echo' =>
        array (
            'file' => 'function.echo.php',
            'desc' => 'Output one or more strings',
        ),
    'eio_busy' =>
        array (
            'file' => 'function.eio-busy.php',
            'desc' => 'Artificially increase load. Could be useful in tests,
  benchmarking.',
        ),
    'eio_cancel' =>
        array (
            'file' => 'function.eio-cancel.php',
            'desc' => 'Cancels a request',
        ),
    'eio_chmod' =>
        array (
            'file' => 'function.eio-chmod.php',
            'desc' => 'Change file/direcrory permissions.',
        ),
    'eio_chown' =>
        array (
            'file' => 'function.eio-chown.php',
            'desc' => 'Change file/direcrory permissions.',
        ),
    'eio_close' =>
        array (
            'file' => 'function.eio-close.php',
            'desc' => 'Close file',
        ),
    'eio_custom' =>
        array (
            'file' => 'function.eio-custom.php',
            'desc' => 'Execute custom request like any other eio_* call.',
        ),
    'eio_dup2' =>
        array (
            'file' => 'function.eio-dup2.php',
            'desc' => 'Duplicate a file descriptor',
        ),
    'eio_event_loop' =>
        array (
            'file' => 'function.eio-event-loop.php',
            'desc' => 'Polls libeio until all requests proceeded',
        ),
    'eio_fallocate' =>
        array (
            'file' => 'function.eio-fallocate.php',
            'desc' => 'Allows the caller to directly manipulate the allocated disk
  space for a file',
        ),
    'eio_fchmod' =>
        array (
            'file' => 'function.eio-fchmod.php',
            'desc' => 'Change file permissions.',
        ),
    'eio_fchown' =>
        array (
            'file' => 'function.eio-fchown.php',
            'desc' => 'Change file ownership',
        ),
    'eio_fdatasync' =>
        array (
            'file' => 'function.eio-fdatasync.php',
            'desc' => 'Synchronize a file\'s in-core state with storage device.',
        ),
    'eio_fstat' =>
        array (
            'file' => 'function.eio-fstat.php',
            'desc' => 'Get file status',
        ),
    'eio_fstatvfs' =>
        array (
            'file' => 'function.eio-fstatvfs.php',
            'desc' => 'Get file system statistics',
        ),
    'eio_fsync' =>
        array (
            'file' => 'function.eio-fsync.php',
            'desc' => 'Synchronize a file\'s in-core state with storage device',
        ),
    'eio_ftruncate' =>
        array (
            'file' => 'function.eio-ftruncate.php',
            'desc' => 'Truncate a file',
        ),
    'eio_futime' =>
        array (
            'file' => 'function.eio-futime.php',
            'desc' => 'Change file last access and modification times',
        ),
    'eio_get_event_stream' =>
        array (
            'file' => 'function.eio-get-event-stream.php',
            'desc' => 'Get stream representing a variable used in internal communications with libeio.',
        ),
    'eio_get_last_error' =>
        array (
            'file' => 'function.eio-get-last-error.php',
            'desc' => 'Returns string describing the last error associated with a request resource',
        ),
    'eio_grp' =>
        array (
            'file' => 'function.eio-grp.php',
            'desc' => 'Createsa request group.',
        ),
    'eio_grp_add' =>
        array (
            'file' => 'function.eio-grp-add.php',
            'desc' => 'Adds a request to the request group.',
        ),
    'eio_grp_cancel' =>
        array (
            'file' => 'function.eio-grp-cancel.php',
            'desc' => 'Cancels a request group',
        ),
    'eio_grp_limit' =>
        array (
            'file' => 'function.eio-grp-limit.php',
            'desc' => 'Set group limit',
        ),
    'eio_init' =>
        array (
            'file' => 'function.eio-init.php',
            'desc' => '(Re-)initialize Eio',
        ),
    'eio_link' =>
        array (
            'file' => 'function.eio-link.php',
            'desc' => 'Create a hardlink for file',
        ),
    'eio_lstat' =>
        array (
            'file' => 'function.eio-lstat.php',
            'desc' => 'Get file status',
        ),
    'eio_mkdir' =>
        array (
            'file' => 'function.eio-mkdir.php',
            'desc' => 'Create directory',
        ),
    'eio_mknod' =>
        array (
            'file' => 'function.eio-mknod.php',
            'desc' => 'Create a special or ordinary file.',
        ),
    'eio_nop' =>
        array (
            'file' => 'function.eio-nop.php',
            'desc' => 'Does nothing, except go through the whole request cycle.',
        ),
    'eio_npending' =>
        array (
            'file' => 'function.eio-npending.php',
            'desc' => 'Returns number of finished, but unhandled requests',
        ),
    'eio_nready' =>
        array (
            'file' => 'function.eio-nready.php',
            'desc' => 'Returns number of not-yet handled requests',
        ),
    'eio_nreqs' =>
        array (
            'file' => 'function.eio-nreqs.php',
            'desc' => 'Returns number of requests to be processed',
        ),
    'eio_nthreads' =>
        array (
            'file' => 'function.eio-nthreads.php',
            'desc' => 'Returns number of threads currently in use',
        ),
    'eio_open' =>
        array (
            'file' => 'function.eio-open.php',
            'desc' => 'Opens a file',
        ),
    'eio_poll' =>
        array (
            'file' => 'function.eio-poll.php',
            'desc' => 'Can be to be called whenever there are pending requests that need finishing.',
        ),
    'eio_read' =>
        array (
            'file' => 'function.eio-read.php',
            'desc' => 'Read from a file descriptor at given offset.',
        ),
    'eio_readahead' =>
        array (
            'file' => 'function.eio-readahead.php',
            'desc' => 'Perform file readahead into page cache',
        ),
    'eio_readdir' =>
        array (
            'file' => 'function.eio-readdir.php',
            'desc' => 'Reads through a whole directory',
        ),
    'eio_readlink' =>
        array (
            'file' => 'function.eio-readlink.php',
            'desc' => 'Read value of a symbolic link.',
        ),
    'eio_realpath' =>
        array (
            'file' => 'function.eio-realpath.php',
            'desc' => 'Get the canonicalized absolute pathname.',
        ),
    'eio_rename' =>
        array (
            'file' => 'function.eio-rename.php',
            'desc' => 'Change the name or location of a file.',
        ),
    'eio_rmdir' =>
        array (
            'file' => 'function.eio-rmdir.php',
            'desc' => 'Remove a directory',
        ),
    'eio_seek' =>
        array (
            'file' => 'function.eio-seek.php',
            'desc' => 'Repositions the offset of the open file associated with the fd argument to the argument offset according to the directive whence',
        ),
    'eio_sendfile' =>
        array (
            'file' => 'function.eio-sendfile.php',
            'desc' => 'Transfer data between file descriptors',
        ),
    'eio_set_max_idle' =>
        array (
            'file' => 'function.eio-set-max-idle.php',
            'desc' => 'Set maximum number of idle threads.',
        ),
    'eio_set_max_parallel' =>
        array (
            'file' => 'function.eio-set-max-parallel.php',
            'desc' => 'Set maximum parallel threads',
        ),
    'eio_set_max_poll_reqs' =>
        array (
            'file' => 'function.eio-set-max-poll-reqs.php',
            'desc' => 'Set maximum number of requests processed in a poll.',
        ),
    'eio_set_max_poll_time' =>
        array (
            'file' => 'function.eio-set-max-poll-time.php',
            'desc' => 'Set maximum poll time',
        ),
    'eio_set_min_parallel' =>
        array (
            'file' => 'function.eio-set-min-parallel.php',
            'desc' => 'Set minimum parallel thread number',
        ),
    'eio_stat' =>
        array (
            'file' => 'function.eio-stat.php',
            'desc' => 'Get file status',
        ),
    'eio_statvfs' =>
        array (
            'file' => 'function.eio-statvfs.php',
            'desc' => 'Get file system statistics',
        ),
    'eio_symlink' =>
        array (
            'file' => 'function.eio-symlink.php',
            'desc' => 'Create a symbolic link',
        ),
    'eio_sync' =>
        array (
            'file' => 'function.eio-sync.php',
            'desc' => 'Commit buffer cache to disk',
        ),
    'eio_syncfs' =>
        array (
            'file' => 'function.eio-syncfs.php',
            'desc' => 'Calls Linux\' syncfs syscall, if available',
        ),
    'eio_sync_file_range' =>
        array (
            'file' => 'function.eio-sync-file-range.php',
            'desc' => 'Sync a file segment with disk',
        ),
    'eio_truncate' =>
        array (
            'file' => 'function.eio-truncate.php',
            'desc' => 'Truncate a file',
        ),
    'eio_unlink' =>
        array (
            'file' => 'function.eio-unlink.php',
            'desc' => 'Delete a name and possibly the file it refers to',
        ),
    'eio_utime' =>
        array (
            'file' => 'function.eio-utime.php',
            'desc' => 'Change file last access and modification times.',
        ),
    'eio_write' =>
        array (
            'file' => 'function.eio-write.php',
            'desc' => 'Write to file',
        ),
    'empty' =>
        array (
            'file' => 'function.empty.php',
            'desc' => 'Determine whether a variable is empty',
        ),
    'EmptyIterator::current' =>
        array (
            'file' => 'emptyiterator.current.php',
            'desc' => 'The current() method',
        ),
    'EmptyIterator::key' =>
        array (
            'file' => 'emptyiterator.key.php',
            'desc' => 'The key() method',
        ),
    'EmptyIterator::next' =>
        array (
            'file' => 'emptyiterator.next.php',
            'desc' => 'The next() method',
        ),
    'EmptyIterator::rewind' =>
        array (
            'file' => 'emptyiterator.rewind.php',
            'desc' => 'The rewind() method',
        ),
    'EmptyIterator::valid' =>
        array (
            'file' => 'emptyiterator.valid.php',
            'desc' => 'The valid() method',
        ),
    'enchant_broker_describe' =>
        array (
            'file' => 'function.enchant-broker-describe.php',
            'desc' => 'Enumerates the Enchant providers',
        ),
    'enchant_broker_dict_exists' =>
        array (
            'file' => 'function.enchant-broker-dict-exists.php',
            'desc' => 'Whether a dictionary exists or not. Using non-empty tag',
        ),
    'enchant_broker_free' =>
        array (
            'file' => 'function.enchant-broker-free.php',
            'desc' => 'Free the broker resource and its dictionnaries',
        ),
    'enchant_broker_free_dict' =>
        array (
            'file' => 'function.enchant-broker-free-dict.php',
            'desc' => 'Free a dictionary resource',
        ),
    'enchant_broker_get_error' =>
        array (
            'file' => 'function.enchant-broker-get-error.php',
            'desc' => 'Returns the last error of the broker',
        ),
    'enchant_broker_init' =>
        array (
            'file' => 'function.enchant-broker-init.php',
            'desc' => 'create a new broker object capable of requesting',
        ),
    'enchant_broker_list_dicts' =>
        array (
            'file' => 'function.enchant-broker-list-dicts.php',
            'desc' => 'Returns a list of available dictionaries',
        ),
    'enchant_broker_request_dict' =>
        array (
            'file' => 'function.enchant-broker-request-dict.php',
            'desc' => 'create a new dictionary using a tag',
        ),
    'enchant_broker_request_pwl_dict' =>
        array (
            'file' => 'function.enchant-broker-request-pwl-dict.php',
            'desc' => 'creates a dictionary using a PWL file',
        ),
    'enchant_broker_set_ordering' =>
        array (
            'file' => 'function.enchant-broker-set-ordering.php',
            'desc' => 'Declares a preference of dictionaries to use for the language',
        ),
    'enchant_dict_add_to_personal' =>
        array (
            'file' => 'function.enchant-dict-add-to-personal.php',
            'desc' => 'add a word to personal word list',
        ),
    'enchant_dict_add_to_session' =>
        array (
            'file' => 'function.enchant-dict-add-to-session.php',
            'desc' => 'add \'word\' to this spell-checking session',
        ),
    'enchant_dict_check' =>
        array (
            'file' => 'function.enchant-dict-check.php',
            'desc' => 'Check whether a word is correctly spelled or not',
        ),
    'enchant_dict_describe' =>
        array (
            'file' => 'function.enchant-dict-describe.php',
            'desc' => 'Describes an individual dictionary',
        ),
    'enchant_dict_get_error' =>
        array (
            'file' => 'function.enchant-dict-get-error.php',
            'desc' => 'Returns the last error of the current spelling-session',
        ),
    'enchant_dict_is_in_session' =>
        array (
            'file' => 'function.enchant-dict-is-in-session.php',
            'desc' => 'whether or not \'word\' exists in this spelling-session',
        ),
    'enchant_dict_quick_check' =>
        array (
            'file' => 'function.enchant-dict-quick-check.php',
            'desc' => 'Check the word is correctly spelled and provide suggestions',
        ),
    'enchant_dict_store_replacement' =>
        array (
            'file' => 'function.enchant-dict-store-replacement.php',
            'desc' => 'Add a correction for a word',
        ),
    'enchant_dict_suggest' =>
        array (
            'file' => 'function.enchant-dict-suggest.php',
            'desc' => 'Will return a list of values if any of those pre-conditions are not met',
        ),
    'end' =>
        array (
            'file' => 'function.end.php',
            'desc' => 'Set the internal pointer of an array to its last element',
        ),
    'ereg' =>
        array (
            'file' => 'function.ereg.php',
            'desc' => 'Regular expression match',
        ),
    'eregi' =>
        array (
            'file' => 'function.eregi.php',
            'desc' => 'Case insensitive regular expression match',
        ),
    'eregi_replace' =>
        array (
            'file' => 'function.eregi-replace.php',
            'desc' => 'Replace regular expression case insensitive',
        ),
    'ereg_replace' =>
        array (
            'file' => 'function.ereg-replace.php',
            'desc' => 'Replace regular expression',
        ),
    'ErrorException::getSeverity' =>
        array (
            'file' => 'errorexception.getseverity.php',
            'desc' => 'Gets the exception severity',
        ),
    'ErrorException::__construct' =>
        array (
            'file' => 'errorexception.construct.php',
            'desc' => 'Constructs the exception',
        ),
    'error_get_last' =>
        array (
            'file' => 'function.error-get-last.php',
            'desc' => 'Get the last occurred error',
        ),
    'error_log' =>
        array (
            'file' => 'function.error-log.php',
            'desc' => 'Send an error message to the defined error handling routines',
        ),
    'error_reporting' =>
        array (
            'file' => 'function.error-reporting.php',
            'desc' => 'Sets which PHP errors are reported',
        ),
    'escapeshellarg' =>
        array (
            'file' => 'function.escapeshellarg.php',
            'desc' => 'Escape a string to be used as a shell argument',
        ),
    'escapeshellcmd' =>
        array (
            'file' => 'function.escapeshellcmd.php',
            'desc' => 'Escape shell metacharacters',
        ),
    'Ev::backend' =>
        array (
            'file' => 'ev.backend.php',
            'desc' => 'Returns an integer describing the backend used by libev.',
        ),
    'Ev::depth' =>
        array (
            'file' => 'ev.depth.php',
            'desc' => 'Returns recursion depth',
        ),
    'Ev::embeddableBackends' =>
        array (
            'file' => 'ev.embeddablebackends.php',
            'desc' => 'Returns the set of backends that are embeddable in other event loops.',
        ),
    'Ev::feedSignal' =>
        array (
            'file' => 'ev.feedsignal.php',
            'desc' => 'Feed a signal event info Ev',
        ),
    'Ev::feedSignalEvent' =>
        array (
            'file' => 'ev.feedsignalevent.php',
            'desc' => 'Feed signal event into the default loop',
        ),
    'Ev::iteration' =>
        array (
            'file' => 'ev.iteration.php',
            'desc' => 'Return the number of times the default event loop has polled for new
  events.',
        ),
    'Ev::now' =>
        array (
            'file' => 'ev.now.php',
            'desc' => 'Returns the time when the last iteration of the default event
  loop has started.',
        ),
    'Ev::nowUpdate' =>
        array (
            'file' => 'ev.nowupdate.php',
            'desc' => 'Establishes the current time by querying the kernel, updating the time
    returned by Ev::now in the progress.',
        ),
    'Ev::recommendedBackends' =>
        array (
            'file' => 'ev.recommendedbackends.php',
            'desc' => 'Returns a bit mask of recommended backends for current
  platform.',
        ),
    'Ev::resume' =>
        array (
            'file' => 'ev.resume.php',
            'desc' => 'Resume previously suspended default event loop',
        ),
    'Ev::run' =>
        array (
            'file' => 'ev.run.php',
            'desc' => 'Begin checking for events and calling callbacks for the default
  loop',
        ),
    'Ev::sleep' =>
        array (
            'file' => 'ev.sleep.php',
            'desc' => 'Block the process for the given number of seconds.',
        ),
    'Ev::stop' =>
        array (
            'file' => 'ev.stop.php',
            'desc' => 'Stops the default event loop',
        ),
    'Ev::supportedBackends' =>
        array (
            'file' => 'ev.supportedbackends.php',
            'desc' => 'Returns the set of backends supported by current libev
  configuration.',
        ),
    'Ev::suspend' =>
        array (
            'file' => 'ev.suspend.php',
            'desc' => 'Suspend the default event loop',
        ),
    'Ev::time' =>
        array (
            'file' => 'ev.time.php',
            'desc' => 'Returns the current time in fractional seconds since the epoch.',
        ),
    'Ev::verify' =>
        array (
            'file' => 'ev.verify.php',
            'desc' => 'Performs internal consistency checks(for debugging)',
        ),
    'eval' =>
        array (
            'file' => 'function.eval.php',
            'desc' => 'Evaluate a string as PHP code',
        ),
    'EvCheck::createStopped' =>
        array (
            'file' => 'evcheck.createstopped.php',
            'desc' => 'Create instance of a stopped EvCheck watcher',
        ),
    'EvCheck::__construct' =>
        array (
            'file' => 'evcheck.construct.php',
            'desc' => 'Constructs the EvCheck watcher object',
        ),
    'EvChild::createStopped' =>
        array (
            'file' => 'evchild.createstopped.php',
            'desc' => 'Create instance of a stopped EvCheck watcher',
        ),
    'EvChild::set' =>
        array (
            'file' => 'evchild.set.php',
            'desc' => 'Configures the watcher',
        ),
    'EvChild::__construct' =>
        array (
            'file' => 'evchild.construct.php',
            'desc' => 'Constructs the EvChild watcher object',
        ),
    'EvEmbed::createStopped' =>
        array (
            'file' => 'evembed.createstopped.php',
            'desc' => 'Create stopped EvEmbed watcher object',
        ),
    'EvEmbed::set' =>
        array (
            'file' => 'evembed.set.php',
            'desc' => 'Configures the watcher',
        ),
    'EvEmbed::sweep' =>
        array (
            'file' => 'evembed.sweep.php',
            'desc' => 'Make a single, non-blocking sweep over the embedded loop.',
        ),
    'EvEmbed::__construct' =>
        array (
            'file' => 'evembed.construct.php',
            'desc' => 'Constructs the EvEmbed object',
        ),
    'Event::add' =>
        array (
            'file' => 'event.add.php',
            'desc' => 'Makes event pending',
        ),
    'Event::addSignal' =>
        array (
            'file' => 'event.addsignal.php',
            'desc' => 'Makes signal event pending',
        ),
    'Event::addTimer' =>
        array (
            'file' => 'event.addtimer.php',
            'desc' => 'Makes timer event pending',
        ),
    'Event::del' =>
        array (
            'file' => 'event.del.php',
            'desc' => 'Makes event non-pending',
        ),
    'Event::delSignal' =>
        array (
            'file' => 'event.delsignal.php',
            'desc' => 'Makes signal event non-pending',
        ),
    'Event::delTimer' =>
        array (
            'file' => 'event.deltimer.php',
            'desc' => 'Makes timer event non-pending',
        ),
    'Event::free' =>
        array (
            'file' => 'event.free.php',
            'desc' => 'Make event non-pending and free resources allocated for this
  event.',
        ),
    'Event::getSupportedMethods' =>
        array (
            'file' => 'event.getsupportedmethods.php',
            'desc' => 'Returns array with of the names of the methods supported in this version of Libevent',
        ),
    'Event::pending' =>
        array (
            'file' => 'event.pending.php',
            'desc' => 'Detects whether event is pending or scheduled',
        ),
    'Event::set' =>
        array (
            'file' => 'event.set.php',
            'desc' => 'Re-configures event',
        ),
    'Event::setPriority' =>
        array (
            'file' => 'event.setpriority.php',
            'desc' => 'Set event priority',
        ),
    'Event::setTimer' =>
        array (
            'file' => 'event.settimer.php',
            'desc' => 'Re-configures timer event',
        ),
    'Event::signal' =>
        array (
            'file' => 'event.signal.php',
            'desc' => 'Constructs signal event object',
        ),
    'Event::timer' =>
        array (
            'file' => 'event.timer.php',
            'desc' => 'Constructs timer event object',
        ),
    'Event::__construct' =>
        array (
            'file' => 'event.construct.php',
            'desc' => 'Constructs Event object',
        ),
    'EventBase::dispatch' =>
        array (
            'file' => 'eventbase.dispatch.php',
            'desc' => 'Dispatch pending events',
        ),
    'EventBase::exit' =>
        array (
            'file' => 'eventbase.exit.php',
            'desc' => 'Stop dispatching events',
        ),
    'EventBase::free' =>
        array (
            'file' => 'eventbase.free.php',
            'desc' => 'Free resources allocated for this event base',
        ),
    'EventBase::getFeatures' =>
        array (
            'file' => 'eventbase.getfeatures.php',
            'desc' => 'Returns bitmask of features supported',
        ),
    'EventBase::getMethod' =>
        array (
            'file' => 'eventbase.getmethod.php',
            'desc' => 'Returns event method in use',
        ),
    'EventBase::getTimeOfDayCached' =>
        array (
            'file' => 'eventbase.gettimeofdaycached.php',
            'desc' => 'Returns the current event base time',
        ),
    'EventBase::gotExit' =>
        array (
            'file' => 'eventbase.gotexit.php',
            'desc' => 'Checks if the event loop was told to exit',
        ),
    'EventBase::gotStop' =>
        array (
            'file' => 'eventbase.gotstop.php',
            'desc' => 'Checks if the event loop was told to exit',
        ),
    'EventBase::loop' =>
        array (
            'file' => 'eventbase.loop.php',
            'desc' => 'Dispatch pending events',
        ),
    'EventBase::priorityInit' =>
        array (
            'file' => 'eventbase.priorityinit.php',
            'desc' => 'Sets number of priorities per event base',
        ),
    'EventBase::reInit' =>
        array (
            'file' => 'eventbase.reinit.php',
            'desc' => 'Re-initialize event base(after a fork).',
        ),
    'EventBase::stop' =>
        array (
            'file' => 'eventbase.stop.php',
            'desc' => 'Tells event_base to stop dispatching events',
        ),
    'EventBase::__construct' =>
        array (
            'file' => 'eventbase.construct.php',
            'desc' => 'Constructs EventBase object',
        ),
    'EventBuffer::add' =>
        array (
            'file' => 'eventbuffer.add.php',
            'desc' => 'Append data to the end of an event buffer',
        ),
    'EventBuffer::addBuffer' =>
        array (
            'file' => 'eventbuffer.addbuffer.php',
            'desc' => 'Move all data from a buffer provided to the current instance of EventBuffer',
        ),
    'EventBuffer::appendFrom' =>
        array (
            'file' => 'eventbuffer.appendfrom.php',
            'desc' => 'Moves the specified number of bytes from a source buffer to the
  end of the current buffer',
        ),
    'EventBuffer::copyout' =>
        array (
            'file' => 'eventbuffer.copyout.php',
            'desc' => 'Copies out specified number of bytes from the front of the buffer',
        ),
    'EventBuffer::drain' =>
        array (
            'file' => 'eventbuffer.drain.php',
            'desc' => 'Removes specified number of bytes from the front of the buffer
  without copying it anywhere',
        ),
    'EventBuffer::enableLocking' =>
        array (
            'file' => 'eventbuffer.enablelocking.php',
        ),
    'EventBuffer::expand' =>
        array (
            'file' => 'eventbuffer.expand.php',
            'desc' => 'Reserves space in buffer',
        ),
    'EventBuffer::freeze' =>
        array (
            'file' => 'eventbuffer.freeze.php',
            'desc' => 'Prevent calls that modify an event buffer from succeeding',
        ),
    'EventBuffer::lock' =>
        array (
            'file' => 'eventbuffer.lock.php',
            'desc' => 'Acquires a lock on buffer',
        ),
    'EventBuffer::prepend' =>
        array (
            'file' => 'eventbuffer.prepend.php',
            'desc' => 'Prepend data to the front of the buffer',
        ),
    'EventBuffer::prependBuffer' =>
        array (
            'file' => 'eventbuffer.prependbuffer.php',
            'desc' => 'Moves all data from source buffer to the front of current buffer',
        ),
    'EventBuffer::pullup' =>
        array (
            'file' => 'eventbuffer.pullup.php',
            'desc' => 'Linearizes data within buffer
  and returns it\'s contents as a string',
        ),
    'EventBuffer::read' =>
        array (
            'file' => 'eventbuffer.read.php',
            'desc' => 'Read data from an evbuffer and drain the bytes read',
        ),
    'EventBuffer::readFrom' =>
        array (
            'file' => 'eventbuffer.readfrom.php',
            'desc' => 'Read data from a file onto the end of the buffer',
        ),
    'EventBuffer::readLine' =>
        array (
            'file' => 'eventbuffer.readline.php',
            'desc' => 'Extracts a line from the front of the buffer',
        ),
    'EventBuffer::search' =>
        array (
            'file' => 'eventbuffer.search.php',
            'desc' => 'Scans the buffer for an occurrence of a string',
        ),
    'EventBuffer::searchEol' =>
        array (
            'file' => 'eventbuffer.searcheol.php',
            'desc' => 'Scans the buffer for an occurrence of an end of line',
        ),
    'EventBuffer::substr' =>
        array (
            'file' => 'eventbuffer.substr.php',
            'desc' => 'Substracts a portion of the buffer data',
        ),
    'EventBuffer::unfreeze' =>
        array (
            'file' => 'eventbuffer.unfreeze.php',
            'desc' => 'Re-enable calls that modify an event buffer',
        ),
    'EventBuffer::unlock' =>
        array (
            'file' => 'eventbuffer.unlock.php',
            'desc' => 'Releases lock acquired by EventBuffer::lock',
        ),
    'EventBuffer::write' =>
        array (
            'file' => 'eventbuffer.write.php',
            'desc' => 'Write contents of the buffer to a file or socket',
        ),
    'EventBuffer::__construct' =>
        array (
            'file' => 'eventbuffer.construct.php',
            'desc' => 'Constructs EventBuffer object',
        ),
    'EventBufferEvent::close' =>
        array (
            'file' => 'eventbufferevent.close.php',
            'desc' => 'Closes file descriptor associated with the current buffer event',
        ),
    'EventBufferEvent::connect' =>
        array (
            'file' => 'eventbufferevent.connect.php',
            'desc' => 'Connect buffer event\'s file descriptor to given address or
  UNIX socket',
        ),
    'EventBufferEvent::connectHost' =>
        array (
            'file' => 'eventbufferevent.connecthost.php',
            'desc' => 'Connects to a hostname with optionally asyncronous DNS resolving',
        ),
    'EventBufferEvent::createPair' =>
        array (
            'file' => 'eventbufferevent.createpair.php',
            'desc' => 'Creates two buffer events connected to each other',
        ),
    'EventBufferEvent::disable' =>
        array (
            'file' => 'eventbufferevent.disable.php',
            'desc' => 'Disable events read, write, or both on a buffer event.',
        ),
    'EventBufferEvent::enable' =>
        array (
            'file' => 'eventbufferevent.enable.php',
            'desc' => 'Enable events read, write, or both on a buffer event.',
        ),
    'EventBufferEvent::free' =>
        array (
            'file' => 'eventbufferevent.free.php',
            'desc' => 'Free a buffer event',
        ),
    'EventBufferEvent::getDnsErrorString' =>
        array (
            'file' => 'eventbufferevent.getdnserrorstring.php',
            'desc' => 'Returns string describing the last failed DNS lookup attempt',
        ),
    'EventBufferEvent::getEnabled' =>
        array (
            'file' => 'eventbufferevent.getenabled.php',
            'desc' => 'Returns bitmask of events currently enabled on the buffer event',
        ),
    'EventBufferEvent::getInput' =>
        array (
            'file' => 'eventbufferevent.getinput.php',
            'desc' => 'Returns underlying input buffer associated with current buffer
  event',
        ),
    'EventBufferEvent::getOutput' =>
        array (
            'file' => 'eventbufferevent.getoutput.php',
            'desc' => 'Returns underlying output buffer associated with current buffer
  event',
        ),
    'EventBufferEvent::read' =>
        array (
            'file' => 'eventbufferevent.read.php',
            'desc' => 'Read buffer\'s data',
        ),
    'EventBufferEvent::readBuffer' =>
        array (
            'file' => 'eventbufferevent.readbuffer.php',
            'desc' => 'Drains the entire contents of the input buffer and places them into buf',
        ),
    'EventBufferEvent::setCallbacks' =>
        array (
            'file' => 'eventbufferevent.setcallbacks.php',
            'desc' => 'Assigns read, write and event(status) callbacks',
        ),
    'EventBufferEvent::setPriority' =>
        array (
            'file' => 'eventbufferevent.setpriority.php',
            'desc' => 'Assign a priority to a bufferevent',
        ),
    'EventBufferEvent::setTimeouts' =>
        array (
            'file' => 'eventbufferevent.settimeouts.php',
            'desc' => 'Set the read and write timeout for a buffer event',
        ),
    'EventBufferEvent::setWatermark' =>
        array (
            'file' => 'eventbufferevent.setwatermark.php',
            'desc' => 'Adjusts read and/or write watermarks',
        ),
    'EventBufferEvent::sslError' =>
        array (
            'file' => 'eventbufferevent.sslerror.php',
            'desc' => 'Returns most recent OpenSSL error reported on the buffer event',
        ),
    'EventBufferEvent::sslFilter' =>
        array (
            'file' => 'eventbufferevent.sslfilter.php',
            'desc' => 'Create a new SSL buffer event to send its data over another buffer event',
        ),
    'EventBufferEvent::sslGetCipherInfo' =>
        array (
            'file' => 'eventbufferevent.sslgetcipherinfo.php',
            'desc' => 'Returns a textual description of the cipher.',
        ),
    'EventBufferEvent::sslGetCipherName' =>
        array (
            'file' => 'eventbufferevent.sslgetciphername.php',
            'desc' => 'Returns the current cipher name of the SSL connection.',
        ),
    'EventBufferEvent::sslGetCipherVersion' =>
        array (
            'file' => 'eventbufferevent.sslgetcipherversion.php',
            'desc' => 'Returns version of cipher used by current SSL connection.',
        ),
    'EventBufferEvent::sslGetProtocol' =>
        array (
            'file' => 'eventbufferevent.sslgetprotocol.php',
            'desc' => 'Returns the name of the protocol used for current SSL connection.',
        ),
    'EventBufferEvent::sslRenegotiate' =>
        array (
            'file' => 'eventbufferevent.sslrenegotiate.php',
            'desc' => 'Tells a bufferevent to begin SSL renegotiation.',
        ),
    'EventBufferEvent::sslSocket' =>
        array (
            'file' => 'eventbufferevent.sslsocket.php',
            'desc' => 'Creates a new SSL buffer event to send its data over an SSL on a socket',
        ),
    'EventBufferEvent::write' =>
        array (
            'file' => 'eventbufferevent.write.php',
            'desc' => 'Adds data to a buffer event\'s output buffer',
        ),
    'EventBufferEvent::writeBuffer' =>
        array (
            'file' => 'eventbufferevent.writebuffer.php',
            'desc' => 'Adds contents of the entire buffer to a buffer event\'s output
  buffer',
        ),
    'EventBufferEvent::__construct' =>
        array (
            'file' => 'eventbufferevent.construct.php',
            'desc' => 'Constructs EventBufferEvent object',
        ),
    'EventConfig::avoidMethod' =>
        array (
            'file' => 'eventconfig.avoidmethod.php',
            'desc' => 'Tells libevent to avoid specific event method',
        ),
    'EventConfig::requireFeatures' =>
        array (
            'file' => 'eventconfig.requirefeatures.php',
            'desc' => 'Enters a required event method feature that the application demands',
        ),
    'EventConfig::setMaxDispatchInterval' =>
        array (
            'file' => 'eventconfig.setmaxdispatchinterval.php',
            'desc' => 'Prevents priority inversion',
        ),
    'EventConfig::__construct' =>
        array (
            'file' => 'eventconfig.construct.php',
            'desc' => 'Constructs EventConfig object',
        ),
    'EventDnsBase::addNameserverIp' =>
        array (
            'file' => 'eventdnsbase.addnameserverip.php',
            'desc' => 'Adds a nameserver to the DNS base',
        ),
    'EventDnsBase::addSearch' =>
        array (
            'file' => 'eventdnsbase.addsearch.php',
            'desc' => 'Adds a domain to the list of search domains',
        ),
    'EventDnsBase::clearSearch' =>
        array (
            'file' => 'eventdnsbase.clearsearch.php',
            'desc' => 'Removes all current search suffixes',
        ),
    'EventDnsBase::countNameservers' =>
        array (
            'file' => 'eventdnsbase.countnameservers.php',
            'desc' => 'Gets the number of configured nameservers',
        ),
    'EventDnsBase::loadHosts' =>
        array (
            'file' => 'eventdnsbase.loadhosts.php',
            'desc' => 'Loads a hosts file (in the same format as /etc/hosts) from hosts file',
        ),
    'EventDnsBase::parseResolvConf' =>
        array (
            'file' => 'eventdnsbase.parseresolvconf.php',
            'desc' => 'Scans the resolv.conf-formatted file',
        ),
    'EventDnsBase::setOption' =>
        array (
            'file' => 'eventdnsbase.setoption.php',
            'desc' => 'Set the value of a configuration option',
        ),
    'EventDnsBase::setSearchNdots' =>
        array (
            'file' => 'eventdnsbase.setsearchndots.php',
            'desc' => 'Set the \'ndots\' parameter for searches',
        ),
    'EventDnsBase::__construct' =>
        array (
            'file' => 'eventdnsbase.construct.php',
            'desc' => 'Constructs EventDnsBase object',
        ),
    'EventHttp::accept' =>
        array (
            'file' => 'eventhttp.accept.php',
            'desc' => 'Makes an HTTP server accept connections on the specified socket stream or resource',
        ),
    'EventHttp::addServerAlias' =>
        array (
            'file' => 'eventhttp.addserveralias.php',
            'desc' => 'Adds a server alias to the HTTP server object',
        ),
    'EventHttp::bind' =>
        array (
            'file' => 'eventhttp.bind.php',
            'desc' => 'Binds an HTTP server on the specified address and port',
        ),
    'EventHttp::removeServerAlias' =>
        array (
            'file' => 'eventhttp.removeserveralias.php',
            'desc' => 'Removes server alias',
        ),
    'EventHttp::setAllowedMethods' =>
        array (
            'file' => 'eventhttp.setallowedmethods.php',
            'desc' => 'Sets the what HTTP methods are supported in requests accepted by this server, and passed to user callbacks',
        ),
    'EventHttp::setCallback' =>
        array (
            'file' => 'eventhttp.setcallback.php',
            'desc' => 'Sets a callback for specified URI',
        ),
    'EventHttp::setDefaultCallback' =>
        array (
            'file' => 'eventhttp.setdefaultcallback.php',
            'desc' => 'Sets default callback to handle requests that are not caught by specific callbacks',
        ),
    'EventHttp::setMaxBodySize' =>
        array (
            'file' => 'eventhttp.setmaxbodysize.php',
            'desc' => 'Sets maximum request body size',
        ),
    'EventHttp::setMaxHeadersSize' =>
        array (
            'file' => 'eventhttp.setmaxheaderssize.php',
            'desc' => 'Sets maximum HTTP header size',
        ),
    'EventHttp::setTimeout' =>
        array (
            'file' => 'eventhttp.settimeout.php',
            'desc' => 'Sets the timeout for an HTTP request',
        ),
    'EventHttp::__construct' =>
        array (
            'file' => 'eventhttp.construct.php',
            'desc' => 'Constructs EventHttp object(the HTTP server)',
        ),
    'EventHttpConnection::getBase' =>
        array (
            'file' => 'eventhttpconnection.getbase.php',
            'desc' => 'Returns event base associated with the connection',
        ),
    'EventHttpConnection::getPeer' =>
        array (
            'file' => 'eventhttpconnection.getpeer.php',
            'desc' => 'Gets the remote address and port associated with the connection',
        ),
    'EventHttpConnection::makeRequest' =>
        array (
            'file' => 'eventhttpconnection.makerequest.php',
            'desc' => 'Makes an HTTP request over the specified connection',
        ),
    'EventHttpConnection::setCloseCallback' =>
        array (
            'file' => 'eventhttpconnection.setclosecallback.php',
            'desc' => 'Set callback for connection close',
        ),
    'EventHttpConnection::setLocalAddress' =>
        array (
            'file' => 'eventhttpconnection.setlocaladdress.php',
            'desc' => 'Sets the IP address from which HTTP connections are made',
        ),
    'EventHttpConnection::setLocalPort' =>
        array (
            'file' => 'eventhttpconnection.setlocalport.php',
            'desc' => 'Sets the local port from which connections are made',
        ),
    'EventHttpConnection::setMaxBodySize' =>
        array (
            'file' => 'eventhttpconnection.setmaxbodysize.php',
            'desc' => 'Sets maximum body size for the connection',
        ),
    'EventHttpConnection::setMaxHeadersSize' =>
        array (
            'file' => 'eventhttpconnection.setmaxheaderssize.php',
            'desc' => 'Sets maximum header size',
        ),
    'EventHttpConnection::setRetries' =>
        array (
            'file' => 'eventhttpconnection.setretries.php',
            'desc' => 'Sets the retry limit for the connection',
        ),
    'EventHttpConnection::setTimeout' =>
        array (
            'file' => 'eventhttpconnection.settimeout.php',
            'desc' => 'Sets the timeout for the connection',
        ),
    'EventHttpConnection::__construct' =>
        array (
            'file' => 'eventhttpconnection.construct.php',
            'desc' => 'Constructs EventHttpConnection object',
        ),
    'EventHttpRequest::addHeader' =>
        array (
            'file' => 'eventhttprequest.addheader.php',
            'desc' => 'Adds an HTTP header to the headers of the request',
        ),
    'EventHttpRequest::cancel' =>
        array (
            'file' => 'eventhttprequest.cancel.php',
            'desc' => 'Cancels a pending HTTP request',
        ),
    'EventHttpRequest::clearHeaders' =>
        array (
            'file' => 'eventhttprequest.clearheaders.php',
            'desc' => 'Removes all output headers from the header list of the request',
        ),
    'EventHttpRequest::closeConnection' =>
        array (
            'file' => 'eventhttprequest.closeconnection.php',
            'desc' => 'Closes associated HTTP connection',
        ),
    'EventHttpRequest::findHeader' =>
        array (
            'file' => 'eventhttprequest.findheader.php',
            'desc' => 'Finds the value belonging a header',
        ),
    'EventHttpRequest::free' =>
        array (
            'file' => 'eventhttprequest.free.php',
            'desc' => 'Frees the object and removes associated events',
        ),
    'EventHttpRequest::getBufferEvent' =>
        array (
            'file' => 'eventhttprequest.getbufferevent.php',
            'desc' => 'Returns EventBufferEvent object',
        ),
    'EventHttpRequest::getCommand' =>
        array (
            'file' => 'eventhttprequest.getcommand.php',
            'desc' => 'Returns the request command(method)',
        ),
    'EventHttpRequest::getConnection' =>
        array (
            'file' => 'eventhttprequest.getconnection.php',
            'desc' => 'Returns EventHttpConnection object',
        ),
    'EventHttpRequest::getHost' =>
        array (
            'file' => 'eventhttprequest.gethost.php',
            'desc' => 'Returns the request host',
        ),
    'EventHttpRequest::getInputBuffer' =>
        array (
            'file' => 'eventhttprequest.getinputbuffer.php',
            'desc' => 'Returns the input buffer',
        ),
    'EventHttpRequest::getInputHeaders' =>
        array (
            'file' => 'eventhttprequest.getinputheaders.php',
            'desc' => 'Returns associative array of the input headers',
        ),
    'EventHttpRequest::getOutputBuffer' =>
        array (
            'file' => 'eventhttprequest.getoutputbuffer.php',
            'desc' => 'Returns the output buffer of the request',
        ),
    'EventHttpRequest::getOutputHeaders' =>
        array (
            'file' => 'eventhttprequest.getoutputheaders.php',
            'desc' => 'Returns associative array of the input headers',
        ),
    'EventHttpRequest::getResponseCode' =>
        array (
            'file' => 'eventhttprequest.getresponsecode.php',
            'desc' => 'Returns the response code',
        ),
    'EventHttpRequest::getUri' =>
        array (
            'file' => 'eventhttprequest.geturi.php',
            'desc' => 'Returns the request URI',
        ),
    'EventHttpRequest::removeHeader' =>
        array (
            'file' => 'eventhttprequest.removeheader.php',
            'desc' => 'Removes an HTTP header from the headers of the request',
        ),
    'EventHttpRequest::sendError' =>
        array (
            'file' => 'eventhttprequest.senderror.php',
            'desc' => 'Send an HTML error message to the client',
        ),
    'EventHttpRequest::sendReply' =>
        array (
            'file' => 'eventhttprequest.sendreply.php',
            'desc' => 'Send an HTML reply to the client',
        ),
    'EventHttpRequest::sendReplyChunk' =>
        array (
            'file' => 'eventhttprequest.sendreplychunk.php',
            'desc' => 'Send another data chunk as part of an ongoing chunked reply',
        ),
    'EventHttpRequest::sendReplyEnd' =>
        array (
            'file' => 'eventhttprequest.sendreplyend.php',
            'desc' => 'Complete a chunked reply, freeing the request as appropriate',
        ),
    'EventHttpRequest::sendReplyStart' =>
        array (
            'file' => 'eventhttprequest.sendreplystart.php',
            'desc' => 'Initiate a chunked reply',
        ),
    'EventHttpRequest::__construct' =>
        array (
            'file' => 'eventhttprequest.construct.php',
            'desc' => 'Constructs EventHttpRequest object',
        ),
    'EventListener::disable' =>
        array (
            'file' => 'eventlistener.disable.php',
            'desc' => 'Disables an event connect listener object',
        ),
    'EventListener::enable' =>
        array (
            'file' => 'eventlistener.enable.php',
            'desc' => 'Enables an event connect listener object',
        ),
    'EventListener::getBase' =>
        array (
            'file' => 'eventlistener.getbase.php',
            'desc' => 'Returns event base associated with the event listener',
        ),
    'EventListener::getSocketName' =>
        array (
            'file' => 'eventlistener.getsocketname.php',
            'desc' => 'Retreives the current address to which the
  listener\'s socket is bound.',
        ),
    'EventListener::setCallback' =>
        array (
            'file' => 'eventlistener.setcallback.php',
        ),
    'EventListener::setErrorCallback' =>
        array (
            'file' => 'eventlistener.seterrorcallback.php',
            'desc' => 'Set event listener\'s error callback',
        ),
    'EventListener::__construct' =>
        array (
            'file' => 'eventlistener.construct.php',
            'desc' => 'Creates new connection listener associated with an event base',
        ),
    'EventSslContext::__construct' =>
        array (
            'file' => 'eventsslcontext.construct.php',
            'desc' => 'Constructs an OpenSSL context for use with Event classes',
        ),
    'EventUtil::getLastSocketErrno' =>
        array (
            'file' => 'eventutil.getlastsocketerrno.php',
            'desc' => 'Returns the most recent socket error number',
        ),
    'EventUtil::getLastSocketError' =>
        array (
            'file' => 'eventutil.getlastsocketerror.php',
            'desc' => 'Returns the most recent socket error',
        ),
    'EventUtil::getSocketFd' =>
        array (
            'file' => 'eventutil.getsocketfd.php',
            'desc' => 'Returns numeric file descriptor of a socket, or stream',
        ),
    'EventUtil::getSocketName' =>
        array (
            'file' => 'eventutil.getsocketname.php',
            'desc' => 'Retreives the current address to which the
  socket is bound.',
        ),
    'EventUtil::setSocketOption' =>
        array (
            'file' => 'eventutil.setsocketoption.php',
            'desc' => 'Sets socket options',
        ),
    'EventUtil::sslRandPoll' =>
        array (
            'file' => 'eventutil.sslrandpoll.php',
            'desc' => 'Generates entropy by means of OpenSSL\'s RAND_poll()',
        ),
    'EventUtil::__construct' =>
        array (
            'file' => 'eventutil.construct.php',
            'desc' => 'The abstract constructor',
        ),
    'event_base_free' =>
        array (
            'file' => 'function.event-base-free.php',
            'desc' => 'Destroy event base',
        ),
    'event_base_loop' =>
        array (
            'file' => 'function.event-base-loop.php',
            'desc' => 'Handle events',
        ),
    'event_base_loopbreak' =>
        array (
            'file' => 'function.event-base-loopbreak.php',
            'desc' => 'Abort event loop',
        ),
    'event_base_loopexit' =>
        array (
            'file' => 'function.event-base-loopexit.php',
            'desc' => 'Exit loop after a time',
        ),
    'event_base_new' =>
        array (
            'file' => 'function.event-base-new.php',
            'desc' => 'Create and initialize new event base',
        ),
    'event_base_priority_init' =>
        array (
            'file' => 'function.event-base-priority-init.php',
            'desc' => 'Set the number of event priority levels',
        ),
    'event_base_reinit' =>
        array (
            'file' => 'function.event-base-reinit.php',
            'desc' => 'Reinitialize the event base after a fork',
        ),
    'event_base_set' =>
        array (
            'file' => 'function.event-base-set.php',
            'desc' => 'Associate event base with an event',
        ),
    'event_buffer_base_set' =>
        array (
            'file' => 'function.event-buffer-base-set.php',
            'desc' => 'Associate buffered event with an event base',
        ),
    'event_buffer_disable' =>
        array (
            'file' => 'function.event-buffer-disable.php',
            'desc' => 'Disable a buffered event',
        ),
    'event_buffer_enable' =>
        array (
            'file' => 'function.event-buffer-enable.php',
            'desc' => 'Enable a buffered event',
        ),
    'event_buffer_fd_set' =>
        array (
            'file' => 'function.event-buffer-fd-set.php',
            'desc' => 'Change a buffered event file descriptor',
        ),
    'event_buffer_free' =>
        array (
            'file' => 'function.event-buffer-free.php',
            'desc' => 'Destroy buffered event',
        ),
    'event_buffer_new' =>
        array (
            'file' => 'function.event-buffer-new.php',
            'desc' => 'Create new buffered event',
        ),
    'event_buffer_priority_set' =>
        array (
            'file' => 'function.event-buffer-priority-set.php',
            'desc' => 'Assign a priority to a buffered event',
        ),
    'event_buffer_read' =>
        array (
            'file' => 'function.event-buffer-read.php',
            'desc' => 'Read data from a buffered event',
        ),
    'event_buffer_set_callback' =>
        array (
            'file' => 'function.event-buffer-set-callback.php',
            'desc' => 'Set or reset callbacks for a buffered event',
        ),
    'event_buffer_timeout_set' =>
        array (
            'file' => 'function.event-buffer-timeout-set.php',
            'desc' => 'Set read and write timeouts for a buffered event',
        ),
    'event_buffer_watermark_set' =>
        array (
            'file' => 'function.event-buffer-watermark-set.php',
            'desc' => 'Set the watermarks for read and write events',
        ),
    'event_buffer_write' =>
        array (
            'file' => 'function.event-buffer-write.php',
            'desc' => 'Write data to a buffered event',
        ),
    'event_new' =>
        array (
            'file' => 'function.event-new.php',
            'desc' => 'Create new event',
        ),
    'event_priority_set' =>
        array (
            'file' => 'function.event-priority-set.php',
            'desc' => 'Assign a priority to an event.',
        ),
    'event_timer_add' =>
        array (
            'file' => 'function.event-timer-add.php',
            'desc' => 'Alias of event_add',
        ),
    'event_timer_del' =>
        array (
            'file' => 'function.event-timer-del.php',
            'desc' => 'Alias of event_del',
        ),
    'event_timer_new' =>
        array (
            'file' => 'function.event-timer-new.php',
            'desc' => 'Alias of event_new',
        ),
    'event_timer_set' =>
        array (
            'file' => 'function.event-timer-set.php',
            'desc' => 'Prepare a timer event',
        ),
    'EvFork::createStopped' =>
        array (
            'file' => 'evfork.createstopped.php',
            'desc' => 'Creates a stopped instance of EvFork watcher class',
        ),
    'EvFork::__construct' =>
        array (
            'file' => 'evfork.construct.php',
            'desc' => 'Constructs the EvFork watcher object',
        ),
    'EvIdle::createStopped' =>
        array (
            'file' => 'evidle.createstopped.php',
            'desc' => 'Creates instance of a stopped EvIdle watcher object',
        ),
    'EvIdle::__construct' =>
        array (
            'file' => 'evidle.construct.php',
            'desc' => 'Constructs the EvIdle watcher object',
        ),
    'EvIo::createStopped' =>
        array (
            'file' => 'evio.createstopped.php',
            'desc' => 'Create stopped EvIo watcher object',
        ),
    'EvIo::set' =>
        array (
            'file' => 'evio.set.php',
            'desc' => 'Configures the watcher',
        ),
    'EvIo::__construct' =>
        array (
            'file' => 'evio.construct.php',
            'desc' => 'Constructs EvIo watcher object',
        ),
    'EvLoop::backend' =>
        array (
            'file' => 'evloop.backend.php',
            'desc' => 'Returns an integer describing the backend used by libev.',
        ),
    'EvLoop::check' =>
        array (
            'file' => 'evloop.check.php',
            'desc' => 'Creates EvCheck object associated with the current event loop
  instance',
        ),
    'EvLoop::child' =>
        array (
            'file' => 'evloop.child.php',
            'desc' => 'Creates EvChild object associated with the current event loop',
        ),
    'EvLoop::defaultLoop' =>
        array (
            'file' => 'evloop.defaultloop.php',
            'desc' => 'Returns or creates the default event loop.',
        ),
    'EvLoop::embed' =>
        array (
            'file' => 'evloop.embed.php',
            'desc' => 'Creates an instance of EvEmbed watcher associated
  with the current EvLoop object.',
        ),
    'EvLoop::fork' =>
        array (
            'file' => 'evloop.fork.php',
            'desc' => 'Creates EvFork watcher object associated with the current event
  loop instance',
        ),
    'EvLoop::idle' =>
        array (
            'file' => 'evloop.idle.php',
            'desc' => 'Creates EvIdle watcher object associated with the current event
  loop instance',
        ),
    'EvLoop::invokePending' =>
        array (
            'file' => 'evloop.invokepending.php',
            'desc' => 'Invoke all pending watchers while resetting their pending state',
        ),
    'EvLoop::io' =>
        array (
            'file' => 'evloop.io.php',
            'desc' => 'Create EvIo watcher object associated with the current event
  loop instance',
        ),
    'EvLoop::loopFork' =>
        array (
            'file' => 'evloop.loopfork.php',
            'desc' => 'Must be called after a fork',
        ),
    'EvLoop::now' =>
        array (
            'file' => 'evloop.now.php',
            'desc' => 'Returns the current &quot;event loop time&quot;',
        ),
    'EvLoop::nowUpdate' =>
        array (
            'file' => 'evloop.nowupdate.php',
            'desc' => 'Establishes the current time by querying the kernel, updating the time
    returned by EvLoop::now in the progress.',
        ),
    'EvLoop::periodic' =>
        array (
            'file' => 'evloop.periodic.php',
            'desc' => 'Creates EvPeriodic watcher object associated with the current
  event loop instance',
        ),
    'EvLoop::prepare' =>
        array (
            'file' => 'evloop.prepare.php',
            'desc' => 'Creates EvPrepare watcher object associated with the current
  event loop instance',
        ),
    'EvLoop::resume' =>
        array (
            'file' => 'evloop.resume.php',
            'desc' => 'Resume previously suspended default event loop',
        ),
    'EvLoop::run' =>
        array (
            'file' => 'evloop.run.php',
            'desc' => 'Begin checking for events and calling callbacks for the loop',
        ),
    'EvLoop::signal' =>
        array (
            'file' => 'evloop.signal.php',
            'desc' => 'Creates EvSignal watcher object associated with the current
  event loop instance',
        ),
    'EvLoop::stat' =>
        array (
            'file' => 'evloop.stat.php',
            'desc' => 'Creates EvStat watcher object associated with the current event
  loop instance',
        ),
    'EvLoop::stop' =>
        array (
            'file' => 'evloop.stop.php',
            'desc' => 'Stops the event loop',
        ),
    'EvLoop::suspend' =>
        array (
            'file' => 'evloop.suspend.php',
            'desc' => 'Suspend the loop',
        ),
    'EvLoop::timer' =>
        array (
            'file' => 'evloop.timer.php',
            'desc' => 'Creates EvTimer watcher object associated with the current event
  loop instance',
        ),
    'EvLoop::verify' =>
        array (
            'file' => 'evloop.verify.php',
            'desc' => 'Performs internal consistency checks(for debugging)',
        ),
    'EvLoop::__construct' =>
        array (
            'file' => 'evloop.construct.php',
            'desc' => 'Constructs the event loop object',
        ),
    'EvPeriodic::again' =>
        array (
            'file' => 'evperiodic.again.php',
            'desc' => 'Simply stops and restarts the periodic watcher again.',
        ),
    'EvPeriodic::at' =>
        array (
            'file' => 'evperiodic.at.php',
            'desc' => 'Returns the absolute time that this
  watcher is supposed to trigger next',
        ),
    'EvPeriodic::createStopped' =>
        array (
            'file' => 'evperiodic.createstopped.php',
            'desc' => 'Create a stopped EvPeriodic watcher',
        ),
    'EvPeriodic::set' =>
        array (
            'file' => 'evperiodic.set.php',
            'desc' => 'Configures the watcher',
        ),
    'EvPeriodic::__construct' =>
        array (
            'file' => 'evperiodic.construct.php',
            'desc' => 'Constructs EvPeriodic watcher object',
        ),
    'EvPrepare::createStopped' =>
        array (
            'file' => 'evprepare.createstopped.php',
            'desc' => 'Creates a stopped instance of EvPrepare watcher',
        ),
    'EvPrepare::__construct' =>
        array (
            'file' => 'evprepare.construct.php',
            'desc' => 'Constructs EvPrepare watcher object',
        ),
    'EvSignal::createStopped' =>
        array (
            'file' => 'evsignal.createstopped.php',
            'desc' => 'Create stopped EvSignal watcher object',
        ),
    'EvSignal::set' =>
        array (
            'file' => 'evsignal.set.php',
            'desc' => 'Configures the watcher',
        ),
    'EvSignal::__construct' =>
        array (
            'file' => 'evsignal.construct.php',
            'desc' => 'Constructs EvPeriodic watcher object',
        ),
    'EvStat::attr' =>
        array (
            'file' => 'evstat.attr.php',
            'desc' => 'Returns the values most recently detected by Ev',
        ),
    'EvStat::createStopped' =>
        array (
            'file' => 'evstat.createstopped.php',
            'desc' => 'Create a stopped EvStat watcher object',
        ),
    'EvStat::prev' =>
        array (
            'file' => 'evstat.prev.php',
            'desc' => 'Returns the previous set of values returned by EvStat::attr',
        ),
    'EvStat::set' =>
        array (
            'file' => 'evstat.set.php',
            'desc' => 'Configures the watcher',
        ),
    'EvStat::stat' =>
        array (
            'file' => 'evstat.stat.php',
            'desc' => 'Initiates the stat call',
        ),
    'EvStat::__construct' =>
        array (
            'file' => 'evstat.construct.php',
            'desc' => 'Constructs EvStat watcher object',
        ),
    'EvTimer::again' =>
        array (
            'file' => 'evtimer.again.php',
            'desc' => 'Restarts the timer watcher',
        ),
    'EvTimer::createStopped' =>
        array (
            'file' => 'evtimer.createstopped.php',
            'desc' => 'Creates EvTimer stopped watcher object',
        ),
    'EvTimer::set' =>
        array (
            'file' => 'evtimer.set.php',
            'desc' => 'Configures the watcher',
        ),
    'EvTimer::__construct' =>
        array (
            'file' => 'evtimer.construct.php',
            'desc' => 'Constructs an EvTimer watcher object',
        ),
    'EvWatcher::clear' =>
        array (
            'file' => 'evwatcher.clear.php',
            'desc' => 'Clear watcher pending status',
        ),
    'EvWatcher::feed' =>
        array (
            'file' => 'evwatcher.feed.php',
            'desc' => 'Feeds the given revents set into the event loop',
        ),
    'EvWatcher::getLoop' =>
        array (
            'file' => 'evwatcher.getloop.php',
            'desc' => 'Returns the loop responsible for the watcher',
        ),
    'EvWatcher::invoke' =>
        array (
            'file' => 'evwatcher.invoke.php',
            'desc' => 'Invokes the watcher callback with the given received events bit
  mask',
        ),
    'EvWatcher::keepalive' =>
        array (
            'file' => 'evwatcher.keepalive.php',
            'desc' => 'Configures whether to keep the loop from returning',
        ),
    'EvWatcher::setCallback' =>
        array (
            'file' => 'evwatcher.setcallback.php',
            'desc' => 'Sets new callback for the watcher',
        ),
    'EvWatcher::start' =>
        array (
            'file' => 'evwatcher.start.php',
            'desc' => 'Starts the watcher',
        ),
    'EvWatcher::stop' =>
        array (
            'file' => 'evwatcher.stop.php',
            'desc' => 'Stops the watcher',
        ),
    'EvWatcher::__construct' =>
        array (
            'file' => 'evwatcher.construct.php',
            'desc' => 'Abstract constructor of a watcher object',
        ),
    'Examples with PDO_4D' =>
        array (
            'file' => 'pdo-4d.examples.php',
            'desc' => 'Examples PDO_4D',
        ),
    'Exception::getCode' =>
        array (
            'file' => 'exception.getcode.php',
            'desc' => 'Gets the Exception code',
        ),
    'Exception::getFile' =>
        array (
            'file' => 'exception.getfile.php',
            'desc' => 'Gets the file in which the exception occurred',
        ),
    'Exception::getLine' =>
        array (
            'file' => 'exception.getline.php',
            'desc' => 'Gets the line in which the exception occurred',
        ),
    'Exception::getMessage' =>
        array (
            'file' => 'exception.getmessage.php',
            'desc' => 'Gets the Exception message',
        ),
    'Exception::getPrevious' =>
        array (
            'file' => 'exception.getprevious.php',
            'desc' => 'Returns previous Exception',
        ),
    'Exception::getTrace' =>
        array (
            'file' => 'exception.gettrace.php',
            'desc' => 'Gets the stack trace',
        ),
    'Exception::getTraceAsString' =>
        array (
            'file' => 'exception.gettraceasstring.php',
            'desc' => 'Gets the stack trace as a string',
        ),
    'Exception::__clone' =>
        array (
            'file' => 'exception.clone.php',
            'desc' => 'Clone the exception',
        ),
    'Exception::__construct' =>
        array (
            'file' => 'exception.construct.php',
            'desc' => 'Construct the exception',
        ),
    'Exception::__toString' =>
        array (
            'file' => 'exception.tostring.php',
            'desc' => 'String representation of the exception',
        ),
    'exec' =>
        array (
            'file' => 'function.exec.php',
            'desc' => 'Execute an external program',
        ),
    'exif_imagetype' =>
        array (
            'file' => 'function.exif-imagetype.php',
            'desc' => 'Determine the type of an image',
        ),
    'exif_read_data' =>
        array (
            'file' => 'function.exif-read-data.php',
            'desc' => 'Reads the EXIF headers from JPEG or TIFF',
        ),
    'exif_tagname' =>
        array (
            'file' => 'function.exif-tagname.php',
            'desc' => 'Get the header name for an index',
        ),
    'exif_thumbnail' =>
        array (
            'file' => 'function.exif-thumbnail.php',
            'desc' => 'Retrieve the embedded thumbnail of a TIFF or JPEG image',
        ),
    'exit' =>
        array (
            'file' => 'function.exit.php',
            'desc' => 'Output a message and terminate the current script',
        ),
    'exp' =>
        array (
            'file' => 'function.exp.php',
            'desc' => 'Calculates the exponent of e',
        ),
    'expect://' =>
        array (
            'file' => 'wrappers.expect.php',
            'desc' => 'Process Interaction Streams',
        ),
    'expect_expectl' =>
        array (
            'file' => 'function.expect-expectl.php',
            'desc' => 'Waits until the output from a process matches one
  of the patterns, a specified time period has passed, or an EOF is seen',
        ),
    'expect_popen' =>
        array (
            'file' => 'function.expect-popen.php',
            'desc' => 'Execute command via Bourne shell, and open the PTY stream to
  the process',
        ),
    'explode' =>
        array (
            'file' => 'function.explode.php',
            'desc' => 'Split a string by string',
        ),
    'expm1' =>
        array (
            'file' => 'function.expm1.php',
            'desc' => 'Returns exp(number) - 1, computed in a way that is accurate even
   when the value of number is close to zero',
        ),
    'extension_loaded' =>
        array (
            'file' => 'function.extension-loaded.php',
            'desc' => 'Find out whether an extension is loaded',
        ),
    'extract' =>
        array (
            'file' => 'function.extract.php',
            'desc' => 'Import variables into the current symbol table from an array',
        ),
    'ezmlm_hash' =>
        array (
            'file' => 'function.ezmlm-hash.php',
            'desc' => 'Calculate the hash value needed by EZMLM',
        ),
    'fam_cancel_monitor' =>
        array (
            'file' => 'function.fam-cancel-monitor.php',
            'desc' => 'Terminate monitoring',
        ),
    'fam_close' =>
        array (
            'file' => 'function.fam-close.php',
            'desc' => 'Close FAM connection',
        ),
    'fam_monitor_collection' =>
        array (
            'file' => 'function.fam-monitor-collection.php',
            'desc' => 'Monitor a collection of files in a directory for changes',
        ),
    'fam_monitor_directory' =>
        array (
            'file' => 'function.fam-monitor-directory.php',
            'desc' => 'Monitor a directory for changes',
        ),
    'fam_monitor_file' =>
        array (
            'file' => 'function.fam-monitor-file.php',
            'desc' => 'Monitor a regular file for changes',
        ),
    'fam_next_event' =>
        array (
            'file' => 'function.fam-next-event.php',
            'desc' => 'Get next pending FAM event',
        ),
    'fam_open' =>
        array (
            'file' => 'function.fam-open.php',
            'desc' => 'Open connection to FAM daemon',
        ),
    'fam_pending' =>
        array (
            'file' => 'function.fam-pending.php',
            'desc' => 'Check for pending FAM events',
        ),
    'fam_resume_monitor' =>
        array (
            'file' => 'function.fam-resume-monitor.php',
            'desc' => 'Resume suspended monitoring',
        ),
    'fam_suspend_monitor' =>
        array (
            'file' => 'function.fam-suspend-monitor.php',
            'desc' => 'Temporarily suspend monitoring',
        ),
    'FANNConnection::getFromNeuron' =>
        array (
            'file' => 'fannconnection.getfromneuron.php',
            'desc' => 'Returns the postions of starting neuron.',
        ),
    'FANNConnection::getToNeuron' =>
        array (
            'file' => 'fannconnection.gettoneuron.php',
            'desc' => 'Returns the postions of terminating neuron',
        ),
    'FANNConnection::getWeight' =>
        array (
            'file' => 'fannconnection.getweight.php',
            'desc' => 'Returns the connection weight',
        ),
    'FANNConnection::setWeight' =>
        array (
            'file' => 'fannconnection.setweight.php',
            'desc' => 'Sets the connections weight',
        ),
    'FANNConnection::__construct' =>
        array (
            'file' => 'fannconnection.construct.php',
            'desc' => 'The connection constructor',
        ),
    'fann_cascadetrain_on_data' =>
        array (
            'file' => 'function.fann-cascadetrain-on-data.php',
            'desc' => 'Trains on an entire dataset, for a period of time using the Cascade2 training algorithm',
        ),
    'fann_cascadetrain_on_file' =>
        array (
            'file' => 'function.fann-cascadetrain-on-file.php',
            'desc' => 'Trains on an entire dataset read from file, for a period of time using the Cascade2 training algorithm.',
        ),
    'fann_clear_scaling_params' =>
        array (
            'file' => 'function.fann-clear-scaling-params.php',
            'desc' => 'Clears scaling parameters',
        ),
    'fann_copy' =>
        array (
            'file' => 'function.fann-copy.php',
            'desc' => 'Creates a copy of a fann structure',
        ),
    'fann_create_from_file' =>
        array (
            'file' => 'function.fann-create-from-file.php',
            'desc' => 'Constructs a backpropagation neural network from a configuration file',
        ),
    'fann_create_shortcut' =>
        array (
            'file' => 'function.fann-create-shortcut.php',
            'desc' => 'Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections',
        ),
    'fann_create_shortcut_array' =>
        array (
            'file' => 'function.fann-create-shortcut-array.php',
            'desc' => 'Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections',
        ),
    'fann_create_sparse' =>
        array (
            'file' => 'function.fann-create-sparse.php',
            'desc' => 'Creates a standard backpropagation neural network, which is not fully connected',
        ),
    'fann_create_sparse_array' =>
        array (
            'file' => 'function.fann-create-sparse-array.php',
            'desc' => 'Creates a standard backpropagation neural network, which is not fully connected using an array of layer sizes',
        ),
    'fann_create_standard' =>
        array (
            'file' => 'function.fann-create-standard.php',
            'desc' => 'Creates a standard fully connected backpropagation neural network',
        ),
    'fann_create_standard_array' =>
        array (
            'file' => 'function.fann-create-standard-array.php',
            'desc' => 'Creates a standard fully connected backpropagation neural network using an array of layer sizes',
        ),
    'fann_create_train' =>
        array (
            'file' => 'function.fann-create-train.php',
            'desc' => 'Creates an empty training data struct',
        ),
    'fann_create_train_from_callback' =>
        array (
            'file' => 'function.fann-create-train-from-callback.php',
            'desc' => 'Creates the training data struct from a user supplied function',
        ),
    'fann_descale_input' =>
        array (
            'file' => 'function.fann-descale-input.php',
            'desc' => 'Scale data in input vector after get it from ann based on previously calculated parameters',
        ),
    'fann_descale_output' =>
        array (
            'file' => 'function.fann-descale-output.php',
            'desc' => 'Scale data in output vector after get it from ann based on previously calculated parameters',
        ),
    'fann_descale_train' =>
        array (
            'file' => 'function.fann-descale-train.php',
            'desc' => 'Descale input and output data based on previously calculated parameters',
        ),
    'fann_destroy' =>
        array (
            'file' => 'function.fann-destroy.php',
            'desc' => 'Destroys the entire network and properly freeing all the associated memory',
        ),
    'fann_destroy_train' =>
        array (
            'file' => 'function.fann-destroy-train.php',
            'desc' => 'Destructs the training data',
        ),
    'fann_duplicate_train_data' =>
        array (
            'file' => 'function.fann-duplicate-train-data.php',
            'desc' => 'Returns an exact copy of a fann train data',
        ),
    'fann_get_activation_function' =>
        array (
            'file' => 'function.fann-get-activation-function.php',
            'desc' => 'Returns the activation function',
        ),
    'fann_get_activation_steepness' =>
        array (
            'file' => 'function.fann-get-activation-steepness.php',
            'desc' => 'Returns the activation steepness for supplied neuron and layer number',
        ),
    'fann_get_bias_array' =>
        array (
            'file' => 'function.fann-get-bias-array.php',
            'desc' => 'Get the number of bias in each layer in the network',
        ),
    'fann_get_bit_fail' =>
        array (
            'file' => 'function.fann-get-bit-fail.php',
            'desc' => 'The number of fail bits',
        ),
    'fann_get_bit_fail_limit' =>
        array (
            'file' => 'function.fann-get-bit-fail-limit.php',
            'desc' => 'Returns the bit fail limit used during training',
        ),
    'fann_get_cascade_activation_functions' =>
        array (
            'file' => 'function.fann-get-cascade-activation-functions.php',
            'desc' => 'Returns the cascade activation functions',
        ),
    'fann_get_cascade_activation_functions_count' =>
        array (
            'file' => 'function.fann-get-cascade-activation-functions-count.php',
            'desc' => 'Returns the number of cascade activation functions',
        ),
    'fann_get_cascade_activation_steepnesses' =>
        array (
            'file' => 'function.fann-get-cascade-activation-steepnesses.php',
            'desc' => 'Returns the cascade activation steepnesses',
        ),
    'fann_get_cascade_activation_steepnesses_count' =>
        array (
            'file' => 'function.fann-get-cascade-activation-steepnesses-count.php',
            'desc' => 'The number of activation steepnesses',
        ),
    'fann_get_cascade_candidate_change_fraction' =>
        array (
            'file' => 'function.fann-get-cascade-candidate-change-fraction.php',
            'desc' => 'Returns the cascade candidate change fraction',
        ),
    'fann_get_cascade_candidate_limit' =>
        array (
            'file' => 'function.fann-get-cascade-candidate-limit.php',
            'desc' => 'Return the candidate limit',
        ),
    'fann_get_cascade_candidate_stagnation_epochs' =>
        array (
            'file' => 'function.fann-get-cascade-candidate-stagnation-epochs.php',
            'desc' => 'Returns the number of cascade candidate stagnation epochs',
        ),
    'fann_get_cascade_max_cand_epochs' =>
        array (
            'file' => 'function.fann-get-cascade-max-cand-epochs.php',
            'desc' => 'Returns the maximum candidate epochs',
        ),
    'fann_get_cascade_max_out_epochs' =>
        array (
            'file' => 'function.fann-get-cascade-max-out-epochs.php',
            'desc' => 'Returns the maximum out epochs',
        ),
    'fann_get_cascade_min_cand_epochs' =>
        array (
            'file' => 'function.fann-get-cascade-min-cand-epochs.php',
            'desc' => 'Returns the minimum candidate epochs',
        ),
    'fann_get_cascade_min_out_epochs' =>
        array (
            'file' => 'function.fann-get-cascade-min-out-epochs.php',
            'desc' => 'Returns the minimum out epochs',
        ),
    'fann_get_cascade_num_candidates' =>
        array (
            'file' => 'function.fann-get-cascade-num-candidates.php',
            'desc' => 'Returns the number of candidates used during training',
        ),
    'fann_get_cascade_num_candidate_groups' =>
        array (
            'file' => 'function.fann-get-cascade-num-candidate-groups.php',
            'desc' => 'Returns the number of candidate groups',
        ),
    'fann_get_cascade_output_change_fraction' =>
        array (
            'file' => 'function.fann-get-cascade-output-change-fraction.php',
            'desc' => 'Returns the cascade output change fraction',
        ),
    'fann_get_cascade_output_stagnation_epochs' =>
        array (
            'file' => 'function.fann-get-cascade-output-stagnation-epochs.php',
            'desc' => 'Returns the number of cascade output stagnation epochs',
        ),
    'fann_get_cascade_weight_multiplier' =>
        array (
            'file' => 'function.fann-get-cascade-weight-multiplier.php',
            'desc' => 'Returns the weight multiplier',
        ),
    'fann_get_connection_array' =>
        array (
            'file' => 'function.fann-get-connection-array.php',
            'desc' => 'Get connections in the network',
        ),
    'fann_get_connection_rate' =>
        array (
            'file' => 'function.fann-get-connection-rate.php',
            'desc' => 'Get the connection rate used when the network was created',
        ),
    'fann_get_errno' =>
        array (
            'file' => 'function.fann-get-errno.php',
            'desc' => 'Returns the last error number',
        ),
    'fann_get_errstr' =>
        array (
            'file' => 'function.fann-get-errstr.php',
            'desc' => 'Returns the last errstr',
        ),
    'fann_get_layer_array' =>
        array (
            'file' => 'function.fann-get-layer-array.php',
            'desc' => 'Get the number of neurons in each layer in the network',
        ),
    'fann_get_learning_momentum' =>
        array (
            'file' => 'function.fann-get-learning-momentum.php',
            'desc' => 'Returns the learning momentum',
        ),
    'fann_get_learning_rate' =>
        array (
            'file' => 'function.fann-get-learning-rate.php',
            'desc' => 'Returns the learning rate',
        ),
    'fann_get_MSE' =>
        array (
            'file' => 'function.fann-get-mse.php',
            'desc' => 'Reads the mean square error from the network',
        ),
    'fann_get_network_type' =>
        array (
            'file' => 'function.fann-get-network-type.php',
            'desc' => 'Get the type of neural network it was created as',
        ),
    'fann_get_num_input' =>
        array (
            'file' => 'function.fann-get-num-input.php',
            'desc' => 'Get the number of input neurons',
        ),
    'fann_get_num_layers' =>
        array (
            'file' => 'function.fann-get-num-layers.php',
            'desc' => 'Get the number of layers in the neural network',
        ),
    'fann_get_num_output' =>
        array (
            'file' => 'function.fann-get-num-output.php',
            'desc' => 'Get the number of output neurons',
        ),
    'fann_get_quickprop_decay' =>
        array (
            'file' => 'function.fann-get-quickprop-decay.php',
            'desc' => 'Returns the decay which is a factor that weights should decrease in each iteration during quickprop training',
        ),
    'fann_get_quickprop_mu' =>
        array (
            'file' => 'function.fann-get-quickprop-mu.php',
            'desc' => 'Returns the mu factor',
        ),
    'fann_get_rprop_decrease_factor' =>
        array (
            'file' => 'function.fann-get-rprop-decrease-factor.php',
            'desc' => 'Returns the increase factor used during RPROP training',
        ),
    'fann_get_rprop_delta_max' =>
        array (
            'file' => 'function.fann-get-rprop-delta-max.php',
            'desc' => 'Returns the maximum step-size',
        ),
    'fann_get_rprop_delta_min' =>
        array (
            'file' => 'function.fann-get-rprop-delta-min.php',
            'desc' => 'Returns the minimum step-size',
        ),
    'fann_get_rprop_delta_zero' =>
        array (
            'file' => 'function.fann-get-rprop-delta-zero.php',
            'desc' => 'Returns the initial step-size',
        ),
    'fann_get_rprop_increase_factor' =>
        array (
            'file' => 'function.fann-get-rprop-increase-factor.php',
            'desc' => 'Returns the increase factor used during RPROP training',
        ),
    'fann_get_sarprop_step_error_shift' =>
        array (
            'file' => 'function.fann-get-sarprop-step-error-shift.php',
            'desc' => 'Returns the sarprop step error shift',
        ),
    'fann_get_sarprop_step_error_threshold_factor' =>
        array (
            'file' => 'function.fann-get-sarprop-step-error-threshold-factor.php',
            'desc' => 'Returns the sarprop step error threshold factor',
        ),
    'fann_get_sarprop_temperature' =>
        array (
            'file' => 'function.fann-get-sarprop-temperature.php',
            'desc' => 'Returns the sarprop temperature',
        ),
    'fann_get_sarprop_weight_decay_shift' =>
        array (
            'file' => 'function.fann-get-sarprop-weight-decay-shift.php',
            'desc' => 'Returns the sarprop weight decay shift',
        ),
    'fann_get_total_connections' =>
        array (
            'file' => 'function.fann-get-total-connections.php',
            'desc' => 'Get the total number of connections in the entire network',
        ),
    'fann_get_total_neurons' =>
        array (
            'file' => 'function.fann-get-total-neurons.php',
            'desc' => 'Get the total number of neurons in the entire network',
        ),
    'fann_get_training_algorithm' =>
        array (
            'file' => 'function.fann-get-training-algorithm.php',
            'desc' => 'Returns the training algorithm',
        ),
    'fann_get_train_error_function' =>
        array (
            'file' => 'function.fann-get-train-error-function.php',
            'desc' => 'Returns the error function used during training',
        ),
    'fann_get_train_stop_function' =>
        array (
            'file' => 'function.fann-get-train-stop-function.php',
            'desc' => 'Returns the stop function used during training',
        ),
    'fann_init_weights' =>
        array (
            'file' => 'function.fann-init-weights.php',
            'desc' => 'Initialize the weights using Widrow + Nguyen&rsquo;s algorithm',
        ),
    'fann_length_train_data' =>
        array (
            'file' => 'function.fann-length-train-data.php',
            'desc' => 'Returns the number of training patterns in the train data',
        ),
    'fann_merge_train_data' =>
        array (
            'file' => 'function.fann-merge-train-data.php',
            'desc' => 'Merges the train data',
        ),
    'fann_num_input_train_data' =>
        array (
            'file' => 'function.fann-num-input-train-data.php',
            'desc' => 'Returns the number of inputs in each of the training patterns in the train data',
        ),
    'fann_num_output_train_data' =>
        array (
            'file' => 'function.fann-num-output-train-data.php',
            'desc' => 'Returns the number of outputs in each of the training patterns in the train data',
        ),
    'fann_print_error' =>
        array (
            'file' => 'function.fann-print-error.php',
            'desc' => 'Prints the error string',
        ),
    'fann_randomize_weights' =>
        array (
            'file' => 'function.fann-randomize-weights.php',
            'desc' => 'Give each connection a random weight between min_weight and max_weight',
        ),
    'fann_read_train_from_file' =>
        array (
            'file' => 'function.fann-read-train-from-file.php',
            'desc' => 'Reads a file that stores training data',
        ),
    'fann_reset_errno' =>
        array (
            'file' => 'function.fann-reset-errno.php',
            'desc' => 'Resets the last error number',
        ),
    'fann_reset_errstr' =>
        array (
            'file' => 'function.fann-reset-errstr.php',
            'desc' => 'Resets the last error string',
        ),
    'fann_reset_MSE' =>
        array (
            'file' => 'function.fann-reset-mse.php',
            'desc' => 'Resets the mean square error from the network',
        ),
    'fann_run' =>
        array (
            'file' => 'function.fann-run.php',
            'desc' => 'Will run input through the neural network',
        ),
    'fann_save' =>
        array (
            'file' => 'function.fann-save.php',
            'desc' => 'Saves the entire network to a configuration file',
        ),
    'fann_save_train' =>
        array (
            'file' => 'function.fann-save-train.php',
            'desc' => 'Save the training structure to a file',
        ),
    'fann_scale_input' =>
        array (
            'file' => 'function.fann-scale-input.php',
            'desc' => 'Scale data in input vector before feed it to ann based on previously calculated parameters',
        ),
    'fann_scale_input_train_data' =>
        array (
            'file' => 'function.fann-scale-input-train-data.php',
            'desc' => 'Scales the inputs in the training data to the specified range',
        ),
    'fann_scale_output' =>
        array (
            'file' => 'function.fann-scale-output.php',
            'desc' => 'Scale data in output vector before feed it to ann based on previously calculated parameters',
        ),
    'fann_scale_output_train_data' =>
        array (
            'file' => 'function.fann-scale-output-train-data.php',
            'desc' => 'Scales the outputs in the training data to the specified range',
        ),
    'fann_scale_train' =>
        array (
            'file' => 'function.fann-scale-train.php',
            'desc' => 'Scale input and output data based on previously calculated parameters',
        ),
    'fann_scale_train_data' =>
        array (
            'file' => 'function.fann-scale-train-data.php',
            'desc' => 'Scales the inputs and outputs in the training data to the specified range',
        ),
    'fann_set_activation_function' =>
        array (
            'file' => 'function.fann-set-activation-function.php',
            'desc' => 'Sets the activation function for supplied neuron and layer',
        ),
    'fann_set_activation_function_hidden' =>
        array (
            'file' => 'function.fann-set-activation-function-hidden.php',
            'desc' => 'Sets the activation function for all of the hidden layers',
        ),
    'fann_set_activation_function_layer' =>
        array (
            'file' => 'function.fann-set-activation-function-layer.php',
            'desc' => 'Sets the activation function for all the neurons in the supplied layer.',
        ),
    'fann_set_activation_function_output' =>
        array (
            'file' => 'function.fann-set-activation-function-output.php',
            'desc' => 'Sets the activation function for the output layer',
        ),
    'fann_set_activation_steepness' =>
        array (
            'file' => 'function.fann-set-activation-steepness.php',
            'desc' => 'Sets the activation steepness for supplied neuron and layer number',
        ),
    'fann_set_activation_steepness_hidden' =>
        array (
            'file' => 'function.fann-set-activation-steepness-hidden.php',
            'desc' => 'Sets the steepness of the activation steepness for all neurons in the all hidden layers',
        ),
    'fann_set_activation_steepness_layer' =>
        array (
            'file' => 'function.fann-set-activation-steepness-layer.php',
            'desc' => 'Sets the activation steepness for all of the neurons in the supplied layer number',
        ),
    'fann_set_activation_steepness_output' =>
        array (
            'file' => 'function.fann-set-activation-steepness-output.php',
            'desc' => 'Sets the steepness of the activation steepness in the output layer',
        ),
    'fann_set_bit_fail_limit' =>
        array (
            'file' => 'function.fann-set-bit-fail-limit.php',
            'desc' => 'Set the bit fail limit used during training',
        ),
    'fann_set_callback' =>
        array (
            'file' => 'function.fann-set-callback.php',
            'desc' => 'Sets the callback function for use during training',
        ),
    'fann_set_cascade_activation_functions' =>
        array (
            'file' => 'function.fann-set-cascade-activation-functions.php',
            'desc' => 'Sets the array of cascade candidate activation functions',
        ),
    'fann_set_cascade_activation_steepnesses' =>
        array (
            'file' => 'function.fann-set-cascade-activation-steepnesses.php',
            'desc' => 'Sets the array of cascade candidate activation steepnesses',
        ),
    'fann_set_cascade_candidate_change_fraction' =>
        array (
            'file' => 'function.fann-set-cascade-candidate-change-fraction.php',
            'desc' => 'Sets the cascade candidate change fraction',
        ),
    'fann_set_cascade_candidate_limit' =>
        array (
            'file' => 'function.fann-set-cascade-candidate-limit.php',
            'desc' => 'Sets the candidate limit',
        ),
    'fann_set_cascade_candidate_stagnation_epochs' =>
        array (
            'file' => 'function.fann-set-cascade-candidate-stagnation-epochs.php',
            'desc' => 'Sets the number of cascade candidate stagnation epochs',
        ),
    'fann_set_cascade_max_cand_epochs' =>
        array (
            'file' => 'function.fann-set-cascade-max-cand-epochs.php',
            'desc' => 'Sets the max candidate epochs',
        ),
    'fann_set_cascade_max_out_epochs' =>
        array (
            'file' => 'function.fann-set-cascade-max-out-epochs.php',
            'desc' => 'Sets the maximum out epochs',
        ),
    'fann_set_cascade_min_cand_epochs' =>
        array (
            'file' => 'function.fann-set-cascade-min-cand-epochs.php',
            'desc' => 'Sets the min candidate epochs',
        ),
    'fann_set_cascade_min_out_epochs' =>
        array (
            'file' => 'function.fann-set-cascade-min-out-epochs.php',
            'desc' => 'Sets the minimum out epochs',
        ),
    'fann_set_cascade_num_candidate_groups' =>
        array (
            'file' => 'function.fann-set-cascade-num-candidate-groups.php',
            'desc' => 'Sets the number of candidate groups',
        ),
    'fann_set_cascade_output_change_fraction' =>
        array (
            'file' => 'function.fann-set-cascade-output-change-fraction.php',
            'desc' => 'Sets the cascade output change fraction',
        ),
    'fann_set_cascade_output_stagnation_epochs' =>
        array (
            'file' => 'function.fann-set-cascade-output-stagnation-epochs.php',
            'desc' => 'Sets the number of cascade output stagnation epochs',
        ),
    'fann_set_cascade_weight_multiplier' =>
        array (
            'file' => 'function.fann-set-cascade-weight-multiplier.php',
            'desc' => 'Sets the weight multiplier',
        ),
    'fann_set_error_log' =>
        array (
            'file' => 'function.fann-set-error-log.php',
            'desc' => 'Sets where the errors are logged to',
        ),
    'fann_set_input_scaling_params' =>
        array (
            'file' => 'function.fann-set-input-scaling-params.php',
            'desc' => 'Calculate input scaling parameters for future use based on training data',
        ),
    'fann_set_learning_momentum' =>
        array (
            'file' => 'function.fann-set-learning-momentum.php',
            'desc' => 'Sets the learning momentum',
        ),
    'fann_set_learning_rate' =>
        array (
            'file' => 'function.fann-set-learning-rate.php',
            'desc' => 'Sets the learning rate',
        ),
    'fann_set_output_scaling_params' =>
        array (
            'file' => 'function.fann-set-output-scaling-params.php',
            'desc' => 'Calculate output scaling parameters for future use based on training data',
        ),
    'fann_set_quickprop_decay' =>
        array (
            'file' => 'function.fann-set-quickprop-decay.php',
            'desc' => 'Sets the quickprop decay factor',
        ),
    'fann_set_quickprop_mu' =>
        array (
            'file' => 'function.fann-set-quickprop-mu.php',
            'desc' => 'Sets the quickprop mu factor',
        ),
    'fann_set_rprop_decrease_factor' =>
        array (
            'file' => 'function.fann-set-rprop-decrease-factor.php',
            'desc' => 'Sets the decrease factor used during RPROP training',
        ),
    'fann_set_rprop_delta_max' =>
        array (
            'file' => 'function.fann-set-rprop-delta-max.php',
            'desc' => 'Sets the maximum step-size',
        ),
    'fann_set_rprop_delta_min' =>
        array (
            'file' => 'function.fann-set-rprop-delta-min.php',
            'desc' => 'Sets the minimum step-size',
        ),
    'fann_set_rprop_delta_zero' =>
        array (
            'file' => 'function.fann-set-rprop-delta-zero.php',
            'desc' => 'Sets the initial step-size',
        ),
    'fann_set_rprop_increase_factor' =>
        array (
            'file' => 'function.fann-set-rprop-increase-factor.php',
            'desc' => 'Sets the increase factor used during RPROP training',
        ),
    'fann_set_sarprop_step_error_shift' =>
        array (
            'file' => 'function.fann-set-sarprop-step-error-shift.php',
            'desc' => 'Sets the sarprop step error shift',
        ),
    'fann_set_sarprop_step_error_threshold_factor' =>
        array (
            'file' => 'function.fann-set-sarprop-step-error-threshold-factor.php',
            'desc' => 'Sets the sarprop step error threshold factor',
        ),
    'fann_set_sarprop_temperature' =>
        array (
            'file' => 'function.fann-set-sarprop-temperature.php',
            'desc' => 'Sets the sarprop temperature',
        ),
    'fann_set_sarprop_weight_decay_shift' =>
        array (
            'file' => 'function.fann-set-sarprop-weight-decay-shift.php',
            'desc' => 'Sets the sarprop weight decay shift',
        ),
    'fann_set_scaling_params' =>
        array (
            'file' => 'function.fann-set-scaling-params.php',
            'desc' => 'Calculate input and output scaling parameters for future use based on training data',
        ),
    'fann_set_training_algorithm' =>
        array (
            'file' => 'function.fann-set-training-algorithm.php',
            'desc' => 'Sets the training algorithm',
        ),
    'fann_set_train_error_function' =>
        array (
            'file' => 'function.fann-set-train-error-function.php',
            'desc' => 'Sets the error function used during training',
        ),
    'fann_set_train_stop_function' =>
        array (
            'file' => 'function.fann-set-train-stop-function.php',
            'desc' => 'Sets the stop function used during training',
        ),
    'fann_set_weight' =>
        array (
            'file' => 'function.fann-set-weight.php',
            'desc' => 'Set a connection in the network',
        ),
    'fann_set_weight_array' =>
        array (
            'file' => 'function.fann-set-weight-array.php',
            'desc' => 'Set connections in the network',
        ),
    'fann_shuffle_train_data' =>
        array (
            'file' => 'function.fann-shuffle-train-data.php',
            'desc' => 'Shuffles training data, randomizing the order',
        ),
    'fann_subset_train_data' =>
        array (
            'file' => 'function.fann-subset-train-data.php',
            'desc' => 'Returns an copy of a subset of the train data',
        ),
    'fann_test' =>
        array (
            'file' => 'function.fann-test.php',
            'desc' => 'Test with a set of inputs, and a set of desired outputs',
        ),
    'fann_test_data' =>
        array (
            'file' => 'function.fann-test-data.php',
            'desc' => 'Test a set of training data and calculates the MSE for the training data',
        ),
    'fann_train' =>
        array (
            'file' => 'function.fann-train.php',
            'desc' => 'Train one iteration with a set of inputs, and a set of desired outputs',
        ),
    'fann_train_epoch' =>
        array (
            'file' => 'function.fann-train-epoch.php',
            'desc' => 'Train one epoch with a set of training data',
        ),
    'fann_train_on_data' =>
        array (
            'file' => 'function.fann-train-on-data.php',
            'desc' => 'Trains on an entire dataset for a period of time',
        ),
    'fann_train_on_file' =>
        array (
            'file' => 'function.fann-train-on-file.php',
            'desc' => 'Trains on an entire dataset, which is read from file, for a period of time',
        ),
    'fastcgi_finish_request' =>
        array (
            'file' => 'function.fastcgi-finish-request.php',
            'desc' => 'Flushes all response data to the client',
        ),
    'fbsql_affected_rows' =>
        array (
            'file' => 'function.fbsql-affected-rows.php',
            'desc' => 'Get number of affected rows in previous FrontBase operation',
        ),
    'fbsql_autocommit' =>
        array (
            'file' => 'function.fbsql-autocommit.php',
            'desc' => 'Enable or disable autocommit',
        ),
    'fbsql_blob_size' =>
        array (
            'file' => 'function.fbsql-blob-size.php',
            'desc' => 'Get the size of a BLOB',
        ),
    'fbsql_change_user' =>
        array (
            'file' => 'function.fbsql-change-user.php',
            'desc' => 'Change logged in user of the active connection',
        ),
    'fbsql_clob_size' =>
        array (
            'file' => 'function.fbsql-clob-size.php',
            'desc' => 'Get the size of a CLOB',
        ),
    'fbsql_close' =>
        array (
            'file' => 'function.fbsql-close.php',
            'desc' => 'Close FrontBase connection',
        ),
    'fbsql_commit' =>
        array (
            'file' => 'function.fbsql-commit.php',
            'desc' => 'Commits a transaction to the database',
        ),
    'fbsql_connect' =>
        array (
            'file' => 'function.fbsql-connect.php',
            'desc' => 'Open a connection to a FrontBase Server',
        ),
    'fbsql_create_blob' =>
        array (
            'file' => 'function.fbsql-create-blob.php',
            'desc' => 'Create a BLOB',
        ),
    'fbsql_create_clob' =>
        array (
            'file' => 'function.fbsql-create-clob.php',
            'desc' => 'Create a CLOB',
        ),
    'fbsql_create_db' =>
        array (
            'file' => 'function.fbsql-create-db.php',
            'desc' => 'Create a FrontBase database',
        ),
    'fbsql_database' =>
        array (
            'file' => 'function.fbsql-database.php',
            'desc' => 'Get or set the database name used with a connection',
        ),
    'fbsql_database_password' =>
        array (
            'file' => 'function.fbsql-database-password.php',
            'desc' => 'Sets or retrieves the password for a FrontBase database',
        ),
    'fbsql_data_seek' =>
        array (
            'file' => 'function.fbsql-data-seek.php',
            'desc' => 'Move internal result pointer',
        ),
    'fbsql_db_query' =>
        array (
            'file' => 'function.fbsql-db-query.php',
            'desc' => 'Send a FrontBase query',
        ),
    'fbsql_db_status' =>
        array (
            'file' => 'function.fbsql-db-status.php',
            'desc' => 'Get the status for a given database',
        ),
    'fbsql_drop_db' =>
        array (
            'file' => 'function.fbsql-drop-db.php',
            'desc' => 'Drop (delete) a FrontBase database',
        ),
    'fbsql_errno' =>
        array (
            'file' => 'function.fbsql-errno.php',
            'desc' => 'Returns the error number from previous operation',
        ),
    'fbsql_error' =>
        array (
            'file' => 'function.fbsql-error.php',
            'desc' => 'Returns the error message from previous operation',
        ),
    'fbsql_fetch_array' =>
        array (
            'file' => 'function.fbsql-fetch-array.php',
            'desc' => 'Fetch a result row as an associative array, a numeric array, or both',
        ),
    'fbsql_fetch_assoc' =>
        array (
            'file' => 'function.fbsql-fetch-assoc.php',
            'desc' => 'Fetch a result row as an associative array',
        ),
    'fbsql_fetch_field' =>
        array (
            'file' => 'function.fbsql-fetch-field.php',
            'desc' => 'Get column information from a result and return as an object',
        ),
    'fbsql_fetch_lengths' =>
        array (
            'file' => 'function.fbsql-fetch-lengths.php',
            'desc' => 'Get the length of each output in a result',
        ),
    'fbsql_fetch_object' =>
        array (
            'file' => 'function.fbsql-fetch-object.php',
            'desc' => 'Fetch a result row as an object',
        ),
    'fbsql_fetch_row' =>
        array (
            'file' => 'function.fbsql-fetch-row.php',
            'desc' => 'Get a result row as an enumerated array',
        ),
    'fbsql_field_flags' =>
        array (
            'file' => 'function.fbsql-field-flags.php',
            'desc' => 'Get the flags associated with the specified field in a result',
        ),
    'fbsql_field_len' =>
        array (
            'file' => 'function.fbsql-field-len.php',
            'desc' => 'Returns the length of the specified field',
        ),
    'fbsql_field_name' =>
        array (
            'file' => 'function.fbsql-field-name.php',
            'desc' => 'Get the name of the specified field in a result',
        ),
    'fbsql_field_seek' =>
        array (
            'file' => 'function.fbsql-field-seek.php',
            'desc' => 'Set result pointer to a specified field offset',
        ),
    'fbsql_field_table' =>
        array (
            'file' => 'function.fbsql-field-table.php',
            'desc' => 'Get name of the table the specified field is in',
        ),
    'fbsql_field_type' =>
        array (
            'file' => 'function.fbsql-field-type.php',
            'desc' => 'Get the type of the specified field in a result',
        ),
    'fbsql_free_result' =>
        array (
            'file' => 'function.fbsql-free-result.php',
            'desc' => 'Free result memory',
        ),
    'fbsql_get_autostart_info' =>
        array (
            'file' => 'function.fbsql-get-autostart-info.php',
        ),
    'fbsql_hostname' =>
        array (
            'file' => 'function.fbsql-hostname.php',
            'desc' => 'Get or set the host name used with a connection',
        ),
    'fbsql_insert_id' =>
        array (
            'file' => 'function.fbsql-insert-id.php',
            'desc' => 'Get the id generated from the previous INSERT operation',
        ),
    'fbsql_list_dbs' =>
        array (
            'file' => 'function.fbsql-list-dbs.php',
            'desc' => 'List databases available on a FrontBase server',
        ),
    'fbsql_list_fields' =>
        array (
            'file' => 'function.fbsql-list-fields.php',
            'desc' => 'List FrontBase result fields',
        ),
    'fbsql_list_tables' =>
        array (
            'file' => 'function.fbsql-list-tables.php',
            'desc' => 'List tables in a FrontBase database',
        ),
    'fbsql_next_result' =>
        array (
            'file' => 'function.fbsql-next-result.php',
            'desc' => 'Move the internal result pointer to the next result',
        ),
    'fbsql_num_fields' =>
        array (
            'file' => 'function.fbsql-num-fields.php',
            'desc' => 'Get number of fields in result',
        ),
    'fbsql_num_rows' =>
        array (
            'file' => 'function.fbsql-num-rows.php',
            'desc' => 'Get number of rows in result',
        ),
    'fbsql_password' =>
        array (
            'file' => 'function.fbsql-password.php',
            'desc' => 'Get or set the user password used with a connection',
        ),
    'fbsql_pconnect' =>
        array (
            'file' => 'function.fbsql-pconnect.php',
            'desc' => 'Open a persistent connection to a FrontBase Server',
        ),
    'fbsql_query' =>
        array (
            'file' => 'function.fbsql-query.php',
            'desc' => 'Send a FrontBase query',
        ),
    'fbsql_read_blob' =>
        array (
            'file' => 'function.fbsql-read-blob.php',
            'desc' => 'Read a BLOB from the database',
        ),
    'fbsql_read_clob' =>
        array (
            'file' => 'function.fbsql-read-clob.php',
            'desc' => 'Read a CLOB from the database',
        ),
    'fbsql_result' =>
        array (
            'file' => 'function.fbsql-result.php',
            'desc' => 'Get result data',
        ),
    'fbsql_rollback' =>
        array (
            'file' => 'function.fbsql-rollback.php',
            'desc' => 'Rollback a transaction to the database',
        ),
    'fbsql_rows_fetched' =>
        array (
            'file' => 'function.fbsql-rows-fetched.php',
            'desc' => 'Get the number of rows affected by the last statement',
        ),
    'fbsql_select_db' =>
        array (
            'file' => 'function.fbsql-select-db.php',
            'desc' => 'Select a FrontBase database',
        ),
    'fbsql_set_characterset' =>
        array (
            'file' => 'function.fbsql-set-characterset.php',
            'desc' => 'Change input/output character set',
        ),
    'fbsql_set_lob_mode' =>
        array (
            'file' => 'function.fbsql-set-lob-mode.php',
            'desc' => 'Set the LOB retrieve mode for a FrontBase result set',
        ),
    'fbsql_set_password' =>
        array (
            'file' => 'function.fbsql-set-password.php',
            'desc' => 'Change the password for a given user',
        ),
    'fbsql_set_transaction' =>
        array (
            'file' => 'function.fbsql-set-transaction.php',
            'desc' => 'Set the transaction locking and isolation',
        ),
    'fbsql_start_db' =>
        array (
            'file' => 'function.fbsql-start-db.php',
            'desc' => 'Start a database on local or remote server',
        ),
    'fbsql_stop_db' =>
        array (
            'file' => 'function.fbsql-stop-db.php',
            'desc' => 'Stop a database on local or remote server',
        ),
    'fbsql_tablename' =>
        array (
            'file' => 'function.fbsql-tablename.php',
            'desc' => 'Alias of fbsql_table_name',
        ),
    'fbsql_table_name' =>
        array (
            'file' => 'function.fbsql-table-name.php',
            'desc' => 'Get table name of field',
        ),
    'fbsql_username' =>
        array (
            'file' => 'function.fbsql-username.php',
            'desc' => 'Get or set the username for the connection',
        ),
    'fbsql_warnings' =>
        array (
            'file' => 'function.fbsql-warnings.php',
            'desc' => 'Enable or disable FrontBase warnings',
        ),
    'fclose' =>
        array (
            'file' => 'function.fclose.php',
            'desc' => 'Closes an open file pointer',
        ),
    'fdf_add_doc_javascript' =>
        array (
            'file' => 'function.fdf-add-doc-javascript.php',
            'desc' => 'Adds javascript code to the FDF document',
        ),
    'fdf_add_template' =>
        array (
            'file' => 'function.fdf-add-template.php',
            'desc' => 'Adds a template into the FDF document',
        ),
    'fdf_close' =>
        array (
            'file' => 'function.fdf-close.php',
            'desc' => 'Close an FDF document',
        ),
    'fdf_create' =>
        array (
            'file' => 'function.fdf-create.php',
            'desc' => 'Create a new FDF document',
        ),
    'fdf_enum_values' =>
        array (
            'file' => 'function.fdf-enum-values.php',
            'desc' => 'Call a user defined function for each document value',
        ),
    'fdf_errno' =>
        array (
            'file' => 'function.fdf-errno.php',
            'desc' => 'Return error code for last fdf operation',
        ),
    'fdf_error' =>
        array (
            'file' => 'function.fdf-error.php',
            'desc' => 'Return error description for FDF error code',
        ),
    'fdf_get_ap' =>
        array (
            'file' => 'function.fdf-get-ap.php',
            'desc' => 'Get the appearance of a field',
        ),
    'fdf_get_attachment' =>
        array (
            'file' => 'function.fdf-get-attachment.php',
            'desc' => 'Extracts uploaded file embedded in the FDF',
        ),
    'fdf_get_encoding' =>
        array (
            'file' => 'function.fdf-get-encoding.php',
            'desc' => 'Get the value of the /Encoding key',
        ),
    'fdf_get_file' =>
        array (
            'file' => 'function.fdf-get-file.php',
            'desc' => 'Get the value of the /F key',
        ),
    'fdf_get_flags' =>
        array (
            'file' => 'function.fdf-get-flags.php',
            'desc' => 'Gets the flags of a field',
        ),
    'fdf_get_opt' =>
        array (
            'file' => 'function.fdf-get-opt.php',
            'desc' => 'Gets a value from the opt array of a field',
        ),
    'fdf_get_status' =>
        array (
            'file' => 'function.fdf-get-status.php',
            'desc' => 'Get the value of the /STATUS key',
        ),
    'fdf_get_value' =>
        array (
            'file' => 'function.fdf-get-value.php',
            'desc' => 'Get the value of a field',
        ),
    'fdf_get_version' =>
        array (
            'file' => 'function.fdf-get-version.php',
            'desc' => 'Gets version number for FDF API or file',
        ),
    'fdf_header' =>
        array (
            'file' => 'function.fdf-header.php',
            'desc' => 'Sets FDF-specific output headers',
        ),
    'fdf_next_field_name' =>
        array (
            'file' => 'function.fdf-next-field-name.php',
            'desc' => 'Get the next field name',
        ),
    'fdf_open' =>
        array (
            'file' => 'function.fdf-open.php',
            'desc' => 'Open a FDF document',
        ),
    'fdf_open_string' =>
        array (
            'file' => 'function.fdf-open-string.php',
            'desc' => 'Read a FDF document from a string',
        ),
    'fdf_remove_item' =>
        array (
            'file' => 'function.fdf-remove-item.php',
            'desc' => 'Sets target frame for form',
        ),
    'fdf_save' =>
        array (
            'file' => 'function.fdf-save.php',
            'desc' => 'Save a FDF document',
        ),
    'fdf_save_string' =>
        array (
            'file' => 'function.fdf-save-string.php',
            'desc' => 'Returns the FDF document as a string',
        ),
    'fdf_set_ap' =>
        array (
            'file' => 'function.fdf-set-ap.php',
            'desc' => 'Set the appearance of a field',
        ),
    'fdf_set_encoding' =>
        array (
            'file' => 'function.fdf-set-encoding.php',
            'desc' => 'Sets FDF character encoding',
        ),
    'fdf_set_file' =>
        array (
            'file' => 'function.fdf-set-file.php',
            'desc' => 'Set PDF document to display FDF data in',
        ),
    'fdf_set_flags' =>
        array (
            'file' => 'function.fdf-set-flags.php',
            'desc' => 'Sets a flag of a field',
        ),
    'fdf_set_javascript_action' =>
        array (
            'file' => 'function.fdf-set-javascript-action.php',
            'desc' => 'Sets an javascript action of a field',
        ),
    'fdf_set_on_import_javascript' =>
        array (
            'file' => 'function.fdf-set-on-import-javascript.php',
            'desc' => 'Adds javascript code to be executed when Acrobat opens the FDF',
        ),
    'fdf_set_opt' =>
        array (
            'file' => 'function.fdf-set-opt.php',
            'desc' => 'Sets an option of a field',
        ),
    'fdf_set_status' =>
        array (
            'file' => 'function.fdf-set-status.php',
            'desc' => 'Set the value of the /STATUS key',
        ),
    'fdf_set_submit_form_action' =>
        array (
            'file' => 'function.fdf-set-submit-form-action.php',
            'desc' => 'Sets a submit form action of a field',
        ),
    'fdf_set_target_frame' =>
        array (
            'file' => 'function.fdf-set-target-frame.php',
            'desc' => 'Set target frame for form display',
        ),
    'fdf_set_value' =>
        array (
            'file' => 'function.fdf-set-value.php',
            'desc' => 'Set the value of a field',
        ),
    'fdf_set_version' =>
        array (
            'file' => 'function.fdf-set-version.php',
            'desc' => 'Sets version number for a FDF file',
        ),
    'feof' =>
        array (
            'file' => 'function.feof.php',
            'desc' => 'Tests for end-of-file on a file pointer',
        ),
    'fflush' =>
        array (
            'file' => 'function.fflush.php',
            'desc' => 'Flushes the output to a file',
        ),
    'fgetc' =>
        array (
            'file' => 'function.fgetc.php',
            'desc' => 'Gets character from file pointer',
        ),
    'fgetcsv' =>
        array (
            'file' => 'function.fgetcsv.php',
            'desc' => 'Gets line from file pointer and parse for CSV fields',
        ),
    'fgets' =>
        array (
            'file' => 'function.fgets.php',
            'desc' => 'Gets line from file pointer',
        ),
    'fgetss' =>
        array (
            'file' => 'function.fgetss.php',
            'desc' => 'Gets line from file pointer and strip HTML tags',
        ),
    'file' =>
        array (
            'file' => 'function.file.php',
            'desc' => 'Reads entire file into an array',
        ),
    'file://' =>
        array (
            'file' => 'wrappers.file.php',
            'desc' => 'Accessing local filesystem',
        ),
    'fileatime' =>
        array (
            'file' => 'function.fileatime.php',
            'desc' => 'Gets last access time of file',
        ),
    'filectime' =>
        array (
            'file' => 'function.filectime.php',
            'desc' => 'Gets inode change time of file',
        ),
    'filegroup' =>
        array (
            'file' => 'function.filegroup.php',
            'desc' => 'Gets file group',
        ),
    'fileinode' =>
        array (
            'file' => 'function.fileinode.php',
            'desc' => 'Gets file inode',
        ),
    'filemtime' =>
        array (
            'file' => 'function.filemtime.php',
            'desc' => 'Gets file modification time',
        ),
    'fileowner' =>
        array (
            'file' => 'function.fileowner.php',
            'desc' => 'Gets file owner',
        ),
    'fileperms' =>
        array (
            'file' => 'function.fileperms.php',
            'desc' => 'Gets file permissions',
        ),
    'filepro' =>
        array (
            'file' => 'function.filepro.php',
            'desc' => 'Read and verify the map file',
        ),
    'filepro_fieldcount' =>
        array (
            'file' => 'function.filepro-fieldcount.php',
            'desc' => 'Find out how many fields are in a filePro database',
        ),
    'filepro_fieldname' =>
        array (
            'file' => 'function.filepro-fieldname.php',
            'desc' => 'Gets the name of a field',
        ),
    'filepro_fieldtype' =>
        array (
            'file' => 'function.filepro-fieldtype.php',
            'desc' => 'Gets the type of a field',
        ),
    'filepro_fieldwidth' =>
        array (
            'file' => 'function.filepro-fieldwidth.php',
            'desc' => 'Gets the width of a field',
        ),
    'filepro_retrieve' =>
        array (
            'file' => 'function.filepro-retrieve.php',
            'desc' => 'Retrieves data from a filePro database',
        ),
    'filepro_rowcount' =>
        array (
            'file' => 'function.filepro-rowcount.php',
            'desc' => 'Find out how many rows are in a filePro database',
        ),
    'filesize' =>
        array (
            'file' => 'function.filesize.php',
            'desc' => 'Gets file size',
        ),
    'FilesystemIterator::current' =>
        array (
            'file' => 'filesystemiterator.current.php',
            'desc' => 'The current file',
        ),
    'FilesystemIterator::getFlags' =>
        array (
            'file' => 'filesystemiterator.getflags.php',
            'desc' => 'Get the handling flags',
        ),
    'FilesystemIterator::key' =>
        array (
            'file' => 'filesystemiterator.key.php',
            'desc' => 'Retrieve the key for the current file',
        ),
    'FilesystemIterator::next' =>
        array (
            'file' => 'filesystemiterator.next.php',
            'desc' => 'Move to the next file',
        ),
    'FilesystemIterator::rewind' =>
        array (
            'file' => 'filesystemiterator.rewind.php',
            'desc' => 'Rewinds back to the beginning',
        ),
    'FilesystemIterator::setFlags' =>
        array (
            'file' => 'filesystemiterator.setflags.php',
            'desc' => 'Sets handling flags',
        ),
    'FilesystemIterator::__construct' =>
        array (
            'file' => 'filesystemiterator.construct.php',
            'desc' => 'Constructs a new filesystem iterator',
        ),
    'filetype' =>
        array (
            'file' => 'function.filetype.php',
            'desc' => 'Gets file type',
        ),
    'file_exists' =>
        array (
            'file' => 'function.file-exists.php',
            'desc' => 'Checks whether a file or directory exists',
        ),
    'file_get_contents' =>
        array (
            'file' => 'function.file-get-contents.php',
            'desc' => 'Reads entire file into a string',
        ),
    'file_put_contents' =>
        array (
            'file' => 'function.file-put-contents.php',
            'desc' => 'Write a string to a file',
        ),
    'FilterIterator::accept' =>
        array (
            'file' => 'filteriterator.accept.php',
            'desc' => 'Check whether the current element of the iterator is acceptable',
        ),
    'FilterIterator::current' =>
        array (
            'file' => 'filteriterator.current.php',
            'desc' => 'Get the current element value',
        ),
    'FilterIterator::getInnerIterator' =>
        array (
            'file' => 'filteriterator.getinneriterator.php',
            'desc' => 'Get the inner iterator',
        ),
    'FilterIterator::key' =>
        array (
            'file' => 'filteriterator.key.php',
            'desc' => 'Get the current key',
        ),
    'FilterIterator::next' =>
        array (
            'file' => 'filteriterator.next.php',
            'desc' => 'Move the iterator forward',
        ),
    'FilterIterator::rewind' =>
        array (
            'file' => 'filteriterator.rewind.php',
            'desc' => 'Rewind the iterator',
        ),
    'FilterIterator::valid' =>
        array (
            'file' => 'filteriterator.valid.php',
            'desc' => 'Check whether the current element is valid',
        ),
    'FilterIterator::__construct' =>
        array (
            'file' => 'filteriterator.construct.php',
            'desc' => 'Construct a filterIterator',
        ),
    'filter_has_var' =>
        array (
            'file' => 'function.filter-has-var.php',
            'desc' => 'Checks if variable of specified type exists',
        ),
    'filter_id' =>
        array (
            'file' => 'function.filter-id.php',
            'desc' => 'Returns the filter ID belonging to a named filter',
        ),
    'filter_input' =>
        array (
            'file' => 'function.filter-input.php',
            'desc' => 'Gets a specific external variable by name and optionally filters it',
        ),
    'filter_input_array' =>
        array (
            'file' => 'function.filter-input-array.php',
            'desc' => 'Gets external variables and optionally filters them',
        ),
    'filter_list' =>
        array (
            'file' => 'function.filter-list.php',
            'desc' => 'Returns a list of all supported filters',
        ),
    'filter_var' =>
        array (
            'file' => 'function.filter-var.php',
            'desc' => 'Filters a variable with a specified filter',
        ),
    'filter_var_array' =>
        array (
            'file' => 'function.filter-var-array.php',
            'desc' => 'Gets multiple variables and optionally filters them',
        ),
    'finfo::buffer' =>
        array (
            'file' => 'finfo.buffer.php',
            'desc' => 'Alias of finfo_buffer',
        ),
    'finfo::file' =>
        array (
            'file' => 'finfo.file.php',
            'desc' => 'Alias of finfo_file',
        ),
    'finfo::set_flags' =>
        array (
            'file' => 'finfo.set-flags.php',
            'desc' => 'Alias of finfo_set_flags',
        ),
    'finfo::__construct' =>
        array (
            'file' => 'finfo.construct.php',
            'desc' => 'Alias of finfo_open',
        ),
    'finfo_close' =>
        array (
            'file' => 'function.finfo-close.php',
            'desc' => 'Close fileinfo resource',
        ),
    'finfo_open' =>
        array (
            'file' => 'function.finfo-open.php',
            'desc' => 'Create a new fileinfo resource',
        ),
    'floatval' =>
        array (
            'file' => 'function.floatval.php',
            'desc' => 'Get float value of a variable',
        ),
    'flock' =>
        array (
            'file' => 'function.flock.php',
            'desc' => 'Portable advisory file locking',
        ),
    'floor' =>
        array (
            'file' => 'function.floor.php',
            'desc' => 'Round fractions down',
        ),
    'flush' =>
        array (
            'file' => 'function.flush.php',
            'desc' => 'Flush system output buffer',
        ),
    'fmod' =>
        array (
            'file' => 'function.fmod.php',
            'desc' => 'Returns the floating point remainder (modulo) of the division
  of the arguments',
        ),
    'fnmatch' =>
        array (
            'file' => 'function.fnmatch.php',
            'desc' => 'Match filename against a pattern',
        ),
    'fopen' =>
        array (
            'file' => 'function.fopen.php',
            'desc' => 'Opens file or URL',
        ),
    'forward_static_call' =>
        array (
            'file' => 'function.forward-static-call.php',
            'desc' => 'Call a static method',
        ),
    'forward_static_call_array' =>
        array (
            'file' => 'function.forward-static-call-array.php',
            'desc' => 'Call a static method and pass the arguments as array',
        ),
    'fpassthru' =>
        array (
            'file' => 'function.fpassthru.php',
            'desc' => 'Output all remaining data on a file pointer',
        ),
    'fprintf' =>
        array (
            'file' => 'function.fprintf.php',
            'desc' => 'Write a formatted string to a stream',
        ),
    'fputcsv' =>
        array (
            'file' => 'function.fputcsv.php',
            'desc' => 'Format line as CSV and write to file pointer',
        ),
    'fputs' =>
        array (
            'file' => 'function.fputs.php',
            'desc' => 'Alias of fwrite',
        ),
    'fread' =>
        array (
            'file' => 'function.fread.php',
            'desc' => 'Binary-safe file read',
        ),
    'FrenchToJD' =>
        array (
            'file' => 'function.frenchtojd.php',
            'desc' => 'Converts a date from the French Republican Calendar to a Julian Day Count',
        ),
    'fribidi_log2vis' =>
        array (
            'file' => 'function.fribidi-log2vis.php',
            'desc' => 'Convert a logical string to a visual one',
        ),
    'fscanf' =>
        array (
            'file' => 'function.fscanf.php',
            'desc' => 'Parses input from a file according to a format',
        ),
    'fseek' =>
        array (
            'file' => 'function.fseek.php',
            'desc' => 'Seeks on a file pointer',
        ),
    'fsockopen' =>
        array (
            'file' => 'function.fsockopen.php',
            'desc' => 'Open Internet or Unix domain socket connection',
        ),
    'fstat' =>
        array (
            'file' => 'function.fstat.php',
            'desc' => 'Gets information about a file using an open file pointer',
        ),
    'ftell' =>
        array (
            'file' => 'function.ftell.php',
            'desc' => 'Returns the current position of the file read/write pointer',
        ),
    'ftok' =>
        array (
            'file' => 'function.ftok.php',
            'desc' => 'Convert a pathname and a project identifier to a System V IPC key',
        ),
    'ftp://' =>
        array (
            'file' => 'wrappers.ftp.php',
            'desc' => 'Accessing FTP(s) URLs',
        ),
    'FTP context options' =>
        array (
            'file' => 'context.ftp.php',
            'desc' => 'FTP context option listing',
        ),
    'ftp_alloc' =>
        array (
            'file' => 'function.ftp-alloc.php',
            'desc' => 'Allocates space for a file to be uploaded',
        ),
    'ftp_cdup' =>
        array (
            'file' => 'function.ftp-cdup.php',
            'desc' => 'Changes to the parent directory',
        ),
    'ftp_chdir' =>
        array (
            'file' => 'function.ftp-chdir.php',
            'desc' => 'Changes the current directory on a FTP server',
        ),
    'ftp_chmod' =>
        array (
            'file' => 'function.ftp-chmod.php',
            'desc' => 'Set permissions on a file via FTP',
        ),
    'ftp_close' =>
        array (
            'file' => 'function.ftp-close.php',
            'desc' => 'Closes an FTP connection',
        ),
    'ftp_connect' =>
        array (
            'file' => 'function.ftp-connect.php',
            'desc' => 'Opens an FTP connection',
        ),
    'ftp_delete' =>
        array (
            'file' => 'function.ftp-delete.php',
            'desc' => 'Deletes a file on the FTP server',
        ),
    'ftp_exec' =>
        array (
            'file' => 'function.ftp-exec.php',
            'desc' => 'Requests execution of a command on the FTP server',
        ),
    'ftp_fget' =>
        array (
            'file' => 'function.ftp-fget.php',
            'desc' => 'Downloads a file from the FTP server and saves to an open file',
        ),
    'ftp_fput' =>
        array (
            'file' => 'function.ftp-fput.php',
            'desc' => 'Uploads from an open file to the FTP server',
        ),
    'ftp_get' =>
        array (
            'file' => 'function.ftp-get.php',
            'desc' => 'Downloads a file from the FTP server',
        ),
    'ftp_get_option' =>
        array (
            'file' => 'function.ftp-get-option.php',
            'desc' => 'Retrieves various runtime behaviours of the current FTP stream',
        ),
    'ftp_login' =>
        array (
            'file' => 'function.ftp-login.php',
            'desc' => 'Logs in to an FTP connection',
        ),
    'ftp_mdtm' =>
        array (
            'file' => 'function.ftp-mdtm.php',
            'desc' => 'Returns the last modified time of the given file',
        ),
    'ftp_mkdir' =>
        array (
            'file' => 'function.ftp-mkdir.php',
            'desc' => 'Creates a directory',
        ),
    'ftp_nb_continue' =>
        array (
            'file' => 'function.ftp-nb-continue.php',
            'desc' => 'Continues retrieving/sending a file (non-blocking)',
        ),
    'ftp_nb_fget' =>
        array (
            'file' => 'function.ftp-nb-fget.php',
            'desc' => 'Retrieves a file from the FTP server and writes it to an open file (non-blocking)',
        ),
    'ftp_nb_fput' =>
        array (
            'file' => 'function.ftp-nb-fput.php',
            'desc' => 'Stores a file from an open file to the FTP server (non-blocking)',
        ),
    'ftp_nb_get' =>
        array (
            'file' => 'function.ftp-nb-get.php',
            'desc' => 'Retrieves a file from the FTP server and writes it to a local file (non-blocking)',
        ),
    'ftp_nb_put' =>
        array (
            'file' => 'function.ftp-nb-put.php',
            'desc' => 'Stores a file on the FTP server (non-blocking)',
        ),
    'ftp_nlist' =>
        array (
            'file' => 'function.ftp-nlist.php',
            'desc' => 'Returns a list of files in the given directory',
        ),
    'ftp_pasv' =>
        array (
            'file' => 'function.ftp-pasv.php',
            'desc' => 'Turns passive mode on or off',
        ),
    'ftp_put' =>
        array (
            'file' => 'function.ftp-put.php',
            'desc' => 'Uploads a file to the FTP server',
        ),
    'ftp_pwd' =>
        array (
            'file' => 'function.ftp-pwd.php',
            'desc' => 'Returns the current directory name',
        ),
    'ftp_quit' =>
        array (
            'file' => 'function.ftp-quit.php',
            'desc' => 'Alias of ftp_close',
        ),
    'ftp_raw' =>
        array (
            'file' => 'function.ftp-raw.php',
            'desc' => 'Sends an arbitrary command to an FTP server',
        ),
    'ftp_rawlist' =>
        array (
            'file' => 'function.ftp-rawlist.php',
            'desc' => 'Returns a detailed list of files in the given directory',
        ),
    'ftp_rename' =>
        array (
            'file' => 'function.ftp-rename.php',
            'desc' => 'Renames a file or a directory on the FTP server',
        ),
    'ftp_rmdir' =>
        array (
            'file' => 'function.ftp-rmdir.php',
            'desc' => 'Removes a directory',
        ),
    'ftp_set_option' =>
        array (
            'file' => 'function.ftp-set-option.php',
            'desc' => 'Set miscellaneous runtime FTP options',
        ),
    'ftp_site' =>
        array (
            'file' => 'function.ftp-site.php',
            'desc' => 'Sends a SITE command to the server',
        ),
    'ftp_size' =>
        array (
            'file' => 'function.ftp-size.php',
            'desc' => 'Returns the size of the given file',
        ),
    'ftp_ssl_connect' =>
        array (
            'file' => 'function.ftp-ssl-connect.php',
            'desc' => 'Opens an Secure SSL-FTP connection',
        ),
    'ftp_systype' =>
        array (
            'file' => 'function.ftp-systype.php',
            'desc' => 'Returns the system type identifier of the remote FTP server',
        ),
    'ftruncate' =>
        array (
            'file' => 'function.ftruncate.php',
            'desc' => 'Truncates a file to a given length',
        ),
    'function_exists' =>
        array (
            'file' => 'function.function-exists.php',
            'desc' => 'Return TRUE if the given function has been defined',
        ),
    'func_get_arg' =>
        array (
            'file' => 'function.func-get-arg.php',
            'desc' => 'Return an item from the argument list',
        ),
    'func_get_args' =>
        array (
            'file' => 'function.func-get-args.php',
            'desc' => 'Returns an array comprising a function\'s argument list',
        ),
    'func_num_args' =>
        array (
            'file' => 'function.func-num-args.php',
            'desc' => 'Returns the number of arguments passed to the function',
        ),
    'fwrite' =>
        array (
            'file' => 'function.fwrite.php',
            'desc' => 'Binary-safe file write',
        ),
    'gc_collect_cycles' =>
        array (
            'file' => 'function.gc-collect-cycles.php',
            'desc' => 'Forces collection of any existing garbage cycles',
        ),
    'gc_disable' =>
        array (
            'file' => 'function.gc-disable.php',
            'desc' => 'Deactivates the circular reference collector',
        ),
    'gc_enable' =>
        array (
            'file' => 'function.gc-enable.php',
            'desc' => 'Activates the circular reference collector',
        ),
    'gc_enabled' =>
        array (
            'file' => 'function.gc-enabled.php',
            'desc' => 'Returns status of the circular reference collector',
        ),
    'gd_info' =>
        array (
            'file' => 'function.gd-info.php',
            'desc' => 'Retrieve information about the currently installed GD library',
        ),
    'GearmanClient::addOptions' =>
        array (
            'file' => 'gearmanclient.addoptions.php',
            'desc' => 'Add client options',
        ),
    'GearmanClient::addServer' =>
        array (
            'file' => 'gearmanclient.addserver.php',
            'desc' => 'Add a job server to the client',
        ),
    'GearmanClient::addServers' =>
        array (
            'file' => 'gearmanclient.addservers.php',
            'desc' => 'Add a list of job servers to the client',
        ),
    'GearmanClient::addTask' =>
        array (
            'file' => 'gearmanclient.addtask.php',
            'desc' => 'Add a task to be run in parallel',
        ),
    'GearmanClient::addTaskBackground' =>
        array (
            'file' => 'gearmanclient.addtaskbackground.php',
            'desc' => 'Add a background task to be run in parallel',
        ),
    'GearmanClient::addTaskHigh' =>
        array (
            'file' => 'gearmanclient.addtaskhigh.php',
            'desc' => 'Add a high priority task to run in parallel',
        ),
    'GearmanClient::addTaskHighBackground' =>
        array (
            'file' => 'gearmanclient.addtaskhighbackground.php',
            'desc' => 'Add a high priority background task to be run in parallel',
        ),
    'GearmanClient::addTaskLow' =>
        array (
            'file' => 'gearmanclient.addtasklow.php',
            'desc' => 'Add a low priority task to run in parallel',
        ),
    'GearmanClient::addTaskLowBackground' =>
        array (
            'file' => 'gearmanclient.addtasklowbackground.php',
            'desc' => 'Add a low priority background task to be run in parallel',
        ),
    'GearmanClient::addTaskStatus' =>
        array (
            'file' => 'gearmanclient.addtaskstatus.php',
            'desc' => 'Add a task to get status',
        ),
    'GearmanClient::clearCallbacks' =>
        array (
            'file' => 'gearmanclient.clearcallbacks.php',
            'desc' => 'Clear all task callback functions',
        ),
    'GearmanClient::clone' =>
        array (
            'file' => 'gearmanclient.clone.php',
            'desc' => 'Create a copy of a GearmanClient object',
        ),
    'GearmanClient::context' =>
        array (
            'file' => 'gearmanclient.context.php',
            'desc' => 'Get the application context',
        ),
    'GearmanClient::data' =>
        array (
            'file' => 'gearmanclient.data.php',
            'desc' => 'Get the application data (deprecated)',
        ),
    'GearmanClient::do' =>
        array (
            'file' => 'gearmanclient.do.php',
            'desc' => 'Run a single task and return a result [deprecated]',
        ),
    'GearmanClient::doBackground' =>
        array (
            'file' => 'gearmanclient.dobackground.php',
            'desc' => 'Run a task in the background',
        ),
    'GearmanClient::doHigh' =>
        array (
            'file' => 'gearmanclient.dohigh.php',
            'desc' => 'Run a single high priority task',
        ),
    'GearmanClient::doHighBackground' =>
        array (
            'file' => 'gearmanclient.dohighbackground.php',
            'desc' => 'Run a high priority task in the background',
        ),
    'GearmanClient::doJobHandle' =>
        array (
            'file' => 'gearmanclient.dojobhandle.php',
            'desc' => 'Get the job handle for the running task',
        ),
    'GearmanClient::doLow' =>
        array (
            'file' => 'gearmanclient.dolow.php',
            'desc' => 'Run a single low priority task',
        ),
    'GearmanClient::doLowBackground' =>
        array (
            'file' => 'gearmanclient.dolowbackground.php',
            'desc' => 'Run a low priority task in the background',
        ),
    'GearmanClient::doNormal' =>
        array (
            'file' => 'gearmanclient.donormal.php',
            'desc' => 'Run a single task and return a result',
        ),
    'GearmanClient::doStatus' =>
        array (
            'file' => 'gearmanclient.dostatus.php',
            'desc' => 'Get the status for the running task',
        ),
    'GearmanClient::echo' =>
        array (
            'file' => 'gearmanclient.echo.php',
            'desc' => 'Send data to all job servers to see if they echo it back [deprecated]',
        ),
    'GearmanClient::error' =>
        array (
            'file' => 'gearmanclient.error.php',
            'desc' => 'Returns an error string for the last error encountered.',
        ),
    'GearmanClient::getErrno' =>
        array (
            'file' => 'gearmanclient.geterrno.php',
            'desc' => 'Get an errno value',
        ),
    'GearmanClient::jobStatus' =>
        array (
            'file' => 'gearmanclient.jobstatus.php',
            'desc' => 'Get the status of a background job',
        ),
    'GearmanClient::ping' =>
        array (
            'file' => 'gearmanclient.ping.php',
            'desc' => 'Send data to all job servers to see if they echo it back',
        ),
    'GearmanClient::removeOptions' =>
        array (
            'file' => 'gearmanclient.removeoptions.php',
            'desc' => 'Remove client options',
        ),
    'GearmanClient::returnCode' =>
        array (
            'file' => 'gearmanclient.returncode.php',
            'desc' => 'Get the last Gearman return code',
        ),
    'GearmanClient::runTasks' =>
        array (
            'file' => 'gearmanclient.runtasks.php',
            'desc' => 'Run a list of tasks in parallel',
        ),
    'GearmanClient::setClientCallback' =>
        array (
            'file' => 'gearmanclient.setclientcallback.php',
            'desc' => 'Callback function when there is a data packet for a task (deprecated)',
        ),
    'GearmanClient::setCompleteCallback' =>
        array (
            'file' => 'gearmanclient.setcompletecallback.php',
            'desc' => 'Set a function to be called on task completion',
        ),
    'GearmanClient::setContext' =>
        array (
            'file' => 'gearmanclient.setcontext.php',
            'desc' => 'Set application context',
        ),
    'GearmanClient::setCreatedCallback' =>
        array (
            'file' => 'gearmanclient.setcreatedcallback.php',
            'desc' => 'Set a callback for when a task is queued',
        ),
    'GearmanClient::setData' =>
        array (
            'file' => 'gearmanclient.setdata.php',
            'desc' => 'Set application data (deprecated)',
        ),
    'GearmanClient::setDataCallback' =>
        array (
            'file' => 'gearmanclient.setdatacallback.php',
            'desc' => 'Callback function when there is a data packet for a task',
        ),
    'GearmanClient::setExceptionCallback' =>
        array (
            'file' => 'gearmanclient.setexceptioncallback.php',
            'desc' => 'Set a callback for worker exceptions',
        ),
    'GearmanClient::setFailCallback' =>
        array (
            'file' => 'gearmanclient.setfailcallback.php',
            'desc' => 'Set callback for job failure',
        ),
    'GearmanClient::setOptions' =>
        array (
            'file' => 'gearmanclient.setoptions.php',
            'desc' => 'Set client options',
        ),
    'GearmanClient::setStatusCallback' =>
        array (
            'file' => 'gearmanclient.setstatuscallback.php',
            'desc' => 'Set a callback for collecting task status',
        ),
    'GearmanClient::setTimeout' =>
        array (
            'file' => 'gearmanclient.settimeout.php',
            'desc' => 'Set socket I/O activity timeout',
        ),
    'GearmanClient::setWarningCallback' =>
        array (
            'file' => 'gearmanclient.setwarningcallback.php',
            'desc' => 'Set a callback for worker warnings',
        ),
    'GearmanClient::setWorkloadCallback' =>
        array (
            'file' => 'gearmanclient.setworkloadcallback.php',
            'desc' => 'Set a callback for accepting incremental data updates',
        ),
    'GearmanClient::timeout' =>
        array (
            'file' => 'gearmanclient.timeout.php',
            'desc' => 'Get current socket I/O activity timeout value',
        ),
    'GearmanClient::__construct' =>
        array (
            'file' => 'gearmanclient.construct.php',
            'desc' => 'Create a GearmanClient instance',
        ),
    'GearmanJob::complete' =>
        array (
            'file' => 'gearmanjob.complete.php',
            'desc' => 'Send the result and complete status (deprecated)',
        ),
    'GearmanJob::data' =>
        array (
            'file' => 'gearmanjob.data.php',
            'desc' => 'Send data for a running job (deprecated)',
        ),
    'GearmanJob::exception' =>
        array (
            'file' => 'gearmanjob.exception.php',
            'desc' => 'Send exception for running job (deprecated)',
        ),
    'GearmanJob::fail' =>
        array (
            'file' => 'gearmanjob.fail.php',
            'desc' => 'Send fail status (deprecated)',
        ),
    'GearmanJob::functionName' =>
        array (
            'file' => 'gearmanjob.functionname.php',
            'desc' => 'Get function name',
        ),
    'GearmanJob::handle' =>
        array (
            'file' => 'gearmanjob.handle.php',
            'desc' => 'Get the job handle',
        ),
    'GearmanJob::returnCode' =>
        array (
            'file' => 'gearmanjob.returncode.php',
            'desc' => 'Get last return code',
        ),
    'GearmanJob::sendComplete' =>
        array (
            'file' => 'gearmanjob.sendcomplete.php',
            'desc' => 'Send the result and complete status',
        ),
    'GearmanJob::sendData' =>
        array (
            'file' => 'gearmanjob.senddata.php',
            'desc' => 'Send data for a running job',
        ),
    'GearmanJob::sendException' =>
        array (
            'file' => 'gearmanjob.sendexception.php',
            'desc' => 'Send exception for running job (exception)',
        ),
    'GearmanJob::sendFail' =>
        array (
            'file' => 'gearmanjob.sendfail.php',
            'desc' => 'Send fail status',
        ),
    'GearmanJob::sendStatus' =>
        array (
            'file' => 'gearmanjob.sendstatus.php',
            'desc' => 'Send status',
        ),
    'GearmanJob::sendWarning' =>
        array (
            'file' => 'gearmanjob.sendwarning.php',
            'desc' => 'Send a warning',
        ),
    'GearmanJob::setReturn' =>
        array (
            'file' => 'gearmanjob.setreturn.php',
            'desc' => 'Set a return value',
        ),
    'GearmanJob::status' =>
        array (
            'file' => 'gearmanjob.status.php',
            'desc' => 'Send status (deprecated)',
        ),
    'GearmanJob::unique' =>
        array (
            'file' => 'gearmanjob.unique.php',
            'desc' => 'Get the unique identifier',
        ),
    'GearmanJob::warning' =>
        array (
            'file' => 'gearmanjob.warning.php',
            'desc' => 'Send a warning (deprecated)',
        ),
    'GearmanJob::workload' =>
        array (
            'file' => 'gearmanjob.workload.php',
            'desc' => 'Get workload',
        ),
    'GearmanJob::workloadSize' =>
        array (
            'file' => 'gearmanjob.workloadsize.php',
            'desc' => 'Get size of work load',
        ),
    'GearmanJob::__construct' =>
        array (
            'file' => 'gearmanjob.construct.php',
            'desc' => 'Create a GearmanJob instance',
        ),
    'GearmanTask::create' =>
        array (
            'file' => 'gearmantask.create.php',
            'desc' => 'Create a task (deprecated)',
        ),
    'GearmanTask::data' =>
        array (
            'file' => 'gearmantask.data.php',
            'desc' => 'Get data returned for a task',
        ),
    'GearmanTask::dataSize' =>
        array (
            'file' => 'gearmantask.datasize.php',
            'desc' => 'Get the size of returned data',
        ),
    'GearmanTask::function' =>
        array (
            'file' => 'gearmantask.function.php',
            'desc' => 'Get associated function name (deprecated)',
        ),
    'GearmanTask::functionName' =>
        array (
            'file' => 'gearmantask.functionname.php',
            'desc' => 'Get associated function name',
        ),
    'GearmanTask::isKnown' =>
        array (
            'file' => 'gearmantask.isknown.php',
            'desc' => 'Determine if task is known',
        ),
    'GearmanTask::isRunning' =>
        array (
            'file' => 'gearmantask.isrunning.php',
            'desc' => 'Test whether the task is currently running',
        ),
    'GearmanTask::jobHandle' =>
        array (
            'file' => 'gearmantask.jobhandle.php',
            'desc' => 'Get the job handle',
        ),
    'GearmanTask::recvData' =>
        array (
            'file' => 'gearmantask.recvdata.php',
            'desc' => 'Read work or result data into a buffer for a task',
        ),
    'GearmanTask::returnCode' =>
        array (
            'file' => 'gearmantask.returncode.php',
            'desc' => 'Get the last return code',
        ),
    'GearmanTask::sendData' =>
        array (
            'file' => 'gearmantask.senddata.php',
            'desc' => 'Send data for a task (deprecated)',
        ),
    'GearmanTask::sendWorkload' =>
        array (
            'file' => 'gearmantask.sendworkload.php',
            'desc' => 'Send data for a task',
        ),
    'GearmanTask::taskDenominator' =>
        array (
            'file' => 'gearmantask.taskdenominator.php',
            'desc' => 'Get completion percentage denominator',
        ),
    'GearmanTask::taskNumerator' =>
        array (
            'file' => 'gearmantask.tasknumerator.php',
            'desc' => 'Get completion percentage numerator',
        ),
    'GearmanTask::unique' =>
        array (
            'file' => 'gearmantask.unique.php',
            'desc' => 'Get the unique identifier for a task',
        ),
    'GearmanTask::uuid' =>
        array (
            'file' => 'gearmantask.uuid.php',
            'desc' => 'Get the unique identifier for a task (deprecated)',
        ),
    'GearmanTask::__construct' =>
        array (
            'file' => 'gearmantask.construct.php',
            'desc' => 'Create a GearmanTask instance',
        ),
    'GearmanWorker::addFunction' =>
        array (
            'file' => 'gearmanworker.addfunction.php',
            'desc' => 'Register and add callback function',
        ),
    'GearmanWorker::addOptions' =>
        array (
            'file' => 'gearmanworker.addoptions.php',
            'desc' => 'Add worker options',
        ),
    'GearmanWorker::addServer' =>
        array (
            'file' => 'gearmanworker.addserver.php',
            'desc' => 'Add a job server',
        ),
    'GearmanWorker::addServers' =>
        array (
            'file' => 'gearmanworker.addservers.php',
            'desc' => 'Add job servers',
        ),
    'GearmanWorker::clone' =>
        array (
            'file' => 'gearmanworker.clone.php',
            'desc' => 'Create a copy of the worker',
        ),
    'GearmanWorker::echo' =>
        array (
            'file' => 'gearmanworker.echo.php',
            'desc' => 'Test job server response',
        ),
    'GearmanWorker::error' =>
        array (
            'file' => 'gearmanworker.error.php',
            'desc' => 'Get the last error encountered',
        ),
    'GearmanWorker::getErrno' =>
        array (
            'file' => 'gearmanworker.geterrno.php',
            'desc' => 'Get errno',
        ),
    'GearmanWorker::options' =>
        array (
            'file' => 'gearmanworker.options.php',
            'desc' => 'Get worker options',
        ),
    'GearmanWorker::register' =>
        array (
            'file' => 'gearmanworker.register.php',
            'desc' => 'Register a function with the job server',
        ),
    'GearmanWorker::removeOptions' =>
        array (
            'file' => 'gearmanworker.removeoptions.php',
            'desc' => 'Remove worker options',
        ),
    'GearmanWorker::returnCode' =>
        array (
            'file' => 'gearmanworker.returncode.php',
            'desc' => 'Get last Gearman return code',
        ),
    'GearmanWorker::setId' =>
        array (
            'file' => 'gearmanworker.setid.php',
            'desc' => 'Give the worker an identifier so it can be tracked when asking gearmand for the list of available workers.',
        ),
    'GearmanWorker::setOptions' =>
        array (
            'file' => 'gearmanworker.setoptions.php',
            'desc' => 'Set worker options',
        ),
    'GearmanWorker::setTimeout' =>
        array (
            'file' => 'gearmanworker.settimeout.php',
            'desc' => 'Set socket I/O activity timeout',
        ),
    'GearmanWorker::timeout' =>
        array (
            'file' => 'gearmanworker.timeout.php',
            'desc' => 'Get socket I/O activity timeout',
        ),
    'GearmanWorker::unregister' =>
        array (
            'file' => 'gearmanworker.unregister.php',
            'desc' => 'Unregister a function name with the job servers',
        ),
    'GearmanWorker::unregisterAll' =>
        array (
            'file' => 'gearmanworker.unregisterall.php',
            'desc' => 'Unregister all function names with the job servers',
        ),
    'GearmanWorker::wait' =>
        array (
            'file' => 'gearmanworker.wait.php',
            'desc' => 'Wait for activity from one of the job servers',
        ),
    'GearmanWorker::work' =>
        array (
            'file' => 'gearmanworker.work.php',
            'desc' => 'Wait for and perform jobs',
        ),
    'GearmanWorker::__construct' =>
        array (
            'file' => 'gearmanworker.construct.php',
            'desc' => 'Create a GearmanWorker instance',
        ),
    'Gender\\Gender::connect' =>
        array (
            'file' => 'gender-gender.connect.php',
            'desc' => 'Connect to an external name dictionary.',
        ),
    'Gender\\Gender::country' =>
        array (
            'file' => 'gender-gender.country.php',
            'desc' => 'Get textual country representation',
        ),
    'Gender\\Gender::get' =>
        array (
            'file' => 'gender-gender.get.php',
            'desc' => 'Get gender of a name.',
        ),
    'Gender\\Gender::isNick' =>
        array (
            'file' => 'gender-gender.isnick.php',
            'desc' => 'Check if the name0 is an alias of the name1.',
        ),
    'Gender\\Gender::similarNames' =>
        array (
            'file' => 'gender-gender.similarnames.php',
            'desc' => 'Get similar names.',
        ),
    'Gender\\Gender::__construct' =>
        array (
            'file' => 'gender-gender.construct.php',
            'desc' => 'Construct the Gender object.',
        ),
    'Generator::current' =>
        array (
            'file' => 'generator.current.php',
            'desc' => 'Get the yielded value',
        ),
    'Generator::key' =>
        array (
            'file' => 'generator.key.php',
            'desc' => 'Get the yielded key',
        ),
    'Generator::next' =>
        array (
            'file' => 'generator.next.php',
            'desc' => 'Resume execution of the generator',
        ),
    'Generator::rewind' =>
        array (
            'file' => 'generator.rewind.php',
            'desc' => 'Rewind the iterator',
        ),
    'Generator::send' =>
        array (
            'file' => 'generator.send.php',
            'desc' => 'Send a value to the generator',
        ),
    'Generator::throw' =>
        array (
            'file' => 'generator.throw.php',
            'desc' => 'Throw an exception into the generator',
        ),
    'Generator::valid' =>
        array (
            'file' => 'generator.valid.php',
            'desc' => 'Check if the iterator has been closed',
        ),
    'Generator::__wakeup' =>
        array (
            'file' => 'generator.wakeup.php',
            'desc' => 'Serialize callback',
        ),
    'geoip_asnum_by_name' =>
        array (
            'file' => 'function.geoip-asnum-by-name.php',
            'desc' => 'Get the Autonomous System Numbers (ASN)',
        ),
    'geoip_continent_code_by_name' =>
        array (
            'file' => 'function.geoip-continent-code-by-name.php',
            'desc' => 'Get the two letter continent code',
        ),
    'geoip_country_code3_by_name' =>
        array (
            'file' => 'function.geoip-country-code3-by-name.php',
            'desc' => 'Get the three letter country code',
        ),
    'geoip_country_code_by_name' =>
        array (
            'file' => 'function.geoip-country-code-by-name.php',
            'desc' => 'Get the two letter country code',
        ),
    'geoip_country_name_by_name' =>
        array (
            'file' => 'function.geoip-country-name-by-name.php',
            'desc' => 'Get the full country name',
        ),
    'geoip_database_info' =>
        array (
            'file' => 'function.geoip-database-info.php',
            'desc' => 'Get GeoIP Database information',
        ),
    'geoip_db_avail' =>
        array (
            'file' => 'function.geoip-db-avail.php',
            'desc' => 'Determine if GeoIP Database is available',
        ),
    'geoip_db_filename' =>
        array (
            'file' => 'function.geoip-db-filename.php',
            'desc' => 'Returns the filename of the corresponding GeoIP Database',
        ),
    'geoip_db_get_all_info' =>
        array (
            'file' => 'function.geoip-db-get-all-info.php',
            'desc' => 'Returns detailed information about all GeoIP database types',
        ),
    'geoip_domain_by_name' =>
        array (
            'file' => 'function.geoip-domain-by-name.php',
            'desc' => 'Get the second level domain name',
        ),
    'geoip_id_by_name' =>
        array (
            'file' => 'function.geoip-id-by-name.php',
            'desc' => 'Get the Internet connection type',
        ),
    'geoip_isp_by_name' =>
        array (
            'file' => 'function.geoip-isp-by-name.php',
            'desc' => 'Get the Internet Service Provider (ISP) name',
        ),
    'geoip_netspeedcell_by_name' =>
        array (
            'file' => 'function.geoip-netspeedcell-by-name.php',
            'desc' => 'Get the Internet connection speed',
        ),
    'geoip_org_by_name' =>
        array (
            'file' => 'function.geoip-org-by-name.php',
            'desc' => 'Get the organization name',
        ),
    'geoip_record_by_name' =>
        array (
            'file' => 'function.geoip-record-by-name.php',
            'desc' => 'Returns the detailed City information found in the GeoIP Database',
        ),
    'geoip_region_by_name' =>
        array (
            'file' => 'function.geoip-region-by-name.php',
            'desc' => 'Get the country code and region',
        ),
    'geoip_region_name_by_code' =>
        array (
            'file' => 'function.geoip-region-name-by-code.php',
            'desc' => 'Returns the region name for some country and region code combo',
        ),
    'geoip_setup_custom_directory' =>
        array (
            'file' => 'function.geoip-setup-custom-directory.php',
            'desc' => 'Set a custom directory for the GeoIP database.',
        ),
    'geoip_time_zone_by_country_and_region' =>
        array (
            'file' => 'function.geoip-time-zone-by-country-and-region.php',
            'desc' => 'Returns the time zone for some country and region code combo',
        ),
    'getallheaders' =>
        array (
            'file' => 'function.getallheaders.php',
            'desc' => 'Fetch all HTTP request headers',
        ),
    'getcwd' =>
        array (
            'file' => 'function.getcwd.php',
            'desc' => 'Gets the current working directory',
        ),
    'getdate' =>
        array (
            'file' => 'function.getdate.php',
            'desc' => 'Get date/time information',
        ),
    'getenv' =>
        array (
            'file' => 'function.getenv.php',
            'desc' => 'Gets the value of an environment variable',
        ),
    'gethostbyaddr' =>
        array (
            'file' => 'function.gethostbyaddr.php',
            'desc' => 'Get the Internet host name corresponding to a given IP address',
        ),
    'gethostbyname' =>
        array (
            'file' => 'function.gethostbyname.php',
            'desc' => 'Get the IPv4 address corresponding to a given Internet host name',
        ),
    'gethostbynamel' =>
        array (
            'file' => 'function.gethostbynamel.php',
            'desc' => 'Get a list of IPv4 addresses corresponding to a given Internet host
   name',
        ),
    'gethostname' =>
        array (
            'file' => 'function.gethostname.php',
            'desc' => 'Gets the host name',
        ),
    'getimagesize' =>
        array (
            'file' => 'function.getimagesize.php',
            'desc' => 'Get the size of an image',
        ),
    'getimagesizefromstring' =>
        array (
            'file' => 'function.getimagesizefromstring.php',
            'desc' => 'Get the size of an image from a string',
        ),
    'getlastmod' =>
        array (
            'file' => 'function.getlastmod.php',
            'desc' => 'Gets time of last page modification',
        ),
    'getmxrr' =>
        array (
            'file' => 'function.getmxrr.php',
            'desc' => 'Get MX records corresponding to a given Internet host name',
        ),
    'getmygid' =>
        array (
            'file' => 'function.getmygid.php',
            'desc' => 'Get PHP script owner\'s GID',
        ),
    'getmyinode' =>
        array (
            'file' => 'function.getmyinode.php',
            'desc' => 'Gets the inode of the current script',
        ),
    'getmypid' =>
        array (
            'file' => 'function.getmypid.php',
            'desc' => 'Gets PHP\'s process ID',
        ),
    'getmyuid' =>
        array (
            'file' => 'function.getmyuid.php',
            'desc' => 'Gets PHP script owner\'s UID',
        ),
    'getopt' =>
        array (
            'file' => 'function.getopt.php',
            'desc' => 'Gets options from the command line argument list',
        ),
    'getprotobyname' =>
        array (
            'file' => 'function.getprotobyname.php',
            'desc' => 'Get protocol number associated with protocol name',
        ),
    'getprotobynumber' =>
        array (
            'file' => 'function.getprotobynumber.php',
            'desc' => 'Get protocol name associated with protocol number',
        ),
    'getrandmax' =>
        array (
            'file' => 'function.getrandmax.php',
            'desc' => 'Show largest possible random value',
        ),
    'getrusage' =>
        array (
            'file' => 'function.getrusage.php',
            'desc' => 'Gets the current resource usages',
        ),
    'getservbyname' =>
        array (
            'file' => 'function.getservbyname.php',
            'desc' => 'Get port number associated with an Internet service and protocol',
        ),
    'getservbyport' =>
        array (
            'file' => 'function.getservbyport.php',
            'desc' => 'Get Internet service which corresponds to port and protocol',
        ),
    'gettext' =>
        array (
            'file' => 'function.gettext.php',
            'desc' => 'Lookup a message in the current domain',
        ),
    'gettimeofday' =>
        array (
            'file' => 'function.gettimeofday.php',
            'desc' => 'Get current time',
        ),
    'gettype' =>
        array (
            'file' => 'function.gettype.php',
            'desc' => 'Get the type of a variable',
        ),
    'get_browser' =>
        array (
            'file' => 'function.get-browser.php',
            'desc' => 'Tells what the user\'s browser is capable of',
        ),
    'get_called_class' =>
        array (
            'file' => 'function.get-called-class.php',
            'desc' => 'the &quot;Late Static Binding&quot; class name',
        ),
    'get_cfg_var' =>
        array (
            'file' => 'function.get-cfg-var.php',
            'desc' => 'Gets the value of a PHP configuration option',
        ),
    'get_class' =>
        array (
            'file' => 'function.get-class.php',
            'desc' => 'Returns the name of the class of an object',
        ),
    'get_class_methods' =>
        array (
            'file' => 'function.get-class-methods.php',
            'desc' => 'Gets the class methods\' names',
        ),
    'get_class_vars' =>
        array (
            'file' => 'function.get-class-vars.php',
            'desc' => 'Get the default properties of the class',
        ),
    'get_current_user' =>
        array (
            'file' => 'function.get-current-user.php',
            'desc' => 'Gets the name of the owner of the current PHP script',
        ),
    'get_declared_classes' =>
        array (
            'file' => 'function.get-declared-classes.php',
            'desc' => 'Returns an array with the name of the defined classes',
        ),
    'get_declared_interfaces' =>
        array (
            'file' => 'function.get-declared-interfaces.php',
            'desc' => 'Returns an array of all declared interfaces',
        ),
    'get_declared_traits' =>
        array (
            'file' => 'function.get-declared-traits.php',
            'desc' => 'Returns an array of all declared traits',
        ),
    'get_defined_constants' =>
        array (
            'file' => 'function.get-defined-constants.php',
            'desc' => 'Returns an associative array with the names of all the constants and their values',
        ),
    'get_defined_functions' =>
        array (
            'file' => 'function.get-defined-functions.php',
            'desc' => 'Returns an array of all defined functions',
        ),
    'get_defined_vars' =>
        array (
            'file' => 'function.get-defined-vars.php',
            'desc' => 'Returns an array of all defined variables',
        ),
    'get_extension_funcs' =>
        array (
            'file' => 'function.get-extension-funcs.php',
            'desc' => 'Returns an array with the names of the functions of a module',
        ),
    'get_headers' =>
        array (
            'file' => 'function.get-headers.php',
            'desc' => 'Fetches all the headers sent by the server in response to a HTTP request',
        ),
    'get_html_translation_table' =>
        array (
            'file' => 'function.get-html-translation-table.php',
            'desc' => 'Returns the translation table used by htmlspecialchars and htmlentities',
        ),
    'get_included_files' =>
        array (
            'file' => 'function.get-included-files.php',
            'desc' => 'Returns an array with the names of included or required files',
        ),
    'get_include_path' =>
        array (
            'file' => 'function.get-include-path.php',
            'desc' => 'Gets the current include_path configuration option',
        ),
    'get_loaded_extensions' =>
        array (
            'file' => 'function.get-loaded-extensions.php',
            'desc' => 'Returns an array with the names of all modules compiled and loaded',
        ),
    'get_magic_quotes_gpc' =>
        array (
            'file' => 'function.get-magic-quotes-gpc.php',
            'desc' => 'Gets the current configuration setting of magic_quotes_gpc',
        ),
    'get_magic_quotes_runtime' =>
        array (
            'file' => 'function.get-magic-quotes-runtime.php',
            'desc' => 'Gets the current active configuration setting of magic_quotes_runtime',
        ),
    'get_meta_tags' =>
        array (
            'file' => 'function.get-meta-tags.php',
            'desc' => 'Extracts all meta tag content attributes from a file and returns an array',
        ),
    'get_object_vars' =>
        array (
            'file' => 'function.get-object-vars.php',
            'desc' => 'Gets the properties of the given object',
        ),
    'get_parent_class' =>
        array (
            'file' => 'function.get-parent-class.php',
            'desc' => 'Retrieves the parent class name for object or class',
        ),
    'get_required_files' =>
        array (
            'file' => 'function.get-required-files.php',
            'desc' => 'Alias of get_included_files',
        ),
    'get_resource_type' =>
        array (
            'file' => 'function.get-resource-type.php',
            'desc' => 'Returns the resource type',
        ),
    'glob' =>
        array (
            'file' => 'function.glob.php',
            'desc' => 'Find pathnames matching a pattern',
        ),
    'glob://' =>
        array (
            'file' => 'wrappers.glob.php',
            'desc' => 'Find pathnames matching pattern',
        ),
    'GlobIterator::count' =>
        array (
            'file' => 'globiterator.count.php',
            'desc' => 'Get the number of directories and files',
        ),
    'GlobIterator::__construct' =>
        array (
            'file' => 'globiterator.construct.php',
            'desc' => 'Construct a directory using glob',
        ),
    'Gmagick::addimage' =>
        array (
            'file' => 'gmagick.addimage.php',
            'desc' => 'Adds new image to Gmagick object image list',
        ),
    'Gmagick::addnoiseimage' =>
        array (
            'file' => 'gmagick.addnoiseimage.php',
            'desc' => 'Adds random noise to the image',
        ),
    'Gmagick::annotateimage' =>
        array (
            'file' => 'gmagick.annotateimage.php',
            'desc' => 'Annotates an image with text',
        ),
    'Gmagick::blurimage' =>
        array (
            'file' => 'gmagick.blurimage.php',
            'desc' => 'Adds blur filter to image',
        ),
    'Gmagick::borderimage' =>
        array (
            'file' => 'gmagick.borderimage.php',
            'desc' => 'Surrounds the image with a border',
        ),
    'Gmagick::charcoalimage' =>
        array (
            'file' => 'gmagick.charcoalimage.php',
            'desc' => 'Simulates a charcoal drawing',
        ),
    'Gmagick::chopimage' =>
        array (
            'file' => 'gmagick.chopimage.php',
            'desc' => 'Removes a region of an image and trims',
        ),
    'Gmagick::clear' =>
        array (
            'file' => 'gmagick.clear.php',
            'desc' => 'Clears all resources associated to Gmagick object',
        ),
    'Gmagick::commentimage' =>
        array (
            'file' => 'gmagick.commentimage.php',
            'desc' => 'Adds a comment to your image',
        ),
    'Gmagick::compositeimage' =>
        array (
            'file' => 'gmagick.compositeimage.php',
            'desc' => 'Composite one image onto another',
        ),
    'Gmagick::cropimage' =>
        array (
            'file' => 'gmagick.cropimage.php',
            'desc' => 'Extracts a region of the image',
        ),
    'Gmagick::cropthumbnailimage' =>
        array (
            'file' => 'gmagick.cropthumbnailimage.php',
            'desc' => 'Creates a crop thumbnail',
        ),
    'Gmagick::current' =>
        array (
            'file' => 'gmagick.current.php',
        ),
    'Gmagick::cyclecolormapimage' =>
        array (
            'file' => 'gmagick.cyclecolormapimage.php',
            'desc' => 'Displaces an image\'s colormap',
        ),
    'Gmagick::deconstructimages' =>
        array (
            'file' => 'gmagick.deconstructimages.php',
            'desc' => 'Returns certain pixel differences between images',
        ),
    'Gmagick::despeckleimage' =>
        array (
            'file' => 'gmagick.despeckleimage.php',
        ),
    'Gmagick::destroy' =>
        array (
            'file' => 'gmagick.destroy.php',
        ),
    'Gmagick::drawimage' =>
        array (
            'file' => 'gmagick.drawimage.php',
            'desc' => 'Renders the GmagickDraw object on the current image',
        ),
    'Gmagick::edgeimage' =>
        array (
            'file' => 'gmagick.edgeimage.php',
            'desc' => 'Enhance edges within the image',
        ),
    'Gmagick::embossimage' =>
        array (
            'file' => 'gmagick.embossimage.php',
            'desc' => 'Returns a grayscale image with a three-dimensional effect',
        ),
    'Gmagick::enhanceimage' =>
        array (
            'file' => 'gmagick.enhanceimage.php',
            'desc' => 'Improves the quality of a noisy image',
        ),
    'Gmagick::equalizeimage' =>
        array (
            'file' => 'gmagick.equalizeimage.php',
            'desc' => 'Equalizes the image histogram',
        ),
    'Gmagick::flipimage' =>
        array (
            'file' => 'gmagick.flipimage.php',
            'desc' => 'Creates a vertical mirror image',
        ),
    'Gmagick::flopimage' =>
        array (
            'file' => 'gmagick.flopimage.php',
        ),
    'Gmagick::frameimage' =>
        array (
            'file' => 'gmagick.frameimage.php',
            'desc' => 'Adds a simulated three-dimensional border',
        ),
    'Gmagick::gammaimage' =>
        array (
            'file' => 'gmagick.gammaimage.php',
            'desc' => 'Gamma-corrects an image',
        ),
    'Gmagick::getcopyright' =>
        array (
            'file' => 'gmagick.getcopyright.php',
            'desc' => 'Returns the GraphicsMagick API copyright as a string',
        ),
    'Gmagick::getfilename' =>
        array (
            'file' => 'gmagick.getfilename.php',
            'desc' => 'The filename associated with an image sequence',
        ),
    'Gmagick::getimagebackgroundcolor' =>
        array (
            'file' => 'gmagick.getimagebackgroundcolor.php',
            'desc' => 'Returns the image background color',
        ),
    'Gmagick::getimageblueprimary' =>
        array (
            'file' => 'gmagick.getimageblueprimary.php',
            'desc' => 'Returns the chromaticy blue primary point',
        ),
    'Gmagick::getimagebordercolor' =>
        array (
            'file' => 'gmagick.getimagebordercolor.php',
            'desc' => 'Returns the image border color',
        ),
    'Gmagick::getimagechanneldepth' =>
        array (
            'file' => 'gmagick.getimagechanneldepth.php',
            'desc' => 'Gets the depth for a particular image channel',
        ),
    'Gmagick::getimagecolors' =>
        array (
            'file' => 'gmagick.getimagecolors.php',
            'desc' => 'Returns the color of the specified colormap index',
        ),
    'Gmagick::getimagecolorspace' =>
        array (
            'file' => 'gmagick.getimagecolorspace.php',
            'desc' => 'Gets the image colorspace',
        ),
    'Gmagick::getimagecompose' =>
        array (
            'file' => 'gmagick.getimagecompose.php',
            'desc' => 'Returns the composite operator associated with the image',
        ),
    'Gmagick::getimagedelay' =>
        array (
            'file' => 'gmagick.getimagedelay.php',
            'desc' => 'Gets the image delay',
        ),
    'Gmagick::getimagedepth' =>
        array (
            'file' => 'gmagick.getimagedepth.php',
            'desc' => 'Gets the depth of the image',
        ),
    'Gmagick::getimagedispose' =>
        array (
            'file' => 'gmagick.getimagedispose.php',
            'desc' => 'Gets the image disposal method',
        ),
    'Gmagick::getimageextrema' =>
        array (
            'file' => 'gmagick.getimageextrema.php',
            'desc' => 'Gets the extrema for the image',
        ),
    'Gmagick::getimagefilename' =>
        array (
            'file' => 'gmagick.getimagefilename.php',
            'desc' => 'Returns the filename of a particular image in a sequence',
        ),
    'Gmagick::getimageformat' =>
        array (
            'file' => 'gmagick.getimageformat.php',
            'desc' => 'Returns the format of a particular image in a sequence',
        ),
    'Gmagick::getimagegamma' =>
        array (
            'file' => 'gmagick.getimagegamma.php',
            'desc' => 'Gets the image gamma',
        ),
    'Gmagick::getimagegreenprimary' =>
        array (
            'file' => 'gmagick.getimagegreenprimary.php',
            'desc' => 'Returns the chromaticy green primary point',
        ),
    'Gmagick::getimageheight' =>
        array (
            'file' => 'gmagick.getimageheight.php',
            'desc' => 'Returns the image height',
        ),
    'Gmagick::getimagehistogram' =>
        array (
            'file' => 'gmagick.getimagehistogram.php',
            'desc' => 'Gets the image histogram',
        ),
    'Gmagick::getimageindex' =>
        array (
            'file' => 'gmagick.getimageindex.php',
            'desc' => 'Gets the index of the current active image',
        ),
    'Gmagick::getimageinterlacescheme' =>
        array (
            'file' => 'gmagick.getimageinterlacescheme.php',
            'desc' => 'Gets the image interlace scheme',
        ),
    'Gmagick::getimageiterations' =>
        array (
            'file' => 'gmagick.getimageiterations.php',
            'desc' => 'Gets the image iterations',
        ),
    'Gmagick::getimagematte' =>
        array (
            'file' => 'gmagick.getimagematte.php',
            'desc' => 'Check if the image has a matte channel',
        ),
    'Gmagick::getimagemattecolor' =>
        array (
            'file' => 'gmagick.getimagemattecolor.php',
            'desc' => 'Returns the image matte color',
        ),
    'Gmagick::getimageprofile' =>
        array (
            'file' => 'gmagick.getimageprofile.php',
            'desc' => 'Returns the named image profile.',
        ),
    'Gmagick::getimageredprimary' =>
        array (
            'file' => 'gmagick.getimageredprimary.php',
            'desc' => 'Returns the chromaticity red primary point',
        ),
    'Gmagick::getimagerenderingintent' =>
        array (
            'file' => 'gmagick.getimagerenderingintent.php',
            'desc' => 'Gets the image rendering intent',
        ),
    'Gmagick::getimageresolution' =>
        array (
            'file' => 'gmagick.getimageresolution.php',
            'desc' => 'Gets the image X and Y resolution',
        ),
    'Gmagick::getimagescene' =>
        array (
            'file' => 'gmagick.getimagescene.php',
            'desc' => 'Gets the image scene',
        ),
    'Gmagick::getimagesignature' =>
        array (
            'file' => 'gmagick.getimagesignature.php',
            'desc' => 'Generates an SHA-256 message digest',
        ),
    'Gmagick::getimagetype' =>
        array (
            'file' => 'gmagick.getimagetype.php',
            'desc' => 'Gets the potential image type.',
        ),
    'Gmagick::getimageunits' =>
        array (
            'file' => 'gmagick.getimageunits.php',
            'desc' => 'Gets the image units of resolution',
        ),
    'Gmagick::getimagewhitepoint' =>
        array (
            'file' => 'gmagick.getimagewhitepoint.php',
            'desc' => 'Returns the chromaticity white point',
        ),
    'Gmagick::getimagewidth' =>
        array (
            'file' => 'gmagick.getimagewidth.php',
            'desc' => 'Returns the width of the image',
        ),
    'Gmagick::getpackagename' =>
        array (
            'file' => 'gmagick.getpackagename.php',
            'desc' => 'Returns the GraphicsMagick package name.',
        ),
    'Gmagick::getquantumdepth' =>
        array (
            'file' => 'gmagick.getquantumdepth.php',
            'desc' => 'Returns the Gmagick quantum depth as a string.',
        ),
    'Gmagick::getreleasedate' =>
        array (
            'file' => 'gmagick.getreleasedate.php',
            'desc' => 'Returns the GraphicsMagick release date as a string.',
        ),
    'Gmagick::getsamplingfactors' =>
        array (
            'file' => 'gmagick.getsamplingfactors.php',
            'desc' => 'Gets the horizontal and vertical sampling factor.',
        ),
    'Gmagick::getsize' =>
        array (
            'file' => 'gmagick.getsize.php',
            'desc' => 'Returns the size associated with the Gmagick object',
        ),
    'Gmagick::getversion' =>
        array (
            'file' => 'gmagick.getversion.php',
            'desc' => 'Returns the GraphicsMagick API version',
        ),
    'Gmagick::hasnextimage' =>
        array (
            'file' => 'gmagick.hasnextimage.php',
            'desc' => 'Checks if the object has more images',
        ),
    'Gmagick::haspreviousimage' =>
        array (
            'file' => 'gmagick.haspreviousimage.php',
            'desc' => 'Checks if the object has a previous image',
        ),
    'Gmagick::implodeimage' =>
        array (
            'file' => 'gmagick.implodeimage.php',
            'desc' => 'Creates a new image as a copy',
        ),
    'Gmagick::labelimage' =>
        array (
            'file' => 'gmagick.labelimage.php',
            'desc' => 'Adds a label to an image.',
        ),
    'Gmagick::levelimage' =>
        array (
            'file' => 'gmagick.levelimage.php',
            'desc' => 'Adjusts the levels of an image',
        ),
    'Gmagick::magnifyimage' =>
        array (
            'file' => 'gmagick.magnifyimage.php',
            'desc' => 'Scales an image proportionally 2x',
        ),
    'Gmagick::mapimage' =>
        array (
            'file' => 'gmagick.mapimage.php',
            'desc' => 'Replaces the colors of an image with the closest color from a reference image.',
        ),
    'Gmagick::medianfilterimage' =>
        array (
            'file' => 'gmagick.medianfilterimage.php',
            'desc' => 'Applies a digital filter',
        ),
    'Gmagick::minifyimage' =>
        array (
            'file' => 'gmagick.minifyimage.php',
            'desc' => 'Scales an image proportionally to half its size',
        ),
    'Gmagick::modulateimage' =>
        array (
            'file' => 'gmagick.modulateimage.php',
            'desc' => 'Control the brightness, saturation, and hue',
        ),
    'Gmagick::motionblurimage' =>
        array (
            'file' => 'gmagick.motionblurimage.php',
            'desc' => 'Simulates motion blur',
        ),
    'Gmagick::newimage' =>
        array (
            'file' => 'gmagick.newimage.php',
            'desc' => 'Creates a new image',
        ),
    'Gmagick::nextimage' =>
        array (
            'file' => 'gmagick.nextimage.php',
            'desc' => 'Moves to the next image',
        ),
    'Gmagick::normalizeimage' =>
        array (
            'file' => 'gmagick.normalizeimage.php',
            'desc' => 'Enhances the contrast of a color image',
        ),
    'Gmagick::oilpaintimage' =>
        array (
            'file' => 'gmagick.oilpaintimage.php',
            'desc' => 'Simulates an oil painting',
        ),
    'Gmagick::previousimage' =>
        array (
            'file' => 'gmagick.previousimage.php',
            'desc' => 'Move to the previous image in the object',
        ),
    'Gmagick::profileimage' =>
        array (
            'file' => 'gmagick.profileimage.php',
            'desc' => 'Adds or removes a profile from an image',
        ),
    'Gmagick::quantizeimage' =>
        array (
            'file' => 'gmagick.quantizeimage.php',
            'desc' => 'Analyzes the colors within a reference image',
        ),
    'Gmagick::quantizeimages' =>
        array (
            'file' => 'gmagick.quantizeimages.php',
        ),
    'Gmagick::queryfontmetrics' =>
        array (
            'file' => 'gmagick.queryfontmetrics.php',
            'desc' => 'Returns an array representing the font metrics',
        ),
    'Gmagick::queryfonts' =>
        array (
            'file' => 'gmagick.queryfonts.php',
            'desc' => 'Returns the configured fonts',
        ),
    'Gmagick::queryformats' =>
        array (
            'file' => 'gmagick.queryformats.php',
            'desc' => 'Returns formats supported by Gmagick.',
        ),
    'Gmagick::radialblurimage' =>
        array (
            'file' => 'gmagick.radialblurimage.php',
            'desc' => 'Radial blurs an image',
        ),
    'Gmagick::raiseimage' =>
        array (
            'file' => 'gmagick.raiseimage.php',
            'desc' => 'Creates a simulated 3d button-like effect',
        ),
    'Gmagick::read' =>
        array (
            'file' => 'gmagick.read.php',
            'desc' => 'Reads image from filename',
        ),
    'Gmagick::readimage' =>
        array (
            'file' => 'gmagick.readimage.php',
            'desc' => 'Reads image from filename',
        ),
    'Gmagick::readimageblob' =>
        array (
            'file' => 'gmagick.readimageblob.php',
            'desc' => 'Reads image from a binary string',
        ),
    'Gmagick::readimagefile' =>
        array (
            'file' => 'gmagick.readimagefile.php',
        ),
    'Gmagick::reducenoiseimage' =>
        array (
            'file' => 'gmagick.reducenoiseimage.php',
            'desc' => 'Smooths the contours of an image',
        ),
    'Gmagick::removeimage' =>
        array (
            'file' => 'gmagick.removeimage.php',
            'desc' => 'Removes an image from the image list',
        ),
    'Gmagick::removeimageprofile' =>
        array (
            'file' => 'gmagick.removeimageprofile.php',
            'desc' => 'Removes the named image profile and returns it',
        ),
    'Gmagick::resampleimage' =>
        array (
            'file' => 'gmagick.resampleimage.php',
            'desc' => 'Resample image to desired resolution',
        ),
    'Gmagick::resizeimage' =>
        array (
            'file' => 'gmagick.resizeimage.php',
            'desc' => 'Scales an image',
        ),
    'Gmagick::rollimage' =>
        array (
            'file' => 'gmagick.rollimage.php',
            'desc' => 'Offsets an image',
        ),
    'Gmagick::rotateimage' =>
        array (
            'file' => 'gmagick.rotateimage.php',
            'desc' => 'Rotates an image',
        ),
    'Gmagick::scaleimage' =>
        array (
            'file' => 'gmagick.scaleimage.php',
            'desc' => 'Scales the size of an image',
        ),
    'Gmagick::separateimagechannel' =>
        array (
            'file' => 'gmagick.separateimagechannel.php',
            'desc' => 'Separates a channel from the image',
        ),
    'Gmagick::setfilename' =>
        array (
            'file' => 'gmagick.setfilename.php',
            'desc' => 'Sets the filename before you read or write the image',
        ),
    'Gmagick::setimagebackgroundcolor' =>
        array (
            'file' => 'gmagick.setimagebackgroundcolor.php',
            'desc' => 'Sets the image background color.',
        ),
    'Gmagick::setimageblueprimary' =>
        array (
            'file' => 'gmagick.setimageblueprimary.php',
            'desc' => 'Sets the image chromaticity blue primary point.',
        ),
    'Gmagick::setimagebordercolor' =>
        array (
            'file' => 'gmagick.setimagebordercolor.php',
            'desc' => 'Sets the image border color.',
        ),
    'Gmagick::setimagechanneldepth' =>
        array (
            'file' => 'gmagick.setimagechanneldepth.php',
            'desc' => 'Sets the depth of a particular image channel',
        ),
    'Gmagick::setimagecolorspace' =>
        array (
            'file' => 'gmagick.setimagecolorspace.php',
            'desc' => 'Sets the image colorspace',
        ),
    'Gmagick::setimagecompose' =>
        array (
            'file' => 'gmagick.setimagecompose.php',
            'desc' => 'Sets the image composite operator',
        ),
    'Gmagick::setimagedelay' =>
        array (
            'file' => 'gmagick.setimagedelay.php',
            'desc' => 'Sets the image delay',
        ),
    'Gmagick::setimagedepth' =>
        array (
            'file' => 'gmagick.setimagedepth.php',
            'desc' => 'Sets the image depth',
        ),
    'Gmagick::setimagedispose' =>
        array (
            'file' => 'gmagick.setimagedispose.php',
            'desc' => 'Sets the image disposal method',
        ),
    'Gmagick::setimagefilename' =>
        array (
            'file' => 'gmagick.setimagefilename.php',
            'desc' => 'Sets the filename of a particular image in a sequence',
        ),
    'Gmagick::setimageformat' =>
        array (
            'file' => 'gmagick.setimageformat.php',
            'desc' => 'Sets the format of a particular image',
        ),
    'Gmagick::setimagegamma' =>
        array (
            'file' => 'gmagick.setimagegamma.php',
            'desc' => 'Sets the image gamma',
        ),
    'Gmagick::setimagegreenprimary' =>
        array (
            'file' => 'gmagick.setimagegreenprimary.php',
            'desc' => 'TSets the image chromaticity green primary point.',
        ),
    'Gmagick::setimageindex' =>
        array (
            'file' => 'gmagick.setimageindex.php',
            'desc' => 'Set the iterator to the position in the image list specified with the index parameter',
        ),
    'Gmagick::setimageinterlacescheme' =>
        array (
            'file' => 'gmagick.setimageinterlacescheme.php',
            'desc' => 'Sets the interlace scheme of the image.',
        ),
    'Gmagick::setimageiterations' =>
        array (
            'file' => 'gmagick.setimageiterations.php',
            'desc' => 'Sets the image iterations.',
        ),
    'Gmagick::setimageprofile' =>
        array (
            'file' => 'gmagick.setimageprofile.php',
            'desc' => 'Adds a named profile to the Gmagick object',
        ),
    'Gmagick::setimageredprimary' =>
        array (
            'file' => 'gmagick.setimageredprimary.php',
            'desc' => 'Sets the image chromaticity red primary point.',
        ),
    'Gmagick::setimagerenderingintent' =>
        array (
            'file' => 'gmagick.setimagerenderingintent.php',
            'desc' => 'Sets the image rendering intent',
        ),
    'Gmagick::setimageresolution' =>
        array (
            'file' => 'gmagick.setimageresolution.php',
            'desc' => 'Sets the image resolution',
        ),
    'Gmagick::setimagescene' =>
        array (
            'file' => 'gmagick.setimagescene.php',
            'desc' => 'Sets the image scene',
        ),
    'Gmagick::setimagetype' =>
        array (
            'file' => 'gmagick.setimagetype.php',
            'desc' => 'Sets the image type',
        ),
    'Gmagick::setimageunits' =>
        array (
            'file' => 'gmagick.setimageunits.php',
            'desc' => 'Sets the image units of resolution.',
        ),
    'Gmagick::setimagewhitepoint' =>
        array (
            'file' => 'gmagick.setimagewhitepoint.php',
            'desc' => 'Sets the image chromaticity white point.',
        ),
    'Gmagick::setsamplingfactors' =>
        array (
            'file' => 'gmagick.setsamplingfactors.php',
            'desc' => 'Sets the image sampling factors.',
        ),
    'Gmagick::setsize' =>
        array (
            'file' => 'gmagick.setsize.php',
            'desc' => 'Sets the size of the Gmagick object',
        ),
    'Gmagick::shearimage' =>
        array (
            'file' => 'gmagick.shearimage.php',
            'desc' => 'Creating a parallelogram',
        ),
    'Gmagick::solarizeimage' =>
        array (
            'file' => 'gmagick.solarizeimage.php',
            'desc' => 'Applies a solarizing effect to the image',
        ),
    'Gmagick::spreadimage' =>
        array (
            'file' => 'gmagick.spreadimage.php',
            'desc' => 'Randomly displaces each pixel in a block',
        ),
    'Gmagick::stripimage' =>
        array (
            'file' => 'gmagick.stripimage.php',
            'desc' => 'Strips an image of all profiles and comments',
        ),
    'Gmagick::swirlimage' =>
        array (
            'file' => 'gmagick.swirlimage.php',
            'desc' => 'Swirls the pixels about the center of the image',
        ),
    'Gmagick::thumbnailimage' =>
        array (
            'file' => 'gmagick.thumbnailimage.php',
            'desc' => 'Changes the size of an image',
        ),
    'Gmagick::trimimage' =>
        array (
            'file' => 'gmagick.trimimage.php',
            'desc' => 'Remove edges from the image',
        ),
    'Gmagick::write' =>
        array (
            'file' => 'gmagick.write.php',
            'desc' => 'Writes an image to the specified filename',
        ),
    'Gmagick::writeimage' =>
        array (
            'file' => 'gmagick.writeimage.php',
            'desc' => 'Writes an image to the specified filename',
        ),
    'Gmagick::__construct' =>
        array (
            'file' => 'gmagick.construct.php',
            'desc' => 'The Gmagick constructor',
        ),
    'GmagickDraw::annotate' =>
        array (
            'file' => 'gmagickdraw.annotate.php',
            'desc' => 'Draws text on the image',
        ),
    'GmagickDraw::arc' =>
        array (
            'file' => 'gmagickdraw.arc.php',
            'desc' => 'Draws an arc',
        ),
    'GmagickDraw::bezier' =>
        array (
            'file' => 'gmagickdraw.bezier.php',
            'desc' => 'Draws a bezier curve',
        ),
    'GmagickDraw::ellipse' =>
        array (
            'file' => 'gmagickdraw.ellipse.php',
            'desc' => 'Draws an ellipse on the image',
        ),
    'GmagickDraw::getfillcolor' =>
        array (
            'file' => 'gmagickdraw.getfillcolor.php',
            'desc' => 'Returns the fill color',
        ),
    'GmagickDraw::getfillopacity' =>
        array (
            'file' => 'gmagickdraw.getfillopacity.php',
            'desc' => 'Returns the opacity used when drawing',
        ),
    'GmagickDraw::getfont' =>
        array (
            'file' => 'gmagickdraw.getfont.php',
            'desc' => 'Returns the font',
        ),
    'GmagickDraw::getfontsize' =>
        array (
            'file' => 'gmagickdraw.getfontsize.php',
            'desc' => 'Returns the font pointsize',
        ),
    'GmagickDraw::getfontstyle' =>
        array (
            'file' => 'gmagickdraw.getfontstyle.php',
            'desc' => 'Returns the font style',
        ),
    'GmagickDraw::getfontweight' =>
        array (
            'file' => 'gmagickdraw.getfontweight.php',
            'desc' => 'Returns the font weight',
        ),
    'GmagickDraw::getstrokecolor' =>
        array (
            'file' => 'gmagickdraw.getstrokecolor.php',
            'desc' => 'Returns the color used for stroking object outlines',
        ),
    'GmagickDraw::getstrokeopacity' =>
        array (
            'file' => 'gmagickdraw.getstrokeopacity.php',
            'desc' => 'Returns the opacity of stroked object outlines',
        ),
    'GmagickDraw::getstrokewidth' =>
        array (
            'file' => 'gmagickdraw.getstrokewidth.php',
            'desc' => 'Returns the width of the stroke used to draw object outlines',
        ),
    'GmagickDraw::gettextdecoration' =>
        array (
            'file' => 'gmagickdraw.gettextdecoration.php',
            'desc' => 'Returns the text decoration',
        ),
    'GmagickDraw::gettextencoding' =>
        array (
            'file' => 'gmagickdraw.gettextencoding.php',
            'desc' => 'Returns the code set used for text annotations',
        ),
    'GmagickDraw::line' =>
        array (
            'file' => 'gmagickdraw.line.php',
        ),
    'GmagickDraw::point' =>
        array (
            'file' => 'gmagickdraw.point.php',
            'desc' => 'Draws a point',
        ),
    'GmagickDraw::polygon' =>
        array (
            'file' => 'gmagickdraw.polygon.php',
            'desc' => 'Draws a polygon',
        ),
    'GmagickDraw::polyline' =>
        array (
            'file' => 'gmagickdraw.polyline.php',
            'desc' => 'Draws a polyline',
        ),
    'GmagickDraw::rectangle' =>
        array (
            'file' => 'gmagickdraw.rectangle.php',
            'desc' => 'Draws a rectangle',
        ),
    'GmagickDraw::rotate' =>
        array (
            'file' => 'gmagickdraw.rotate.php',
            'desc' => 'Applies the specified rotation to the current coordinate space',
        ),
    'GmagickDraw::roundrectangle' =>
        array (
            'file' => 'gmagickdraw.roundrectangle.php',
            'desc' => 'Draws a rounded rectangle',
        ),
    'GmagickDraw::scale' =>
        array (
            'file' => 'gmagickdraw.scale.php',
            'desc' => 'Adjusts the scaling factor',
        ),
    'GmagickDraw::setfillcolor' =>
        array (
            'file' => 'gmagickdraw.setfillcolor.php',
            'desc' => 'Sets the fill color to be used for drawing filled objects.',
        ),
    'GmagickDraw::setfillopacity' =>
        array (
            'file' => 'gmagickdraw.setfillopacity.php',
        ),
    'GmagickDraw::setfont' =>
        array (
            'file' => 'gmagickdraw.setfont.php',
            'desc' => 'Sets the fully-specified font to use when annotating with text.',
        ),
    'GmagickDraw::setfontsize' =>
        array (
            'file' => 'gmagickdraw.setfontsize.php',
            'desc' => 'Sets the font pointsize to use when annotating with text.',
        ),
    'GmagickDraw::setfontstyle' =>
        array (
            'file' => 'gmagickdraw.setfontstyle.php',
            'desc' => 'Sets the font style to use when annotating with text',
        ),
    'GmagickDraw::setfontweight' =>
        array (
            'file' => 'gmagickdraw.setfontweight.php',
            'desc' => 'Sets the font weight',
        ),
    'GmagickDraw::setstrokecolor' =>
        array (
            'file' => 'gmagickdraw.setstrokecolor.php',
            'desc' => 'Sets the color used for stroking object outlines.',
        ),
    'GmagickDraw::setstrokeopacity' =>
        array (
            'file' => 'gmagickdraw.setstrokeopacity.php',
            'desc' => 'Specifies the opacity of stroked object outlines.',
        ),
    'GmagickDraw::setstrokewidth' =>
        array (
            'file' => 'gmagickdraw.setstrokewidth.php',
            'desc' => 'Sets the width of the stroke used to draw object outlines.',
        ),
    'GmagickDraw::settextdecoration' =>
        array (
            'file' => 'gmagickdraw.settextdecoration.php',
            'desc' => 'Specifies a decoration',
        ),
    'GmagickDraw::settextencoding' =>
        array (
            'file' => 'gmagickdraw.settextencoding.php',
            'desc' => 'Specifies the text code set',
        ),
    'GmagickPixel::getcolor' =>
        array (
            'file' => 'gmagickpixel.getcolor.php',
            'desc' => 'Returns the color',
        ),
    'GmagickPixel::getcolorcount' =>
        array (
            'file' => 'gmagickpixel.getcolorcount.php',
            'desc' => 'Returns the color count associated with this color',
        ),
    'GmagickPixel::getcolorvalue' =>
        array (
            'file' => 'gmagickpixel.getcolorvalue.php',
            'desc' => 'Gets the normalized value of the provided color channel',
        ),
    'GmagickPixel::setcolor' =>
        array (
            'file' => 'gmagickpixel.setcolor.php',
            'desc' => 'Sets the color',
        ),
    'GmagickPixel::setcolorvalue' =>
        array (
            'file' => 'gmagickpixel.setcolorvalue.php',
            'desc' => 'Sets the normalized value of one of the channels',
        ),
    'GmagickPixel::__construct' =>
        array (
            'file' => 'gmagickpixel.construct.php',
            'desc' => 'The GmagickPixel constructor',
        ),
    'gmdate' =>
        array (
            'file' => 'function.gmdate.php',
            'desc' => 'Format a GMT/UTC date/time',
        ),
    'gmmktime' =>
        array (
            'file' => 'function.gmmktime.php',
            'desc' => 'Get Unix timestamp for a GMT date',
        ),
    'gmp_abs' =>
        array (
            'file' => 'function.gmp-abs.php',
            'desc' => 'Absolute value',
        ),
    'gmp_add' =>
        array (
            'file' => 'function.gmp-add.php',
            'desc' => 'Add numbers',
        ),
    'gmp_and' =>
        array (
            'file' => 'function.gmp-and.php',
            'desc' => 'Bitwise AND',
        ),
    'gmp_clrbit' =>
        array (
            'file' => 'function.gmp-clrbit.php',
            'desc' => 'Clear bit',
        ),
    'gmp_cmp' =>
        array (
            'file' => 'function.gmp-cmp.php',
            'desc' => 'Compare numbers',
        ),
    'gmp_com' =>
        array (
            'file' => 'function.gmp-com.php',
            'desc' => 'Calculates one\'s complement',
        ),
    'gmp_div' =>
        array (
            'file' => 'function.gmp-div.php',
            'desc' => 'Alias of gmp_div_q',
        ),
    'gmp_divexact' =>
        array (
            'file' => 'function.gmp-divexact.php',
            'desc' => 'Exact division of numbers',
        ),
    'gmp_div_q' =>
        array (
            'file' => 'function.gmp-div-q.php',
            'desc' => 'Divide numbers',
        ),
    'gmp_div_qr' =>
        array (
            'file' => 'function.gmp-div-qr.php',
            'desc' => 'Divide numbers and get quotient and remainder',
        ),
    'gmp_div_r' =>
        array (
            'file' => 'function.gmp-div-r.php',
            'desc' => 'Remainder of the division of numbers',
        ),
    'gmp_export' =>
        array (
            'file' => 'function.gmp-export.php',
            'desc' => 'Export to a binary string',
        ),
    'gmp_fact' =>
        array (
            'file' => 'function.gmp-fact.php',
            'desc' => 'Factorial',
        ),
    'gmp_gcd' =>
        array (
            'file' => 'function.gmp-gcd.php',
            'desc' => 'Calculate GCD',
        ),
    'gmp_gcdext' =>
        array (
            'file' => 'function.gmp-gcdext.php',
            'desc' => 'Calculate GCD and multipliers',
        ),
    'gmp_hamdist' =>
        array (
            'file' => 'function.gmp-hamdist.php',
            'desc' => 'Hamming distance',
        ),
    'gmp_import' =>
        array (
            'file' => 'function.gmp-import.php',
            'desc' => 'Import from a binary string',
        ),
    'gmp_init' =>
        array (
            'file' => 'function.gmp-init.php',
            'desc' => 'Create GMP number',
        ),
    'gmp_intval' =>
        array (
            'file' => 'function.gmp-intval.php',
            'desc' => 'Convert GMP number to integer',
        ),
    'gmp_invert' =>
        array (
            'file' => 'function.gmp-invert.php',
            'desc' => 'Inverse by modulo',
        ),
    'gmp_jacobi' =>
        array (
            'file' => 'function.gmp-jacobi.php',
            'desc' => 'Jacobi symbol',
        ),
    'gmp_legendre' =>
        array (
            'file' => 'function.gmp-legendre.php',
            'desc' => 'Legendre symbol',
        ),
    'gmp_mod' =>
        array (
            'file' => 'function.gmp-mod.php',
            'desc' => 'Modulo operation',
        ),
    'gmp_mul' =>
        array (
            'file' => 'function.gmp-mul.php',
            'desc' => 'Multiply numbers',
        ),
    'gmp_neg' =>
        array (
            'file' => 'function.gmp-neg.php',
            'desc' => 'Negate number',
        ),
    'gmp_nextprime' =>
        array (
            'file' => 'function.gmp-nextprime.php',
            'desc' => 'Find next prime number',
        ),
    'gmp_or' =>
        array (
            'file' => 'function.gmp-or.php',
            'desc' => 'Bitwise OR',
        ),
    'gmp_perfect_square' =>
        array (
            'file' => 'function.gmp-perfect-square.php',
            'desc' => 'Perfect square check',
        ),
    'gmp_popcount' =>
        array (
            'file' => 'function.gmp-popcount.php',
            'desc' => 'Population count',
        ),
    'gmp_pow' =>
        array (
            'file' => 'function.gmp-pow.php',
            'desc' => 'Raise number into power',
        ),
    'gmp_powm' =>
        array (
            'file' => 'function.gmp-powm.php',
            'desc' => 'Raise number into power with modulo',
        ),
    'gmp_prob_prime' =>
        array (
            'file' => 'function.gmp-prob-prime.php',
            'desc' => 'Check if number is &quot;probably prime&quot;',
        ),
    'gmp_random' =>
        array (
            'file' => 'function.gmp-random.php',
            'desc' => 'Random number',
        ),
    'gmp_random_bits' =>
        array (
            'file' => 'function.gmp-random-bits.php',
            'desc' => 'Random number',
        ),
    'gmp_random_range' =>
        array (
            'file' => 'function.gmp-random-range.php',
            'desc' => 'Random number',
        ),
    'gmp_root' =>
        array (
            'file' => 'function.gmp-root.php',
            'desc' => 'Take the integer part of nth root',
        ),
    'gmp_rootrem' =>
        array (
            'file' => 'function.gmp-rootrem.php',
            'desc' => 'Take the integer part and remainder of nth root',
        ),
    'gmp_scan0' =>
        array (
            'file' => 'function.gmp-scan0.php',
            'desc' => 'Scan for 0',
        ),
    'gmp_scan1' =>
        array (
            'file' => 'function.gmp-scan1.php',
            'desc' => 'Scan for 1',
        ),
    'gmp_setbit' =>
        array (
            'file' => 'function.gmp-setbit.php',
            'desc' => 'Set bit',
        ),
    'gmp_sign' =>
        array (
            'file' => 'function.gmp-sign.php',
            'desc' => 'Sign of number',
        ),
    'gmp_sqrt' =>
        array (
            'file' => 'function.gmp-sqrt.php',
            'desc' => 'Calculate square root',
        ),
    'gmp_sqrtrem' =>
        array (
            'file' => 'function.gmp-sqrtrem.php',
            'desc' => 'Square root with remainder',
        ),
    'gmp_strval' =>
        array (
            'file' => 'function.gmp-strval.php',
            'desc' => 'Convert GMP number to string',
        ),
    'gmp_sub' =>
        array (
            'file' => 'function.gmp-sub.php',
            'desc' => 'Subtract numbers',
        ),
    'gmp_testbit' =>
        array (
            'file' => 'function.gmp-testbit.php',
            'desc' => 'Tests if a bit is set',
        ),
    'gmp_xor' =>
        array (
            'file' => 'function.gmp-xor.php',
            'desc' => 'Bitwise XOR',
        ),
    'gmstrftime' =>
        array (
            'file' => 'function.gmstrftime.php',
            'desc' => 'Format a GMT/UTC time/date according to locale settings',
        ),
    'gnupg_adddecryptkey' =>
        array (
            'file' => 'function.gnupg-adddecryptkey.php',
            'desc' => 'Add a key for decryption',
        ),
    'gnupg_addencryptkey' =>
        array (
            'file' => 'function.gnupg-addencryptkey.php',
            'desc' => 'Add a key for encryption',
        ),
    'gnupg_addsignkey' =>
        array (
            'file' => 'function.gnupg-addsignkey.php',
            'desc' => 'Add a key for signing',
        ),
    'gnupg_cleardecryptkeys' =>
        array (
            'file' => 'function.gnupg-cleardecryptkeys.php',
            'desc' => 'Removes all keys which were set for decryption before',
        ),
    'gnupg_clearencryptkeys' =>
        array (
            'file' => 'function.gnupg-clearencryptkeys.php',
            'desc' => 'Removes all keys which were set for encryption before',
        ),
    'gnupg_clearsignkeys' =>
        array (
            'file' => 'function.gnupg-clearsignkeys.php',
            'desc' => 'Removes all keys which were set for signing before',
        ),
    'gnupg_decrypt' =>
        array (
            'file' => 'function.gnupg-decrypt.php',
            'desc' => 'Decrypts a given text',
        ),
    'gnupg_decryptverify' =>
        array (
            'file' => 'function.gnupg-decryptverify.php',
            'desc' => 'Decrypts and verifies a given text',
        ),
    'gnupg_encrypt' =>
        array (
            'file' => 'function.gnupg-encrypt.php',
            'desc' => 'Encrypts a given text',
        ),
    'gnupg_encryptsign' =>
        array (
            'file' => 'function.gnupg-encryptsign.php',
            'desc' => 'Encrypts and signs a given text',
        ),
    'gnupg_export' =>
        array (
            'file' => 'function.gnupg-export.php',
            'desc' => 'Exports a key',
        ),
    'gnupg_geterror' =>
        array (
            'file' => 'function.gnupg-geterror.php',
            'desc' => 'Returns the errortext, if a function fails',
        ),
    'gnupg_getprotocol' =>
        array (
            'file' => 'function.gnupg-getprotocol.php',
            'desc' => 'Returns the currently active protocol for all operations',
        ),
    'gnupg_import' =>
        array (
            'file' => 'function.gnupg-import.php',
            'desc' => 'Imports a key',
        ),
    'gnupg_init' =>
        array (
            'file' => 'function.gnupg-init.php',
            'desc' => 'Initialize a connection',
        ),
    'gnupg_keyinfo' =>
        array (
            'file' => 'function.gnupg-keyinfo.php',
            'desc' => 'Returns an array with information about all keys that matches the given pattern',
        ),
    'gnupg_setarmor' =>
        array (
            'file' => 'function.gnupg-setarmor.php',
            'desc' => 'Toggle armored output',
        ),
    'gnupg_seterrormode' =>
        array (
            'file' => 'function.gnupg-seterrormode.php',
            'desc' => 'Sets the mode for error_reporting',
        ),
    'gnupg_setsignmode' =>
        array (
            'file' => 'function.gnupg-setsignmode.php',
            'desc' => 'Sets the mode for signing',
        ),
    'gnupg_sign' =>
        array (
            'file' => 'function.gnupg-sign.php',
            'desc' => 'Signs a given text',
        ),
    'gnupg_verify' =>
        array (
            'file' => 'function.gnupg-verify.php',
            'desc' => 'Verifies a signed text',
        ),
    'gopher_parsedir' =>
        array (
            'file' => 'function.gopher-parsedir.php',
            'desc' => 'Translate a gopher formatted directory entry into an associative array.',
        ),
    'grapheme_extract' =>
        array (
            'file' => 'function.grapheme-extract.php',
            'desc' => 'Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8.',
        ),
    'grapheme_stripos' =>
        array (
            'file' => 'function.grapheme-stripos.php',
            'desc' => 'Find position (in grapheme units) of first occurrence of a case-insensitive string',
        ),
    'grapheme_stristr' =>
        array (
            'file' => 'function.grapheme-stristr.php',
            'desc' => 'Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack.',
        ),
    'grapheme_strlen' =>
        array (
            'file' => 'function.grapheme-strlen.php',
            'desc' => 'Get string length in grapheme units',
        ),
    'grapheme_strpos' =>
        array (
            'file' => 'function.grapheme-strpos.php',
            'desc' => 'Find position (in grapheme units) of first occurrence of a string',
        ),
    'grapheme_strripos' =>
        array (
            'file' => 'function.grapheme-strripos.php',
            'desc' => 'Find position (in grapheme units) of last occurrence of a case-insensitive string',
        ),
    'grapheme_strrpos' =>
        array (
            'file' => 'function.grapheme-strrpos.php',
            'desc' => 'Find position (in grapheme units) of last occurrence of a string',
        ),
    'grapheme_strstr' =>
        array (
            'file' => 'function.grapheme-strstr.php',
            'desc' => 'Returns part of haystack string from the first occurrence of needle to the end of haystack.',
        ),
    'grapheme_substr' =>
        array (
            'file' => 'function.grapheme-substr.php',
            'desc' => 'Return part of a string',
        ),
    'GregorianToJD' =>
        array (
            'file' => 'function.gregoriantojd.php',
            'desc' => 'Converts a Gregorian date to Julian Day Count',
        ),
    'gupnp_context_get_host_ip' =>
        array (
            'file' => 'function.gupnp-context-get-host-ip.php',
            'desc' => 'Get the IP address',
        ),
    'gupnp_context_get_port' =>
        array (
            'file' => 'function.gupnp-context-get-port.php',
            'desc' => 'Get the port',
        ),
    'gupnp_context_get_subscription_timeout' =>
        array (
            'file' => 'function.gupnp-context-get-subscription-timeout.php',
            'desc' => 'Get the event subscription timeout',
        ),
    'gupnp_context_host_path' =>
        array (
            'file' => 'function.gupnp-context-host-path.php',
            'desc' => 'Start hosting',
        ),
    'gupnp_context_new' =>
        array (
            'file' => 'function.gupnp-context-new.php',
            'desc' => 'Create a new context',
        ),
    'gupnp_context_set_subscription_timeout' =>
        array (
            'file' => 'function.gupnp-context-set-subscription-timeout.php',
            'desc' => 'Sets the event subscription timeout',
        ),
    'gupnp_context_timeout_add' =>
        array (
            'file' => 'function.gupnp-context-timeout-add.php',
            'desc' => 'Sets a function to be called at regular intervals',
        ),
    'gupnp_context_unhost_path' =>
        array (
            'file' => 'function.gupnp-context-unhost-path.php',
            'desc' => 'Stop hosting',
        ),
    'gupnp_control_point_browse_start' =>
        array (
            'file' => 'function.gupnp-control-point-browse-start.php',
            'desc' => 'Start browsing',
        ),
    'gupnp_control_point_browse_stop' =>
        array (
            'file' => 'function.gupnp-control-point-browse-stop.php',
            'desc' => 'Stop browsing',
        ),
    'gupnp_control_point_callback_set' =>
        array (
            'file' => 'function.gupnp-control-point-callback-set.php',
            'desc' => 'Set control point callback',
        ),
    'gupnp_control_point_new' =>
        array (
            'file' => 'function.gupnp-control-point-new.php',
            'desc' => 'Create a new control point',
        ),
    'gupnp_device_action_callback_set' =>
        array (
            'file' => 'function.gupnp-device-action-callback-set.php',
            'desc' => 'Set device callback function',
        ),
    'gupnp_device_info_get' =>
        array (
            'file' => 'function.gupnp-device-info-get.php',
            'desc' => 'Get info of root device',
        ),
    'gupnp_device_info_get_service' =>
        array (
            'file' => 'function.gupnp-device-info-get-service.php',
            'desc' => 'Get the service with type',
        ),
    'gupnp_root_device_get_available' =>
        array (
            'file' => 'function.gupnp-root-device-get-available.php',
            'desc' => 'Check whether root device is available',
        ),
    'gupnp_root_device_get_relative_location' =>
        array (
            'file' => 'function.gupnp-root-device-get-relative-location.php',
            'desc' => 'Get the relative location of root device.',
        ),
    'gupnp_root_device_new' =>
        array (
            'file' => 'function.gupnp-root-device-new.php',
            'desc' => 'Create a new root device',
        ),
    'gupnp_root_device_set_available' =>
        array (
            'file' => 'function.gupnp-root-device-set-available.php',
            'desc' => 'Set whether or not root_device is available',
        ),
    'gupnp_root_device_start' =>
        array (
            'file' => 'function.gupnp-root-device-start.php',
            'desc' => 'Start main loop',
        ),
    'gupnp_root_device_stop' =>
        array (
            'file' => 'function.gupnp-root-device-stop.php',
            'desc' => 'Stop main loop',
        ),
    'gupnp_service_action_get' =>
        array (
            'file' => 'function.gupnp-service-action-get.php',
            'desc' => 'Retrieves the specified action arguments',
        ),
    'gupnp_service_action_return' =>
        array (
            'file' => 'function.gupnp-service-action-return.php',
            'desc' => 'Return successfully',
        ),
    'gupnp_service_action_return_error' =>
        array (
            'file' => 'function.gupnp-service-action-return-error.php',
            'desc' => 'Return error code',
        ),
    'gupnp_service_action_set' =>
        array (
            'file' => 'function.gupnp-service-action-set.php',
            'desc' => 'Sets the specified action return values',
        ),
    'gupnp_service_freeze_notify' =>
        array (
            'file' => 'function.gupnp-service-freeze-notify.php',
            'desc' => 'Freeze new notifications',
        ),
    'gupnp_service_info_get' =>
        array (
            'file' => 'function.gupnp-service-info-get.php',
            'desc' => 'Get full info of service',
        ),
    'gupnp_service_info_get_introspection' =>
        array (
            'file' => 'function.gupnp-service-info-get-introspection.php',
            'desc' => 'Get resource introspection of service',
        ),
    'gupnp_service_introspection_get_state_variable' =>
        array (
            'file' => 'function.gupnp-service-introspection-get-state-variable.php',
            'desc' => 'Returns the state variable data',
        ),
    'gupnp_service_notify' =>
        array (
            'file' => 'function.gupnp-service-notify.php',
            'desc' => 'Notifies listening clients',
        ),
    'gupnp_service_proxy_action_get' =>
        array (
            'file' => 'function.gupnp-service-proxy-action-get.php',
            'desc' => 'Send action to the service and get value',
        ),
    'gupnp_service_proxy_action_set' =>
        array (
            'file' => 'function.gupnp-service-proxy-action-set.php',
            'desc' => 'Send action to the service and set value',
        ),
    'gupnp_service_proxy_add_notify' =>
        array (
            'file' => 'function.gupnp-service-proxy-add-notify.php',
            'desc' => 'Sets up callback for variable change notification',
        ),
    'gupnp_service_proxy_callback_set' =>
        array (
            'file' => 'function.gupnp-service-proxy-callback-set.php',
            'desc' => 'Set service proxy callback for signal',
        ),
    'gupnp_service_proxy_get_subscribed' =>
        array (
            'file' => 'function.gupnp-service-proxy-get-subscribed.php',
            'desc' => 'Check whether subscription is valid to the service',
        ),
    'gupnp_service_proxy_remove_notify' =>
        array (
            'file' => 'function.gupnp-service-proxy-remove-notify.php',
            'desc' => 'Cancels the variable change notification',
        ),
    'gupnp_service_proxy_send_action' =>
        array (
            'file' => 'gupnp-service-proxy-send-action.php',
            'desc' => 'Send action with multiple parameters synchronously',
        ),
    'gupnp_service_proxy_set_subscribed' =>
        array (
            'file' => 'function.gupnp-service-proxy-set-subscribed.php',
            'desc' => '(Un)subscribes to the service.',
        ),
    'gupnp_service_thaw_notify' =>
        array (
            'file' => 'function.gupnp-service-thaw-notify.php',
            'desc' => 'Sends out any pending notifications and stops queuing of new ones.',
        ),
    'gzclose' =>
        array (
            'file' => 'function.gzclose.php',
            'desc' => 'Close an open gz-file pointer',
        ),
    'gzcompress' =>
        array (
            'file' => 'function.gzcompress.php',
            'desc' => 'Compress a string',
        ),
    'gzdecode' =>
        array (
            'file' => 'function.gzdecode.php',
            'desc' => 'Decodes a gzip compressed string',
        ),
    'gzdeflate' =>
        array (
            'file' => 'function.gzdeflate.php',
            'desc' => 'Deflate a string',
        ),
    'gzencode' =>
        array (
            'file' => 'function.gzencode.php',
            'desc' => 'Create a gzip compressed string',
        ),
    'gzeof' =>
        array (
            'file' => 'function.gzeof.php',
            'desc' => 'Test for EOF on a gz-file pointer',
        ),
    'gzfile' =>
        array (
            'file' => 'function.gzfile.php',
            'desc' => 'Read entire gz-file into an array',
        ),
    'gzgetc' =>
        array (
            'file' => 'function.gzgetc.php',
            'desc' => 'Get character from gz-file pointer',
        ),
    'gzgets' =>
        array (
            'file' => 'function.gzgets.php',
            'desc' => 'Get line from file pointer',
        ),
    'gzgetss' =>
        array (
            'file' => 'function.gzgetss.php',
            'desc' => 'Get line from gz-file pointer and strip HTML tags',
        ),
    'gzinflate' =>
        array (
            'file' => 'function.gzinflate.php',
            'desc' => 'Inflate a deflated string',
        ),
    'gzopen' =>
        array (
            'file' => 'function.gzopen.php',
            'desc' => 'Open gz-file',
        ),
    'gzpassthru' =>
        array (
            'file' => 'function.gzpassthru.php',
            'desc' => 'Output all remaining data on a gz-file pointer',
        ),
    'gzputs' =>
        array (
            'file' => 'function.gzputs.php',
            'desc' => 'Alias of gzwrite',
        ),
    'gzread' =>
        array (
            'file' => 'function.gzread.php',
            'desc' => 'Binary-safe gz-file read',
        ),
    'gzrewind' =>
        array (
            'file' => 'function.gzrewind.php',
            'desc' => 'Rewind the position of a gz-file pointer',
        ),
    'gzseek' =>
        array (
            'file' => 'function.gzseek.php',
            'desc' => 'Seek on a gz-file pointer',
        ),
    'gztell' =>
        array (
            'file' => 'function.gztell.php',
            'desc' => 'Tell gz-file pointer read/write position',
        ),
    'gzuncompress' =>
        array (
            'file' => 'function.gzuncompress.php',
            'desc' => 'Uncompress a compressed string',
        ),
    'gzwrite' =>
        array (
            'file' => 'function.gzwrite.php',
            'desc' => 'Binary-safe gz-file write',
        ),
    'HaruAnnotation::setBorderStyle' =>
        array (
            'file' => 'haruannotation.setborderstyle.php',
            'desc' => 'Set the border style of the annotation',
        ),
    'HaruAnnotation::setHighlightMode' =>
        array (
            'file' => 'haruannotation.sethighlightmode.php',
            'desc' => 'Set the highlighting mode of the annotation',
        ),
    'HaruAnnotation::setIcon' =>
        array (
            'file' => 'haruannotation.seticon.php',
            'desc' => 'Set the icon style of the annotation',
        ),
    'HaruAnnotation::setOpened' =>
        array (
            'file' => 'haruannotation.setopened.php',
            'desc' => 'Set the initial state of the annotation',
        ),
    'HaruDestination::setFit' =>
        array (
            'file' => 'harudestination.setfit.php',
            'desc' => 'Set the appearance of the page to fit the window',
        ),
    'HaruDestination::setFitB' =>
        array (
            'file' => 'harudestination.setfitb.php',
            'desc' => 'Set the appearance of the page to fit the bounding box of the page within the window',
        ),
    'HaruDestination::setFitBH' =>
        array (
            'file' => 'harudestination.setfitbh.php',
            'desc' => 'Set the appearance of the page to fit the width of the bounding box',
        ),
    'HaruDestination::setFitBV' =>
        array (
            'file' => 'harudestination.setfitbv.php',
            'desc' => 'Set the appearance of the page to fit the height of the boudning box',
        ),
    'HaruDestination::setFitH' =>
        array (
            'file' => 'harudestination.setfith.php',
            'desc' => 'Set the appearance of the page to fit the window width',
        ),
    'HaruDestination::setFitR' =>
        array (
            'file' => 'harudestination.setfitr.php',
            'desc' => 'Set the appearance of the page to fit the specified rectangle',
        ),
    'HaruDestination::setFitV' =>
        array (
            'file' => 'harudestination.setfitv.php',
            'desc' => 'Set the appearance of the page to fit the window height',
        ),
    'HaruDestination::setXYZ' =>
        array (
            'file' => 'harudestination.setxyz.php',
            'desc' => 'Set the appearance of the page',
        ),
    'HaruDoc::addPage' =>
        array (
            'file' => 'harudoc.addpage.php',
            'desc' => 'Add new page to the document',
        ),
    'HaruDoc::addPageLabel' =>
        array (
            'file' => 'harudoc.addpagelabel.php',
            'desc' => 'Set the numbering style for the specified range of pages',
        ),
    'HaruDoc::createOutline' =>
        array (
            'file' => 'harudoc.createoutline.php',
            'desc' => 'Create a HaruOutline instance',
        ),
    'HaruDoc::getCurrentEncoder' =>
        array (
            'file' => 'harudoc.getcurrentencoder.php',
            'desc' => 'Get HaruEncoder currently used in the document',
        ),
    'HaruDoc::getCurrentPage' =>
        array (
            'file' => 'harudoc.getcurrentpage.php',
            'desc' => 'Return current page of the document',
        ),
    'HaruDoc::getEncoder' =>
        array (
            'file' => 'harudoc.getencoder.php',
            'desc' => 'Get HaruEncoder instance for the specified encoding',
        ),
    'HaruDoc::getFont' =>
        array (
            'file' => 'harudoc.getfont.php',
            'desc' => 'Get HaruFont instance',
        ),
    'HaruDoc::getInfoAttr' =>
        array (
            'file' => 'harudoc.getinfoattr.php',
            'desc' => 'Get current value of the specified document attribute',
        ),
    'HaruDoc::getPageLayout' =>
        array (
            'file' => 'harudoc.getpagelayout.php',
            'desc' => 'Get current page layout',
        ),
    'HaruDoc::getPageMode' =>
        array (
            'file' => 'harudoc.getpagemode.php',
            'desc' => 'Get current page mode',
        ),
    'HaruDoc::getStreamSize' =>
        array (
            'file' => 'harudoc.getstreamsize.php',
            'desc' => 'Get the size of the temporary stream',
        ),
    'HaruDoc::insertPage' =>
        array (
            'file' => 'harudoc.insertpage.php',
            'desc' => 'Insert new page just before the specified page',
        ),
    'HaruDoc::loadJPEG' =>
        array (
            'file' => 'harudoc.loadjpeg.php',
            'desc' => 'Load a JPEG image',
        ),
    'HaruDoc::loadPNG' =>
        array (
            'file' => 'harudoc.loadpng.php',
            'desc' => 'Load PNG image and return HaruImage instance',
        ),
    'HaruDoc::loadRaw' =>
        array (
            'file' => 'harudoc.loadraw.php',
            'desc' => 'Load a RAW image',
        ),
    'HaruDoc::loadTTC' =>
        array (
            'file' => 'harudoc.loadttc.php',
            'desc' => 'Load the font with the specified index from TTC file',
        ),
    'HaruDoc::loadTTF' =>
        array (
            'file' => 'harudoc.loadttf.php',
            'desc' => 'Load TTF font file',
        ),
    'HaruDoc::loadType1' =>
        array (
            'file' => 'harudoc.loadtype1.php',
            'desc' => 'Load Type1 font',
        ),
    'HaruDoc::output' =>
        array (
            'file' => 'harudoc.output.php',
            'desc' => 'Write the document data to the output buffer',
        ),
    'HaruDoc::readFromStream' =>
        array (
            'file' => 'harudoc.readfromstream.php',
            'desc' => 'Read data from the temporary stream',
        ),
    'HaruDoc::resetError' =>
        array (
            'file' => 'harudoc.reseterror.php',
            'desc' => 'Reset error state of the document handle',
        ),
    'HaruDoc::resetStream' =>
        array (
            'file' => 'harudoc.resetstream.php',
            'desc' => 'Rewind the temporary stream',
        ),
    'HaruDoc::save' =>
        array (
            'file' => 'harudoc.save.php',
            'desc' => 'Save the document into the specified file',
        ),
    'HaruDoc::saveToStream' =>
        array (
            'file' => 'harudoc.savetostream.php',
            'desc' => 'Save the document into a temporary stream',
        ),
    'HaruDoc::setCompressionMode' =>
        array (
            'file' => 'harudoc.setcompressionmode.php',
            'desc' => 'Set compression mode for the document',
        ),
    'HaruDoc::setCurrentEncoder' =>
        array (
            'file' => 'harudoc.setcurrentencoder.php',
            'desc' => 'Set the current encoder for the document',
        ),
    'HaruDoc::setEncryptionMode' =>
        array (
            'file' => 'harudoc.setencryptionmode.php',
            'desc' => 'Set encryption mode for the document',
        ),
    'HaruDoc::setInfoAttr' =>
        array (
            'file' => 'harudoc.setinfoattr.php',
            'desc' => 'Set the info attribute of the document',
        ),
    'HaruDoc::setInfoDateAttr' =>
        array (
            'file' => 'harudoc.setinfodateattr.php',
            'desc' => 'Set the datetime info attributes of the document',
        ),
    'HaruDoc::setOpenAction' =>
        array (
            'file' => 'harudoc.setopenaction.php',
            'desc' => 'Define which page is shown when the document is opened',
        ),
    'HaruDoc::setPageLayout' =>
        array (
            'file' => 'harudoc.setpagelayout.php',
            'desc' => 'Set how pages should be displayed',
        ),
    'HaruDoc::setPageMode' =>
        array (
            'file' => 'harudoc.setpagemode.php',
            'desc' => 'Set how the document should be displayed',
        ),
    'HaruDoc::setPagesConfiguration' =>
        array (
            'file' => 'harudoc.setpagesconfiguration.php',
            'desc' => 'Set the number of pages per set of pages',
        ),
    'HaruDoc::setPassword' =>
        array (
            'file' => 'harudoc.setpassword.php',
            'desc' => 'Set owner and user passwords for the document',
        ),
    'HaruDoc::setPermission' =>
        array (
            'file' => 'harudoc.setpermission.php',
            'desc' => 'Set permissions for the document',
        ),
    'HaruDoc::useCNSEncodings' =>
        array (
            'file' => 'harudoc.usecnsencodings.php',
            'desc' => 'Enable Chinese simplified encodings',
        ),
    'HaruDoc::useCNSFonts' =>
        array (
            'file' => 'harudoc.usecnsfonts.php',
            'desc' => 'Enable builtin Chinese simplified fonts',
        ),
    'HaruDoc::useCNTEncodings' =>
        array (
            'file' => 'harudoc.usecntencodings.php',
            'desc' => 'Enable Chinese traditional encodings',
        ),
    'HaruDoc::useCNTFonts' =>
        array (
            'file' => 'harudoc.usecntfonts.php',
            'desc' => 'Enable builtin Chinese traditional fonts',
        ),
    'HaruDoc::useJPEncodings' =>
        array (
            'file' => 'harudoc.usejpencodings.php',
            'desc' => 'Enable Japanese encodings',
        ),
    'HaruDoc::useJPFonts' =>
        array (
            'file' => 'harudoc.usejpfonts.php',
            'desc' => 'Enable builtin Japanese fonts',
        ),
    'HaruDoc::useKREncodings' =>
        array (
            'file' => 'harudoc.usekrencodings.php',
            'desc' => 'Enable Korean encodings',
        ),
    'HaruDoc::useKRFonts' =>
        array (
            'file' => 'harudoc.usekrfonts.php',
            'desc' => 'Enable builtin Korean fonts',
        ),
    'HaruDoc::__construct' =>
        array (
            'file' => 'harudoc.construct.php',
            'desc' => 'Construct new HaruDoc instance',
        ),
    'HaruEncoder::getByteType' =>
        array (
            'file' => 'haruencoder.getbytetype.php',
            'desc' => 'Get the type of the byte in the text',
        ),
    'HaruEncoder::getType' =>
        array (
            'file' => 'haruencoder.gettype.php',
            'desc' => 'Get the type of the encoder',
        ),
    'HaruEncoder::getUnicode' =>
        array (
            'file' => 'haruencoder.getunicode.php',
            'desc' => 'Convert the specified character to unicode',
        ),
    'HaruEncoder::getWritingMode' =>
        array (
            'file' => 'haruencoder.getwritingmode.php',
            'desc' => 'Get the writing mode of the encoder',
        ),
    'HaruFont::getAscent' =>
        array (
            'file' => 'harufont.getascent.php',
            'desc' => 'Get the vertical ascent of the font',
        ),
    'HaruFont::getCapHeight' =>
        array (
            'file' => 'harufont.getcapheight.php',
            'desc' => 'Get the distance from the baseline of uppercase letters',
        ),
    'HaruFont::getDescent' =>
        array (
            'file' => 'harufont.getdescent.php',
            'desc' => 'Get the vertical descent of the font',
        ),
    'HaruFont::getEncodingName' =>
        array (
            'file' => 'harufont.getencodingname.php',
            'desc' => 'Get the name of the encoding',
        ),
    'HaruFont::getFontName' =>
        array (
            'file' => 'harufont.getfontname.php',
            'desc' => 'Get the name of the font',
        ),
    'HaruFont::getTextWidth' =>
        array (
            'file' => 'harufont.gettextwidth.php',
            'desc' => 'Get the total width of the text, number of characters, number of words and number of spaces',
        ),
    'HaruFont::getUnicodeWidth' =>
        array (
            'file' => 'harufont.getunicodewidth.php',
            'desc' => 'Get the width of the character in the font',
        ),
    'HaruFont::getXHeight' =>
        array (
            'file' => 'harufont.getxheight.php',
            'desc' => 'Get the distance from the baseline of lowercase letters',
        ),
    'HaruFont::measureText' =>
        array (
            'file' => 'harufont.measuretext.php',
            'desc' => 'Calculate the number of characters which can be included within the specified width',
        ),
    'HaruImage::getBitsPerComponent' =>
        array (
            'file' => 'haruimage.getbitspercomponent.php',
            'desc' => 'Get the number of bits used to describe each color component of the image',
        ),
    'HaruImage::getColorSpace' =>
        array (
            'file' => 'haruimage.getcolorspace.php',
            'desc' => 'Get the name of the color space',
        ),
    'HaruImage::getHeight' =>
        array (
            'file' => 'haruimage.getheight.php',
            'desc' => 'Get the height of the image',
        ),
    'HaruImage::getSize' =>
        array (
            'file' => 'haruimage.getsize.php',
            'desc' => 'Get size of the image',
        ),
    'HaruImage::getWidth' =>
        array (
            'file' => 'haruimage.getwidth.php',
            'desc' => 'Get the width of the image',
        ),
    'HaruImage::setColorMask' =>
        array (
            'file' => 'haruimage.setcolormask.php',
            'desc' => 'Set the color mask of the image',
        ),
    'HaruImage::setMaskImage' =>
        array (
            'file' => 'haruimage.setmaskimage.php',
            'desc' => 'Set the image mask',
        ),
    'HaruOutline::setDestination' =>
        array (
            'file' => 'haruoutline.setdestination.php',
            'desc' => 'Set the destination for the outline',
        ),
    'HaruOutline::setOpened' =>
        array (
            'file' => 'haruoutline.setopened.php',
            'desc' => 'Set the initial state of the outline',
        ),
    'HaruPage::arc' =>
        array (
            'file' => 'harupage.arc.php',
            'desc' => 'Append an arc to the current path',
        ),
    'HaruPage::beginText' =>
        array (
            'file' => 'harupage.begintext.php',
            'desc' => 'Begin a text object and set the current text position to (0,0)',
        ),
    'HaruPage::circle' =>
        array (
            'file' => 'harupage.circle.php',
            'desc' => 'Append a circle to the current path',
        ),
    'HaruPage::closePath' =>
        array (
            'file' => 'harupage.closepath.php',
            'desc' => 'Append a straight line from the current point to the start point of the path',
        ),
    'HaruPage::concat' =>
        array (
            'file' => 'harupage.concat.php',
            'desc' => 'Concatenate current transformation matrix of the page and the specified matrix',
        ),
    'HaruPage::createDestination' =>
        array (
            'file' => 'harupage.createdestination.php',
            'desc' => 'Create new HaruDestination instance',
        ),
    'HaruPage::createLinkAnnotation' =>
        array (
            'file' => 'harupage.createlinkannotation.php',
            'desc' => 'Create new HaruAnnotation instance',
        ),
    'HaruPage::createTextAnnotation' =>
        array (
            'file' => 'harupage.createtextannotation.php',
            'desc' => 'Create new HaruAnnotation instance',
        ),
    'HaruPage::createURLAnnotation' =>
        array (
            'file' => 'harupage.createurlannotation.php',
            'desc' => 'Create and return new HaruAnnotation instance',
        ),
    'HaruPage::curveTo' =>
        array (
            'file' => 'harupage.curveto.php',
            'desc' => 'Append a Bezier curve to the current path',
        ),
    'HaruPage::curveTo2' =>
        array (
            'file' => 'harupage.curveto2.php',
            'desc' => 'Append a Bezier curve to the current path',
        ),
    'HaruPage::curveTo3' =>
        array (
            'file' => 'harupage.curveto3.php',
            'desc' => 'Append a Bezier curve to the current path',
        ),
    'HaruPage::drawImage' =>
        array (
            'file' => 'harupage.drawimage.php',
            'desc' => 'Show image at the page',
        ),
    'HaruPage::ellipse' =>
        array (
            'file' => 'harupage.ellipse.php',
            'desc' => 'Append an ellipse to the current path',
        ),
    'HaruPage::endPath' =>
        array (
            'file' => 'harupage.endpath.php',
            'desc' => 'End current path object without filling and painting operations',
        ),
    'HaruPage::endText' =>
        array (
            'file' => 'harupage.endtext.php',
            'desc' => 'End current text object',
        ),
    'HaruPage::eofill' =>
        array (
            'file' => 'harupage.eofill.php',
            'desc' => 'Fill current path using even-odd rule',
        ),
    'HaruPage::eoFillStroke' =>
        array (
            'file' => 'harupage.eofillstroke.php',
            'desc' => 'Fill current path using even-odd rule, then paint the path',
        ),
    'HaruPage::fill' =>
        array (
            'file' => 'harupage.fill.php',
            'desc' => 'Fill current path using nonzero winding number rule',
        ),
    'HaruPage::fillStroke' =>
        array (
            'file' => 'harupage.fillstroke.php',
            'desc' => 'Fill current path using nonzero winding number rule, then paint the path',
        ),
    'HaruPage::getCharSpace' =>
        array (
            'file' => 'harupage.getcharspace.php',
            'desc' => 'Get the current value of character spacing',
        ),
    'HaruPage::getCMYKFill' =>
        array (
            'file' => 'harupage.getcmykfill.php',
            'desc' => 'Get the current filling color',
        ),
    'HaruPage::getCMYKStroke' =>
        array (
            'file' => 'harupage.getcmykstroke.php',
            'desc' => 'Get the current stroking color',
        ),
    'HaruPage::getCurrentFont' =>
        array (
            'file' => 'harupage.getcurrentfont.php',
            'desc' => 'Get the currently used font',
        ),
    'HaruPage::getCurrentFontSize' =>
        array (
            'file' => 'harupage.getcurrentfontsize.php',
            'desc' => 'Get the current font size',
        ),
    'HaruPage::getCurrentPos' =>
        array (
            'file' => 'harupage.getcurrentpos.php',
            'desc' => 'Get the current position for path painting',
        ),
    'HaruPage::getCurrentTextPos' =>
        array (
            'file' => 'harupage.getcurrenttextpos.php',
            'desc' => 'Get the current position for text printing',
        ),
    'HaruPage::getDash' =>
        array (
            'file' => 'harupage.getdash.php',
            'desc' => 'Get the current dash pattern',
        ),
    'HaruPage::getFillingColorSpace' =>
        array (
            'file' => 'harupage.getfillingcolorspace.php',
            'desc' => 'Get the current filling color space',
        ),
    'HaruPage::getFlatness' =>
        array (
            'file' => 'harupage.getflatness.php',
            'desc' => 'Get the flatness of the page',
        ),
    'HaruPage::getGMode' =>
        array (
            'file' => 'harupage.getgmode.php',
            'desc' => 'Get the current graphics mode',
        ),
    'HaruPage::getGrayFill' =>
        array (
            'file' => 'harupage.getgrayfill.php',
            'desc' => 'Get the current filling color',
        ),
    'HaruPage::getGrayStroke' =>
        array (
            'file' => 'harupage.getgraystroke.php',
            'desc' => 'Get the current stroking color',
        ),
    'HaruPage::getHeight' =>
        array (
            'file' => 'harupage.getheight.php',
            'desc' => 'Get the height of the page',
        ),
    'HaruPage::getHorizontalScaling' =>
        array (
            'file' => 'harupage.gethorizontalscaling.php',
            'desc' => 'Get the current value of horizontal scaling',
        ),
    'HaruPage::getLineCap' =>
        array (
            'file' => 'harupage.getlinecap.php',
            'desc' => 'Get the current line cap style',
        ),
    'HaruPage::getLineJoin' =>
        array (
            'file' => 'harupage.getlinejoin.php',
            'desc' => 'Get the current line join style',
        ),
    'HaruPage::getLineWidth' =>
        array (
            'file' => 'harupage.getlinewidth.php',
            'desc' => 'Get the current line width',
        ),
    'HaruPage::getMiterLimit' =>
        array (
            'file' => 'harupage.getmiterlimit.php',
            'desc' => 'Get the value of miter limit',
        ),
    'HaruPage::getRGBFill' =>
        array (
            'file' => 'harupage.getrgbfill.php',
            'desc' => 'Get the current filling color',
        ),
    'HaruPage::getRGBStroke' =>
        array (
            'file' => 'harupage.getrgbstroke.php',
            'desc' => 'Get the current stroking color',
        ),
    'HaruPage::getStrokingColorSpace' =>
        array (
            'file' => 'harupage.getstrokingcolorspace.php',
            'desc' => 'Get the current stroking color space',
        ),
    'HaruPage::getTextLeading' =>
        array (
            'file' => 'harupage.gettextleading.php',
            'desc' => 'Get the current value of line spacing',
        ),
    'HaruPage::getTextMatrix' =>
        array (
            'file' => 'harupage.gettextmatrix.php',
            'desc' => 'Get the current text transformation matrix of the page',
        ),
    'HaruPage::getTextRenderingMode' =>
        array (
            'file' => 'harupage.gettextrenderingmode.php',
            'desc' => 'Get the current text rendering mode',
        ),
    'HaruPage::getTextRise' =>
        array (
            'file' => 'harupage.gettextrise.php',
            'desc' => 'Get the current value of text rising',
        ),
    'HaruPage::getTextWidth' =>
        array (
            'file' => 'harupage.gettextwidth.php',
            'desc' => 'Get the width of the text using current fontsize, character spacing and word spacing',
        ),
    'HaruPage::getTransMatrix' =>
        array (
            'file' => 'harupage.gettransmatrix.php',
            'desc' => 'Get the current transformation matrix of the page',
        ),
    'HaruPage::getWidth' =>
        array (
            'file' => 'harupage.getwidth.php',
            'desc' => 'Get the width of the page',
        ),
    'HaruPage::getWordSpace' =>
        array (
            'file' => 'harupage.getwordspace.php',
            'desc' => 'Get the current value of word spacing',
        ),
    'HaruPage::lineTo' =>
        array (
            'file' => 'harupage.lineto.php',
            'desc' => 'Draw a line from the current point to the specified point',
        ),
    'HaruPage::measureText' =>
        array (
            'file' => 'harupage.measuretext.php',
            'desc' => 'Calculate the number of characters which can be included within the specified width',
        ),
    'HaruPage::moveTextPos' =>
        array (
            'file' => 'harupage.movetextpos.php',
            'desc' => 'Move text position to the specified offset',
        ),
    'HaruPage::moveTo' =>
        array (
            'file' => 'harupage.moveto.php',
            'desc' => 'Set starting point for new drawing path',
        ),
    'HaruPage::moveToNextLine' =>
        array (
            'file' => 'harupage.movetonextline.php',
            'desc' => 'Move text position to the start of the next line',
        ),
    'HaruPage::rectangle' =>
        array (
            'file' => 'harupage.rectangle.php',
            'desc' => 'Append a rectangle to the current path',
        ),
    'HaruPage::setCharSpace' =>
        array (
            'file' => 'harupage.setcharspace.php',
            'desc' => 'Set character spacing for the page',
        ),
    'HaruPage::setCMYKFill' =>
        array (
            'file' => 'harupage.setcmykfill.php',
            'desc' => 'Set filling color for the page',
        ),
    'HaruPage::setCMYKStroke' =>
        array (
            'file' => 'harupage.setcmykstroke.php',
            'desc' => 'Set stroking color for the page',
        ),
    'HaruPage::setDash' =>
        array (
            'file' => 'harupage.setdash.php',
            'desc' => 'Set the dash pattern for the page',
        ),
    'HaruPage::setFlatness' =>
        array (
            'file' => 'harupage.setflatness.php',
            'desc' => 'Set flatness for the page',
        ),
    'HaruPage::setFontAndSize' =>
        array (
            'file' => 'harupage.setfontandsize.php',
            'desc' => 'Set font and fontsize for the page',
        ),
    'HaruPage::setGrayFill' =>
        array (
            'file' => 'harupage.setgrayfill.php',
            'desc' => 'Set filling color for the page',
        ),
    'HaruPage::setGrayStroke' =>
        array (
            'file' => 'harupage.setgraystroke.php',
            'desc' => 'Sets stroking color for the page',
        ),
    'HaruPage::setHeight' =>
        array (
            'file' => 'harupage.setheight.php',
            'desc' => 'Set height of the page',
        ),
    'HaruPage::setHorizontalScaling' =>
        array (
            'file' => 'harupage.sethorizontalscaling.php',
            'desc' => 'Set horizontal scaling for the page',
        ),
    'HaruPage::setLineCap' =>
        array (
            'file' => 'harupage.setlinecap.php',
            'desc' => 'Set the shape to be used at the ends of lines',
        ),
    'HaruPage::setLineJoin' =>
        array (
            'file' => 'harupage.setlinejoin.php',
            'desc' => 'Set line join style for the page',
        ),
    'HaruPage::setLineWidth' =>
        array (
            'file' => 'harupage.setlinewidth.php',
            'desc' => 'Set line width for the page',
        ),
    'HaruPage::setMiterLimit' =>
        array (
            'file' => 'harupage.setmiterlimit.php',
            'desc' => 'Set the current value of the miter limit of the page',
        ),
    'HaruPage::setRGBFill' =>
        array (
            'file' => 'harupage.setrgbfill.php',
            'desc' => 'Set filling color for the page',
        ),
    'HaruPage::setRGBStroke' =>
        array (
            'file' => 'harupage.setrgbstroke.php',
            'desc' => 'Set stroking color for the page',
        ),
    'HaruPage::setRotate' =>
        array (
            'file' => 'harupage.setrotate.php',
            'desc' => 'Set rotation angle of the page',
        ),
    'HaruPage::setSize' =>
        array (
            'file' => 'harupage.setsize.php',
            'desc' => 'Set size and direction of the page',
        ),
    'HaruPage::setSlideShow' =>
        array (
            'file' => 'harupage.setslideshow.php',
            'desc' => 'Set transition style for the page',
        ),
    'HaruPage::setTextLeading' =>
        array (
            'file' => 'harupage.settextleading.php',
            'desc' => 'Set text leading (line spacing) for the page',
        ),
    'HaruPage::setTextMatrix' =>
        array (
            'file' => 'harupage.settextmatrix.php',
            'desc' => 'Set the current text transformation matrix of the page',
        ),
    'HaruPage::setTextRenderingMode' =>
        array (
            'file' => 'harupage.settextrenderingmode.php',
            'desc' => 'Set text rendering mode for the page',
        ),
    'HaruPage::setTextRise' =>
        array (
            'file' => 'harupage.settextrise.php',
            'desc' => 'Set the current value of text rising',
        ),
    'HaruPage::setWidth' =>
        array (
            'file' => 'harupage.setwidth.php',
            'desc' => 'Set width of the page',
        ),
    'HaruPage::setWordSpace' =>
        array (
            'file' => 'harupage.setwordspace.php',
            'desc' => 'Set word spacing for the page',
        ),
    'HaruPage::showText' =>
        array (
            'file' => 'harupage.showtext.php',
            'desc' => 'Print text at the current position of the page',
        ),
    'HaruPage::showTextNextLine' =>
        array (
            'file' => 'harupage.showtextnextline.php',
            'desc' => 'Move the current position to the start of the next line and print the text',
        ),
    'HaruPage::stroke' =>
        array (
            'file' => 'harupage.stroke.php',
            'desc' => 'Paint current path',
        ),
    'HaruPage::textOut' =>
        array (
            'file' => 'harupage.textout.php',
            'desc' => 'Print the text on the specified position',
        ),
    'HaruPage::textRect' =>
        array (
            'file' => 'harupage.textrect.php',
            'desc' => 'Print the text inside the specified region',
        ),
    'hash' =>
        array (
            'file' => 'function.hash.php',
            'desc' => 'Generate a hash value (message digest)',
        ),
    'hash_algos' =>
        array (
            'file' => 'function.hash-algos.php',
            'desc' => 'Return a list of registered hashing algorithms',
        ),
    'hash_copy' =>
        array (
            'file' => 'function.hash-copy.php',
            'desc' => 'Copy hashing context',
        ),
    'hash_equals' =>
        array (
            'file' => 'function.hash-equals.php',
            'desc' => 'Timing attack safe string comparison',
        ),
    'hash_file' =>
        array (
            'file' => 'function.hash-file.php',
            'desc' => 'Generate a hash value using the contents of a given file',
        ),
    'hash_final' =>
        array (
            'file' => 'function.hash-final.php',
            'desc' => 'Finalize an incremental hash and return resulting digest',
        ),
    'hash_hmac' =>
        array (
            'file' => 'function.hash-hmac.php',
            'desc' => 'Generate a keyed hash value using the HMAC method',
        ),
    'hash_hmac_file' =>
        array (
            'file' => 'function.hash-hmac-file.php',
            'desc' => 'Generate a keyed hash value using the HMAC method and the contents of a given file',
        ),
    'hash_init' =>
        array (
            'file' => 'function.hash-init.php',
            'desc' => 'Initialize an incremental hashing context',
        ),
    'hash_pbkdf2' =>
        array (
            'file' => 'function.hash-pbkdf2.php',
            'desc' => 'Generate a PBKDF2 key derivation of a supplied password',
        ),
    'hash_update' =>
        array (
            'file' => 'function.hash-update.php',
            'desc' => 'Pump data into an active hashing context',
        ),
    'hash_update_file' =>
        array (
            'file' => 'function.hash-update-file.php',
            'desc' => 'Pump data into an active hashing context from a file',
        ),
    'hash_update_stream' =>
        array (
            'file' => 'function.hash-update-stream.php',
            'desc' => 'Pump data into an active hashing context from an open stream',
        ),
    'header' =>
        array (
            'file' => 'function.header.php',
            'desc' => 'Send a raw HTTP header',
        ),
    'headers_list' =>
        array (
            'file' => 'function.headers-list.php',
            'desc' => 'Returns a list of response headers sent (or ready to send)',
        ),
    'headers_sent' =>
        array (
            'file' => 'function.headers-sent.php',
            'desc' => 'Checks if or where headers have been sent',
        ),
    'header_register_callback' =>
        array (
            'file' => 'function.header-register-callback.php',
            'desc' => 'Call a header function',
        ),
    'header_remove' =>
        array (
            'file' => 'function.header-remove.php',
            'desc' => 'Remove previously set headers',
        ),
    'hebrev' =>
        array (
            'file' => 'function.hebrev.php',
            'desc' => 'Convert logical Hebrew text to visual text',
        ),
    'hebrevc' =>
        array (
            'file' => 'function.hebrevc.php',
            'desc' => 'Convert logical Hebrew text to visual text with newline conversion',
        ),
    'hex2bin' =>
        array (
            'file' => 'function.hex2bin.php',
            'desc' => 'Decodes a hexadecimally encoded binary string',
        ),
    'hexdec' =>
        array (
            'file' => 'function.hexdec.php',
            'desc' => 'Hexadecimal to decimal',
        ),
    'highlight_file' =>
        array (
            'file' => 'function.highlight-file.php',
            'desc' => 'Syntax highlighting of a file',
        ),
    'highlight_string' =>
        array (
            'file' => 'function.highlight-string.php',
            'desc' => 'Syntax highlighting of a string',
        ),
    'HRTime\\PerformanceCounter::getElapsedTicks' =>
        array (
            'file' => 'hrtime-performancecounter.getelapsedticks.php',
            'desc' => 'Get elapsed ticks for all intervals.',
        ),
    'HRTime\\PerformanceCounter::getFrequency' =>
        array (
            'file' => 'hrtime-performancecounter.getfrequency.php',
            'desc' => 'Timer frequency in ticks per second',
        ),
    'HRTime\\PerformanceCounter::getLastElapsedTicks' =>
        array (
            'file' => 'hrtime-performancecounter.getlastelapsedticks.php',
            'desc' => 'Get elapsed ticks for the last interval.',
        ),
    'HRTime\\PerformanceCounter::isRunning' =>
        array (
            'file' => 'hrtime-performancecounter.isrunning.php',
            'desc' => 'Whether the measurement is running.',
        ),
    'HRTime\\PerformanceCounter::start' =>
        array (
            'file' => 'hrtime-performancecounter.start.php',
            'desc' => 'Start time measurement',
        ),
    'HRTime\\PerformanceCounter::stop' =>
        array (
            'file' => 'hrtime-performancecounter.stop.php',
            'desc' => 'Stop time measurement',
        ),
    'HRTime\\StopWatch::getElapsedTime' =>
        array (
            'file' => 'hrtime-stopwatch.getelapsedtime.php',
            'desc' => 'Get elapsed time for all intervals.',
        ),
    'HRTime\\StopWatch::getLastElapsedTime' =>
        array (
            'file' => 'hrtime-stopwatch.getlastelapsedtime.php',
            'desc' => 'Get elapsed time for the last interval.',
        ),
    'htmlentities' =>
        array (
            'file' => 'function.htmlentities.php',
            'desc' => 'Convert all applicable characters to HTML entities',
        ),
    'htmlspecialchars' =>
        array (
            'file' => 'function.htmlspecialchars.php',
            'desc' => 'Convert special characters to HTML entities',
        ),
    'htmlspecialchars_decode' =>
        array (
            'file' => 'function.htmlspecialchars-decode.php',
            'desc' => 'Convert special HTML entities back to characters',
        ),
    'html_entity_decode' =>
        array (
            'file' => 'function.html-entity-decode.php',
            'desc' => 'Convert all HTML entities to their applicable characters',
        ),
    'http://' =>
        array (
            'file' => 'wrappers.http.php',
            'desc' => 'Accessing HTTP(s) URLs',
        ),
    'HTTP context options' =>
        array (
            'file' => 'context.http.php',
            'desc' => 'HTTP context option listing',
        ),
    'HttpDeflateStream::factory' =>
        array (
            'file' => 'httpdeflatestream.factory.php',
            'desc' => 'HttpDeflateStream class factory',
        ),
    'HttpDeflateStream::finish' =>
        array (
            'file' => 'httpdeflatestream.finish.php',
            'desc' => 'Finalize deflate stream',
        ),
    'HttpDeflateStream::flush' =>
        array (
            'file' => 'httpdeflatestream.flush.php',
            'desc' => 'Flush deflate stream',
        ),
    'HttpDeflateStream::update' =>
        array (
            'file' => 'httpdeflatestream.update.php',
            'desc' => 'Update deflate stream',
        ),
    'HttpDeflateStream::__construct' =>
        array (
            'file' => 'httpdeflatestream.construct.php',
            'desc' => 'HttpDeflateStream class constructor',
        ),
    'HttpInflateStream::factory' =>
        array (
            'file' => 'httpinflatestream.factory.php',
            'desc' => 'HttpInflateStream class factory',
        ),
    'HttpInflateStream::finish' =>
        array (
            'file' => 'httpinflatestream.finish.php',
            'desc' => 'Finalize inflate stream',
        ),
    'HttpInflateStream::flush' =>
        array (
            'file' => 'httpinflatestream.flush.php',
            'desc' => 'Flush inflate stream',
        ),
    'HttpInflateStream::update' =>
        array (
            'file' => 'httpinflatestream.update.php',
            'desc' => 'Update inflate stream',
        ),
    'HttpInflateStream::__construct' =>
        array (
            'file' => 'httpinflatestream.construct.php',
            'desc' => 'HttpInflateStream class constructor',
        ),
    'HttpMessage::addHeaders' =>
        array (
            'file' => 'httpmessage.addheaders.php',
            'desc' => 'Add headers',
        ),
    'HttpMessage::detach' =>
        array (
            'file' => 'httpmessage.detach.php',
            'desc' => 'Detach HttpMessage',
        ),
    'HttpMessage::factory' =>
        array (
            'file' => 'httpmessage.factory.php',
            'desc' => 'Create HttpMessage from string',
        ),
    'HttpMessage::fromEnv' =>
        array (
            'file' => 'httpmessage.fromenv.php',
            'desc' => 'Create HttpMessage from environment',
        ),
    'HttpMessage::fromString' =>
        array (
            'file' => 'httpmessage.fromstring.php',
            'desc' => 'Create HttpMessage from string',
        ),
    'HttpMessage::getBody' =>
        array (
            'file' => 'httpmessage.getbody.php',
            'desc' => 'Get message body',
        ),
    'HttpMessage::getHeader' =>
        array (
            'file' => 'httpmessage.getheader.php',
            'desc' => 'Get header',
        ),
    'HttpMessage::getHeaders' =>
        array (
            'file' => 'httpmessage.getheaders.php',
            'desc' => 'Get message headers',
        ),
    'HttpMessage::getHttpVersion' =>
        array (
            'file' => 'httpmessage.gethttpversion.php',
            'desc' => 'Get HTTP version',
        ),
    'HttpMessage::getParentMessage' =>
        array (
            'file' => 'httpmessage.getparentmessage.php',
            'desc' => 'Get parent message',
        ),
    'HttpMessage::getRequestMethod' =>
        array (
            'file' => 'httpmessage.getrequestmethod.php',
            'desc' => 'Get request method',
        ),
    'HttpMessage::getRequestUrl' =>
        array (
            'file' => 'httpmessage.getrequesturl.php',
            'desc' => 'Get request URL',
        ),
    'HttpMessage::getResponseCode' =>
        array (
            'file' => 'httpmessage.getresponsecode.php',
            'desc' => 'Get response code',
        ),
    'HttpMessage::getResponseStatus' =>
        array (
            'file' => 'httpmessage.getresponsestatus.php',
            'desc' => 'Get response status',
        ),
    'HttpMessage::getType' =>
        array (
            'file' => 'httpmessage.gettype.php',
            'desc' => 'Get message type',
        ),
    'HttpMessage::guessContentType' =>
        array (
            'file' => 'httpmessage.guesscontenttype.php',
            'desc' => 'Guess content type',
        ),
    'HttpMessage::prepend' =>
        array (
            'file' => 'httpmessage.prepend.php',
            'desc' => 'Prepend message(s)',
        ),
    'HttpMessage::reverse' =>
        array (
            'file' => 'httpmessage.reverse.php',
            'desc' => 'Reverse message chain',
        ),
    'HttpMessage::send' =>
        array (
            'file' => 'httpmessage.send.php',
            'desc' => 'Send message',
        ),
    'HttpMessage::setBody' =>
        array (
            'file' => 'httpmessage.setbody.php',
            'desc' => 'Set message body',
        ),
    'HttpMessage::setHeaders' =>
        array (
            'file' => 'httpmessage.setheaders.php',
            'desc' => 'Set headers',
        ),
    'HttpMessage::setHttpVersion' =>
        array (
            'file' => 'httpmessage.sethttpversion.php',
            'desc' => 'Set HTTP version',
        ),
    'HttpMessage::setRequestMethod' =>
        array (
            'file' => 'httpmessage.setrequestmethod.php',
            'desc' => 'Set request method',
        ),
    'HttpMessage::setRequestUrl' =>
        array (
            'file' => 'httpmessage.setrequesturl.php',
            'desc' => 'Set request URL',
        ),
    'HttpMessage::setResponseCode' =>
        array (
            'file' => 'httpmessage.setresponsecode.php',
            'desc' => 'Set response code',
        ),
    'HttpMessage::setResponseStatus' =>
        array (
            'file' => 'httpmessage.setresponsestatus.php',
            'desc' => 'Set response status',
        ),
    'HttpMessage::setType' =>
        array (
            'file' => 'httpmessage.settype.php',
            'desc' => 'Set message type',
        ),
    'HttpMessage::toMessageTypeObject' =>
        array (
            'file' => 'httpmessage.tomessagetypeobject.php',
            'desc' => 'Create HTTP object regarding message type',
        ),
    'HttpMessage::toString' =>
        array (
            'file' => 'httpmessage.tostring.php',
            'desc' => 'Get string representation',
        ),
    'HttpMessage::__construct' =>
        array (
            'file' => 'httpmessage.construct.php',
            'desc' => 'HttpMessage constructor',
        ),
    'HttpQueryString::get' =>
        array (
            'file' => 'httpquerystring.get.php',
            'desc' => 'Get the query string or a part thereof',
        ),
    'HttpQueryString::mod' =>
        array (
            'file' => 'httpquerystring.mod.php',
            'desc' => 'Modifiy query string copy',
        ),
    'HttpQueryString::set' =>
        array (
            'file' => 'httpquerystring.set.php',
            'desc' => 'Set query string params',
        ),
    'HttpQueryString::singleton' =>
        array (
            'file' => 'httpquerystring.singleton.php',
            'desc' => 'HttpQueryString singleton',
        ),
    'HttpQueryString::toArray' =>
        array (
            'file' => 'httpquerystring.toarray.php',
            'desc' => 'Get query string as array',
        ),
    'HttpQueryString::toString' =>
        array (
            'file' => 'httpquerystring.tostring.php',
            'desc' => 'Get query string',
        ),
    'HttpQueryString::xlate' =>
        array (
            'file' => 'httpquerystring.xlate.php',
            'desc' => 'Change query strings charset',
        ),
    'HttpQueryString::__construct' =>
        array (
            'file' => 'httpquerystring.construct.php',
            'desc' => 'HttpQueryString constructor',
        ),
    'HttpRequest::addCookies' =>
        array (
            'file' => 'httprequest.addcookies.php',
            'desc' => 'Add cookies',
        ),
    'HttpRequest::addHeaders' =>
        array (
            'file' => 'httprequest.addheaders.php',
            'desc' => 'Add headers',
        ),
    'HttpRequest::addPostFields' =>
        array (
            'file' => 'httprequest.addpostfields.php',
            'desc' => 'Add post fields',
        ),
    'HttpRequest::addPostFile' =>
        array (
            'file' => 'httprequest.addpostfile.php',
            'desc' => 'Add post file',
        ),
    'HttpRequest::addPutData' =>
        array (
            'file' => 'httprequest.addputdata.php',
            'desc' => 'Add put data',
        ),
    'HttpRequest::addQueryData' =>
        array (
            'file' => 'httprequest.addquerydata.php',
            'desc' => 'Add query data',
        ),
    'HttpRequest::addRawPostData' =>
        array (
            'file' => 'httprequest.addrawpostdata.php',
            'desc' => 'Add raw post data',
        ),
    'HttpRequest::addSslOptions' =>
        array (
            'file' => 'httprequest.addssloptions.php',
            'desc' => 'Add ssl options',
        ),
    'HttpRequest::clearHistory' =>
        array (
            'file' => 'httprequest.clearhistory.php',
            'desc' => 'Clear history',
        ),
    'HttpRequest::enableCookies' =>
        array (
            'file' => 'httprequest.enablecookies.php',
            'desc' => 'Enable cookies',
        ),
    'HttpRequest::getContentType' =>
        array (
            'file' => 'httprequest.getcontenttype.php',
            'desc' => 'Get content type',
        ),
    'HttpRequest::getCookies' =>
        array (
            'file' => 'httprequest.getcookies.php',
            'desc' => 'Get cookies',
        ),
    'HttpRequest::getHeaders' =>
        array (
            'file' => 'httprequest.getheaders.php',
            'desc' => 'Get headers',
        ),
    'HttpRequest::getHistory' =>
        array (
            'file' => 'httprequest.gethistory.php',
            'desc' => 'Get history',
        ),
    'HttpRequest::getMethod' =>
        array (
            'file' => 'httprequest.getmethod.php',
            'desc' => 'Get method',
        ),
    'HttpRequest::getOptions' =>
        array (
            'file' => 'httprequest.getoptions.php',
            'desc' => 'Get options',
        ),
    'HttpRequest::getPostFields' =>
        array (
            'file' => 'httprequest.getpostfields.php',
            'desc' => 'Get post fields',
        ),
    'HttpRequest::getPostFiles' =>
        array (
            'file' => 'httprequest.getpostfiles.php',
            'desc' => 'Get post files',
        ),
    'HttpRequest::getPutData' =>
        array (
            'file' => 'httprequest.getputdata.php',
            'desc' => 'Get put data',
        ),
    'HttpRequest::getPutFile' =>
        array (
            'file' => 'httprequest.getputfile.php',
            'desc' => 'Get put file',
        ),
    'HttpRequest::getQueryData' =>
        array (
            'file' => 'httprequest.getquerydata.php',
            'desc' => 'Get query data',
        ),
    'HttpRequest::getRawPostData' =>
        array (
            'file' => 'httprequest.getrawpostdata.php',
            'desc' => 'Get raw post data',
        ),
    'HttpRequest::getRawRequestMessage' =>
        array (
            'file' => 'httprequest.getrawrequestmessage.php',
            'desc' => 'Get raw request message',
        ),
    'HttpRequest::getRawResponseMessage' =>
        array (
            'file' => 'httprequest.getrawresponsemessage.php',
            'desc' => 'Get raw response message',
        ),
    'HttpRequest::getRequestMessage' =>
        array (
            'file' => 'httprequest.getrequestmessage.php',
            'desc' => 'Get request message',
        ),
    'HttpRequest::getResponseBody' =>
        array (
            'file' => 'httprequest.getresponsebody.php',
            'desc' => 'Get response body',
        ),
    'HttpRequest::getResponseCode' =>
        array (
            'file' => 'httprequest.getresponsecode.php',
            'desc' => 'Get response code',
        ),
    'HttpRequest::getResponseCookies' =>
        array (
            'file' => 'httprequest.getresponsecookies.php',
            'desc' => 'Get response cookie(s)',
        ),
    'HttpRequest::getResponseData' =>
        array (
            'file' => 'httprequest.getresponsedata.php',
            'desc' => 'Get response data',
        ),
    'HttpRequest::getResponseHeader' =>
        array (
            'file' => 'httprequest.getresponseheader.php',
            'desc' => 'Get response header(s)',
        ),
    'HttpRequest::getResponseInfo' =>
        array (
            'file' => 'httprequest.getresponseinfo.php',
            'desc' => 'Get response info',
        ),
    'HttpRequest::getResponseMessage' =>
        array (
            'file' => 'httprequest.getresponsemessage.php',
            'desc' => 'Get response message',
        ),
    'HttpRequest::getResponseStatus' =>
        array (
            'file' => 'httprequest.getresponsestatus.php',
            'desc' => 'Get response status',
        ),
    'HttpRequest::getSslOptions' =>
        array (
            'file' => 'httprequest.getssloptions.php',
            'desc' => 'Get ssl options',
        ),
    'HttpRequest::getUrl' =>
        array (
            'file' => 'httprequest.geturl.php',
            'desc' => 'Get url',
        ),
    'HttpRequest::resetCookies' =>
        array (
            'file' => 'httprequest.resetcookies.php',
            'desc' => 'Reset cookies',
        ),
    'HttpRequest::send' =>
        array (
            'file' => 'httprequest.send.php',
            'desc' => 'Send request',
        ),
    'HttpRequest::setBody' =>
        array (
            'file' => 'httprequest.setbody.php',
            'desc' => 'Set request body to send, overwriting previously set request body.',
        ),
    'HttpRequest::setContentType' =>
        array (
            'file' => 'httprequest.setcontenttype.php',
            'desc' => 'Set content type',
        ),
    'HttpRequest::setCookies' =>
        array (
            'file' => 'httprequest.setcookies.php',
            'desc' => 'Set cookies',
        ),
    'HttpRequest::setHeaders' =>
        array (
            'file' => 'httprequest.setheaders.php',
            'desc' => 'Set headers',
        ),
    'HttpRequest::setMethod' =>
        array (
            'file' => 'httprequest.setmethod.php',
            'desc' => 'Set method',
        ),
    'HttpRequest::setOptions' =>
        array (
            'file' => 'httprequest.setoptions.php',
            'desc' => 'Set options',
        ),
    'HttpRequest::setPostFields' =>
        array (
            'file' => 'httprequest.setpostfields.php',
            'desc' => 'Set post fields',
        ),
    'HttpRequest::setPostFiles' =>
        array (
            'file' => 'httprequest.setpostfiles.php',
            'desc' => 'Set post files',
        ),
    'HttpRequest::setPutData' =>
        array (
            'file' => 'httprequest.setputdata.php',
            'desc' => 'Set put data',
        ),
    'HttpRequest::setPutFile' =>
        array (
            'file' => 'httprequest.setputfile.php',
            'desc' => 'Set put file',
        ),
    'HttpRequest::setQueryData' =>
        array (
            'file' => 'httprequest.setquerydata.php',
            'desc' => 'Set query data',
        ),
    'HttpRequest::setRawPostData' =>
        array (
            'file' => 'httprequest.setrawpostdata.php',
            'desc' => 'Set raw post data',
        ),
    'HttpRequest::setSslOptions' =>
        array (
            'file' => 'httprequest.setssloptions.php',
            'desc' => 'Set ssl options',
        ),
    'HttpRequest::setUrl' =>
        array (
            'file' => 'httprequest.seturl.php',
            'desc' => 'Set URL',
        ),
    'HttpRequest::__construct' =>
        array (
            'file' => 'httprequest.construct.php',
            'desc' => 'HttpRequest constructor',
        ),
    'HttpRequestPool::attach' =>
        array (
            'file' => 'httprequestpool.attach.php',
            'desc' => 'Attach HttpRequest',
        ),
    'HttpRequestPool::detach' =>
        array (
            'file' => 'httprequestpool.detach.php',
            'desc' => 'Detach HttpRequest',
        ),
    'HttpRequestPool::getAttachedRequests' =>
        array (
            'file' => 'httprequestpool.getattachedrequests.php',
            'desc' => 'Get attached requests',
        ),
    'HttpRequestPool::getFinishedRequests' =>
        array (
            'file' => 'httprequestpool.getfinishedrequests.php',
            'desc' => 'Get finished requests',
        ),
    'HttpRequestPool::reset' =>
        array (
            'file' => 'httprequestpool.reset.php',
            'desc' => 'Reset request pool',
        ),
    'HttpRequestPool::send' =>
        array (
            'file' => 'httprequestpool.send.php',
            'desc' => 'Send all requests',
        ),
    'HttpRequestPool::socketPerform' =>
        array (
            'file' => 'httprequestpool.socketperform.php',
            'desc' => 'Perform socket actions',
        ),
    'HttpRequestPool::socketSelect' =>
        array (
            'file' => 'httprequestpool.socketselect.php',
            'desc' => 'Perform socket select',
        ),
    'HttpRequestPool::__construct' =>
        array (
            'file' => 'httprequestpool.construct.php',
            'desc' => 'HttpRequestPool constructor',
        ),
    'HttpRequestPool::__destruct' =>
        array (
            'file' => 'httprequestpool.destruct.php',
            'desc' => 'HttpRequestPool destructor',
        ),
    'HttpResponse::capture' =>
        array (
            'file' => 'httpresponse.capture.php',
            'desc' => 'Capture script output',
        ),
    'HttpResponse::getBufferSize' =>
        array (
            'file' => 'httpresponse.getbuffersize.php',
            'desc' => 'Get buffer size',
        ),
    'HttpResponse::getCache' =>
        array (
            'file' => 'httpresponse.getcache.php',
            'desc' => 'Get cache',
        ),
    'HttpResponse::getCacheControl' =>
        array (
            'file' => 'httpresponse.getcachecontrol.php',
            'desc' => 'Get cache control',
        ),
    'HttpResponse::getContentDisposition' =>
        array (
            'file' => 'httpresponse.getcontentdisposition.php',
            'desc' => 'Get content disposition',
        ),
    'HttpResponse::getContentType' =>
        array (
            'file' => 'httpresponse.getcontenttype.php',
            'desc' => 'Get content type',
        ),
    'HttpResponse::getData' =>
        array (
            'file' => 'httpresponse.getdata.php',
            'desc' => 'Get data',
        ),
    'HttpResponse::getETag' =>
        array (
            'file' => 'httpresponse.getetag.php',
            'desc' => 'Get ETag',
        ),
    'HttpResponse::getFile' =>
        array (
            'file' => 'httpresponse.getfile.php',
            'desc' => 'Get file',
        ),
    'HttpResponse::getGzip' =>
        array (
            'file' => 'httpresponse.getgzip.php',
            'desc' => 'Get gzip',
        ),
    'HttpResponse::getHeader' =>
        array (
            'file' => 'httpresponse.getheader.php',
            'desc' => 'Get header',
        ),
    'HttpResponse::getLastModified' =>
        array (
            'file' => 'httpresponse.getlastmodified.php',
            'desc' => 'Get last modified',
        ),
    'HttpResponse::getRequestBody' =>
        array (
            'file' => 'httpresponse.getrequestbody.php',
            'desc' => 'Get request body',
        ),
    'HttpResponse::getRequestBodyStream' =>
        array (
            'file' => 'httpresponse.getrequestbodystream.php',
            'desc' => 'Get request body stream',
        ),
    'HttpResponse::getRequestHeaders' =>
        array (
            'file' => 'httpresponse.getrequestheaders.php',
            'desc' => 'Get request headers',
        ),
    'HttpResponse::getStream' =>
        array (
            'file' => 'httpresponse.getstream.php',
            'desc' => 'Get Stream',
        ),
    'HttpResponse::getThrottleDelay' =>
        array (
            'file' => 'httpresponse.getthrottledelay.php',
            'desc' => 'Get throttle delay',
        ),
    'HttpResponse::guessContentType' =>
        array (
            'file' => 'httpresponse.guesscontenttype.php',
            'desc' => 'Guess content type',
        ),
    'HttpResponse::redirect' =>
        array (
            'file' => 'httpresponse.redirect.php',
            'desc' => 'Redirect',
        ),
    'HttpResponse::send' =>
        array (
            'file' => 'httpresponse.send.php',
            'desc' => 'Send response',
        ),
    'HttpResponse::setBufferSize' =>
        array (
            'file' => 'httpresponse.setbuffersize.php',
            'desc' => 'Set buffer size',
        ),
    'HttpResponse::setCache' =>
        array (
            'file' => 'httpresponse.setcache.php',
            'desc' => 'Set cache',
        ),
    'HttpResponse::setCacheControl' =>
        array (
            'file' => 'httpresponse.setcachecontrol.php',
            'desc' => 'Set cache control',
        ),
    'HttpResponse::setContentDisposition' =>
        array (
            'file' => 'httpresponse.setcontentdisposition.php',
            'desc' => 'Set content disposition',
        ),
    'HttpResponse::setContentType' =>
        array (
            'file' => 'httpresponse.setcontenttype.php',
            'desc' => 'Set content type',
        ),
    'HttpResponse::setData' =>
        array (
            'file' => 'httpresponse.setdata.php',
            'desc' => 'Set data',
        ),
    'HttpResponse::setETag' =>
        array (
            'file' => 'httpresponse.setetag.php',
            'desc' => 'Set ETag',
        ),
    'HttpResponse::setFile' =>
        array (
            'file' => 'httpresponse.setfile.php',
            'desc' => 'Set file',
        ),
    'HttpResponse::setGzip' =>
        array (
            'file' => 'httpresponse.setgzip.php',
            'desc' => 'Set gzip',
        ),
    'HttpResponse::setHeader' =>
        array (
            'file' => 'httpresponse.setheader.php',
            'desc' => 'Set header',
        ),
    'HttpResponse::setLastModified' =>
        array (
            'file' => 'httpresponse.setlastmodified.php',
            'desc' => 'Set last modified',
        ),
    'HttpResponse::setStream' =>
        array (
            'file' => 'httpresponse.setstream.php',
            'desc' => 'Set stream',
        ),
    'HttpResponse::setThrottleDelay' =>
        array (
            'file' => 'httpresponse.setthrottledelay.php',
            'desc' => 'Set throttle delay',
        ),
    'HttpResponse::status' =>
        array (
            'file' => 'httpresponse.status.php',
            'desc' => 'Send HTTP response status',
        ),
    'http_build_cookie' =>
        array (
            'file' => 'function.http-build-cookie.php',
            'desc' => 'Build cookie string',
        ),
    'http_build_query' =>
        array (
            'file' => 'function.http-build-query.php',
            'desc' => 'Generate URL-encoded query string',
        ),
    'http_build_str' =>
        array (
            'file' => 'function.http-build-str.php',
            'desc' => 'Build query string',
        ),
    'http_build_url' =>
        array (
            'file' => 'function.http-build-url.php',
            'desc' => 'Build a URL',
        ),
    'http_cache_etag' =>
        array (
            'file' => 'function.http-cache-etag.php',
            'desc' => 'Caching by ETag',
        ),
    'http_cache_last_modified' =>
        array (
            'file' => 'function.http-cache-last-modified.php',
            'desc' => 'Caching by last modification',
        ),
    'http_chunked_decode' =>
        array (
            'file' => 'function.http-chunked-decode.php',
            'desc' => 'Decode chunked-encoded data',
        ),
    'http_date' =>
        array (
            'file' => 'function.http-date.php',
            'desc' => 'Compose HTTP RFC compliant date',
        ),
    'http_deflate' =>
        array (
            'file' => 'function.http-deflate.php',
            'desc' => 'Deflate data',
        ),
    'http_get' =>
        array (
            'file' => 'function.http-get.php',
            'desc' => 'Perform GET request',
        ),
    'http_get_request_body' =>
        array (
            'file' => 'function.http-get-request-body.php',
            'desc' => 'Get request body as string',
        ),
    'http_get_request_body_stream' =>
        array (
            'file' => 'function.http-get-request-body-stream.php',
            'desc' => 'Get request body as stream',
        ),
    'http_get_request_headers' =>
        array (
            'file' => 'function.http-get-request-headers.php',
            'desc' => 'Get request headers as array',
        ),
    'http_head' =>
        array (
            'file' => 'function.http-head.php',
            'desc' => 'Perform HEAD request',
        ),
    'http_inflate' =>
        array (
            'file' => 'function.http-inflate.php',
            'desc' => 'Inflate data',
        ),
    'http_match_etag' =>
        array (
            'file' => 'function.http-match-etag.php',
            'desc' => 'Match ETag',
        ),
    'http_match_modified' =>
        array (
            'file' => 'function.http-match-modified.php',
            'desc' => 'Match last modification',
        ),
    'http_match_request_header' =>
        array (
            'file' => 'function.http-match-request-header.php',
            'desc' => 'Match any header',
        ),
    'http_negotiate_charset' =>
        array (
            'file' => 'function.http-negotiate-charset.php',
            'desc' => 'Negotiate client\'s preferred character set',
        ),
    'http_negotiate_content_type' =>
        array (
            'file' => 'function.http-negotiate-content-type.php',
            'desc' => 'Negotiate client\'s preferred content type',
        ),
    'http_negotiate_language' =>
        array (
            'file' => 'function.http-negotiate-language.php',
            'desc' => 'Negotiate client\'s preferred language',
        ),
    'http_parse_cookie' =>
        array (
            'file' => 'function.http-parse-cookie.php',
            'desc' => 'Parse HTTP cookie',
        ),
    'http_parse_headers' =>
        array (
            'file' => 'function.http-parse-headers.php',
            'desc' => 'Parse HTTP headers',
        ),
    'http_parse_message' =>
        array (
            'file' => 'function.http-parse-message.php',
            'desc' => 'Parse HTTP messages',
        ),
    'http_parse_params' =>
        array (
            'file' => 'function.http-parse-params.php',
            'desc' => 'Parse parameter list',
        ),
    'http_persistent_handles_clean' =>
        array (
            'file' => 'function.http-persistent-handles-clean.php',
            'desc' => 'Clean up persistent handles',
        ),
    'http_persistent_handles_count' =>
        array (
            'file' => 'function.http-persistent-handles-count.php',
            'desc' => 'Stat persistent handles',
        ),
    'http_persistent_handles_ident' =>
        array (
            'file' => 'function.http-persistent-handles-ident.php',
            'desc' => 'Get/set ident of persistent handles',
        ),
    'http_post_data' =>
        array (
            'file' => 'function.http-post-data.php',
            'desc' => 'Perform POST request with pre-encoded data',
        ),
    'http_post_fields' =>
        array (
            'file' => 'function.http-post-fields.php',
            'desc' => 'Perform POST request with data to be encoded',
        ),
    'http_put_data' =>
        array (
            'file' => 'function.http-put-data.php',
            'desc' => 'Perform PUT request with data',
        ),
    'http_put_file' =>
        array (
            'file' => 'function.http-put-file.php',
            'desc' => 'Perform PUT request with file',
        ),
    'http_put_stream' =>
        array (
            'file' => 'function.http-put-stream.php',
            'desc' => 'Perform PUT request with stream',
        ),
    'http_redirect' =>
        array (
            'file' => 'function.http-redirect.php',
            'desc' => 'Issue HTTP redirect',
        ),
    'http_request' =>
        array (
            'file' => 'function.http-request.php',
            'desc' => 'Perform custom request',
        ),
    'http_request_body_encode' =>
        array (
            'file' => 'function.http-request-body-encode.php',
            'desc' => 'Encode request body',
        ),
    'http_request_method_exists' =>
        array (
            'file' => 'function.http-request-method-exists.php',
            'desc' => 'Check whether request method exists',
        ),
    'http_request_method_name' =>
        array (
            'file' => 'function.http-request-method-name.php',
            'desc' => 'Get request method name',
        ),
    'http_request_method_register' =>
        array (
            'file' => 'function.http-request-method-register.php',
            'desc' => 'Register request method',
        ),
    'http_request_method_unregister' =>
        array (
            'file' => 'function.http-request-method-unregister.php',
            'desc' => 'Unregister request method',
        ),
    'http_response_code' =>
        array (
            'file' => 'function.http-response-code.php',
            'desc' => 'Get or Set the HTTP response code',
        ),
    'http_send_content_disposition' =>
        array (
            'file' => 'function.http-send-content-disposition.php',
            'desc' => 'Send Content-Disposition',
        ),
    'http_send_content_type' =>
        array (
            'file' => 'function.http-send-content-type.php',
            'desc' => 'Send Content-Type',
        ),
    'http_send_data' =>
        array (
            'file' => 'function.http-send-data.php',
            'desc' => 'Send arbitrary data',
        ),
    'http_send_file' =>
        array (
            'file' => 'function.http-send-file.php',
            'desc' => 'Send file',
        ),
    'http_send_last_modified' =>
        array (
            'file' => 'function.http-send-last-modified.php',
            'desc' => 'Send Last-Modified',
        ),
    'http_send_status' =>
        array (
            'file' => 'function.http-send-status.php',
            'desc' => 'Send HTTP response status',
        ),
    'http_send_stream' =>
        array (
            'file' => 'function.http-send-stream.php',
            'desc' => 'Send stream',
        ),
    'http_support' =>
        array (
            'file' => 'function.http-support.php',
            'desc' => 'Check built-in HTTP support',
        ),
    'http_throttle' =>
        array (
            'file' => 'function.http-throttle.php',
            'desc' => 'HTTP throttling',
        ),
    'hwapi_attribute_new' =>
        array (
            'file' => 'function.hwapi-attribute-new.php',
            'desc' => 'Creates instance of class hw_api_attribute',
        ),
    'hwapi_content_new' =>
        array (
            'file' => 'function.hwapi-content-new.php',
            'desc' => 'Create new instance of class hw_api_content',
        ),
    'hwapi_hgcsp' =>
        array (
            'file' => 'function.hwapi-hgcsp.php',
            'desc' => 'Returns object of class hw_api',
        ),
    'hwapi_object_new' =>
        array (
            'file' => 'function.hwapi-object-new.php',
            'desc' => 'Creates a new instance of class hwapi_object_new',
        ),
    'hw_api::checkin' =>
        array (
            'file' => 'hwapi.checkin.php',
            'desc' => 'Checks in an object',
        ),
    'hw_api::checkout' =>
        array (
            'file' => 'hwapi.checkout.php',
            'desc' => 'Checks out an object',
        ),
    'hw_api::children' =>
        array (
            'file' => 'hwapi.children.php',
            'desc' => 'Returns children of an object',
        ),
    'hw_api::content' =>
        array (
            'file' => 'hwapi.content.php',
            'desc' => 'Returns content of an object',
        ),
    'hw_api::copy' =>
        array (
            'file' => 'hwapi.copy.php',
            'desc' => 'Copies physically',
        ),
    'hw_api::dbstat' =>
        array (
            'file' => 'hwapi.dbstat.php',
            'desc' => 'Returns statistics about database server',
        ),
    'hw_api::dcstat' =>
        array (
            'file' => 'hwapi.dcstat.php',
            'desc' => 'Returns statistics about document cache server',
        ),
    'hw_api::dstanchors' =>
        array (
            'file' => 'hwapi.dstanchors.php',
            'desc' => 'Returns a list of all destination anchors',
        ),
    'hw_api::dstofsrcanchor' =>
        array (
            'file' => 'hwapi.dstofsrcanchor.php',
            'desc' => 'Returns destination of a source anchor',
        ),
    'hw_api::find' =>
        array (
            'file' => 'hwapi.find.php',
            'desc' => 'Search for objects',
        ),
    'hw_api::ftstat' =>
        array (
            'file' => 'hwapi.ftstat.php',
            'desc' => 'Returns statistics about fulltext server',
        ),
    'hw_api::hwstat' =>
        array (
            'file' => 'hwapi.hwstat.php',
            'desc' => 'Returns statistics about Hyperwave server',
        ),
    'hw_api::identify' =>
        array (
            'file' => 'hwapi.identify.php',
            'desc' => 'Log into Hyperwave Server',
        ),
    'hw_api::info' =>
        array (
            'file' => 'hwapi.info.php',
            'desc' => 'Returns information about server configuration',
        ),
    'hw_api::insert' =>
        array (
            'file' => 'hwapi.insert.php',
            'desc' => 'Inserts a new object',
        ),
    'hw_api::insertanchor' =>
        array (
            'file' => 'hwapi.insertanchor.php',
            'desc' => 'Inserts a new object of type anchor',
        ),
    'hw_api::insertcollection' =>
        array (
            'file' => 'hwapi.insertcollection.php',
            'desc' => 'Inserts a new object of type collection',
        ),
    'hw_api::insertdocument' =>
        array (
            'file' => 'hwapi.insertdocument.php',
            'desc' => 'Inserts a new object of type document',
        ),
    'hw_api::link' =>
        array (
            'file' => 'hwapi.link.php',
            'desc' => 'Creates a link to an object',
        ),
    'hw_api::lock' =>
        array (
            'file' => 'hwapi.lock.php',
            'desc' => 'Locks an object',
        ),
    'hw_api::move' =>
        array (
            'file' => 'hwapi.move.php',
            'desc' => 'Moves object between collections',
        ),
    'hw_api::object' =>
        array (
            'file' => 'hwapi.object.php',
            'desc' => 'Retrieve attribute information',
        ),
    'hw_api::objectbyanchor' =>
        array (
            'file' => 'hwapi.objectbyanchor.php',
            'desc' => 'Returns the object an anchor belongs to',
        ),
    'hw_api::parents' =>
        array (
            'file' => 'hwapi.parents.php',
            'desc' => 'Returns parents of an object',
        ),
    'hw_api::remove' =>
        array (
            'file' => 'hwapi.remove.php',
            'desc' => 'Delete an object',
        ),
    'hw_api::replace' =>
        array (
            'file' => 'hwapi.replace.php',
            'desc' => 'Replaces an object',
        ),
    'hw_api::setcommittedversion' =>
        array (
            'file' => 'hwapi.setcommittedversion.php',
            'desc' => 'Commits version other than last version',
        ),
    'hw_api::srcanchors' =>
        array (
            'file' => 'hwapi.srcanchors.php',
            'desc' => 'Returns a list of all source anchors',
        ),
    'hw_api::srcsofdst' =>
        array (
            'file' => 'hwapi.srcsofdst.php',
            'desc' => 'Returns source of a destination object',
        ),
    'hw_api::unlock' =>
        array (
            'file' => 'hwapi.unlock.php',
            'desc' => 'Unlocks a locked object',
        ),
    'hw_api::user' =>
        array (
            'file' => 'hwapi.user.php',
            'desc' => 'Returns the own user object',
        ),
    'hw_api::userlist' =>
        array (
            'file' => 'hwapi.userlist.php',
            'desc' => 'Returns a list of all logged in users',
        ),
    'hw_api_attribute::key' =>
        array (
            'file' => 'hwapi.attribute-key.php',
            'desc' => 'Returns key of the attribute',
        ),
    'hw_api_attribute::langdepvalue' =>
        array (
            'file' => 'hwapi.attribute-langdepvalue.php',
            'desc' => 'Returns value for a given language',
        ),
    'hw_api_attribute::value' =>
        array (
            'file' => 'hwapi.attribute-value.php',
            'desc' => 'Returns value of the attribute',
        ),
    'hw_api_attribute::values' =>
        array (
            'file' => 'hwapi.attribute-values.php',
            'desc' => 'Returns all values of the attribute',
        ),
    'hw_api_content::mimetype' =>
        array (
            'file' => 'hwapi.content-mimetype.php',
            'desc' => 'Returns mimetype',
        ),
    'hw_api_content::read' =>
        array (
            'file' => 'hwapi.content-read.php',
            'desc' => 'Read content',
        ),
    'hw_api_error::count' =>
        array (
            'file' => 'hwapi.error-count.php',
            'desc' => 'Returns number of reasons',
        ),
    'hw_api_error::reason' =>
        array (
            'file' => 'hwapi.error-reason.php',
            'desc' => 'Returns reason of error',
        ),
    'hw_api_object::assign' =>
        array (
            'file' => 'hwapi.object-assign.php',
            'desc' => 'Clones object',
        ),
    'hw_api_object::attreditable' =>
        array (
            'file' => 'hwapi.object-attreditable.php',
            'desc' => 'Checks whether an attribute is editable',
        ),
    'hw_api_object::count' =>
        array (
            'file' => 'hwapi.object-count.php',
            'desc' => 'Returns number of attributes',
        ),
    'hw_api_object::insert' =>
        array (
            'file' => 'hwapi.object-insert.php',
            'desc' => 'Inserts new attribute',
        ),
    'hw_api_object::remove' =>
        array (
            'file' => 'hwapi.object-remove.php',
            'desc' => 'Removes attribute',
        ),
    'hw_api_object::title' =>
        array (
            'file' => 'hwapi.object-title.php',
            'desc' => 'Returns the title attribute',
        ),
    'hw_api_object::value' =>
        array (
            'file' => 'hwapi.object-value.php',
            'desc' => 'Returns value of attribute',
        ),
    'hw_api_reason::description' =>
        array (
            'file' => 'hwapi.reason-description.php',
            'desc' => 'Returns description of reason',
        ),
    'hw_api_reason::type' =>
        array (
            'file' => 'hwapi.reason-type.php',
            'desc' => 'Returns type of reason',
        ),
    'hypot' =>
        array (
            'file' => 'function.hypot.php',
            'desc' => 'Calculate the length of the hypotenuse of a right-angle triangle',
        ),
    'ibase_add_user' =>
        array (
            'file' => 'function.ibase-add-user.php',
            'desc' => 'Add a user to a security database',
        ),
    'ibase_affected_rows' =>
        array (
            'file' => 'function.ibase-affected-rows.php',
            'desc' => 'Return the number of rows that were affected by the previous query',
        ),
    'ibase_backup' =>
        array (
            'file' => 'function.ibase-backup.php',
            'desc' => 'Initiates a backup task in the service manager and returns immediately',
        ),
    'ibase_blob_add' =>
        array (
            'file' => 'function.ibase-blob-add.php',
            'desc' => 'Add data into a newly created blob',
        ),
    'ibase_blob_cancel' =>
        array (
            'file' => 'function.ibase-blob-cancel.php',
            'desc' => 'Cancel creating blob',
        ),
    'ibase_blob_close' =>
        array (
            'file' => 'function.ibase-blob-close.php',
            'desc' => 'Close blob',
        ),
    'ibase_blob_create' =>
        array (
            'file' => 'function.ibase-blob-create.php',
            'desc' => 'Create a new blob for adding data',
        ),
    'ibase_blob_echo' =>
        array (
            'file' => 'function.ibase-blob-echo.php',
            'desc' => 'Output blob contents to browser',
        ),
    'ibase_blob_get' =>
        array (
            'file' => 'function.ibase-blob-get.php',
            'desc' => 'Get len bytes data from open blob',
        ),
    'ibase_blob_import' =>
        array (
            'file' => 'function.ibase-blob-import.php',
            'desc' => 'Create blob, copy file in it, and close it',
        ),
    'ibase_blob_info' =>
        array (
            'file' => 'function.ibase-blob-info.php',
            'desc' => 'Return blob length and other useful info',
        ),
    'ibase_blob_open' =>
        array (
            'file' => 'function.ibase-blob-open.php',
            'desc' => 'Open blob for retrieving data parts',
        ),
    'ibase_close' =>
        array (
            'file' => 'function.ibase-close.php',
            'desc' => 'Close a connection to an InterBase database',
        ),
    'ibase_commit' =>
        array (
            'file' => 'function.ibase-commit.php',
            'desc' => 'Commit a transaction',
        ),
    'ibase_commit_ret' =>
        array (
            'file' => 'function.ibase-commit-ret.php',
            'desc' => 'Commit a transaction without closing it',
        ),
    'ibase_connect' =>
        array (
            'file' => 'function.ibase-connect.php',
            'desc' => 'Open a connection to a database',
        ),
    'ibase_db_info' =>
        array (
            'file' => 'function.ibase-db-info.php',
            'desc' => 'Request statistics about a database',
        ),
    'ibase_delete_user' =>
        array (
            'file' => 'function.ibase-delete-user.php',
            'desc' => 'Delete a user from a security database',
        ),
    'ibase_drop_db' =>
        array (
            'file' => 'function.ibase-drop-db.php',
            'desc' => 'Drops a database',
        ),
    'ibase_errcode' =>
        array (
            'file' => 'function.ibase-errcode.php',
            'desc' => 'Return an error code',
        ),
    'ibase_errmsg' =>
        array (
            'file' => 'function.ibase-errmsg.php',
            'desc' => 'Return error messages',
        ),
    'ibase_execute' =>
        array (
            'file' => 'function.ibase-execute.php',
            'desc' => 'Execute a previously prepared query',
        ),
    'ibase_fetch_assoc' =>
        array (
            'file' => 'function.ibase-fetch-assoc.php',
            'desc' => 'Fetch a result row from a query as an associative array',
        ),
    'ibase_fetch_object' =>
        array (
            'file' => 'function.ibase-fetch-object.php',
            'desc' => 'Get an object from a InterBase database',
        ),
    'ibase_fetch_row' =>
        array (
            'file' => 'function.ibase-fetch-row.php',
            'desc' => 'Fetch a row from an InterBase database',
        ),
    'ibase_field_info' =>
        array (
            'file' => 'function.ibase-field-info.php',
            'desc' => 'Get information about a field',
        ),
    'ibase_free_event_handler' =>
        array (
            'file' => 'function.ibase-free-event-handler.php',
            'desc' => 'Cancels a registered event handler',
        ),
    'ibase_free_query' =>
        array (
            'file' => 'function.ibase-free-query.php',
            'desc' => 'Free memory allocated by a prepared query',
        ),
    'ibase_free_result' =>
        array (
            'file' => 'function.ibase-free-result.php',
            'desc' => 'Free a result set',
        ),
    'ibase_gen_id' =>
        array (
            'file' => 'function.ibase-gen-id.php',
            'desc' => 'Increments the named generator and returns its new value',
        ),
    'ibase_maintain_db' =>
        array (
            'file' => 'function.ibase-maintain-db.php',
            'desc' => 'Execute a maintenance command on the database server',
        ),
    'ibase_modify_user' =>
        array (
            'file' => 'function.ibase-modify-user.php',
            'desc' => 'Modify a user to a security database',
        ),
    'ibase_name_result' =>
        array (
            'file' => 'function.ibase-name-result.php',
            'desc' => 'Assigns a name to a result set',
        ),
    'ibase_num_fields' =>
        array (
            'file' => 'function.ibase-num-fields.php',
            'desc' => 'Get the number of fields in a result set',
        ),
    'ibase_num_params' =>
        array (
            'file' => 'function.ibase-num-params.php',
            'desc' => 'Return the number of parameters in a prepared query',
        ),
    'ibase_param_info' =>
        array (
            'file' => 'function.ibase-param-info.php',
            'desc' => 'Return information about a parameter in a prepared query',
        ),
    'ibase_pconnect' =>
        array (
            'file' => 'function.ibase-pconnect.php',
            'desc' => 'Open a persistent connection to an InterBase database',
        ),
    'ibase_prepare' =>
        array (
            'file' => 'function.ibase-prepare.php',
            'desc' => 'Prepare a query for later binding of parameter placeholders and execution',
        ),
    'ibase_query' =>
        array (
            'file' => 'function.ibase-query.php',
            'desc' => 'Execute a query on an InterBase database',
        ),
    'ibase_restore' =>
        array (
            'file' => 'function.ibase-restore.php',
            'desc' => 'Initiates a restore task in the service manager and returns immediately',
        ),
    'ibase_rollback' =>
        array (
            'file' => 'function.ibase-rollback.php',
            'desc' => 'Roll back a transaction',
        ),
    'ibase_rollback_ret' =>
        array (
            'file' => 'function.ibase-rollback-ret.php',
            'desc' => 'Roll back a transaction without closing it',
        ),
    'ibase_server_info' =>
        array (
            'file' => 'function.ibase-server-info.php',
            'desc' => 'Request information about a database server',
        ),
    'ibase_service_attach' =>
        array (
            'file' => 'function.ibase-service-attach.php',
            'desc' => 'Connect to the service manager',
        ),
    'ibase_service_detach' =>
        array (
            'file' => 'function.ibase-service-detach.php',
            'desc' => 'Disconnect from the service manager',
        ),
    'ibase_set_event_handler' =>
        array (
            'file' => 'function.ibase-set-event-handler.php',
            'desc' => 'Register a callback function to be called when events are posted',
        ),
    'ibase_trans' =>
        array (
            'file' => 'function.ibase-trans.php',
            'desc' => 'Begin a transaction',
        ),
    'ibase_wait_event' =>
        array (
            'file' => 'function.ibase-wait-event.php',
            'desc' => 'Wait for an event to be posted by the database',
        ),
    'iconv' =>
        array (
            'file' => 'function.iconv.php',
            'desc' => 'Convert string to requested character encoding',
        ),
    'iconv_get_encoding' =>
        array (
            'file' => 'function.iconv-get-encoding.php',
            'desc' => 'Retrieve internal configuration variables of iconv extension',
        ),
    'iconv_mime_decode' =>
        array (
            'file' => 'function.iconv-mime-decode.php',
            'desc' => 'Decodes a MIME header field',
        ),
    'iconv_mime_decode_headers' =>
        array (
            'file' => 'function.iconv-mime-decode-headers.php',
            'desc' => 'Decodes multiple MIME header fields at once',
        ),
    'iconv_mime_encode' =>
        array (
            'file' => 'function.iconv-mime-encode.php',
            'desc' => 'Composes a MIME header field',
        ),
    'iconv_set_encoding' =>
        array (
            'file' => 'function.iconv-set-encoding.php',
            'desc' => 'Set current setting for character encoding conversion',
        ),
    'iconv_strlen' =>
        array (
            'file' => 'function.iconv-strlen.php',
            'desc' => 'Returns the character count of string',
        ),
    'iconv_strpos' =>
        array (
            'file' => 'function.iconv-strpos.php',
            'desc' => 'Finds position of first occurrence of a needle within a haystack',
        ),
    'iconv_strrpos' =>
        array (
            'file' => 'function.iconv-strrpos.php',
            'desc' => 'Finds the last occurrence of a needle within a haystack',
        ),
    'iconv_substr' =>
        array (
            'file' => 'function.iconv-substr.php',
            'desc' => 'Cut out part of a string',
        ),
    'id3_get_frame_long_name' =>
        array (
            'file' => 'function.id3-get-frame-long-name.php',
            'desc' => 'Get the long name of an ID3v2 frame',
        ),
    'id3_get_frame_short_name' =>
        array (
            'file' => 'function.id3-get-frame-short-name.php',
            'desc' => 'Get the short name of an ID3v2 frame',
        ),
    'id3_get_genre_id' =>
        array (
            'file' => 'function.id3-get-genre-id.php',
            'desc' => 'Get the id for a genre',
        ),
    'id3_get_genre_list' =>
        array (
            'file' => 'function.id3-get-genre-list.php',
            'desc' => 'Get all possible genre values',
        ),
    'id3_get_genre_name' =>
        array (
            'file' => 'function.id3-get-genre-name.php',
            'desc' => 'Get the name for a genre id',
        ),
    'id3_get_tag' =>
        array (
            'file' => 'function.id3-get-tag.php',
            'desc' => 'Get all information stored in an ID3 tag',
        ),
    'id3_get_version' =>
        array (
            'file' => 'function.id3-get-version.php',
            'desc' => 'Get version of an ID3 tag',
        ),
    'id3_remove_tag' =>
        array (
            'file' => 'function.id3-remove-tag.php',
            'desc' => 'Remove an existing ID3 tag',
        ),
    'id3_set_tag' =>
        array (
            'file' => 'function.id3-set-tag.php',
            'desc' => 'Update information stored in an ID3 tag',
        ),
    'idate' =>
        array (
            'file' => 'function.idate.php',
            'desc' => 'Format a local time/date as integer',
        ),
    'idn_to_ascii' =>
        array (
            'file' => 'function.idn-to-ascii.php',
            'desc' => 'Convert domain name to IDNA ASCII form.',
        ),
    'idn_to_unicode' =>
        array (
            'file' => 'function.idn-to-unicode.php',
            'desc' => 'Alias of idn_to_utf8',
        ),
    'idn_to_utf8' =>
        array (
            'file' => 'function.idn-to-utf8.php',
            'desc' => 'Convert domain name from IDNA ASCII to Unicode.',
        ),
    'ifxus_close_slob' =>
        array (
            'file' => 'function.ifxus-close-slob.php',
            'desc' => 'Deletes the slob object',
        ),
    'ifxus_create_slob' =>
        array (
            'file' => 'function.ifxus-create-slob.php',
            'desc' => 'Creates an slob object and opens it',
        ),
    'ifxus_free_slob' =>
        array (
            'file' => 'function.ifxus-free-slob.php',
            'desc' => 'Deletes the slob object',
        ),
    'ifxus_open_slob' =>
        array (
            'file' => 'function.ifxus-open-slob.php',
            'desc' => 'Opens an slob object',
        ),
    'ifxus_read_slob' =>
        array (
            'file' => 'function.ifxus-read-slob.php',
            'desc' => 'Reads nbytes of the slob object',
        ),
    'ifxus_seek_slob' =>
        array (
            'file' => 'function.ifxus-seek-slob.php',
            'desc' => 'Sets the current file or seek position',
        ),
    'ifxus_tell_slob' =>
        array (
            'file' => 'function.ifxus-tell-slob.php',
            'desc' => 'Returns the current file or seek position',
        ),
    'ifxus_write_slob' =>
        array (
            'file' => 'function.ifxus-write-slob.php',
            'desc' => 'Writes a string into the slob object',
        ),
    'ifx_affected_rows' =>
        array (
            'file' => 'function.ifx-affected-rows.php',
            'desc' => 'Get number of rows affected by a query',
        ),
    'ifx_blobinfile_mode' =>
        array (
            'file' => 'function.ifx-blobinfile-mode.php',
            'desc' => 'Set the default blob mode for all select queries',
        ),
    'ifx_byteasvarchar' =>
        array (
            'file' => 'function.ifx-byteasvarchar.php',
            'desc' => 'Set the default byte mode',
        ),
    'ifx_close' =>
        array (
            'file' => 'function.ifx-close.php',
            'desc' => 'Close Informix connection',
        ),
    'ifx_connect' =>
        array (
            'file' => 'function.ifx-connect.php',
            'desc' => 'Open Informix server connection',
        ),
    'ifx_copy_blob' =>
        array (
            'file' => 'function.ifx-copy-blob.php',
            'desc' => 'Duplicates the given blob object',
        ),
    'ifx_create_blob' =>
        array (
            'file' => 'function.ifx-create-blob.php',
            'desc' => 'Creates an blob object',
        ),
    'ifx_create_char' =>
        array (
            'file' => 'function.ifx-create-char.php',
            'desc' => 'Creates an char object',
        ),
    'ifx_do' =>
        array (
            'file' => 'function.ifx-do.php',
            'desc' => 'Execute a previously prepared SQL-statement',
        ),
    'ifx_error' =>
        array (
            'file' => 'function.ifx-error.php',
            'desc' => 'Returns error code of last Informix call',
        ),
    'ifx_errormsg' =>
        array (
            'file' => 'function.ifx-errormsg.php',
            'desc' => 'Returns error message of last Informix call',
        ),
    'ifx_fetch_row' =>
        array (
            'file' => 'function.ifx-fetch-row.php',
            'desc' => 'Get row as an associative array',
        ),
    'ifx_fieldproperties' =>
        array (
            'file' => 'function.ifx-fieldproperties.php',
            'desc' => 'List of SQL fieldproperties',
        ),
    'ifx_fieldtypes' =>
        array (
            'file' => 'function.ifx-fieldtypes.php',
            'desc' => 'List of Informix SQL fields',
        ),
    'ifx_free_blob' =>
        array (
            'file' => 'function.ifx-free-blob.php',
            'desc' => 'Deletes the blob object',
        ),
    'ifx_free_char' =>
        array (
            'file' => 'function.ifx-free-char.php',
            'desc' => 'Deletes the char object',
        ),
    'ifx_free_result' =>
        array (
            'file' => 'function.ifx-free-result.php',
            'desc' => 'Releases resources for the query',
        ),
    'ifx_getsqlca' =>
        array (
            'file' => 'function.ifx-getsqlca.php',
            'desc' => 'Get the contents of sqlca.sqlerrd[0..5] after a query',
        ),
    'ifx_get_blob' =>
        array (
            'file' => 'function.ifx-get-blob.php',
            'desc' => 'Return the content of a blob object',
        ),
    'ifx_get_char' =>
        array (
            'file' => 'function.ifx-get-char.php',
            'desc' => 'Return the content of the char object',
        ),
    'ifx_htmltbl_result' =>
        array (
            'file' => 'function.ifx-htmltbl-result.php',
            'desc' => 'Formats all rows of a query into a HTML table',
        ),
    'ifx_nullformat' =>
        array (
            'file' => 'function.ifx-nullformat.php',
            'desc' => 'Sets the default return value on a fetch row',
        ),
    'ifx_num_fields' =>
        array (
            'file' => 'function.ifx-num-fields.php',
            'desc' => 'Returns the number of columns in the query',
        ),
    'ifx_num_rows' =>
        array (
            'file' => 'function.ifx-num-rows.php',
            'desc' => 'Count the rows already fetched from a query',
        ),
    'ifx_pconnect' =>
        array (
            'file' => 'function.ifx-pconnect.php',
            'desc' => 'Open persistent Informix connection',
        ),
    'ifx_prepare' =>
        array (
            'file' => 'function.ifx-prepare.php',
            'desc' => 'Prepare an SQL-statement for execution',
        ),
    'ifx_query' =>
        array (
            'file' => 'function.ifx-query.php',
            'desc' => 'Send Informix query',
        ),
    'ifx_textasvarchar' =>
        array (
            'file' => 'function.ifx-textasvarchar.php',
            'desc' => 'Set the default text mode',
        ),
    'ifx_update_blob' =>
        array (
            'file' => 'function.ifx-update-blob.php',
            'desc' => 'Updates the content of the blob object',
        ),
    'ifx_update_char' =>
        array (
            'file' => 'function.ifx-update-char.php',
            'desc' => 'Updates the content of the char object',
        ),
    'ignore_user_abort' =>
        array (
            'file' => 'function.ignore-user-abort.php',
            'desc' => 'Set whether a client disconnect should abort script execution',
        ),
    'iis_add_server' =>
        array (
            'file' => 'function.iis-add-server.php',
            'desc' => 'Creates a new virtual web server',
        ),
    'iis_get_dir_security' =>
        array (
            'file' => 'function.iis-get-dir-security.php',
            'desc' => 'Gets Directory Security',
        ),
    'iis_get_script_map' =>
        array (
            'file' => 'function.iis-get-script-map.php',
            'desc' => 'Gets script mapping on a virtual directory for a specific extension',
        ),
    'iis_get_server_by_comment' =>
        array (
            'file' => 'function.iis-get-server-by-comment.php',
            'desc' => 'Return the instance number associated with the Comment',
        ),
    'iis_get_server_by_path' =>
        array (
            'file' => 'function.iis-get-server-by-path.php',
            'desc' => 'Return the instance number associated with the Path',
        ),
    'iis_get_server_rights' =>
        array (
            'file' => 'function.iis-get-server-rights.php',
            'desc' => 'Gets server rights',
        ),
    'iis_get_service_state' =>
        array (
            'file' => 'function.iis-get-service-state.php',
            'desc' => 'Returns the state for the service defined by ServiceId',
        ),
    'iis_remove_server' =>
        array (
            'file' => 'function.iis-remove-server.php',
            'desc' => 'Removes the virtual web server indicated by ServerInstance',
        ),
    'iis_set_app_settings' =>
        array (
            'file' => 'function.iis-set-app-settings.php',
            'desc' => 'Creates application scope for a virtual directory',
        ),
    'iis_set_dir_security' =>
        array (
            'file' => 'function.iis-set-dir-security.php',
            'desc' => 'Sets Directory Security',
        ),
    'iis_set_script_map' =>
        array (
            'file' => 'function.iis-set-script-map.php',
            'desc' => 'Sets script mapping on a virtual directory',
        ),
    'iis_set_server_rights' =>
        array (
            'file' => 'function.iis-set-server-rights.php',
            'desc' => 'Sets server rights',
        ),
    'iis_start_server' =>
        array (
            'file' => 'function.iis-start-server.php',
            'desc' => 'Starts the virtual web server',
        ),
    'iis_start_service' =>
        array (
            'file' => 'function.iis-start-service.php',
            'desc' => 'Starts the service defined by ServiceId',
        ),
    'iis_stop_server' =>
        array (
            'file' => 'function.iis-stop-server.php',
            'desc' => 'Stops the virtual web server',
        ),
    'iis_stop_service' =>
        array (
            'file' => 'function.iis-stop-service.php',
            'desc' => 'Stops the service defined by ServiceId',
        ),
    'image2wbmp' =>
        array (
            'file' => 'function.image2wbmp.php',
            'desc' => 'Output image to browser or file',
        ),
    'imageaffine' =>
        array (
            'file' => 'function.imageaffine.php',
            'desc' => 'Return an image containing the affine transformed src image, using an optional clipping area',
        ),
    'imageaffinematrixconcat' =>
        array (
            'file' => 'function.imageaffinematrixconcat.php',
            'desc' => 'Concat two matrices (as in doing many ops in one go)',
        ),
    'imageaffinematrixget' =>
        array (
            'file' => 'function.imageaffinematrixget.php',
            'desc' => 'Return an image containing the affine tramsformed src image, using an optional clipping area',
        ),
    'imagealphablending' =>
        array (
            'file' => 'function.imagealphablending.php',
            'desc' => 'Set the blending mode for an image',
        ),
    'imageantialias' =>
        array (
            'file' => 'function.imageantialias.php',
            'desc' => 'Should antialias functions be used or not',
        ),
    'imagearc' =>
        array (
            'file' => 'function.imagearc.php',
            'desc' => 'Draws an arc',
        ),
    'imagechar' =>
        array (
            'file' => 'function.imagechar.php',
            'desc' => 'Draw a character horizontally',
        ),
    'imagecharup' =>
        array (
            'file' => 'function.imagecharup.php',
            'desc' => 'Draw a character vertically',
        ),
    'imagecolorallocate' =>
        array (
            'file' => 'function.imagecolorallocate.php',
            'desc' => 'Allocate a color for an image',
        ),
    'imagecolorallocatealpha' =>
        array (
            'file' => 'function.imagecolorallocatealpha.php',
            'desc' => 'Allocate a color for an image',
        ),
    'imagecolorat' =>
        array (
            'file' => 'function.imagecolorat.php',
            'desc' => 'Get the index of the color of a pixel',
        ),
    'imagecolorclosest' =>
        array (
            'file' => 'function.imagecolorclosest.php',
            'desc' => 'Get the index of the closest color to the specified color',
        ),
    'imagecolorclosestalpha' =>
        array (
            'file' => 'function.imagecolorclosestalpha.php',
            'desc' => 'Get the index of the closest color to the specified color + alpha',
        ),
    'imagecolorclosesthwb' =>
        array (
            'file' => 'function.imagecolorclosesthwb.php',
            'desc' => 'Get the index of the color which has the hue, white and blackness',
        ),
    'imagecolordeallocate' =>
        array (
            'file' => 'function.imagecolordeallocate.php',
            'desc' => 'De-allocate a color for an image',
        ),
    'imagecolorexact' =>
        array (
            'file' => 'function.imagecolorexact.php',
            'desc' => 'Get the index of the specified color',
        ),
    'imagecolorexactalpha' =>
        array (
            'file' => 'function.imagecolorexactalpha.php',
            'desc' => 'Get the index of the specified color + alpha',
        ),
    'imagecolormatch' =>
        array (
            'file' => 'function.imagecolormatch.php',
            'desc' => 'Makes the colors of the palette version of an image more closely match the true color version',
        ),
    'imagecolorresolve' =>
        array (
            'file' => 'function.imagecolorresolve.php',
            'desc' => 'Get the index of the specified color or its closest possible alternative',
        ),
    'imagecolorresolvealpha' =>
        array (
            'file' => 'function.imagecolorresolvealpha.php',
            'desc' => 'Get the index of the specified color + alpha or its closest possible alternative',
        ),
    'imagecolorset' =>
        array (
            'file' => 'function.imagecolorset.php',
            'desc' => 'Set the color for the specified palette index',
        ),
    'imagecolorsforindex' =>
        array (
            'file' => 'function.imagecolorsforindex.php',
            'desc' => 'Get the colors for an index',
        ),
    'imagecolorstotal' =>
        array (
            'file' => 'function.imagecolorstotal.php',
            'desc' => 'Find out the number of colors in an image\'s palette',
        ),
    'imagecolortransparent' =>
        array (
            'file' => 'function.imagecolortransparent.php',
            'desc' => 'Define a color as transparent',
        ),
    'imageconvolution' =>
        array (
            'file' => 'function.imageconvolution.php',
            'desc' => 'Apply a 3x3 convolution matrix, using coefficient and offset',
        ),
    'imagecopy' =>
        array (
            'file' => 'function.imagecopy.php',
            'desc' => 'Copy part of an image',
        ),
    'imagecopymerge' =>
        array (
            'file' => 'function.imagecopymerge.php',
            'desc' => 'Copy and merge part of an image',
        ),
    'imagecopymergegray' =>
        array (
            'file' => 'function.imagecopymergegray.php',
            'desc' => 'Copy and merge part of an image with gray scale',
        ),
    'imagecopyresampled' =>
        array (
            'file' => 'function.imagecopyresampled.php',
            'desc' => 'Copy and resize part of an image with resampling',
        ),
    'imagecopyresized' =>
        array (
            'file' => 'function.imagecopyresized.php',
            'desc' => 'Copy and resize part of an image',
        ),
    'imagecreate' =>
        array (
            'file' => 'function.imagecreate.php',
            'desc' => 'Create a new palette based image',
        ),
    'imagecreatefromgd' =>
        array (
            'file' => 'function.imagecreatefromgd.php',
            'desc' => 'Create a new image from GD file or URL',
        ),
    'imagecreatefromgd2' =>
        array (
            'file' => 'function.imagecreatefromgd2.php',
            'desc' => 'Create a new image from GD2 file or URL',
        ),
    'imagecreatefromgd2part' =>
        array (
            'file' => 'function.imagecreatefromgd2part.php',
            'desc' => 'Create a new image from a given part of GD2 file or URL',
        ),
    'imagecreatefromgif' =>
        array (
            'file' => 'function.imagecreatefromgif.php',
            'desc' => 'Create a new image from file or URL',
        ),
    'imagecreatefromjpeg' =>
        array (
            'file' => 'function.imagecreatefromjpeg.php',
            'desc' => 'Create a new image from file or URL',
        ),
    'imagecreatefrompng' =>
        array (
            'file' => 'function.imagecreatefrompng.php',
            'desc' => 'Create a new image from file or URL',
        ),
    'imagecreatefromstring' =>
        array (
            'file' => 'function.imagecreatefromstring.php',
            'desc' => 'Create a new image from the image stream in the string',
        ),
    'imagecreatefromwbmp' =>
        array (
            'file' => 'function.imagecreatefromwbmp.php',
            'desc' => 'Create a new image from file or URL',
        ),
    'imagecreatefromwebp' =>
        array (
            'file' => 'function.imagecreatefromwebp.php',
            'desc' => 'Create a new image from file or URL',
        ),
    'imagecreatefromxbm' =>
        array (
            'file' => 'function.imagecreatefromxbm.php',
            'desc' => 'Create a new image from file or URL',
        ),
    'imagecreatefromxpm' =>
        array (
            'file' => 'function.imagecreatefromxpm.php',
            'desc' => 'Create a new image from file or URL',
        ),
    'imagecreatetruecolor' =>
        array (
            'file' => 'function.imagecreatetruecolor.php',
            'desc' => 'Create a new true color image',
        ),
    'imagecrop' =>
        array (
            'file' => 'function.imagecrop.php',
            'desc' => 'Crop an image using the given coordinates and size, x, y, width and height',
        ),
    'imagecropauto' =>
        array (
            'file' => 'function.imagecropauto.php',
            'desc' => 'Crop an image automatically using one of the available modes',
        ),
    'imagedashedline' =>
        array (
            'file' => 'function.imagedashedline.php',
            'desc' => 'Draw a dashed line',
        ),
    'imagedestroy' =>
        array (
            'file' => 'function.imagedestroy.php',
            'desc' => 'Destroy an image',
        ),
    'imageellipse' =>
        array (
            'file' => 'function.imageellipse.php',
            'desc' => 'Draw an ellipse',
        ),
    'imagefill' =>
        array (
            'file' => 'function.imagefill.php',
            'desc' => 'Flood fill',
        ),
    'imagefilledarc' =>
        array (
            'file' => 'function.imagefilledarc.php',
            'desc' => 'Draw a partial arc and fill it',
        ),
    'imagefilledellipse' =>
        array (
            'file' => 'function.imagefilledellipse.php',
            'desc' => 'Draw a filled ellipse',
        ),
    'imagefilledpolygon' =>
        array (
            'file' => 'function.imagefilledpolygon.php',
            'desc' => 'Draw a filled polygon',
        ),
    'imagefilledrectangle' =>
        array (
            'file' => 'function.imagefilledrectangle.php',
            'desc' => 'Draw a filled rectangle',
        ),
    'imagefilltoborder' =>
        array (
            'file' => 'function.imagefilltoborder.php',
            'desc' => 'Flood fill to specific color',
        ),
    'imagefilter' =>
        array (
            'file' => 'function.imagefilter.php',
            'desc' => 'Applies a filter to an image',
        ),
    'imageflip' =>
        array (
            'file' => 'function.imageflip.php',
            'desc' => 'Flips an image using a given mode',
        ),
    'imagefontheight' =>
        array (
            'file' => 'function.imagefontheight.php',
            'desc' => 'Get font height',
        ),
    'imagefontwidth' =>
        array (
            'file' => 'function.imagefontwidth.php',
            'desc' => 'Get font width',
        ),
    'imageftbbox' =>
        array (
            'file' => 'function.imageftbbox.php',
            'desc' => 'Give the bounding box of a text using fonts via freetype2',
        ),
    'imagefttext' =>
        array (
            'file' => 'function.imagefttext.php',
            'desc' => 'Write text to the image using fonts using FreeType 2',
        ),
    'imagegammacorrect' =>
        array (
            'file' => 'function.imagegammacorrect.php',
            'desc' => 'Apply a gamma correction to a GD image',
        ),
    'imagegd' =>
        array (
            'file' => 'function.imagegd.php',
            'desc' => 'Output GD image to browser or file',
        ),
    'imagegd2' =>
        array (
            'file' => 'function.imagegd2.php',
            'desc' => 'Output GD2 image to browser or file',
        ),
    'imagegif' =>
        array (
            'file' => 'function.imagegif.php',
            'desc' => 'Output image to browser or file',
        ),
    'imagegrabscreen' =>
        array (
            'file' => 'function.imagegrabscreen.php',
            'desc' => 'Captures the whole screen',
        ),
    'imagegrabwindow' =>
        array (
            'file' => 'function.imagegrabwindow.php',
            'desc' => 'Captures a window',
        ),
    'imageinterlace' =>
        array (
            'file' => 'function.imageinterlace.php',
            'desc' => 'Enable or disable interlace',
        ),
    'imageistruecolor' =>
        array (
            'file' => 'function.imageistruecolor.php',
            'desc' => 'Finds whether an image is a truecolor image',
        ),
    'imagejpeg' =>
        array (
            'file' => 'function.imagejpeg.php',
            'desc' => 'Output image to browser or file',
        ),
    'imagelayereffect' =>
        array (
            'file' => 'function.imagelayereffect.php',
            'desc' => 'Set the alpha blending flag to use the bundled libgd layering effects',
        ),
    'imageline' =>
        array (
            'file' => 'function.imageline.php',
            'desc' => 'Draw a line',
        ),
    'imageloadfont' =>
        array (
            'file' => 'function.imageloadfont.php',
            'desc' => 'Load a new font',
        ),
    'imagepalettecopy' =>
        array (
            'file' => 'function.imagepalettecopy.php',
            'desc' => 'Copy the palette from one image to another',
        ),
    'imagepalettetotruecolor' =>
        array (
            'file' => 'function.imagepalettetotruecolor.php',
            'desc' => 'Converts a palette based image to true color',
        ),
    'imagepng' =>
        array (
            'file' => 'function.imagepng.php',
            'desc' => 'Output a PNG image to either the browser or a file',
        ),
    'imagepolygon' =>
        array (
            'file' => 'function.imagepolygon.php',
            'desc' => 'Draws a polygon',
        ),
    'imagepsbbox' =>
        array (
            'file' => 'function.imagepsbbox.php',
            'desc' => 'Give the bounding box of a text rectangle using PostScript Type1 fonts',
        ),
    'imagepsencodefont' =>
        array (
            'file' => 'function.imagepsencodefont.php',
            'desc' => 'Change the character encoding vector of a font',
        ),
    'imagepsextendfont' =>
        array (
            'file' => 'function.imagepsextendfont.php',
            'desc' => 'Extend or condense a font',
        ),
    'imagepsfreefont' =>
        array (
            'file' => 'function.imagepsfreefont.php',
            'desc' => 'Free memory used by a PostScript Type 1 font',
        ),
    'imagepsloadfont' =>
        array (
            'file' => 'function.imagepsloadfont.php',
            'desc' => 'Load a PostScript Type 1 font from file',
        ),
    'imagepsslantfont' =>
        array (
            'file' => 'function.imagepsslantfont.php',
            'desc' => 'Slant a font',
        ),
    'imagepstext' =>
        array (
            'file' => 'function.imagepstext.php',
            'desc' => 'Draws a text over an image using PostScript Type1 fonts',
        ),
    'imagerectangle' =>
        array (
            'file' => 'function.imagerectangle.php',
            'desc' => 'Draw a rectangle',
        ),
    'imagerotate' =>
        array (
            'file' => 'function.imagerotate.php',
            'desc' => 'Rotate an image with a given angle',
        ),
    'imagesavealpha' =>
        array (
            'file' => 'function.imagesavealpha.php',
            'desc' => 'Set the flag to save full alpha channel information (as opposed to single-color transparency) when saving PNG images',
        ),
    'imagescale' =>
        array (
            'file' => 'function.imagescale.php',
            'desc' => 'Scale an image using the given new width and height',
        ),
    'imagesetbrush' =>
        array (
            'file' => 'function.imagesetbrush.php',
            'desc' => 'Set the brush image for line drawing',
        ),
    'imagesetinterpolation' =>
        array (
            'file' => 'function.imagesetinterpolation.php',
            'desc' => 'Set the interpolation method',
        ),
    'imagesetpixel' =>
        array (
            'file' => 'function.imagesetpixel.php',
            'desc' => 'Set a single pixel',
        ),
    'imagesetstyle' =>
        array (
            'file' => 'function.imagesetstyle.php',
            'desc' => 'Set the style for line drawing',
        ),
    'imagesetthickness' =>
        array (
            'file' => 'function.imagesetthickness.php',
            'desc' => 'Set the thickness for line drawing',
        ),
    'imagesettile' =>
        array (
            'file' => 'function.imagesettile.php',
            'desc' => 'Set the tile image for filling',
        ),
    'imagestring' =>
        array (
            'file' => 'function.imagestring.php',
            'desc' => 'Draw a string horizontally',
        ),
    'imagestringup' =>
        array (
            'file' => 'function.imagestringup.php',
            'desc' => 'Draw a string vertically',
        ),
    'imagesx' =>
        array (
            'file' => 'function.imagesx.php',
            'desc' => 'Get image width',
        ),
    'imagesy' =>
        array (
            'file' => 'function.imagesy.php',
            'desc' => 'Get image height',
        ),
    'imagetruecolortopalette' =>
        array (
            'file' => 'function.imagetruecolortopalette.php',
            'desc' => 'Convert a true color image to a palette image',
        ),
    'imagettfbbox' =>
        array (
            'file' => 'function.imagettfbbox.php',
            'desc' => 'Give the bounding box of a text using TrueType fonts',
        ),
    'imagettftext' =>
        array (
            'file' => 'function.imagettftext.php',
            'desc' => 'Write text to the image using TrueType fonts',
        ),
    'imagetypes' =>
        array (
            'file' => 'function.imagetypes.php',
            'desc' => 'Return the image types supported by this PHP build',
        ),
    'imagewbmp' =>
        array (
            'file' => 'function.imagewbmp.php',
            'desc' => 'Output image to browser or file',
        ),
    'imagewebp' =>
        array (
            'file' => 'function.imagewebp.php',
            'desc' => 'Output an WebP image to browser or file',
        ),
    'imagexbm' =>
        array (
            'file' => 'function.imagexbm.php',
            'desc' => 'Output an XBM image to browser or file',
        ),
    'image_type_to_extension' =>
        array (
            'file' => 'function.image-type-to-extension.php',
            'desc' => 'Get file extension for image type',
        ),
    'image_type_to_mime_type' =>
        array (
            'file' => 'function.image-type-to-mime-type.php',
            'desc' => 'Get Mime-Type for image-type returned by getimagesize,
   exif_read_data, exif_thumbnail, exif_imagetype',
        ),
    'Imagick::adaptiveBlurImage' =>
        array (
            'file' => 'imagick.adaptiveblurimage.php',
            'desc' => 'Adds adaptive blur filter to image',
        ),
    'Imagick::adaptiveResizeImage' =>
        array (
            'file' => 'imagick.adaptiveresizeimage.php',
            'desc' => 'Adaptively resize image with data dependent triangulation',
        ),
    'Imagick::adaptiveSharpenImage' =>
        array (
            'file' => 'imagick.adaptivesharpenimage.php',
            'desc' => 'Adaptively sharpen the image',
        ),
    'Imagick::adaptiveThresholdImage' =>
        array (
            'file' => 'imagick.adaptivethresholdimage.php',
            'desc' => 'Selects a threshold for each pixel based on a range of intensity',
        ),
    'Imagick::addImage' =>
        array (
            'file' => 'imagick.addimage.php',
            'desc' => 'Adds new image to Imagick object image list',
        ),
    'Imagick::addNoiseImage' =>
        array (
            'file' => 'imagick.addnoiseimage.php',
            'desc' => 'Adds random noise to the image',
        ),
    'Imagick::affineTransformImage' =>
        array (
            'file' => 'imagick.affinetransformimage.php',
            'desc' => 'Transforms an image',
        ),
    'Imagick::animateImages' =>
        array (
            'file' => 'imagick.animateimages.php',
            'desc' => 'Animates an image or images',
        ),
    'Imagick::annotateImage' =>
        array (
            'file' => 'imagick.annotateimage.php',
            'desc' => 'Annotates an image with text',
        ),
    'Imagick::appendImages' =>
        array (
            'file' => 'imagick.appendimages.php',
            'desc' => 'Append a set of images',
        ),
    'Imagick::averageImages' =>
        array (
            'file' => 'imagick.averageimages.php',
            'desc' => 'Average a set of images',
        ),
    'Imagick::blackThresholdImage' =>
        array (
            'file' => 'imagick.blackthresholdimage.php',
            'desc' => 'Forces all pixels below the threshold into black',
        ),
    'Imagick::blurImage' =>
        array (
            'file' => 'imagick.blurimage.php',
            'desc' => 'Adds blur filter to image',
        ),
    'Imagick::borderImage' =>
        array (
            'file' => 'imagick.borderimage.php',
            'desc' => 'Surrounds the image with a border',
        ),
    'Imagick::charcoalImage' =>
        array (
            'file' => 'imagick.charcoalimage.php',
            'desc' => 'Simulates a charcoal drawing',
        ),
    'Imagick::chopImage' =>
        array (
            'file' => 'imagick.chopimage.php',
            'desc' => 'Removes a region of an image and trims',
        ),
    'Imagick::clear' =>
        array (
            'file' => 'imagick.clear.php',
            'desc' => 'Clears all resources associated to Imagick object',
        ),
    'Imagick::clipImage' =>
        array (
            'file' => 'imagick.clipimage.php',
            'desc' => 'Clips along the first path from the 8BIM profile',
        ),
    'Imagick::clipPathImage' =>
        array (
            'file' => 'imagick.clippathimage.php',
            'desc' => 'Clips along the named paths from the 8BIM profile',
        ),
    'Imagick::clone' =>
        array (
            'file' => 'imagick.clone.php',
            'desc' => 'Makes an exact copy of the Imagick object',
        ),
    'Imagick::clutImage' =>
        array (
            'file' => 'imagick.clutimage.php',
            'desc' => 'Replaces colors in the image',
        ),
    'Imagick::coalesceImages' =>
        array (
            'file' => 'imagick.coalesceimages.php',
            'desc' => 'Composites a set of images',
        ),
    'Imagick::colorFloodfillImage' =>
        array (
            'file' => 'imagick.colorfloodfillimage.php',
            'desc' => 'Changes the color value of any pixel that matches target',
        ),
    'Imagick::colorizeImage' =>
        array (
            'file' => 'imagick.colorizeimage.php',
            'desc' => 'Blends the fill color with the image',
        ),
    'Imagick::combineImages' =>
        array (
            'file' => 'imagick.combineimages.php',
            'desc' => 'Combines one or more images into a single image',
        ),
    'Imagick::commentImage' =>
        array (
            'file' => 'imagick.commentimage.php',
            'desc' => 'Adds a comment to your image',
        ),
    'Imagick::compareImageChannels' =>
        array (
            'file' => 'imagick.compareimagechannels.php',
            'desc' => 'Returns the difference in one or more images',
        ),
    'Imagick::compareImageLayers' =>
        array (
            'file' => 'imagick.compareimagelayers.php',
            'desc' => 'Returns the maximum bounding region between images',
        ),
    'Imagick::compareImages' =>
        array (
            'file' => 'imagick.compareimages.php',
            'desc' => 'Compares an image to a reconstructed image',
        ),
    'Imagick::compositeImage' =>
        array (
            'file' => 'imagick.compositeimage.php',
            'desc' => 'Composite one image onto another',
        ),
    'Imagick::contrastImage' =>
        array (
            'file' => 'imagick.contrastimage.php',
            'desc' => 'Change the contrast of the image',
        ),
    'Imagick::contrastStretchImage' =>
        array (
            'file' => 'imagick.contraststretchimage.php',
            'desc' => 'Enhances the contrast of a color image',
        ),
    'Imagick::convolveImage' =>
        array (
            'file' => 'imagick.convolveimage.php',
            'desc' => 'Applies a custom convolution kernel to the image',
        ),
    'Imagick::cropImage' =>
        array (
            'file' => 'imagick.cropimage.php',
            'desc' => 'Extracts a region of the image',
        ),
    'Imagick::cropThumbnailImage' =>
        array (
            'file' => 'imagick.cropthumbnailimage.php',
            'desc' => 'Creates a crop thumbnail',
        ),
    'Imagick::current' =>
        array (
            'file' => 'imagick.current.php',
            'desc' => 'Returns a reference to the current Imagick object',
        ),
    'Imagick::cycleColormapImage' =>
        array (
            'file' => 'imagick.cyclecolormapimage.php',
            'desc' => 'Displaces an image\'s colormap',
        ),
    'Imagick::decipherImage' =>
        array (
            'file' => 'imagick.decipherimage.php',
            'desc' => 'Deciphers an image',
        ),
    'Imagick::deconstructImages' =>
        array (
            'file' => 'imagick.deconstructimages.php',
            'desc' => 'Returns certain pixel differences between images',
        ),
    'Imagick::deleteImageArtifact' =>
        array (
            'file' => 'imagick.deleteimageartifact.php',
            'desc' => 'Delete image artifact',
        ),
    'Imagick::deskewImage' =>
        array (
            'file' => 'imagick.deskewimage.php',
            'desc' => 'Removes skew from the image',
        ),
    'Imagick::despeckleImage' =>
        array (
            'file' => 'imagick.despeckleimage.php',
            'desc' => 'Reduces the speckle noise in an image',
        ),
    'Imagick::destroy' =>
        array (
            'file' => 'imagick.destroy.php',
            'desc' => 'Destroys the Imagick object',
        ),
    'Imagick::displayImage' =>
        array (
            'file' => 'imagick.displayimage.php',
            'desc' => 'Displays an image',
        ),
    'Imagick::displayImages' =>
        array (
            'file' => 'imagick.displayimages.php',
            'desc' => 'Displays an image or image sequence',
        ),
    'Imagick::distortImage' =>
        array (
            'file' => 'imagick.distortimage.php',
            'desc' => 'Distorts an image using various distortion methods',
        ),
    'Imagick::drawImage' =>
        array (
            'file' => 'imagick.drawimage.php',
            'desc' => 'Renders the ImagickDraw object on the current image',
        ),
    'Imagick::edgeImage' =>
        array (
            'file' => 'imagick.edgeimage.php',
            'desc' => 'Enhance edges within the image',
        ),
    'Imagick::embossImage' =>
        array (
            'file' => 'imagick.embossimage.php',
            'desc' => 'Returns a grayscale image with a three-dimensional effect',
        ),
    'Imagick::encipherImage' =>
        array (
            'file' => 'imagick.encipherimage.php',
            'desc' => 'Enciphers an image',
        ),
    'Imagick::enhanceImage' =>
        array (
            'file' => 'imagick.enhanceimage.php',
            'desc' => 'Improves the quality of a noisy image',
        ),
    'Imagick::equalizeImage' =>
        array (
            'file' => 'imagick.equalizeimage.php',
            'desc' => 'Equalizes the image histogram',
        ),
    'Imagick::evaluateImage' =>
        array (
            'file' => 'imagick.evaluateimage.php',
            'desc' => 'Applies an expression to an image',
        ),
    'Imagick::exportImagePixels' =>
        array (
            'file' => 'imagick.exportimagepixels.php',
            'desc' => 'Exports raw image pixels',
        ),
    'Imagick::extentImage' =>
        array (
            'file' => 'imagick.extentimage.php',
            'desc' => 'Set image size',
        ),
    'Imagick::flattenImages' =>
        array (
            'file' => 'imagick.flattenimages.php',
            'desc' => 'Merges a sequence of images',
        ),
    'Imagick::flipImage' =>
        array (
            'file' => 'imagick.flipimage.php',
            'desc' => 'Creates a vertical mirror image',
        ),
    'Imagick::floodFillPaintImage' =>
        array (
            'file' => 'imagick.floodfillpaintimage.php',
            'desc' => 'Changes the color value of any pixel that matches target',
        ),
    'Imagick::flopImage' =>
        array (
            'file' => 'imagick.flopimage.php',
            'desc' => 'Creates a horizontal mirror image',
        ),
    'Imagick::frameImage' =>
        array (
            'file' => 'imagick.frameimage.php',
            'desc' => 'Adds a simulated three-dimensional border',
        ),
    'Imagick::functionImage' =>
        array (
            'file' => 'imagick.functionimage.php',
            'desc' => 'Applies a function on the image',
        ),
    'Imagick::fxImage' =>
        array (
            'file' => 'imagick.fximage.php',
            'desc' => 'Evaluate expression for each pixel in the image',
        ),
    'Imagick::gammaImage' =>
        array (
            'file' => 'imagick.gammaimage.php',
            'desc' => 'Gamma-corrects an image',
        ),
    'Imagick::gaussianBlurImage' =>
        array (
            'file' => 'imagick.gaussianblurimage.php',
            'desc' => 'Blurs an image',
        ),
    'Imagick::getColorspace' =>
        array (
            'file' => 'imagick.getcolorspace.php',
            'desc' => 'Gets the colorspace',
        ),
    'Imagick::getCompression' =>
        array (
            'file' => 'imagick.getcompression.php',
            'desc' => 'Gets the object compression type',
        ),
    'Imagick::getCompressionQuality' =>
        array (
            'file' => 'imagick.getcompressionquality.php',
            'desc' => 'Gets the object compression quality',
        ),
    'Imagick::getCopyright' =>
        array (
            'file' => 'imagick.getcopyright.php',
            'desc' => 'Returns the ImageMagick API copyright as a string',
        ),
    'Imagick::getFilename' =>
        array (
            'file' => 'imagick.getfilename.php',
            'desc' => 'The filename associated with an image sequence',
        ),
    'Imagick::getFont' =>
        array (
            'file' => 'imagick.getfont.php',
            'desc' => 'Gets font',
        ),
    'Imagick::getFormat' =>
        array (
            'file' => 'imagick.getformat.php',
            'desc' => 'Returns the format of the Imagick object',
        ),
    'Imagick::getGravity' =>
        array (
            'file' => 'imagick.getgravity.php',
            'desc' => 'Gets the gravity',
        ),
    'Imagick::getHomeURL' =>
        array (
            'file' => 'imagick.gethomeurl.php',
            'desc' => 'Returns the ImageMagick home URL',
        ),
    'Imagick::getImage' =>
        array (
            'file' => 'imagick.getimage.php',
            'desc' => 'Returns a new Imagick object',
        ),
    'Imagick::getImageAlphaChannel' =>
        array (
            'file' => 'imagick.getimagealphachannel.php',
            'desc' => 'Gets the image alpha channel',
        ),
    'Imagick::getImageArtifact' =>
        array (
            'file' => 'imagick.getimageartifact.php',
            'desc' => 'Get image artifact',
        ),
    'Imagick::getImageBackgroundColor' =>
        array (
            'file' => 'imagick.getimagebackgroundcolor.php',
            'desc' => 'Returns the image background color',
        ),
    'Imagick::getImageBlob' =>
        array (
            'file' => 'imagick.getimageblob.php',
            'desc' => 'Returns the image sequence as a blob',
        ),
    'Imagick::getImageBluePrimary' =>
        array (
            'file' => 'imagick.getimageblueprimary.php',
            'desc' => 'Returns the chromaticy blue primary point',
        ),
    'Imagick::getImageBorderColor' =>
        array (
            'file' => 'imagick.getimagebordercolor.php',
            'desc' => 'Returns the image border color',
        ),
    'Imagick::getImageChannelDepth' =>
        array (
            'file' => 'imagick.getimagechanneldepth.php',
            'desc' => 'Gets the depth for a particular image channel',
        ),
    'Imagick::getImageChannelDistortion' =>
        array (
            'file' => 'imagick.getimagechanneldistortion.php',
            'desc' => 'Compares image channels of an image to a reconstructed image',
        ),
    'Imagick::getImageChannelDistortions' =>
        array (
            'file' => 'imagick.getimagechanneldistortions.php',
            'desc' => 'Gets channel distortions',
        ),
    'Imagick::getImageChannelExtrema' =>
        array (
            'file' => 'imagick.getimagechannelextrema.php',
            'desc' => 'Gets the extrema for one or more image channels',
        ),
    'Imagick::getImageChannelKurtosis' =>
        array (
            'file' => 'imagick.getimagechannelkurtosis.php',
        ),
    'Imagick::getImageChannelMean' =>
        array (
            'file' => 'imagick.getimagechannelmean.php',
            'desc' => 'Gets the mean and standard deviation',
        ),
    'Imagick::getImageChannelRange' =>
        array (
            'file' => 'imagick.getimagechannelrange.php',
            'desc' => 'Gets channel range',
        ),
    'Imagick::getImageChannelStatistics' =>
        array (
            'file' => 'imagick.getimagechannelstatistics.php',
            'desc' => 'Returns statistics for each channel in the image',
        ),
    'Imagick::getImageClipMask' =>
        array (
            'file' => 'imagick.getimageclipmask.php',
            'desc' => 'Gets image clip mask',
        ),
    'Imagick::getImageColormapColor' =>
        array (
            'file' => 'imagick.getimagecolormapcolor.php',
            'desc' => 'Returns the color of the specified colormap index',
        ),
    'Imagick::getImageColors' =>
        array (
            'file' => 'imagick.getimagecolors.php',
            'desc' => 'Gets the number of unique colors in the image',
        ),
    'Imagick::getImageColorspace' =>
        array (
            'file' => 'imagick.getimagecolorspace.php',
            'desc' => 'Gets the image colorspace',
        ),
    'Imagick::getImageCompose' =>
        array (
            'file' => 'imagick.getimagecompose.php',
            'desc' => 'Returns the composite operator associated with the image',
        ),
    'Imagick::getImageCompression' =>
        array (
            'file' => 'imagick.getimagecompression.php',
            'desc' => 'Gets the current image\'s compression type',
        ),
    'Imagick::getImageCompressionQuality' =>
        array (
            'file' => 'imagick.getimagecompressionquality.php',
            'desc' => 'Gets the current image\'s compression quality',
        ),
    'Imagick::getImageDelay' =>
        array (
            'file' => 'imagick.getimagedelay.php',
            'desc' => 'Gets the image delay',
        ),
    'Imagick::getImageDepth' =>
        array (
            'file' => 'imagick.getimagedepth.php',
            'desc' => 'Gets the image depth',
        ),
    'Imagick::getImageDispose' =>
        array (
            'file' => 'imagick.getimagedispose.php',
            'desc' => 'Gets the image disposal method',
        ),
    'Imagick::getImageDistortion' =>
        array (
            'file' => 'imagick.getimagedistortion.php',
            'desc' => 'Compares an image to a reconstructed image',
        ),
    'Imagick::getImageExtrema' =>
        array (
            'file' => 'imagick.getimageextrema.php',
            'desc' => 'Gets the extrema for the image',
        ),
    'Imagick::getImageFilename' =>
        array (
            'file' => 'imagick.getimagefilename.php',
            'desc' => 'Returns the filename of a particular image in a sequence',
        ),
    'Imagick::getImageFormat' =>
        array (
            'file' => 'imagick.getimageformat.php',
            'desc' => 'Returns the format of a particular image in a sequence',
        ),
    'Imagick::getImageGamma' =>
        array (
            'file' => 'imagick.getimagegamma.php',
            'desc' => 'Gets the image gamma',
        ),
    'Imagick::getImageGeometry' =>
        array (
            'file' => 'imagick.getimagegeometry.php',
            'desc' => 'Gets the width and height as an associative array',
        ),
    'Imagick::getImageGravity' =>
        array (
            'file' => 'imagick.getimagegravity.php',
            'desc' => 'Gets the image gravity',
        ),
    'Imagick::getImageGreenPrimary' =>
        array (
            'file' => 'imagick.getimagegreenprimary.php',
            'desc' => 'Returns the chromaticy green primary point',
        ),
    'Imagick::getImageHeight' =>
        array (
            'file' => 'imagick.getimageheight.php',
            'desc' => 'Returns the image height',
        ),
    'Imagick::getImageHistogram' =>
        array (
            'file' => 'imagick.getimagehistogram.php',
            'desc' => 'Gets the image histogram',
        ),
    'Imagick::getImageIndex' =>
        array (
            'file' => 'imagick.getimageindex.php',
            'desc' => 'Gets the index of the current active image',
        ),
    'Imagick::getImageInterlaceScheme' =>
        array (
            'file' => 'imagick.getimageinterlacescheme.php',
            'desc' => 'Gets the image interlace scheme',
        ),
    'Imagick::getImageInterpolateMethod' =>
        array (
            'file' => 'imagick.getimageinterpolatemethod.php',
            'desc' => 'Returns the interpolation method',
        ),
    'Imagick::getImageIterations' =>
        array (
            'file' => 'imagick.getimageiterations.php',
            'desc' => 'Gets the image iterations',
        ),
    'Imagick::getImageLength' =>
        array (
            'file' => 'imagick.getimagelength.php',
            'desc' => 'Returns the image length in bytes',
        ),
    'Imagick::getImageMagickLicense' =>
        array (
            'file' => 'imagick.getimagemagicklicense.php',
            'desc' => 'Returns a string containing the ImageMagick license',
        ),
    'Imagick::getImageMatte' =>
        array (
            'file' => 'imagick.getimagematte.php',
            'desc' => 'Return if the image has a matte channel',
        ),
    'Imagick::getImageMatteColor' =>
        array (
            'file' => 'imagick.getimagemattecolor.php',
            'desc' => 'Returns the image matte color',
        ),
    'Imagick::getImageOrientation' =>
        array (
            'file' => 'imagick.getimageorientation.php',
            'desc' => 'Gets the image orientation',
        ),
    'Imagick::getImagePage' =>
        array (
            'file' => 'imagick.getimagepage.php',
            'desc' => 'Returns the page geometry',
        ),
    'Imagick::getImagePixelColor' =>
        array (
            'file' => 'imagick.getimagepixelcolor.php',
            'desc' => 'Returns the color of the specified pixel',
        ),
    'Imagick::getImageProfile' =>
        array (
            'file' => 'imagick.getimageprofile.php',
            'desc' => 'Returns the named image profile',
        ),
    'Imagick::getImageProfiles' =>
        array (
            'file' => 'imagick.getimageprofiles.php',
            'desc' => 'Returns the image profiles',
        ),
    'Imagick::getImageProperties' =>
        array (
            'file' => 'imagick.getimageproperties.php',
            'desc' => 'Returns the image properties',
        ),
    'Imagick::getImageProperty' =>
        array (
            'file' => 'imagick.getimageproperty.php',
            'desc' => 'Returns the named image property',
        ),
    'Imagick::getImageRedPrimary' =>
        array (
            'file' => 'imagick.getimageredprimary.php',
            'desc' => 'Returns the chromaticity red primary point',
        ),
    'Imagick::getImageRegion' =>
        array (
            'file' => 'imagick.getimageregion.php',
            'desc' => 'Extracts a region of the image',
        ),
    'Imagick::getImageRenderingIntent' =>
        array (
            'file' => 'imagick.getimagerenderingintent.php',
            'desc' => 'Gets the image rendering intent',
        ),
    'Imagick::getImageResolution' =>
        array (
            'file' => 'imagick.getimageresolution.php',
            'desc' => 'Gets the image X and Y resolution',
        ),
    'Imagick::getImagesBlob' =>
        array (
            'file' => 'imagick.getimagesblob.php',
            'desc' => 'Returns all image sequences as a blob',
        ),
    'Imagick::getImageScene' =>
        array (
            'file' => 'imagick.getimagescene.php',
            'desc' => 'Gets the image scene',
        ),
    'Imagick::getImageSignature' =>
        array (
            'file' => 'imagick.getimagesignature.php',
            'desc' => 'Generates an SHA-256 message digest',
        ),
    'Imagick::getImageSize' =>
        array (
            'file' => 'imagick.getimagesize.php',
            'desc' => 'Returns the image length in bytes',
        ),
    'Imagick::getImageTicksPerSecond' =>
        array (
            'file' => 'imagick.getimagetickspersecond.php',
            'desc' => 'Gets the image ticks-per-second',
        ),
    'Imagick::getImageTotalInkDensity' =>
        array (
            'file' => 'imagick.getimagetotalinkdensity.php',
            'desc' => 'Gets the image total ink density',
        ),
    'Imagick::getImageType' =>
        array (
            'file' => 'imagick.getimagetype.php',
            'desc' => 'Gets the potential image type',
        ),
    'Imagick::getImageUnits' =>
        array (
            'file' => 'imagick.getimageunits.php',
            'desc' => 'Gets the image units of resolution',
        ),
    'Imagick::getImageVirtualPixelMethod' =>
        array (
            'file' => 'imagick.getimagevirtualpixelmethod.php',
            'desc' => 'Returns the virtual pixel method',
        ),
    'Imagick::getImageWhitePoint' =>
        array (
            'file' => 'imagick.getimagewhitepoint.php',
            'desc' => 'Returns the chromaticity white point',
        ),
    'Imagick::getImageWidth' =>
        array (
            'file' => 'imagick.getimagewidth.php',
            'desc' => 'Returns the image width',
        ),
    'Imagick::getInterlaceScheme' =>
        array (
            'file' => 'imagick.getinterlacescheme.php',
            'desc' => 'Gets the object interlace scheme',
        ),
    'Imagick::getIteratorIndex' =>
        array (
            'file' => 'imagick.getiteratorindex.php',
            'desc' => 'Gets the index of the current active image',
        ),
    'Imagick::getNumberImages' =>
        array (
            'file' => 'imagick.getnumberimages.php',
            'desc' => 'Returns the number of images in the object',
        ),
    'Imagick::getOption' =>
        array (
            'file' => 'imagick.getoption.php',
            'desc' => 'Returns a value associated with the specified key',
        ),
    'Imagick::getPackageName' =>
        array (
            'file' => 'imagick.getpackagename.php',
            'desc' => 'Returns the ImageMagick package name',
        ),
    'Imagick::getPage' =>
        array (
            'file' => 'imagick.getpage.php',
            'desc' => 'Returns the page geometry',
        ),
    'Imagick::getPixelIterator' =>
        array (
            'file' => 'imagick.getpixeliterator.php',
            'desc' => 'Returns a MagickPixelIterator',
        ),
    'Imagick::getPixelRegionIterator' =>
        array (
            'file' => 'imagick.getpixelregioniterator.php',
            'desc' => 'Get an ImagickPixelIterator for an image section',
        ),
    'Imagick::getPointSize' =>
        array (
            'file' => 'imagick.getpointsize.php',
            'desc' => 'Gets point size',
        ),
    'Imagick::getQuantumDepth' =>
        array (
            'file' => 'imagick.getquantumdepth.php',
            'desc' => 'Gets the quantum depth',
        ),
    'Imagick::getQuantumRange' =>
        array (
            'file' => 'imagick.getquantumrange.php',
            'desc' => 'Returns the Imagick quantum range',
        ),
    'Imagick::getReleaseDate' =>
        array (
            'file' => 'imagick.getreleasedate.php',
            'desc' => 'Returns the ImageMagick release date',
        ),
    'Imagick::getResource' =>
        array (
            'file' => 'imagick.getresource.php',
            'desc' => 'Returns the specified resource\'s memory usage',
        ),
    'Imagick::getResourceLimit' =>
        array (
            'file' => 'imagick.getresourcelimit.php',
            'desc' => 'Returns the specified resource limit',
        ),
    'Imagick::getSamplingFactors' =>
        array (
            'file' => 'imagick.getsamplingfactors.php',
            'desc' => 'Gets the horizontal and vertical sampling factor',
        ),
    'Imagick::getSize' =>
        array (
            'file' => 'imagick.getsize.php',
            'desc' => 'Returns the size associated with the Imagick object',
        ),
    'Imagick::getSizeOffset' =>
        array (
            'file' => 'imagick.getsizeoffset.php',
            'desc' => 'Returns the size offset',
        ),
    'Imagick::getVersion' =>
        array (
            'file' => 'imagick.getversion.php',
            'desc' => 'Returns the ImageMagick API version',
        ),
    'Imagick::haldClutImage' =>
        array (
            'file' => 'imagick.haldclutimage.php',
            'desc' => 'Replaces colors in the image',
        ),
    'Imagick::hasNextImage' =>
        array (
            'file' => 'imagick.hasnextimage.php',
            'desc' => 'Checks if the object has more images',
        ),
    'Imagick::hasPreviousImage' =>
        array (
            'file' => 'imagick.haspreviousimage.php',
            'desc' => 'Checks if the object has a previous image',
        ),
    'Imagick::identifyImage' =>
        array (
            'file' => 'imagick.identifyimage.php',
            'desc' => 'Identifies an image and fetches attributes',
        ),
    'Imagick::implodeImage' =>
        array (
            'file' => 'imagick.implodeimage.php',
            'desc' => 'Creates a new image as a copy',
        ),
    'Imagick::importImagePixels' =>
        array (
            'file' => 'imagick.importimagepixels.php',
            'desc' => 'Imports image pixels',
        ),
    'Imagick::labelImage' =>
        array (
            'file' => 'imagick.labelimage.php',
            'desc' => 'Adds a label to an image',
        ),
    'Imagick::levelImage' =>
        array (
            'file' => 'imagick.levelimage.php',
            'desc' => 'Adjusts the levels of an image',
        ),
    'Imagick::linearStretchImage' =>
        array (
            'file' => 'imagick.linearstretchimage.php',
            'desc' => 'Stretches with saturation the image intensity',
        ),
    'Imagick::liquidRescaleImage' =>
        array (
            'file' => 'imagick.liquidrescaleimage.php',
            'desc' => 'Animates an image or images',
        ),
    'Imagick::magnifyImage' =>
        array (
            'file' => 'imagick.magnifyimage.php',
            'desc' => 'Scales an image proportionally 2x',
        ),
    'Imagick::mapImage' =>
        array (
            'file' => 'imagick.mapimage.php',
            'desc' => 'Replaces the colors of an image with the closest color from a reference image.',
        ),
    'Imagick::matteFloodfillImage' =>
        array (
            'file' => 'imagick.mattefloodfillimage.php',
            'desc' => 'Changes the transparency value of a color',
        ),
    'Imagick::medianFilterImage' =>
        array (
            'file' => 'imagick.medianfilterimage.php',
            'desc' => 'Applies a digital filter',
        ),
    'Imagick::mergeImageLayers' =>
        array (
            'file' => 'imagick.mergeimagelayers.php',
            'desc' => 'Merges image layers',
        ),
    'Imagick::minifyImage' =>
        array (
            'file' => 'imagick.minifyimage.php',
            'desc' => 'Scales an image proportionally to half its size',
        ),
    'Imagick::modulateImage' =>
        array (
            'file' => 'imagick.modulateimage.php',
            'desc' => 'Control the brightness, saturation, and hue',
        ),
    'Imagick::montageImage' =>
        array (
            'file' => 'imagick.montageimage.php',
            'desc' => 'Creates a composite image',
        ),
    'Imagick::morphImages' =>
        array (
            'file' => 'imagick.morphimages.php',
            'desc' => 'Method morphs a set of images',
        ),
    'Imagick::mosaicImages' =>
        array (
            'file' => 'imagick.mosaicimages.php',
            'desc' => 'Forms a mosaic from images',
        ),
    'Imagick::motionBlurImage' =>
        array (
            'file' => 'imagick.motionblurimage.php',
            'desc' => 'Simulates motion blur',
        ),
    'Imagick::negateImage' =>
        array (
            'file' => 'imagick.negateimage.php',
            'desc' => 'Negates the colors in the reference image',
        ),
    'Imagick::newImage' =>
        array (
            'file' => 'imagick.newimage.php',
            'desc' => 'Creates a new image',
        ),
    'Imagick::newPseudoImage' =>
        array (
            'file' => 'imagick.newpseudoimage.php',
            'desc' => 'Creates a new image',
        ),
    'Imagick::nextImage' =>
        array (
            'file' => 'imagick.nextimage.php',
            'desc' => 'Moves to the next image',
        ),
    'Imagick::normalizeImage' =>
        array (
            'file' => 'imagick.normalizeimage.php',
            'desc' => 'Enhances the contrast of a color image',
        ),
    'Imagick::oilPaintImage' =>
        array (
            'file' => 'imagick.oilpaintimage.php',
            'desc' => 'Simulates an oil painting',
        ),
    'Imagick::opaquePaintImage' =>
        array (
            'file' => 'imagick.opaquepaintimage.php',
            'desc' => 'Changes the color value of any pixel that matches target',
        ),
    'Imagick::optimizeImageLayers' =>
        array (
            'file' => 'imagick.optimizeimagelayers.php',
            'desc' => 'Removes repeated portions of images to optimize',
        ),
    'Imagick::orderedPosterizeImage' =>
        array (
            'file' => 'imagick.orderedposterizeimage.php',
            'desc' => 'Performs an ordered dither',
        ),
    'Imagick::paintFloodfillImage' =>
        array (
            'file' => 'imagick.paintfloodfillimage.php',
            'desc' => 'Changes the color value of any pixel that matches target',
        ),
    'Imagick::paintOpaqueImage' =>
        array (
            'file' => 'imagick.paintopaqueimage.php',
            'desc' => 'Change any pixel that matches color',
        ),
    'Imagick::paintTransparentImage' =>
        array (
            'file' => 'imagick.painttransparentimage.php',
            'desc' => 'Changes any pixel that matches color with the color defined by fill',
        ),
    'Imagick::pingImage' =>
        array (
            'file' => 'imagick.pingimage.php',
            'desc' => 'Fetch basic attributes about the image',
        ),
    'Imagick::pingImageBlob' =>
        array (
            'file' => 'imagick.pingimageblob.php',
            'desc' => 'Quickly fetch attributes',
        ),
    'Imagick::pingImageFile' =>
        array (
            'file' => 'imagick.pingimagefile.php',
            'desc' => 'Get basic image attributes in a lightweight manner',
        ),
    'Imagick::polaroidImage' =>
        array (
            'file' => 'imagick.polaroidimage.php',
            'desc' => 'Simulates a Polaroid picture',
        ),
    'Imagick::posterizeImage' =>
        array (
            'file' => 'imagick.posterizeimage.php',
            'desc' => 'Reduces the image to a limited number of color level',
        ),
    'Imagick::previewImages' =>
        array (
            'file' => 'imagick.previewimages.php',
            'desc' => 'Quickly pin-point appropriate parameters for image processing',
        ),
    'Imagick::previousImage' =>
        array (
            'file' => 'imagick.previousimage.php',
            'desc' => 'Move to the previous image in the object',
        ),
    'Imagick::profileImage' =>
        array (
            'file' => 'imagick.profileimage.php',
            'desc' => 'Adds or removes a profile from an image',
        ),
    'Imagick::quantizeImage' =>
        array (
            'file' => 'imagick.quantizeimage.php',
            'desc' => 'Analyzes the colors within a reference image',
        ),
    'Imagick::quantizeImages' =>
        array (
            'file' => 'imagick.quantizeimages.php',
            'desc' => 'Analyzes the colors within a sequence of images',
        ),
    'Imagick::queryFontMetrics' =>
        array (
            'file' => 'imagick.queryfontmetrics.php',
            'desc' => 'Returns an array representing the font metrics',
        ),
    'Imagick::queryFonts' =>
        array (
            'file' => 'imagick.queryfonts.php',
            'desc' => 'Returns the configured fonts',
        ),
    'Imagick::queryFormats' =>
        array (
            'file' => 'imagick.queryformats.php',
            'desc' => 'Returns formats supported by Imagick',
        ),
    'Imagick::radialBlurImage' =>
        array (
            'file' => 'imagick.radialblurimage.php',
            'desc' => 'Radial blurs an image',
        ),
    'Imagick::raiseImage' =>
        array (
            'file' => 'imagick.raiseimage.php',
            'desc' => 'Creates a simulated 3d button-like effect',
        ),
    'Imagick::randomThresholdImage' =>
        array (
            'file' => 'imagick.randomthresholdimage.php',
            'desc' => 'Creates a high-contrast, two-color image',
        ),
    'Imagick::readImage' =>
        array (
            'file' => 'imagick.readimage.php',
            'desc' => 'Reads image from filename',
        ),
    'Imagick::readImageBlob' =>
        array (
            'file' => 'imagick.readimageblob.php',
            'desc' => 'Reads image from a binary string',
        ),
    'Imagick::readImageFile' =>
        array (
            'file' => 'imagick.readimagefile.php',
            'desc' => 'Reads image from open filehandle',
        ),
    'Imagick::recolorImage' =>
        array (
            'file' => 'imagick.recolorimage.php',
            'desc' => 'Recolors image',
        ),
    'Imagick::reduceNoiseImage' =>
        array (
            'file' => 'imagick.reducenoiseimage.php',
            'desc' => 'Smooths the contours of an image',
        ),
    'Imagick::remapImage' =>
        array (
            'file' => 'imagick.remapimage.php',
            'desc' => 'Remaps image colors',
        ),
    'Imagick::removeImage' =>
        array (
            'file' => 'imagick.removeimage.php',
            'desc' => 'Removes an image from the image list',
        ),
    'Imagick::removeImageProfile' =>
        array (
            'file' => 'imagick.removeimageprofile.php',
            'desc' => 'Removes the named image profile and returns it',
        ),
    'Imagick::render' =>
        array (
            'file' => 'imagick.render.php',
            'desc' => 'Renders all preceding drawing commands',
        ),
    'Imagick::resampleImage' =>
        array (
            'file' => 'imagick.resampleimage.php',
            'desc' => 'Resample image to desired resolution',
        ),
    'Imagick::resetImagePage' =>
        array (
            'file' => 'imagick.resetimagepage.php',
            'desc' => 'Reset image page',
        ),
    'Imagick::resizeImage' =>
        array (
            'file' => 'imagick.resizeimage.php',
            'desc' => 'Scales an image',
        ),
    'Imagick::rollImage' =>
        array (
            'file' => 'imagick.rollimage.php',
            'desc' => 'Offsets an image',
        ),
    'Imagick::rotateImage' =>
        array (
            'file' => 'imagick.rotateimage.php',
            'desc' => 'Rotates an image',
        ),
    'Imagick::roundCorners' =>
        array (
            'file' => 'imagick.roundcorners.php',
            'desc' => 'Rounds image corners',
        ),
    'Imagick::sampleImage' =>
        array (
            'file' => 'imagick.sampleimage.php',
            'desc' => 'Scales an image with pixel sampling',
        ),
    'Imagick::scaleImage' =>
        array (
            'file' => 'imagick.scaleimage.php',
            'desc' => 'Scales the size of an image',
        ),
    'Imagick::segmentImage' =>
        array (
            'file' => 'imagick.segmentimage.php',
            'desc' => 'Segments an image',
        ),
    'Imagick::separateImageChannel' =>
        array (
            'file' => 'imagick.separateimagechannel.php',
            'desc' => 'Separates a channel from the image',
        ),
    'Imagick::sepiaToneImage' =>
        array (
            'file' => 'imagick.sepiatoneimage.php',
            'desc' => 'Sepia tones an image',
        ),
    'Imagick::setBackgroundColor' =>
        array (
            'file' => 'imagick.setbackgroundcolor.php',
            'desc' => 'Sets the object\'s default background color',
        ),
    'Imagick::setColorspace' =>
        array (
            'file' => 'imagick.setcolorspace.php',
            'desc' => 'Set colorspace',
        ),
    'Imagick::setCompression' =>
        array (
            'file' => 'imagick.setcompression.php',
            'desc' => 'Sets the object\'s default compression type',
        ),
    'Imagick::setCompressionQuality' =>
        array (
            'file' => 'imagick.setcompressionquality.php',
            'desc' => 'Sets the object\'s default compression quality',
        ),
    'Imagick::setFilename' =>
        array (
            'file' => 'imagick.setfilename.php',
            'desc' => 'Sets the filename before you read or write the image',
        ),
    'Imagick::setFirstIterator' =>
        array (
            'file' => 'imagick.setfirstiterator.php',
            'desc' => 'Sets the Imagick iterator to the first image',
        ),
    'Imagick::setFont' =>
        array (
            'file' => 'imagick.setfont.php',
            'desc' => 'Sets font',
        ),
    'Imagick::setFormat' =>
        array (
            'file' => 'imagick.setformat.php',
            'desc' => 'Sets the format of the Imagick object',
        ),
    'Imagick::setGravity' =>
        array (
            'file' => 'imagick.setgravity.php',
            'desc' => 'Sets the gravity',
        ),
    'Imagick::setImage' =>
        array (
            'file' => 'imagick.setimage.php',
            'desc' => 'Replaces image in the object',
        ),
    'Imagick::setImageAlphaChannel' =>
        array (
            'file' => 'imagick.setimagealphachannel.php',
            'desc' => 'Sets image alpha channel',
        ),
    'Imagick::setImageArtifact' =>
        array (
            'file' => 'imagick.setimageartifact.php',
            'desc' => 'Set image artifact',
        ),
    'Imagick::setImageBackgroundColor' =>
        array (
            'file' => 'imagick.setimagebackgroundcolor.php',
            'desc' => 'Sets the image background color',
        ),
    'Imagick::setImageBias' =>
        array (
            'file' => 'imagick.setimagebias.php',
            'desc' => 'Sets the image bias for any method that convolves an image',
        ),
    'Imagick::setImageBluePrimary' =>
        array (
            'file' => 'imagick.setimageblueprimary.php',
            'desc' => 'Sets the image chromaticity blue primary point',
        ),
    'Imagick::setImageBorderColor' =>
        array (
            'file' => 'imagick.setimagebordercolor.php',
            'desc' => 'Sets the image border color',
        ),
    'Imagick::setImageChannelDepth' =>
        array (
            'file' => 'imagick.setimagechanneldepth.php',
            'desc' => 'Sets the depth of a particular image channel',
        ),
    'Imagick::setImageClipMask' =>
        array (
            'file' => 'imagick.setimageclipmask.php',
            'desc' => 'Sets image clip mask',
        ),
    'Imagick::setImageColormapColor' =>
        array (
            'file' => 'imagick.setimagecolormapcolor.php',
            'desc' => 'Sets the color of the specified colormap index',
        ),
    'Imagick::setImageColorspace' =>
        array (
            'file' => 'imagick.setimagecolorspace.php',
            'desc' => 'Sets the image colorspace',
        ),
    'Imagick::setImageCompose' =>
        array (
            'file' => 'imagick.setimagecompose.php',
            'desc' => 'Sets the image composite operator',
        ),
    'Imagick::setImageCompression' =>
        array (
            'file' => 'imagick.setimagecompression.php',
            'desc' => 'Sets the image compression',
        ),
    'Imagick::setImageCompressionQuality' =>
        array (
            'file' => 'imagick.setimagecompressionquality.php',
            'desc' => 'Sets the image compression quality',
        ),
    'Imagick::setImageDelay' =>
        array (
            'file' => 'imagick.setimagedelay.php',
            'desc' => 'Sets the image delay',
        ),
    'Imagick::setImageDepth' =>
        array (
            'file' => 'imagick.setimagedepth.php',
            'desc' => 'Sets the image depth',
        ),
    'Imagick::setImageDispose' =>
        array (
            'file' => 'imagick.setimagedispose.php',
            'desc' => 'Sets the image disposal method',
        ),
    'Imagick::setImageExtent' =>
        array (
            'file' => 'imagick.setimageextent.php',
            'desc' => 'Sets the image size',
        ),
    'Imagick::setImageFilename' =>
        array (
            'file' => 'imagick.setimagefilename.php',
            'desc' => 'Sets the filename of a particular image',
        ),
    'Imagick::setImageFormat' =>
        array (
            'file' => 'imagick.setimageformat.php',
            'desc' => 'Sets the format of a particular image',
        ),
    'Imagick::setImageGamma' =>
        array (
            'file' => 'imagick.setimagegamma.php',
            'desc' => 'Sets the image gamma',
        ),
    'Imagick::setImageGravity' =>
        array (
            'file' => 'imagick.setimagegravity.php',
            'desc' => 'Sets the image gravity',
        ),
    'Imagick::setImageGreenPrimary' =>
        array (
            'file' => 'imagick.setimagegreenprimary.php',
            'desc' => 'Sets the image chromaticity green primary point',
        ),
    'Imagick::setImageIndex' =>
        array (
            'file' => 'imagick.setimageindex.php',
            'desc' => 'Set the iterator position',
        ),
    'Imagick::setImageInterlaceScheme' =>
        array (
            'file' => 'imagick.setimageinterlacescheme.php',
            'desc' => 'Sets the image compression',
        ),
    'Imagick::setImageInterpolateMethod' =>
        array (
            'file' => 'imagick.setimageinterpolatemethod.php',
            'desc' => 'Sets the image interpolate pixel method',
        ),
    'Imagick::setImageIterations' =>
        array (
            'file' => 'imagick.setimageiterations.php',
            'desc' => 'Sets the image iterations',
        ),
    'Imagick::setImageMatte' =>
        array (
            'file' => 'imagick.setimagematte.php',
            'desc' => 'Sets the image matte channel',
        ),
    'Imagick::setImageMatteColor' =>
        array (
            'file' => 'imagick.setimagemattecolor.php',
            'desc' => 'Sets the image matte color',
        ),
    'Imagick::setImageOpacity' =>
        array (
            'file' => 'imagick.setimageopacity.php',
            'desc' => 'Sets the image opacity level',
        ),
    'Imagick::setImageOrientation' =>
        array (
            'file' => 'imagick.setimageorientation.php',
            'desc' => 'Sets the image orientation',
        ),
    'Imagick::setImagePage' =>
        array (
            'file' => 'imagick.setimagepage.php',
            'desc' => 'Sets the page geometry of the image',
        ),
    'Imagick::setImageProfile' =>
        array (
            'file' => 'imagick.setimageprofile.php',
            'desc' => 'Adds a named profile to the Imagick object',
        ),
    'Imagick::setImageProperty' =>
        array (
            'file' => 'imagick.setimageproperty.php',
            'desc' => 'Sets an image property',
        ),
    'Imagick::setImageRedPrimary' =>
        array (
            'file' => 'imagick.setimageredprimary.php',
            'desc' => 'Sets the image chromaticity red primary point',
        ),
    'Imagick::setImageRenderingIntent' =>
        array (
            'file' => 'imagick.setimagerenderingintent.php',
            'desc' => 'Sets the image rendering intent',
        ),
    'Imagick::setImageResolution' =>
        array (
            'file' => 'imagick.setimageresolution.php',
            'desc' => 'Sets the image resolution',
        ),
    'Imagick::setImageScene' =>
        array (
            'file' => 'imagick.setimagescene.php',
            'desc' => 'Sets the image scene',
        ),
    'Imagick::setImageTicksPerSecond' =>
        array (
            'file' => 'imagick.setimagetickspersecond.php',
            'desc' => 'Sets the image ticks-per-second',
        ),
    'Imagick::setImageType' =>
        array (
            'file' => 'imagick.setimagetype.php',
            'desc' => 'Sets the image type',
        ),
    'Imagick::setImageUnits' =>
        array (
            'file' => 'imagick.setimageunits.php',
            'desc' => 'Sets the image units of resolution',
        ),
    'Imagick::setImageVirtualPixelMethod' =>
        array (
            'file' => 'imagick.setimagevirtualpixelmethod.php',
            'desc' => 'Sets the image virtual pixel method',
        ),
    'Imagick::setImageWhitePoint' =>
        array (
            'file' => 'imagick.setimagewhitepoint.php',
            'desc' => 'Sets the image chromaticity white point',
        ),
    'Imagick::setInterlaceScheme' =>
        array (
            'file' => 'imagick.setinterlacescheme.php',
            'desc' => 'Sets the image compression',
        ),
    'Imagick::setIteratorIndex' =>
        array (
            'file' => 'imagick.setiteratorindex.php',
            'desc' => 'Set the iterator position',
        ),
    'Imagick::setLastIterator' =>
        array (
            'file' => 'imagick.setlastiterator.php',
            'desc' => 'Sets the Imagick iterator to the last image',
        ),
    'Imagick::setOption' =>
        array (
            'file' => 'imagick.setoption.php',
            'desc' => 'Set an option',
        ),
    'Imagick::setPage' =>
        array (
            'file' => 'imagick.setpage.php',
            'desc' => 'Sets the page geometry of the Imagick object',
        ),
    'Imagick::setPointSize' =>
        array (
            'file' => 'imagick.setpointsize.php',
            'desc' => 'Sets point size',
        ),
    'Imagick::setResolution' =>
        array (
            'file' => 'imagick.setresolution.php',
            'desc' => 'Sets the image resolution',
        ),
    'Imagick::setResourceLimit' =>
        array (
            'file' => 'imagick.setresourcelimit.php',
            'desc' => 'Sets the limit for a particular resource in megabytes',
        ),
    'Imagick::setSamplingFactors' =>
        array (
            'file' => 'imagick.setsamplingfactors.php',
            'desc' => 'Sets the image sampling factors',
        ),
    'Imagick::setSize' =>
        array (
            'file' => 'imagick.setsize.php',
            'desc' => 'Sets the size of the Imagick object',
        ),
    'Imagick::setSizeOffset' =>
        array (
            'file' => 'imagick.setsizeoffset.php',
            'desc' => 'Sets the size and offset of the Imagick object',
        ),
    'Imagick::setType' =>
        array (
            'file' => 'imagick.settype.php',
            'desc' => 'Sets the image type attribute',
        ),
    'Imagick::shadeImage' =>
        array (
            'file' => 'imagick.shadeimage.php',
            'desc' => 'Creates a 3D effect',
        ),
    'Imagick::shadowImage' =>
        array (
            'file' => 'imagick.shadowimage.php',
            'desc' => 'Simulates an image shadow',
        ),
    'Imagick::sharpenImage' =>
        array (
            'file' => 'imagick.sharpenimage.php',
            'desc' => 'Sharpens an image',
        ),
    'Imagick::shaveImage' =>
        array (
            'file' => 'imagick.shaveimage.php',
            'desc' => 'Shaves pixels from the image edges',
        ),
    'Imagick::shearImage' =>
        array (
            'file' => 'imagick.shearimage.php',
            'desc' => 'Creating a parallelogram',
        ),
    'Imagick::sigmoidalContrastImage' =>
        array (
            'file' => 'imagick.sigmoidalcontrastimage.php',
            'desc' => 'Adjusts the contrast of an image',
        ),
    'Imagick::sketchImage' =>
        array (
            'file' => 'imagick.sketchimage.php',
            'desc' => 'Simulates a pencil sketch',
        ),
    'Imagick::solarizeImage' =>
        array (
            'file' => 'imagick.solarizeimage.php',
            'desc' => 'Applies a solarizing effect to the image',
        ),
    'Imagick::sparseColorImage' =>
        array (
            'file' => 'imagick.sparsecolorimage.php',
            'desc' => 'Interpolates colors',
        ),
    'Imagick::spliceImage' =>
        array (
            'file' => 'imagick.spliceimage.php',
            'desc' => 'Splices a solid color into the image',
        ),
    'Imagick::spreadImage' =>
        array (
            'file' => 'imagick.spreadimage.php',
            'desc' => 'Randomly displaces each pixel in a block',
        ),
    'Imagick::steganoImage' =>
        array (
            'file' => 'imagick.steganoimage.php',
            'desc' => 'Hides a digital watermark within the image',
        ),
    'Imagick::stereoImage' =>
        array (
            'file' => 'imagick.stereoimage.php',
            'desc' => 'Composites two images',
        ),
    'Imagick::stripImage' =>
        array (
            'file' => 'imagick.stripimage.php',
            'desc' => 'Strips an image of all profiles and comments',
        ),
    'Imagick::swirlImage' =>
        array (
            'file' => 'imagick.swirlimage.php',
            'desc' => 'Swirls the pixels about the center of the image',
        ),
    'Imagick::textureImage' =>
        array (
            'file' => 'imagick.textureimage.php',
            'desc' => 'Repeatedly tiles the texture image',
        ),
    'Imagick::thresholdImage' =>
        array (
            'file' => 'imagick.thresholdimage.php',
            'desc' => 'Changes the value of individual pixels based on a threshold',
        ),
    'Imagick::thumbnailImage' =>
        array (
            'file' => 'imagick.thumbnailimage.php',
            'desc' => 'Changes the size of an image',
        ),
    'Imagick::tintImage' =>
        array (
            'file' => 'imagick.tintimage.php',
            'desc' => 'Applies a color vector to each pixel in the image',
        ),
    'Imagick::transformImage' =>
        array (
            'file' => 'imagick.transformimage.php',
            'desc' => 'Convenience method for setting crop size and the image geometry',
        ),
    'Imagick::transparentPaintImage' =>
        array (
            'file' => 'imagick.transparentpaintimage.php',
            'desc' => 'Paints pixels transparent',
        ),
    'Imagick::transposeImage' =>
        array (
            'file' => 'imagick.transposeimage.php',
            'desc' => 'Creates a vertical mirror image',
        ),
    'Imagick::transverseImage' =>
        array (
            'file' => 'imagick.transverseimage.php',
            'desc' => 'Creates a horizontal mirror image',
        ),
    'Imagick::trimImage' =>
        array (
            'file' => 'imagick.trimimage.php',
            'desc' => 'Remove edges from the image',
        ),
    'Imagick::uniqueImageColors' =>
        array (
            'file' => 'imagick.uniqueimagecolors.php',
            'desc' => 'Discards all but one of any pixel color',
        ),
    'Imagick::unsharpMaskImage' =>
        array (
            'file' => 'imagick.unsharpmaskimage.php',
            'desc' => 'Sharpens an image',
        ),
    'Imagick::valid' =>
        array (
            'file' => 'imagick.valid.php',
            'desc' => 'Checks if the current item is valid',
        ),
    'Imagick::vignetteImage' =>
        array (
            'file' => 'imagick.vignetteimage.php',
            'desc' => 'Adds vignette filter to the image',
        ),
    'Imagick::waveImage' =>
        array (
            'file' => 'imagick.waveimage.php',
            'desc' => 'Applies wave filter to the image',
        ),
    'Imagick::whiteThresholdImage' =>
        array (
            'file' => 'imagick.whitethresholdimage.php',
            'desc' => 'Force all pixels above the threshold into white',
        ),
    'Imagick::writeImage' =>
        array (
            'file' => 'imagick.writeimage.php',
            'desc' => 'Writes an image to the specified filename',
        ),
    'Imagick::writeImageFile' =>
        array (
            'file' => 'imagick.writeimagefile.php',
            'desc' => 'Writes an image to a filehandle',
        ),
    'Imagick::writeImages' =>
        array (
            'file' => 'imagick.writeimages.php',
            'desc' => 'Writes an image or image sequence',
        ),
    'Imagick::writeImagesFile' =>
        array (
            'file' => 'imagick.writeimagesfile.php',
            'desc' => 'Writes frames to a filehandle',
        ),
    'Imagick::__construct' =>
        array (
            'file' => 'imagick.construct.php',
            'desc' => 'The Imagick constructor',
        ),
    'ImagickDraw::affine' =>
        array (
            'file' => 'imagickdraw.affine.php',
            'desc' => 'Adjusts the current affine transformation matrix',
        ),
    'ImagickDraw::annotation' =>
        array (
            'file' => 'imagickdraw.annotation.php',
            'desc' => 'Draws text on the image',
        ),
    'ImagickDraw::arc' =>
        array (
            'file' => 'imagickdraw.arc.php',
            'desc' => 'Draws an arc',
        ),
    'ImagickDraw::bezier' =>
        array (
            'file' => 'imagickdraw.bezier.php',
            'desc' => 'Draws a bezier curve',
        ),
    'ImagickDraw::circle' =>
        array (
            'file' => 'imagickdraw.circle.php',
            'desc' => 'Draws a circle',
        ),
    'ImagickDraw::clear' =>
        array (
            'file' => 'imagickdraw.clear.php',
            'desc' => 'Clears the ImagickDraw',
        ),
    'ImagickDraw::clone' =>
        array (
            'file' => 'imagickdraw.clone.php',
            'desc' => 'Makes an exact copy of the specified ImagickDraw object',
        ),
    'ImagickDraw::color' =>
        array (
            'file' => 'imagickdraw.color.php',
            'desc' => 'Draws color on image',
        ),
    'ImagickDraw::comment' =>
        array (
            'file' => 'imagickdraw.comment.php',
            'desc' => 'Adds a comment',
        ),
    'ImagickDraw::composite' =>
        array (
            'file' => 'imagickdraw.composite.php',
            'desc' => 'Composites an image onto the current image',
        ),
    'ImagickDraw::destroy' =>
        array (
            'file' => 'imagickdraw.destroy.php',
            'desc' => 'Frees all associated resources',
        ),
    'ImagickDraw::ellipse' =>
        array (
            'file' => 'imagickdraw.ellipse.php',
            'desc' => 'Draws an ellipse on the image',
        ),
    'ImagickDraw::getClipPath' =>
        array (
            'file' => 'imagickdraw.getclippath.php',
            'desc' => 'Obtains the current clipping path ID',
        ),
    'ImagickDraw::getClipRule' =>
        array (
            'file' => 'imagickdraw.getcliprule.php',
            'desc' => 'Returns the current polygon fill rule',
        ),
    'ImagickDraw::getClipUnits' =>
        array (
            'file' => 'imagickdraw.getclipunits.php',
            'desc' => 'Returns the interpretation of clip path units',
        ),
    'ImagickDraw::getFillColor' =>
        array (
            'file' => 'imagickdraw.getfillcolor.php',
            'desc' => 'Returns the fill color',
        ),
    'ImagickDraw::getFillOpacity' =>
        array (
            'file' => 'imagickdraw.getfillopacity.php',
            'desc' => 'Returns the opacity used when drawing',
        ),
    'ImagickDraw::getFillRule' =>
        array (
            'file' => 'imagickdraw.getfillrule.php',
            'desc' => 'Returns the fill rule',
        ),
    'ImagickDraw::getFont' =>
        array (
            'file' => 'imagickdraw.getfont.php',
            'desc' => 'Returns the font',
        ),
    'ImagickDraw::getFontFamily' =>
        array (
            'file' => 'imagickdraw.getfontfamily.php',
            'desc' => 'Returns the font family',
        ),
    'ImagickDraw::getFontSize' =>
        array (
            'file' => 'imagickdraw.getfontsize.php',
            'desc' => 'Returns the font pointsize',
        ),
    'ImagickDraw::getFontStyle' =>
        array (
            'file' => 'imagickdraw.getfontstyle.php',
            'desc' => 'Returns the font style',
        ),
    'ImagickDraw::getFontWeight' =>
        array (
            'file' => 'imagickdraw.getfontweight.php',
            'desc' => 'Returns the font weight',
        ),
    'ImagickDraw::getGravity' =>
        array (
            'file' => 'imagickdraw.getgravity.php',
            'desc' => 'Returns the text placement gravity',
        ),
    'ImagickDraw::getStrokeAntialias' =>
        array (
            'file' => 'imagickdraw.getstrokeantialias.php',
            'desc' => 'Returns the current stroke antialias setting',
        ),
    'ImagickDraw::getStrokeColor' =>
        array (
            'file' => 'imagickdraw.getstrokecolor.php',
            'desc' => 'Returns the color used for stroking object outlines',
        ),
    'ImagickDraw::getStrokeDashArray' =>
        array (
            'file' => 'imagickdraw.getstrokedasharray.php',
            'desc' => 'Returns an array representing the pattern of dashes and gaps used to stroke paths',
        ),
    'ImagickDraw::getStrokeDashOffset' =>
        array (
            'file' => 'imagickdraw.getstrokedashoffset.php',
            'desc' => 'Returns the offset into the dash pattern to start the dash',
        ),
    'ImagickDraw::getStrokeLineCap' =>
        array (
            'file' => 'imagickdraw.getstrokelinecap.php',
            'desc' => 'Returns the shape to be used at the end of open subpaths when they are stroked',
        ),
    'ImagickDraw::getStrokeLineJoin' =>
        array (
            'file' => 'imagickdraw.getstrokelinejoin.php',
            'desc' => 'Returns the shape to be used at the corners of paths when they are stroked',
        ),
    'ImagickDraw::getStrokeMiterLimit' =>
        array (
            'file' => 'imagickdraw.getstrokemiterlimit.php',
            'desc' => 'Returns the stroke miter limit',
        ),
    'ImagickDraw::getStrokeOpacity' =>
        array (
            'file' => 'imagickdraw.getstrokeopacity.php',
            'desc' => 'Returns the opacity of stroked object outlines',
        ),
    'ImagickDraw::getStrokeWidth' =>
        array (
            'file' => 'imagickdraw.getstrokewidth.php',
            'desc' => 'Returns the width of the stroke used to draw object outlines',
        ),
    'ImagickDraw::getTextAlignment' =>
        array (
            'file' => 'imagickdraw.gettextalignment.php',
            'desc' => 'Returns the text alignment',
        ),
    'ImagickDraw::getTextAntialias' =>
        array (
            'file' => 'imagickdraw.gettextantialias.php',
            'desc' => 'Returns the current text antialias setting',
        ),
    'ImagickDraw::getTextDecoration' =>
        array (
            'file' => 'imagickdraw.gettextdecoration.php',
            'desc' => 'Returns the text decoration',
        ),
    'ImagickDraw::getTextEncoding' =>
        array (
            'file' => 'imagickdraw.gettextencoding.php',
            'desc' => 'Returns the code set used for text annotations',
        ),
    'ImagickDraw::getTextUnderColor' =>
        array (
            'file' => 'imagickdraw.gettextundercolor.php',
            'desc' => 'Returns the text under color',
        ),
    'ImagickDraw::getVectorGraphics' =>
        array (
            'file' => 'imagickdraw.getvectorgraphics.php',
            'desc' => 'Returns a string containing vector graphics',
        ),
    'ImagickDraw::line' =>
        array (
            'file' => 'imagickdraw.line.php',
            'desc' => 'Draws a line',
        ),
    'ImagickDraw::matte' =>
        array (
            'file' => 'imagickdraw.matte.php',
            'desc' => 'Paints on the image\'s opacity channel',
        ),
    'ImagickDraw::pathClose' =>
        array (
            'file' => 'imagickdraw.pathclose.php',
            'desc' => 'Adds a path element to the current path',
        ),
    'ImagickDraw::pathCurveToAbsolute' =>
        array (
            'file' => 'imagickdraw.pathcurvetoabsolute.php',
            'desc' => 'Draws a cubic Bezier curve',
        ),
    'ImagickDraw::pathCurveToQuadraticBezierAbsolute' =>
        array (
            'file' => 'imagickdraw.pathcurvetoquadraticbezierabsolute.php',
            'desc' => 'Draws a quadratic Bezier curve',
        ),
    'ImagickDraw::pathCurveToQuadraticBezierRelative' =>
        array (
            'file' => 'imagickdraw.pathcurvetoquadraticbezierrelative.php',
            'desc' => 'Draws a quadratic Bezier curve',
        ),
    'ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute' =>
        array (
            'file' => 'imagickdraw.pathcurvetoquadraticbeziersmoothabsolute.php',
            'desc' => 'Draws a quadratic Bezier curve',
        ),
    'ImagickDraw::pathCurveToQuadraticBezierSmoothRelative' =>
        array (
            'file' => 'imagickdraw.pathcurvetoquadraticbeziersmoothrelative.php',
            'desc' => 'Draws a quadratic Bezier curve',
        ),
    'ImagickDraw::pathCurveToRelative' =>
        array (
            'file' => 'imagickdraw.pathcurvetorelative.php',
            'desc' => 'Draws a cubic Bezier curve',
        ),
    'ImagickDraw::pathCurveToSmoothAbsolute' =>
        array (
            'file' => 'imagickdraw.pathcurvetosmoothabsolute.php',
            'desc' => 'Draws a cubic Bezier curve',
        ),
    'ImagickDraw::pathCurveToSmoothRelative' =>
        array (
            'file' => 'imagickdraw.pathcurvetosmoothrelative.php',
            'desc' => 'Draws a cubic Bezier curve',
        ),
    'ImagickDraw::pathEllipticArcAbsolute' =>
        array (
            'file' => 'imagickdraw.pathellipticarcabsolute.php',
            'desc' => 'Draws an elliptical arc',
        ),
    'ImagickDraw::pathEllipticArcRelative' =>
        array (
            'file' => 'imagickdraw.pathellipticarcrelative.php',
            'desc' => 'Draws an elliptical arc',
        ),
    'ImagickDraw::pathFinish' =>
        array (
            'file' => 'imagickdraw.pathfinish.php',
            'desc' => 'Terminates the current path',
        ),
    'ImagickDraw::pathLineToAbsolute' =>
        array (
            'file' => 'imagickdraw.pathlinetoabsolute.php',
            'desc' => 'Draws a line path',
        ),
    'ImagickDraw::pathLineToHorizontalAbsolute' =>
        array (
            'file' => 'imagickdraw.pathlinetohorizontalabsolute.php',
            'desc' => 'Draws a horizontal line path',
        ),
    'ImagickDraw::pathLineToHorizontalRelative' =>
        array (
            'file' => 'imagickdraw.pathlinetohorizontalrelative.php',
            'desc' => 'Draws a horizontal line',
        ),
    'ImagickDraw::pathLineToRelative' =>
        array (
            'file' => 'imagickdraw.pathlinetorelative.php',
            'desc' => 'Draws a line path',
        ),
    'ImagickDraw::pathLineToVerticalAbsolute' =>
        array (
            'file' => 'imagickdraw.pathlinetoverticalabsolute.php',
            'desc' => 'Draws a vertical line',
        ),
    'ImagickDraw::pathLineToVerticalRelative' =>
        array (
            'file' => 'imagickdraw.pathlinetoverticalrelative.php',
            'desc' => 'Draws a vertical line path',
        ),
    'ImagickDraw::pathMoveToAbsolute' =>
        array (
            'file' => 'imagickdraw.pathmovetoabsolute.php',
            'desc' => 'Starts a new sub-path',
        ),
    'ImagickDraw::pathMoveToRelative' =>
        array (
            'file' => 'imagickdraw.pathmovetorelative.php',
            'desc' => 'Starts a new sub-path',
        ),
    'ImagickDraw::pathStart' =>
        array (
            'file' => 'imagickdraw.pathstart.php',
            'desc' => 'Declares the start of a path drawing list',
        ),
    'ImagickDraw::point' =>
        array (
            'file' => 'imagickdraw.point.php',
            'desc' => 'Draws a point',
        ),
    'ImagickDraw::polygon' =>
        array (
            'file' => 'imagickdraw.polygon.php',
            'desc' => 'Draws a polygon',
        ),
    'ImagickDraw::polyline' =>
        array (
            'file' => 'imagickdraw.polyline.php',
            'desc' => 'Draws a polyline',
        ),
    'ImagickDraw::pop' =>
        array (
            'file' => 'imagickdraw.pop.php',
            'desc' => 'Destroys the current ImagickDraw in the stack, and returns to the previously pushed ImagickDraw',
        ),
    'ImagickDraw::popClipPath' =>
        array (
            'file' => 'imagickdraw.popclippath.php',
            'desc' => 'Terminates a clip path definition',
        ),
    'ImagickDraw::popDefs' =>
        array (
            'file' => 'imagickdraw.popdefs.php',
            'desc' => 'Terminates a definition list',
        ),
    'ImagickDraw::popPattern' =>
        array (
            'file' => 'imagickdraw.poppattern.php',
            'desc' => 'Terminates a pattern definition',
        ),
    'ImagickDraw::push' =>
        array (
            'file' => 'imagickdraw.push.php',
            'desc' => 'Clones the current ImagickDraw and pushes it to the stack',
        ),
    'ImagickDraw::pushClipPath' =>
        array (
            'file' => 'imagickdraw.pushclippath.php',
            'desc' => 'Starts a clip path definition',
        ),
    'ImagickDraw::pushDefs' =>
        array (
            'file' => 'imagickdraw.pushdefs.php',
            'desc' => 'Indicates that following commands create named elements for early processing',
        ),
    'ImagickDraw::pushPattern' =>
        array (
            'file' => 'imagickdraw.pushpattern.php',
            'desc' => 'Indicates that subsequent commands up to a ImagickDraw::opPattern() command comprise the definition of a named pattern',
        ),
    'ImagickDraw::rectangle' =>
        array (
            'file' => 'imagickdraw.rectangle.php',
            'desc' => 'Draws a rectangle',
        ),
    'ImagickDraw::render' =>
        array (
            'file' => 'imagickdraw.render.php',
            'desc' => 'Renders all preceding drawing commands onto the image',
        ),
    'ImagickDraw::rotate' =>
        array (
            'file' => 'imagickdraw.rotate.php',
            'desc' => 'Applies the specified rotation to the current coordinate space',
        ),
    'ImagickDraw::roundRectangle' =>
        array (
            'file' => 'imagickdraw.roundrectangle.php',
            'desc' => 'Draws a rounded rectangle',
        ),
    'ImagickDraw::scale' =>
        array (
            'file' => 'imagickdraw.scale.php',
            'desc' => 'Adjusts the scaling factor',
        ),
    'ImagickDraw::setClipPath' =>
        array (
            'file' => 'imagickdraw.setclippath.php',
            'desc' => 'Associates a named clipping path with the image',
        ),
    'ImagickDraw::setClipRule' =>
        array (
            'file' => 'imagickdraw.setcliprule.php',
            'desc' => 'Set the polygon fill rule to be used by the clipping path',
        ),
    'ImagickDraw::setClipUnits' =>
        array (
            'file' => 'imagickdraw.setclipunits.php',
            'desc' => 'Sets the interpretation of clip path units',
        ),
    'ImagickDraw::setFillAlpha' =>
        array (
            'file' => 'imagickdraw.setfillalpha.php',
            'desc' => 'Sets the opacity to use when drawing using the fill color or fill texture',
        ),
    'ImagickDraw::setFillColor' =>
        array (
            'file' => 'imagickdraw.setfillcolor.php',
            'desc' => 'Sets the fill color to be used for drawing filled objects',
        ),
    'ImagickDraw::setFillOpacity' =>
        array (
            'file' => 'imagickdraw.setfillopacity.php',
            'desc' => 'Sets the opacity to use when drawing using the fill color or fill texture',
        ),
    'ImagickDraw::setFillPatternURL' =>
        array (
            'file' => 'imagickdraw.setfillpatternurl.php',
            'desc' => 'Sets the URL to use as a fill pattern for filling objects',
        ),
    'ImagickDraw::setFillRule' =>
        array (
            'file' => 'imagickdraw.setfillrule.php',
            'desc' => 'Sets the fill rule to use while drawing polygons',
        ),
    'ImagickDraw::setFont' =>
        array (
            'file' => 'imagickdraw.setfont.php',
            'desc' => 'Sets the fully-specified font to use when annotating with text',
        ),
    'ImagickDraw::setFontFamily' =>
        array (
            'file' => 'imagickdraw.setfontfamily.php',
            'desc' => 'Sets the font family to use when annotating with text',
        ),
    'ImagickDraw::setFontSize' =>
        array (
            'file' => 'imagickdraw.setfontsize.php',
            'desc' => 'Sets the font pointsize to use when annotating with text',
        ),
    'ImagickDraw::setFontStretch' =>
        array (
            'file' => 'imagickdraw.setfontstretch.php',
            'desc' => 'Sets the font stretch to use when annotating with text',
        ),
    'ImagickDraw::setFontStyle' =>
        array (
            'file' => 'imagickdraw.setfontstyle.php',
            'desc' => 'Sets the font style to use when annotating with text',
        ),
    'ImagickDraw::setFontWeight' =>
        array (
            'file' => 'imagickdraw.setfontweight.php',
            'desc' => 'Sets the font weight',
        ),
    'ImagickDraw::setGravity' =>
        array (
            'file' => 'imagickdraw.setgravity.php',
            'desc' => 'Sets the text placement gravity',
        ),
    'ImagickDraw::setStrokeAlpha' =>
        array (
            'file' => 'imagickdraw.setstrokealpha.php',
            'desc' => 'Specifies the opacity of stroked object outlines',
        ),
    'ImagickDraw::setStrokeAntialias' =>
        array (
            'file' => 'imagickdraw.setstrokeantialias.php',
            'desc' => 'Controls whether stroked outlines are antialiased',
        ),
    'ImagickDraw::setStrokeColor' =>
        array (
            'file' => 'imagickdraw.setstrokecolor.php',
            'desc' => 'Sets the color used for stroking object outlines',
        ),
    'ImagickDraw::setStrokeDashArray' =>
        array (
            'file' => 'imagickdraw.setstrokedasharray.php',
            'desc' => 'Specifies the pattern of dashes and gaps used to stroke paths',
        ),
    'ImagickDraw::setStrokeDashOffset' =>
        array (
            'file' => 'imagickdraw.setstrokedashoffset.php',
            'desc' => 'Specifies the offset into the dash pattern to start the dash',
        ),
    'ImagickDraw::setStrokeLineCap' =>
        array (
            'file' => 'imagickdraw.setstrokelinecap.php',
            'desc' => 'Specifies the shape to be used at the end of open subpaths when they are stroked',
        ),
    'ImagickDraw::setStrokeLineJoin' =>
        array (
            'file' => 'imagickdraw.setstrokelinejoin.php',
            'desc' => 'Specifies the shape to be used at the corners of paths when they are stroked',
        ),
    'ImagickDraw::setStrokeMiterLimit' =>
        array (
            'file' => 'imagickdraw.setstrokemiterlimit.php',
            'desc' => 'Specifies the miter limit',
        ),
    'ImagickDraw::setStrokeOpacity' =>
        array (
            'file' => 'imagickdraw.setstrokeopacity.php',
            'desc' => 'Specifies the opacity of stroked object outlines',
        ),
    'ImagickDraw::setStrokePatternURL' =>
        array (
            'file' => 'imagickdraw.setstrokepatternurl.php',
            'desc' => 'Sets the pattern used for stroking object outlines',
        ),
    'ImagickDraw::setStrokeWidth' =>
        array (
            'file' => 'imagickdraw.setstrokewidth.php',
            'desc' => 'Sets the width of the stroke used to draw object outlines',
        ),
    'ImagickDraw::setTextAlignment' =>
        array (
            'file' => 'imagickdraw.settextalignment.php',
            'desc' => 'Specifies a text alignment',
        ),
    'ImagickDraw::setTextAntialias' =>
        array (
            'file' => 'imagickdraw.settextantialias.php',
            'desc' => 'Controls whether text is antialiased',
        ),
    'ImagickDraw::setTextDecoration' =>
        array (
            'file' => 'imagickdraw.settextdecoration.php',
            'desc' => 'Specifies a decoration',
        ),
    'ImagickDraw::setTextEncoding' =>
        array (
            'file' => 'imagickdraw.settextencoding.php',
            'desc' => 'Specifies the text code set',
        ),
    'ImagickDraw::setTextUnderColor' =>
        array (
            'file' => 'imagickdraw.settextundercolor.php',
            'desc' => 'Specifies the color of a background rectangle',
        ),
    'ImagickDraw::setVectorGraphics' =>
        array (
            'file' => 'imagickdraw.setvectorgraphics.php',
            'desc' => 'Sets the vector graphics',
        ),
    'ImagickDraw::setViewbox' =>
        array (
            'file' => 'imagickdraw.setviewbox.php',
            'desc' => 'Sets the overall canvas size',
        ),
    'ImagickDraw::skewX' =>
        array (
            'file' => 'imagickdraw.skewx.php',
            'desc' => 'Skews the current coordinate system in the horizontal direction',
        ),
    'ImagickDraw::skewY' =>
        array (
            'file' => 'imagickdraw.skewy.php',
            'desc' => 'Skews the current coordinate system in the vertical direction',
        ),
    'ImagickDraw::translate' =>
        array (
            'file' => 'imagickdraw.translate.php',
            'desc' => 'Applies a translation to the current coordinate system',
        ),
    'ImagickDraw::__construct' =>
        array (
            'file' => 'imagickdraw.construct.php',
            'desc' => 'The ImagickDraw constructor',
        ),
    'ImagickPixel::clear' =>
        array (
            'file' => 'imagickpixel.clear.php',
            'desc' => 'Clears resources associated with this object',
        ),
    'ImagickPixel::destroy' =>
        array (
            'file' => 'imagickpixel.destroy.php',
            'desc' => 'Deallocates resources associated with this object',
        ),
    'ImagickPixel::getColor' =>
        array (
            'file' => 'imagickpixel.getcolor.php',
            'desc' => 'Returns the color',
        ),
    'ImagickPixel::getColorAsString' =>
        array (
            'file' => 'imagickpixel.getcolorasstring.php',
            'desc' => 'Returns the color as a string',
        ),
    'ImagickPixel::getColorCount' =>
        array (
            'file' => 'imagickpixel.getcolorcount.php',
            'desc' => 'Returns the color count associated with this color',
        ),
    'ImagickPixel::getColorValue' =>
        array (
            'file' => 'imagickpixel.getcolorvalue.php',
            'desc' => 'Gets the normalized value of the provided color channel',
        ),
    'ImagickPixel::getHSL' =>
        array (
            'file' => 'imagickpixel.gethsl.php',
            'desc' => 'Returns the normalized HSL color of the ImagickPixel object',
        ),
    'ImagickPixel::isPixelSimilar' =>
        array (
            'file' => 'imagickpixel.ispixelsimilar.php',
            'desc' => 'Check the distance between this color and another',
        ),
    'ImagickPixel::isSimilar' =>
        array (
            'file' => 'imagickpixel.issimilar.php',
            'desc' => 'Check the distance between this color and another',
        ),
    'ImagickPixel::setColor' =>
        array (
            'file' => 'imagickpixel.setcolor.php',
            'desc' => 'Sets the color',
        ),
    'ImagickPixel::setColorValue' =>
        array (
            'file' => 'imagickpixel.setcolorvalue.php',
            'desc' => 'Sets the normalized value of one of the channels',
        ),
    'ImagickPixel::setHSL' =>
        array (
            'file' => 'imagickpixel.sethsl.php',
            'desc' => 'Sets the normalized HSL color',
        ),
    'ImagickPixel::__construct' =>
        array (
            'file' => 'imagickpixel.construct.php',
            'desc' => 'The ImagickPixel constructor',
        ),
    'ImagickPixelIterator::clear' =>
        array (
            'file' => 'imagickpixeliterator.clear.php',
            'desc' => 'Clear resources associated with a PixelIterator',
        ),
    'ImagickPixelIterator::destroy' =>
        array (
            'file' => 'imagickpixeliterator.destroy.php',
            'desc' => 'Deallocates resources associated with a PixelIterator',
        ),
    'ImagickPixelIterator::getCurrentIteratorRow' =>
        array (
            'file' => 'imagickpixeliterator.getcurrentiteratorrow.php',
            'desc' => 'Returns the current row of ImagickPixel objects',
        ),
    'ImagickPixelIterator::getIteratorRow' =>
        array (
            'file' => 'imagickpixeliterator.getiteratorrow.php',
            'desc' => 'Returns the current pixel iterator row',
        ),
    'ImagickPixelIterator::getNextIteratorRow' =>
        array (
            'file' => 'imagickpixeliterator.getnextiteratorrow.php',
            'desc' => 'Returns the next row of the pixel iterator',
        ),
    'ImagickPixelIterator::getPreviousIteratorRow' =>
        array (
            'file' => 'imagickpixeliterator.getpreviousiteratorrow.php',
            'desc' => 'Returns the previous row',
        ),
    'ImagickPixelIterator::newPixelIterator' =>
        array (
            'file' => 'imagickpixeliterator.newpixeliterator.php',
            'desc' => 'Returns a new pixel iterator',
        ),
    'ImagickPixelIterator::newPixelRegionIterator' =>
        array (
            'file' => 'imagickpixeliterator.newpixelregioniterator.php',
            'desc' => 'Returns a new pixel iterator',
        ),
    'ImagickPixelIterator::resetIterator' =>
        array (
            'file' => 'imagickpixeliterator.resetiterator.php',
            'desc' => 'Resets the pixel iterator',
        ),
    'ImagickPixelIterator::setIteratorFirstRow' =>
        array (
            'file' => 'imagickpixeliterator.setiteratorfirstrow.php',
            'desc' => 'Sets the pixel iterator to the first pixel row',
        ),
    'ImagickPixelIterator::setIteratorLastRow' =>
        array (
            'file' => 'imagickpixeliterator.setiteratorlastrow.php',
            'desc' => 'Sets the pixel iterator to the last pixel row',
        ),
    'ImagickPixelIterator::setIteratorRow' =>
        array (
            'file' => 'imagickpixeliterator.setiteratorrow.php',
            'desc' => 'Set the pixel iterator row',
        ),
    'ImagickPixelIterator::syncIterator' =>
        array (
            'file' => 'imagickpixeliterator.synciterator.php',
            'desc' => 'Syncs the pixel iterator',
        ),
    'ImagickPixelIterator::__construct' =>
        array (
            'file' => 'imagickpixeliterator.construct.php',
            'desc' => 'The ImagickPixelIterator constructor',
        ),
    'imap_8bit' =>
        array (
            'file' => 'function.imap-8bit.php',
            'desc' => 'Convert an 8bit string to a quoted-printable string',
        ),
    'imap_alerts' =>
        array (
            'file' => 'function.imap-alerts.php',
            'desc' => 'Returns all IMAP alert messages that have occurred',
        ),
    'imap_append' =>
        array (
            'file' => 'function.imap-append.php',
            'desc' => 'Append a string message to a specified mailbox',
        ),
    'imap_base64' =>
        array (
            'file' => 'function.imap-base64.php',
            'desc' => 'Decode BASE64 encoded text',
        ),
    'imap_binary' =>
        array (
            'file' => 'function.imap-binary.php',
            'desc' => 'Convert an 8bit string to a base64 string',
        ),
    'imap_body' =>
        array (
            'file' => 'function.imap-body.php',
            'desc' => 'Read the message body',
        ),
    'imap_bodystruct' =>
        array (
            'file' => 'function.imap-bodystruct.php',
            'desc' => 'Read the structure of a specified body section of a specific message',
        ),
    'imap_check' =>
        array (
            'file' => 'function.imap-check.php',
            'desc' => 'Check current mailbox',
        ),
    'imap_clearflag_full' =>
        array (
            'file' => 'function.imap-clearflag-full.php',
            'desc' => 'Clears flags on messages',
        ),
    'imap_close' =>
        array (
            'file' => 'function.imap-close.php',
            'desc' => 'Close an IMAP stream',
        ),
    'imap_create' =>
        array (
            'file' => 'function.imap-create.php',
            'desc' => 'Alias of imap_createmailbox',
        ),
    'imap_createmailbox' =>
        array (
            'file' => 'function.imap-createmailbox.php',
            'desc' => 'Create a new mailbox',
        ),
    'imap_delete' =>
        array (
            'file' => 'function.imap-delete.php',
            'desc' => 'Mark a message for deletion from current mailbox',
        ),
    'imap_deletemailbox' =>
        array (
            'file' => 'function.imap-deletemailbox.php',
            'desc' => 'Delete a mailbox',
        ),
    'imap_errors' =>
        array (
            'file' => 'function.imap-errors.php',
            'desc' => 'Returns all of the IMAP errors that have occurred',
        ),
    'imap_expunge' =>
        array (
            'file' => 'function.imap-expunge.php',
            'desc' => 'Delete all messages marked for deletion',
        ),
    'imap_fetchbody' =>
        array (
            'file' => 'function.imap-fetchbody.php',
            'desc' => 'Fetch a particular section of the body of the message',
        ),
    'imap_fetchheader' =>
        array (
            'file' => 'function.imap-fetchheader.php',
            'desc' => 'Returns header for a message',
        ),
    'imap_fetchmime' =>
        array (
            'file' => 'function.imap-fetchmime.php',
            'desc' => 'Fetch MIME headers for a particular section of the message',
        ),
    'imap_fetchstructure' =>
        array (
            'file' => 'function.imap-fetchstructure.php',
            'desc' => 'Read the structure of a particular message',
        ),
    'imap_fetchtext' =>
        array (
            'file' => 'function.imap-fetchtext.php',
            'desc' => 'Alias of imap_body',
        ),
    'imap_fetch_overview' =>
        array (
            'file' => 'function.imap-fetch-overview.php',
            'desc' => 'Read an overview of the information in the headers of the given message',
        ),
    'imap_gc' =>
        array (
            'file' => 'function.imap-gc.php',
            'desc' => 'Clears IMAP cache',
        ),
    'imap_getacl' =>
        array (
            'file' => 'function.imap-getacl.php',
            'desc' => 'Gets the ACL for a given mailbox',
        ),
    'imap_getmailboxes' =>
        array (
            'file' => 'function.imap-getmailboxes.php',
            'desc' => 'Read the list of mailboxes, returning detailed information on each one',
        ),
    'imap_getsubscribed' =>
        array (
            'file' => 'function.imap-getsubscribed.php',
            'desc' => 'List all the subscribed mailboxes',
        ),
    'imap_get_quota' =>
        array (
            'file' => 'function.imap-get-quota.php',
            'desc' => 'Retrieve the quota level settings, and usage statics per mailbox',
        ),
    'imap_get_quotaroot' =>
        array (
            'file' => 'function.imap-get-quotaroot.php',
            'desc' => 'Retrieve the quota settings per user',
        ),
    'imap_header' =>
        array (
            'file' => 'function.imap-header.php',
            'desc' => 'Alias of imap_headerinfo',
        ),
    'imap_headerinfo' =>
        array (
            'file' => 'function.imap-headerinfo.php',
            'desc' => 'Read the header of the message',
        ),
    'imap_headers' =>
        array (
            'file' => 'function.imap-headers.php',
            'desc' => 'Returns headers for all messages in a mailbox',
        ),
    'imap_last_error' =>
        array (
            'file' => 'function.imap-last-error.php',
            'desc' => 'Gets the last IMAP error that occurred during this page request',
        ),
    'imap_list' =>
        array (
            'file' => 'function.imap-list.php',
            'desc' => 'Read the list of mailboxes',
        ),
    'imap_listmailbox' =>
        array (
            'file' => 'function.imap-listmailbox.php',
            'desc' => 'Alias of imap_list',
        ),
    'imap_listscan' =>
        array (
            'file' => 'function.imap-listscan.php',
            'desc' => 'Returns the list of mailboxes that matches the given text',
        ),
    'imap_listsubscribed' =>
        array (
            'file' => 'function.imap-listsubscribed.php',
            'desc' => 'Alias of imap_lsub',
        ),
    'imap_lsub' =>
        array (
            'file' => 'function.imap-lsub.php',
            'desc' => 'List all the subscribed mailboxes',
        ),
    'imap_mail' =>
        array (
            'file' => 'function.imap-mail.php',
            'desc' => 'Send an email message',
        ),
    'imap_mailboxmsginfo' =>
        array (
            'file' => 'function.imap-mailboxmsginfo.php',
            'desc' => 'Get information about the current mailbox',
        ),
    'imap_mail_compose' =>
        array (
            'file' => 'function.imap-mail-compose.php',
            'desc' => 'Create a MIME message based on given envelope and body sections',
        ),
    'imap_mail_copy' =>
        array (
            'file' => 'function.imap-mail-copy.php',
            'desc' => 'Copy specified messages to a mailbox',
        ),
    'imap_mail_move' =>
        array (
            'file' => 'function.imap-mail-move.php',
            'desc' => 'Move specified messages to a mailbox',
        ),
    'imap_mime_header_decode' =>
        array (
            'file' => 'function.imap-mime-header-decode.php',
            'desc' => 'Decode MIME header elements',
        ),
    'imap_msgno' =>
        array (
            'file' => 'function.imap-msgno.php',
            'desc' => 'Gets the message sequence number for the given UID',
        ),
    'imap_num_msg' =>
        array (
            'file' => 'function.imap-num-msg.php',
            'desc' => 'Gets the number of messages in the current mailbox',
        ),
    'imap_num_recent' =>
        array (
            'file' => 'function.imap-num-recent.php',
            'desc' => 'Gets the number of recent messages in current mailbox',
        ),
    'imap_open' =>
        array (
            'file' => 'function.imap-open.php',
            'desc' => 'Open an IMAP stream to a mailbox',
        ),
    'imap_ping' =>
        array (
            'file' => 'function.imap-ping.php',
            'desc' => 'Check if the IMAP stream is still active',
        ),
    'imap_qprint' =>
        array (
            'file' => 'function.imap-qprint.php',
            'desc' => 'Convert a quoted-printable string to an 8 bit string',
        ),
    'imap_rename' =>
        array (
            'file' => 'function.imap-rename.php',
            'desc' => 'Alias of imap_renamemailbox',
        ),
    'imap_renamemailbox' =>
        array (
            'file' => 'function.imap-renamemailbox.php',
            'desc' => 'Rename an old mailbox to new mailbox',
        ),
    'imap_reopen' =>
        array (
            'file' => 'function.imap-reopen.php',
            'desc' => 'Reopen IMAP stream to new mailbox',
        ),
    'imap_rfc822_parse_adrlist' =>
        array (
            'file' => 'function.imap-rfc822-parse-adrlist.php',
            'desc' => 'Parses an address string',
        ),
    'imap_rfc822_parse_headers' =>
        array (
            'file' => 'function.imap-rfc822-parse-headers.php',
            'desc' => 'Parse mail headers from a string',
        ),
    'imap_rfc822_write_address' =>
        array (
            'file' => 'function.imap-rfc822-write-address.php',
            'desc' => 'Returns a properly formatted email address given the mailbox, host, and personal info',
        ),
    'imap_savebody' =>
        array (
            'file' => 'function.imap-savebody.php',
            'desc' => 'Save a specific body section to a file',
        ),
    'imap_scan' =>
        array (
            'file' => 'function.imap-scan.php',
            'desc' => 'Alias of imap_listscan',
        ),
    'imap_scanmailbox' =>
        array (
            'file' => 'function.imap-scanmailbox.php',
            'desc' => 'Alias of imap_listscan',
        ),
    'imap_search' =>
        array (
            'file' => 'function.imap-search.php',
            'desc' => 'This function returns an array of messages matching the given search criteria',
        ),
    'imap_setacl' =>
        array (
            'file' => 'function.imap-setacl.php',
            'desc' => 'Sets the ACL for a given mailbox',
        ),
    'imap_setflag_full' =>
        array (
            'file' => 'function.imap-setflag-full.php',
            'desc' => 'Sets flags on messages',
        ),
    'imap_set_quota' =>
        array (
            'file' => 'function.imap-set-quota.php',
            'desc' => 'Sets a quota for a given mailbox',
        ),
    'imap_sort' =>
        array (
            'file' => 'function.imap-sort.php',
            'desc' => 'Gets and sort messages',
        ),
    'imap_status' =>
        array (
            'file' => 'function.imap-status.php',
            'desc' => 'Returns status information on a mailbox',
        ),
    'imap_subscribe' =>
        array (
            'file' => 'function.imap-subscribe.php',
            'desc' => 'Subscribe to a mailbox',
        ),
    'imap_thread' =>
        array (
            'file' => 'function.imap-thread.php',
            'desc' => 'Returns a tree of threaded message',
        ),
    'imap_timeout' =>
        array (
            'file' => 'function.imap-timeout.php',
            'desc' => 'Set or fetch imap timeout',
        ),
    'imap_uid' =>
        array (
            'file' => 'function.imap-uid.php',
            'desc' => 'This function returns the UID for the given message sequence number',
        ),
    'imap_undelete' =>
        array (
            'file' => 'function.imap-undelete.php',
            'desc' => 'Unmark the message which is marked deleted',
        ),
    'imap_unsubscribe' =>
        array (
            'file' => 'function.imap-unsubscribe.php',
            'desc' => 'Unsubscribe from a mailbox',
        ),
    'imap_utf7_decode' =>
        array (
            'file' => 'function.imap-utf7-decode.php',
            'desc' => 'Decodes a modified UTF-7 encoded string',
        ),
    'imap_utf7_encode' =>
        array (
            'file' => 'function.imap-utf7-encode.php',
            'desc' => 'Converts ISO-8859-1 string to modified UTF-7 text',
        ),
    'imap_utf8' =>
        array (
            'file' => 'function.imap-utf8.php',
            'desc' => 'Converts MIME-encoded text to UTF-8',
        ),
    'implode' =>
        array (
            'file' => 'function.implode.php',
            'desc' => 'Join array elements with a string',
        ),
    'import_request_variables' =>
        array (
            'file' => 'function.import-request-variables.php',
            'desc' => 'Import GET/POST/Cookie variables into the global scope',
        ),
    'inclued_get_data' =>
        array (
            'file' => 'function.inclued-get-data.php',
            'desc' => 'Get the inclued data',
        ),
    'inet_ntop' =>
        array (
            'file' => 'function.inet-ntop.php',
            'desc' => 'Converts a packed internet address to a human readable representation',
        ),
    'inet_pton' =>
        array (
            'file' => 'function.inet-pton.php',
            'desc' => 'Converts a human readable IP address to its packed in_addr representation',
        ),
    'InfiniteIterator::next' =>
        array (
            'file' => 'infiniteiterator.next.php',
            'desc' => 'Moves the inner Iterator forward or rewinds it',
        ),
    'InfiniteIterator::__construct' =>
        array (
            'file' => 'infiniteiterator.construct.php',
            'desc' => 'Constructs an InfiniteIterator',
        ),
    'ingres_autocommit' =>
        array (
            'file' => 'function.ingres-autocommit.php',
            'desc' => 'Switch autocommit on or off',
        ),
    'ingres_autocommit_state' =>
        array (
            'file' => 'function.ingres-autocommit-state.php',
            'desc' => 'Test if the connection is using autocommit',
        ),
    'ingres_charset' =>
        array (
            'file' => 'function.ingres-charset.php',
            'desc' => 'Returns the installation character set',
        ),
    'ingres_close' =>
        array (
            'file' => 'function.ingres-close.php',
            'desc' => 'Close an Ingres database connection',
        ),
    'ingres_commit' =>
        array (
            'file' => 'function.ingres-commit.php',
            'desc' => 'Commit a transaction',
        ),
    'ingres_connect' =>
        array (
            'file' => 'function.ingres-connect.php',
            'desc' => 'Open a connection to an Ingres database',
        ),
    'ingres_cursor' =>
        array (
            'file' => 'function.ingres-cursor.php',
            'desc' => 'Get a cursor name for a given result resource',
        ),
    'ingres_errno' =>
        array (
            'file' => 'function.ingres-errno.php',
            'desc' => 'Get the last Ingres error number generated',
        ),
    'ingres_error' =>
        array (
            'file' => 'function.ingres-error.php',
            'desc' => 'Get a meaningful error message for the last error generated',
        ),
    'ingres_errsqlstate' =>
        array (
            'file' => 'function.ingres-errsqlstate.php',
            'desc' => 'Get the last SQLSTATE error code generated',
        ),
    'ingres_escape_string' =>
        array (
            'file' => 'function.ingres-escape-string.php',
            'desc' => 'Escape special characters for use in a query',
        ),
    'ingres_execute' =>
        array (
            'file' => 'function.ingres-execute.php',
            'desc' => 'Execute a prepared query',
        ),
    'ingres_fetch_array' =>
        array (
            'file' => 'function.ingres-fetch-array.php',
            'desc' => 'Fetch a row of result into an array',
        ),
    'ingres_fetch_assoc' =>
        array (
            'file' => 'function.ingres-fetch-assoc.php',
            'desc' => 'Fetch a row of result into an associative array',
        ),
    'ingres_fetch_object' =>
        array (
            'file' => 'function.ingres-fetch-object.php',
            'desc' => 'Fetch a row of result into an object',
        ),
    'ingres_fetch_proc_return' =>
        array (
            'file' => 'function.ingres-fetch-proc-return.php',
            'desc' => 'Get the return value from a procedure call',
        ),
    'ingres_fetch_row' =>
        array (
            'file' => 'function.ingres-fetch-row.php',
            'desc' => 'Fetch a row of result into an enumerated array',
        ),
    'ingres_field_length' =>
        array (
            'file' => 'function.ingres-field-length.php',
            'desc' => 'Get the length of a field',
        ),
    'ingres_field_name' =>
        array (
            'file' => 'function.ingres-field-name.php',
            'desc' => 'Get the name of a field in a query result',
        ),
    'ingres_field_nullable' =>
        array (
            'file' => 'function.ingres-field-nullable.php',
            'desc' => 'Test if a field is nullable',
        ),
    'ingres_field_precision' =>
        array (
            'file' => 'function.ingres-field-precision.php',
            'desc' => 'Get the precision of a field',
        ),
    'ingres_field_scale' =>
        array (
            'file' => 'function.ingres-field-scale.php',
            'desc' => 'Get the scale of a field',
        ),
    'ingres_field_type' =>
        array (
            'file' => 'function.ingres-field-type.php',
            'desc' => 'Get the type of a field in a query result',
        ),
    'ingres_free_result' =>
        array (
            'file' => 'function.ingres-free-result.php',
            'desc' => 'Free the resources associated with a result identifier',
        ),
    'ingres_next_error' =>
        array (
            'file' => 'function.ingres-next-error.php',
            'desc' => 'Get the next Ingres error',
        ),
    'ingres_num_fields' =>
        array (
            'file' => 'function.ingres-num-fields.php',
            'desc' => 'Get the number of fields returned by the last query',
        ),
    'ingres_num_rows' =>
        array (
            'file' => 'function.ingres-num-rows.php',
            'desc' => 'Get the number of rows affected or returned by a query',
        ),
    'ingres_pconnect' =>
        array (
            'file' => 'function.ingres-pconnect.php',
            'desc' => 'Open a persistent connection to an Ingres database',
        ),
    'ingres_prepare' =>
        array (
            'file' => 'function.ingres-prepare.php',
            'desc' => 'Prepare a query for later execution',
        ),
    'ingres_query' =>
        array (
            'file' => 'function.ingres-query.php',
            'desc' => 'Send an SQL query to Ingres',
        ),
    'ingres_result_seek' =>
        array (
            'file' => 'function.ingres-result-seek.php',
            'desc' => 'Set the row position before fetching data',
        ),
    'ingres_rollback' =>
        array (
            'file' => 'function.ingres-rollback.php',
            'desc' => 'Roll back a transaction',
        ),
    'ingres_set_environment' =>
        array (
            'file' => 'function.ingres-set-environment.php',
            'desc' => 'Set environment features controlling output options',
        ),
    'ingres_unbuffered_query' =>
        array (
            'file' => 'function.ingres-unbuffered-query.php',
            'desc' => 'Send an unbuffered  SQL query to Ingres',
        ),
    'ini_alter' =>
        array (
            'file' => 'function.ini-alter.php',
            'desc' => 'Alias of ini_set',
        ),
    'ini_get' =>
        array (
            'file' => 'function.ini-get.php',
            'desc' => 'Gets the value of a configuration option',
        ),
    'ini_get_all' =>
        array (
            'file' => 'function.ini-get-all.php',
            'desc' => 'Gets all configuration options',
        ),
    'ini_restore' =>
        array (
            'file' => 'function.ini-restore.php',
            'desc' => 'Restores the value of a configuration option',
        ),
    'ini_set' =>
        array (
            'file' => 'function.ini-set.php',
            'desc' => 'Sets the value of a configuration option',
        ),
    'inotify_add_watch' =>
        array (
            'file' => 'function.inotify-add-watch.php',
            'desc' => 'Add a watch to an initialized inotify instance',
        ),
    'inotify_init' =>
        array (
            'file' => 'function.inotify-init.php',
            'desc' => 'Initialize an inotify instance',
        ),
    'inotify_queue_len' =>
        array (
            'file' => 'function.inotify-queue-len.php',
            'desc' => 'Return a number upper than zero if there are pending events',
        ),
    'inotify_read' =>
        array (
            'file' => 'function.inotify-read.php',
            'desc' => 'Read events from an inotify instance',
        ),
    'inotify_rm_watch' =>
        array (
            'file' => 'function.inotify-rm-watch.php',
            'desc' => 'Remove an existing watch from an inotify instance',
        ),
    'interface_exists' =>
        array (
            'file' => 'function.interface-exists.php',
            'desc' => 'Checks if the interface has been defined',
        ),
    'IntlBreakIterator::createCharacterInstance' =>
        array (
            'file' => 'intlbreakiterator.createcharacterinstance.php',
            'desc' => 'Create break iterator for boundaries of combining character sequences',
        ),
    'IntlBreakIterator::createCodePointInstance' =>
        array (
            'file' => 'intlbreakiterator.createcodepointinstance.php',
            'desc' => 'Create break iterator for boundaries of code points',
        ),
    'IntlBreakIterator::createLineInstance' =>
        array (
            'file' => 'intlbreakiterator.createlineinstance.php',
            'desc' => 'Create break iterator for logically possible line breaks',
        ),
    'IntlBreakIterator::createSentenceInstance' =>
        array (
            'file' => 'intlbreakiterator.createsentenceinstance.php',
            'desc' => 'Create break iterator for sentence breaks',
        ),
    'IntlBreakIterator::createTitleInstance' =>
        array (
            'file' => 'intlbreakiterator.createtitleinstance.php',
            'desc' => 'Create break iterator for title-casing breaks',
        ),
    'IntlBreakIterator::createWordInstance' =>
        array (
            'file' => 'intlbreakiterator.createwordinstance.php',
            'desc' => 'Create break iterator for word breaks',
        ),
    'IntlBreakIterator::current' =>
        array (
            'file' => 'intlbreakiterator.current.php',
            'desc' => 'Get index of current position',
        ),
    'IntlBreakIterator::first' =>
        array (
            'file' => 'intlbreakiterator.first.php',
            'desc' => 'Set position to the first character in the text',
        ),
    'IntlBreakIterator::following' =>
        array (
            'file' => 'intlbreakiterator.following.php',
            'desc' => 'Advance the iterator to the first boundary following specified offset',
        ),
    'IntlBreakIterator::getErrorCode' =>
        array (
            'file' => 'intlbreakiterator.geterrorcode.php',
            'desc' => 'Get last error code on the object',
        ),
    'IntlBreakIterator::getErrorMessage' =>
        array (
            'file' => 'intlbreakiterator.geterrormessage.php',
            'desc' => 'Get last error message on the object',
        ),
    'IntlBreakIterator::getLocale' =>
        array (
            'file' => 'intlbreakiterator.getlocale.php',
            'desc' => 'Get the locale associated with the object',
        ),
    'IntlBreakIterator::getPartsIterator' =>
        array (
            'file' => 'intlbreakiterator.getpartsiterator.php',
            'desc' => 'Create iterator for navigating fragments between boundaries',
        ),
    'IntlBreakIterator::getText' =>
        array (
            'file' => 'intlbreakiterator.gettext.php',
            'desc' => 'Get the text being scanned',
        ),
    'IntlBreakIterator::isBoundary' =>
        array (
            'file' => 'intlbreakiterator.isboundary.php',
            'desc' => 'Tell whether an offset is a boundary ºs offset',
        ),
    'IntlBreakIterator::last' =>
        array (
            'file' => 'intlbreakiterator.last.php',
            'desc' => 'Set the iterator position to index beyond the last character',
        ),
    'IntlBreakIterator::next' =>
        array (
            'file' => 'intlbreakiterator.next.php',
            'desc' => 'Advance the iterator the next boundary',
        ),
    'IntlBreakIterator::preceding' =>
        array (
            'file' => 'intlbreakiterator.preceding.php',
            'desc' => 'Set the iterator position to the first boundary before an offset',
        ),
    'IntlBreakIterator::previous' =>
        array (
            'file' => 'intlbreakiterator.previous.php',
            'desc' => 'Set the iterator position to the boundary immediately before the current',
        ),
    'IntlBreakIterator::setText' =>
        array (
            'file' => 'intlbreakiterator.settext.php',
            'desc' => 'Set the text being scanned',
        ),
    'IntlBreakIterator::__construct' =>
        array (
            'file' => 'intlbreakiterator.construct.php',
            'desc' => 'Private constructor for disallowing instantiation',
        ),
    'IntlCalendar::add' =>
        array (
            'file' => 'intlcalendar.add.php',
            'desc' => 'Add a (signed) amount of time to a field',
        ),
    'IntlCalendar::after' =>
        array (
            'file' => 'intlcalendar.after.php',
            'desc' => 'Whether this object ºs time is after that of the passed object',
        ),
    'IntlCalendar::before' =>
        array (
            'file' => 'intlcalendar.before.php',
            'desc' => 'Whether this object ºs time is before that of the passed object',
        ),
    'IntlCalendar::clear' =>
        array (
            'file' => 'intlcalendar.clear.php',
            'desc' => 'Clear a field or all fields',
        ),
    'IntlCalendar::createInstance' =>
        array (
            'file' => 'intlcalendar.createinstance.php',
            'desc' => 'Create a new IntlCalendar',
        ),
    'IntlCalendar::equals' =>
        array (
            'file' => 'intlcalendar.equals.php',
            'desc' => 'Compare time of two IntlCalendar objects for equality',
        ),
    'IntlCalendar::fieldDifference' =>
        array (
            'file' => 'intlcalendar.fielddifference.php',
            'desc' => 'Calculate difference between given time and this object ºs time',
        ),
    'IntlCalendar::fromDateTime' =>
        array (
            'file' => 'intlcalendar.fromdatetime.php',
            'desc' => 'Create an IntlCalendar from a DateTime object or string',
        ),
    'IntlCalendar::get' =>
        array (
            'file' => 'intlcalendar.get.php',
            'desc' => 'Get the value for a field',
        ),
    'IntlCalendar::getActualMaximum' =>
        array (
            'file' => 'intlcalendar.getactualmaximum.php',
            'desc' => 'The maximum value for a field, considering the object ºs current time',
        ),
    'IntlCalendar::getActualMinimum' =>
        array (
            'file' => 'intlcalendar.getactualminimum.php',
            'desc' => 'The minimum value for a field, considering the object ºs current time',
        ),
    'IntlCalendar::getAvailableLocales' =>
        array (
            'file' => 'intlcalendar.getavailablelocales.php',
            'desc' => 'Get array of locales for which there is data',
        ),
    'IntlCalendar::getDayOfWeekType' =>
        array (
            'file' => 'intlcalendar.getdayofweektype.php',
            'desc' => 'Tell whether a day is a weekday, weekend or a day that has a transition between the two',
        ),
    'IntlCalendar::getErrorCode' =>
        array (
            'file' => 'intlcalendar.geterrorcode.php',
            'desc' => 'Get last error code on the object',
        ),
    'IntlCalendar::getErrorMessage' =>
        array (
            'file' => 'intlcalendar.geterrormessage.php',
            'desc' => 'Get last error message on the object',
        ),
    'IntlCalendar::getFirstDayOfWeek' =>
        array (
            'file' => 'intlcalendar.getfirstdayofweek.php',
            'desc' => 'Get the first day of the week for the calendar ºs locale',
        ),
    'IntlCalendar::getGreatestMinimum' =>
        array (
            'file' => 'intlcalendar.getgreatestminimum.php',
            'desc' => 'Get the largest local minimum value for a field',
        ),
    'IntlCalendar::getKeywordValuesForLocale' =>
        array (
            'file' => 'intlcalendar.getkeywordvaluesforlocale.php',
            'desc' => 'Get set of locale keyword values',
        ),
    'IntlCalendar::getLeastMaximum' =>
        array (
            'file' => 'intlcalendar.getleastmaximum.php',
            'desc' => 'Get the smallest local maximum for a field',
        ),
    'IntlCalendar::getLocale' =>
        array (
            'file' => 'intlcalendar.getlocale.php',
            'desc' => 'Get the locale associated with the object',
        ),
    'IntlCalendar::getMaximum' =>
        array (
            'file' => 'intlcalendar.getmaximum.php',
            'desc' => 'Get the global maximum value for a field',
        ),
    'IntlCalendar::getMinimalDaysInFirstWeek' =>
        array (
            'file' => 'intlcalendar.getminimaldaysinfirstweek.php',
            'desc' => 'Get minimal number of days the first week in a year or month can have',
        ),
    'IntlCalendar::getMinimum' =>
        array (
            'file' => 'intlcalendar.getminimum.php',
            'desc' => 'Get the global minimum value for a field',
        ),
    'IntlCalendar::getNow' =>
        array (
            'file' => 'intlcalendar.getnow.php',
            'desc' => 'Get number representing the current time',
        ),
    'IntlCalendar::getRepeatedWallTimeOption' =>
        array (
            'file' => 'intlcalendar.getrepeatedwalltimeoption.php',
            'desc' => 'Get behavior for handling repeating wall time',
        ),
    'IntlCalendar::getSkippedWallTimeOption' =>
        array (
            'file' => 'intlcalendar.getskippedwalltimeoption.php',
            'desc' => 'Get behavior for handling skipped wall time',
        ),
    'IntlCalendar::getTime' =>
        array (
            'file' => 'intlcalendar.gettime.php',
            'desc' => 'Get time currently represented by the object',
        ),
    'IntlCalendar::getTimeZone' =>
        array (
            'file' => 'intlcalendar.gettimezone.php',
            'desc' => 'Get the object ºs timezone',
        ),
    'IntlCalendar::getType' =>
        array (
            'file' => 'intlcalendar.gettype.php',
            'desc' => 'Get the calendar type',
        ),
    'IntlCalendar::getWeekendTransition' =>
        array (
            'file' => 'intlcalendar.getweekendtransition.php',
            'desc' => 'Get time of the day at which weekend begins or ends',
        ),
    'IntlCalendar::inDaylightTime' =>
        array (
            'file' => 'intlcalendar.indaylighttime.php',
            'desc' => 'Whether the object ºs time is in Daylight Savings Time',
        ),
    'IntlCalendar::isEquivalentTo' =>
        array (
            'file' => 'intlcalendar.isequivalentto.php',
            'desc' => 'Whether another calendar is equal but for a different time',
        ),
    'IntlCalendar::isLenient' =>
        array (
            'file' => 'intlcalendar.islenient.php',
            'desc' => 'Whether date/time interpretation is in lenient mode',
        ),
    'IntlCalendar::isSet' =>
        array (
            'file' => 'intlcalendar.isset.php',
            'desc' => 'Whether a field is set',
        ),
    'IntlCalendar::isWeekend' =>
        array (
            'file' => 'intlcalendar.isweekend.php',
            'desc' => 'Whether a certain date/time is in the weekend',
        ),
    'IntlCalendar::roll' =>
        array (
            'file' => 'intlcalendar.roll.php',
            'desc' => 'Add value to field without carrying into more significant fields',
        ),
    'IntlCalendar::set' =>
        array (
            'file' => 'intlcalendar.set.php',
            'desc' => 'Set a time field or several common fields at once',
        ),
    'IntlCalendar::setFirstDayOfWeek' =>
        array (
            'file' => 'intlcalendar.setfirstdayofweek.php',
            'desc' => 'Set the day on which the week is deemed to start',
        ),
    'IntlCalendar::setLenient' =>
        array (
            'file' => 'intlcalendar.setlenient.php',
            'desc' => 'Set whether date/time interpretation is to be lenient',
        ),
    'IntlCalendar::setMinimalDaysInFirstWeek' =>
        array (
            'file' => 'intlcalendar.setminimaldaysinfirstweek.php',
            'desc' => 'Set minimal number of days the first week in a year or month can have',
        ),
    'IntlCalendar::setRepeatedWallTimeOption' =>
        array (
            'file' => 'intlcalendar.setrepeatedwalltimeoption.php',
            'desc' => 'Set behavior for handling repeating wall times at negative timezone offset transitions',
        ),
    'IntlCalendar::setSkippedWallTimeOption' =>
        array (
            'file' => 'intlcalendar.setskippedwalltimeoption.php',
            'desc' => 'Set behavior for handling skipped wall times at positive timezone offset transitions',
        ),
    'IntlCalendar::setTime' =>
        array (
            'file' => 'intlcalendar.settime.php',
            'desc' => 'Set the calendar time in milliseconds since the epoch',
        ),
    'IntlCalendar::setTimeZone' =>
        array (
            'file' => 'intlcalendar.settimezone.php',
            'desc' => 'Set the timezone used by this calendar',
        ),
    'IntlCalendar::toDateTime' =>
        array (
            'file' => 'intlcalendar.todatetime.php',
            'desc' => 'Convert an IntlCalendar into a DateTime object',
        ),
    'IntlCalendar::__construct' =>
        array (
            'file' => 'intlcalendar.construct.php',
            'desc' => 'Private constructor for disallowing instantiation',
        ),
    'IntlCodePointBreakIterator::getLastCodePoint' =>
        array (
            'file' => 'intlcodepointbreakiterator.getlastcodepoint.php',
            'desc' => 'Get last code point passed over after advancing or receding the iterator',
        ),
    'IntlDateFormatter::create' =>
        array (
            'file' => 'intldateformatter.create.php',
            'desc' => 'Create a date formatter',
        ),
    'IntlDateFormatter::format' =>
        array (
            'file' => 'intldateformatter.format.php',
            'desc' => 'Format the date/time value as a string',
        ),
    'IntlDateFormatter::formatObject' =>
        array (
            'file' => 'intldateformatter.formatobject.php',
            'desc' => 'Formats an object',
        ),
    'IntlDateFormatter::getCalendar' =>
        array (
            'file' => 'intldateformatter.getcalendar.php',
            'desc' => 'Get the calendar type used for the IntlDateFormatter',
        ),
    'IntlDateFormatter::getCalendarObject' =>
        array (
            'file' => 'intldateformatter.getcalendarobject.php',
            'desc' => 'Get copy of formatter ºs calendar object',
        ),
    'IntlDateFormatter::getDateType' =>
        array (
            'file' => 'intldateformatter.getdatetype.php',
            'desc' => 'Get the datetype used for the IntlDateFormatter',
        ),
    'IntlDateFormatter::getErrorCode' =>
        array (
            'file' => 'intldateformatter.geterrorcode.php',
            'desc' => 'Get the error code from last operation',
        ),
    'IntlDateFormatter::getErrorMessage' =>
        array (
            'file' => 'intldateformatter.geterrormessage.php',
            'desc' => 'Get the error text from the last operation.',
        ),
    'IntlDateFormatter::getLocale' =>
        array (
            'file' => 'intldateformatter.getlocale.php',
            'desc' => 'Get the locale used by formatter',
        ),
    'IntlDateFormatter::getPattern' =>
        array (
            'file' => 'intldateformatter.getpattern.php',
            'desc' => 'Get the pattern used for the IntlDateFormatter',
        ),
    'IntlDateFormatter::getTimeType' =>
        array (
            'file' => 'intldateformatter.gettimetype.php',
            'desc' => 'Get the timetype used for the IntlDateFormatter',
        ),
    'IntlDateFormatter::getTimeZone' =>
        array (
            'file' => 'intldateformatter.gettimezone.php',
            'desc' => 'Get formatter ºs timezone',
        ),
    'IntlDateFormatter::getTimeZoneId' =>
        array (
            'file' => 'intldateformatter.gettimezoneid.php',
            'desc' => 'Get the timezone-id used for the IntlDateFormatter',
        ),
    'IntlDateFormatter::isLenient' =>
        array (
            'file' => 'intldateformatter.islenient.php',
            'desc' => 'Get the lenient used for the IntlDateFormatter',
        ),
    'IntlDateFormatter::localtime' =>
        array (
            'file' => 'intldateformatter.localtime.php',
            'desc' => 'Parse string to a field-based time value',
        ),
    'IntlDateFormatter::parse' =>
        array (
            'file' => 'intldateformatter.parse.php',
            'desc' => 'Parse string to a timestamp value',
        ),
    'IntlDateFormatter::setCalendar' =>
        array (
            'file' => 'intldateformatter.setcalendar.php',
            'desc' => 'Sets the calendar type used by the formatter',
        ),
    'IntlDateFormatter::setLenient' =>
        array (
            'file' => 'intldateformatter.setlenient.php',
            'desc' => 'Set the leniency of the parser',
        ),
    'IntlDateFormatter::setPattern' =>
        array (
            'file' => 'intldateformatter.setpattern.php',
            'desc' => 'Set the pattern used for the IntlDateFormatter',
        ),
    'IntlDateFormatter::setTimeZone' =>
        array (
            'file' => 'intldateformatter.settimezone.php',
            'desc' => 'Sets formatter ºs timezone',
        ),
    'IntlDateFormatter::setTimeZoneId' =>
        array (
            'file' => 'intldateformatter.settimezoneid.php',
            'desc' => 'Sets the time zone to use',
        ),
    'IntlIterator::current' =>
        array (
            'file' => 'intliterator.current.php',
            'desc' => 'Get the current element',
        ),
    'IntlIterator::key' =>
        array (
            'file' => 'intliterator.key.php',
            'desc' => 'Get the current key',
        ),
    'IntlIterator::next' =>
        array (
            'file' => 'intliterator.next.php',
            'desc' => 'Move forward to the next element',
        ),
    'IntlIterator::rewind' =>
        array (
            'file' => 'intliterator.rewind.php',
            'desc' => 'Rewind the iterator to the first element',
        ),
    'IntlIterator::valid' =>
        array (
            'file' => 'intliterator.valid.php',
            'desc' => 'Check if current position is valid',
        ),
    'IntlPartsIterator::getBreakIterator' =>
        array (
            'file' => 'intlpartsiterator.getbreakiterator.php',
            'desc' => 'Get IntlBreakIterator backing this parts iterator',
        ),
    'IntlRuleBasedBreakIterator::getBinaryRules' =>
        array (
            'file' => 'intlrulebasedbreakiterator.getbinaryrules.php',
            'desc' => 'Get the binary form of compiled rules',
        ),
    'IntlRuleBasedBreakIterator::getRules' =>
        array (
            'file' => 'intlrulebasedbreakiterator.getrules.php',
            'desc' => 'Get the rule set used to create this object',
        ),
    'IntlRuleBasedBreakIterator::getRuleStatus' =>
        array (
            'file' => 'intlrulebasedbreakiterator.getrulestatus.php',
            'desc' => 'Get the largest status value from the break rules that determined the current break position',
        ),
    'IntlRuleBasedBreakIterator::getRuleStatusVec' =>
        array (
            'file' => 'intlrulebasedbreakiterator.getrulestatusvec.php',
            'desc' => 'Get the status values from the break rules that determined the current break position',
        ),
    'IntlRuleBasedBreakIterator::__construct' =>
        array (
            'file' => 'intlrulebasedbreakiterator.construct.php',
            'desc' => 'Create iterator from ruleset',
        ),
    'IntlTimeZone::countEquivalentIDs' =>
        array (
            'file' => 'intltimezone.countequivalentids.php',
            'desc' => 'Get the number of IDs in the equivalency group that includes the given ID',
        ),
    'IntlTimeZone::createDefault' =>
        array (
            'file' => 'intltimezone.createdefault.php',
            'desc' => 'Create a new copy of the default timezone for this host',
        ),
    'IntlTimeZone::createEnumeration' =>
        array (
            'file' => 'intltimezone.createenumeration.php',
            'desc' => 'Get an enumeration over time zone IDs associated with the
  given country or offset',
        ),
    'IntlTimeZone::createTimeZone' =>
        array (
            'file' => 'intltimezone.createtimezone.php',
            'desc' => 'Create a timezone object for the given ID',
        ),
    'IntlTimeZone::fromDateTimeZone' =>
        array (
            'file' => 'intltimezone.fromdatetimezone.php',
            'desc' => 'Create a timezone object from DateTimeZone',
        ),
    'IntlTimeZone::getCanonicalID' =>
        array (
            'file' => 'intltimezone.getcanonicalid.php',
            'desc' => 'Get the canonical system timezone ID or the normalized custom time zone ID for the given time zone ID',
        ),
    'IntlTimeZone::getDisplayName' =>
        array (
            'file' => 'intltimezone.getdisplayname.php',
            'desc' => 'Get a name of this time zone suitable for presentation to the user',
        ),
    'IntlTimeZone::getDSTSavings' =>
        array (
            'file' => 'intltimezone.getdstsavings.php',
            'desc' => 'Get the amount of time to be added to local standard time to get local wall clock time',
        ),
    'IntlTimeZone::getEquivalentID' =>
        array (
            'file' => 'intltimezone.getequivalentid.php',
            'desc' => 'Get an ID in the equivalency group that includes the given ID',
        ),
    'IntlTimeZone::getErrorCode' =>
        array (
            'file' => 'intltimezone.geterrorcode.php',
            'desc' => 'Get last error code on the object',
        ),
    'IntlTimeZone::getErrorMessage' =>
        array (
            'file' => 'intltimezone.geterrormessage.php',
            'desc' => 'Get last error message on the object',
        ),
    'IntlTimeZone::getGMT' =>
        array (
            'file' => 'intltimezone.getgmt.php',
            'desc' => 'Create GMT (UTC) timezone',
        ),
    'IntlTimeZone::getID' =>
        array (
            'file' => 'intltimezone.getid.php',
            'desc' => 'Get timezone ID',
        ),
    'IntlTimeZone::getOffset' =>
        array (
            'file' => 'intltimezone.getoffset.php',
            'desc' => 'Get the time zone raw and GMT offset for the given moment in time',
        ),
    'IntlTimeZone::getRawOffset' =>
        array (
            'file' => 'intltimezone.getrawoffset.php',
            'desc' => 'Get the raw GMT offset (before taking daylight savings time into account',
        ),
    'IntlTimeZone::getTZDataVersion' =>
        array (
            'file' => 'intltimezone.gettzdataversion.php',
            'desc' => 'Get the timezone data version currently used by ICU',
        ),
    'IntlTimeZone::hasSameRules' =>
        array (
            'file' => 'intltimezone.hassamerules.php',
            'desc' => 'Check if this zone has the same rules and offset as another zone',
        ),
    'IntlTimeZone::toDateTimeZone' =>
        array (
            'file' => 'intltimezone.todatetimezone.php',
            'desc' => 'Convert to DateTimeZone object',
        ),
    'IntlTimeZone::useDaylightTime' =>
        array (
            'file' => 'intltimezone.usedaylighttime.php',
            'desc' => 'Check if this time zone uses daylight savings time',
        ),
    'intl_error_name' =>
        array (
            'file' => 'function.intl-error-name.php',
            'desc' => 'Get symbolic name for a given error code',
        ),
    'intl_get_error_code' =>
        array (
            'file' => 'function.intl-get-error-code.php',
            'desc' => 'Get the last error code',
        ),
    'intl_get_error_message' =>
        array (
            'file' => 'function.intl-get-error-message.php',
            'desc' => 'Get description of the last error',
        ),
    'intl_is_failure' =>
        array (
            'file' => 'function.intl-is-failure.php',
            'desc' => 'Check whether the given error code indicates failure',
        ),
    'intval' =>
        array (
            'file' => 'function.intval.php',
            'desc' => 'Get the integer value of a variable',
        ),
    'in_array' =>
        array (
            'file' => 'function.in-array.php',
            'desc' => 'Checks if a value exists in an array',
        ),
    'ip2long' =>
        array (
            'file' => 'function.ip2long.php',
            'desc' => 'Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address',
        ),
    'iptcembed' =>
        array (
            'file' => 'function.iptcembed.php',
            'desc' => 'Embeds binary IPTC data into a JPEG image',
        ),
    'iptcparse' =>
        array (
            'file' => 'function.iptcparse.php',
            'desc' => 'Parse a binary IPTC block into single tags.',
        ),
    'isset' =>
        array (
            'file' => 'function.isset.php',
            'desc' => 'Determine if a variable is set and is not NULL',
        ),
    'is_a' =>
        array (
            'file' => 'function.is-a.php',
            'desc' => 'Checks if the object is of this class or has this class as one of its parents',
        ),
    'is_array' =>
        array (
            'file' => 'function.is-array.php',
            'desc' => 'Finds whether a variable is an array',
        ),
    'is_bool' =>
        array (
            'file' => 'function.is-bool.php',
            'desc' => 'Finds out whether a variable is a boolean',
        ),
    'is_callable' =>
        array (
            'file' => 'function.is-callable.php',
            'desc' => 'Verify that the contents of a variable can be called as a function',
        ),
    'is_dir' =>
        array (
            'file' => 'function.is-dir.php',
            'desc' => 'Tells whether the filename is a directory',
        ),
    'is_double' =>
        array (
            'file' => 'function.is-double.php',
            'desc' => 'Alias of is_float',
        ),
    'is_executable' =>
        array (
            'file' => 'function.is-executable.php',
            'desc' => 'Tells whether the filename is executable',
        ),
    'is_file' =>
        array (
            'file' => 'function.is-file.php',
            'desc' => 'Tells whether the filename is a regular file',
        ),
    'is_finite' =>
        array (
            'file' => 'function.is-finite.php',
            'desc' => 'Finds whether a value is a legal finite number',
        ),
    'is_float' =>
        array (
            'file' => 'function.is-float.php',
            'desc' => 'Finds whether the type of a variable is float',
        ),
    'is_infinite' =>
        array (
            'file' => 'function.is-infinite.php',
            'desc' => 'Finds whether a value is infinite',
        ),
    'is_int' =>
        array (
            'file' => 'function.is-int.php',
            'desc' => 'Find whether the type of a variable is integer',
        ),
    'is_integer' =>
        array (
            'file' => 'function.is-integer.php',
            'desc' => 'Alias of is_int',
        ),
    'is_link' =>
        array (
            'file' => 'function.is-link.php',
            'desc' => 'Tells whether the filename is a symbolic link',
        ),
    'is_long' =>
        array (
            'file' => 'function.is-long.php',
            'desc' => 'Alias of is_int',
        ),
    'is_nan' =>
        array (
            'file' => 'function.is-nan.php',
            'desc' => 'Finds whether a value is not a number',
        ),
    'is_null' =>
        array (
            'file' => 'function.is-null.php',
            'desc' => 'Finds whether a variable is NULL',
        ),
    'is_numeric' =>
        array (
            'file' => 'function.is-numeric.php',
            'desc' => 'Finds whether a variable is a number or a numeric string',
        ),
    'is_object' =>
        array (
            'file' => 'function.is-object.php',
            'desc' => 'Finds whether a variable is an object',
        ),
    'is_readable' =>
        array (
            'file' => 'function.is-readable.php',
            'desc' => 'Tells whether a file exists and is readable',
        ),
    'is_real' =>
        array (
            'file' => 'function.is-real.php',
            'desc' => 'Alias of is_float',
        ),
    'is_resource' =>
        array (
            'file' => 'function.is-resource.php',
            'desc' => 'Finds whether a variable is a resource',
        ),
    'is_scalar' =>
        array (
            'file' => 'function.is-scalar.php',
            'desc' => 'Finds whether a variable is a scalar',
        ),
    'is_soap_fault' =>
        array (
            'file' => 'function.is-soap-fault.php',
            'desc' => 'Checks if a SOAP call has failed',
        ),
    'is_string' =>
        array (
            'file' => 'function.is-string.php',
            'desc' => 'Find whether the type of a variable is string',
        ),
    'is_subclass_of' =>
        array (
            'file' => 'function.is-subclass-of.php',
            'desc' => 'Checks if the object has this class as one of its parents',
        ),
    'is_tainted' =>
        array (
            'file' => 'function.is-tainted.php',
            'desc' => 'Checks whether a string is tainted',
        ),
    'is_uploaded_file' =>
        array (
            'file' => 'function.is-uploaded-file.php',
            'desc' => 'Tells whether the file was uploaded via HTTP POST',
        ),
    'is_writable' =>
        array (
            'file' => 'function.is-writable.php',
            'desc' => 'Tells whether the filename is writable',
        ),
    'is_writeable' =>
        array (
            'file' => 'function.is-writeable.php',
            'desc' => 'Alias of is_writable',
        ),
    'Iterator::current' =>
        array (
            'file' => 'iterator.current.php',
            'desc' => 'Return the current element',
        ),
    'Iterator::key' =>
        array (
            'file' => 'iterator.key.php',
            'desc' => 'Return the key of the current element',
        ),
    'Iterator::next' =>
        array (
            'file' => 'iterator.next.php',
            'desc' => 'Move forward to next element',
        ),
    'Iterator::rewind' =>
        array (
            'file' => 'iterator.rewind.php',
            'desc' => 'Rewind the Iterator to the first element',
        ),
    'Iterator::valid' =>
        array (
            'file' => 'iterator.valid.php',
            'desc' => 'Checks if current position is valid',
        ),
    'IteratorAggregate::getIterator' =>
        array (
            'file' => 'iteratoraggregate.getiterator.php',
            'desc' => 'Retrieve an external iterator',
        ),
    'IteratorIterator::current' =>
        array (
            'file' => 'iteratoriterator.current.php',
            'desc' => 'Get the current value',
        ),
    'IteratorIterator::getInnerIterator' =>
        array (
            'file' => 'iteratoriterator.getinneriterator.php',
            'desc' => 'Get the inner iterator',
        ),
    'IteratorIterator::key' =>
        array (
            'file' => 'iteratoriterator.key.php',
            'desc' => 'Get the key of the current element',
        ),
    'IteratorIterator::next' =>
        array (
            'file' => 'iteratoriterator.next.php',
            'desc' => 'Forward to the next element',
        ),
    'IteratorIterator::rewind' =>
        array (
            'file' => 'iteratoriterator.rewind.php',
            'desc' => 'Rewind to the first element',
        ),
    'IteratorIterator::valid' =>
        array (
            'file' => 'iteratoriterator.valid.php',
            'desc' => 'Checks if the iterator is valid',
        ),
    'IteratorIterator::__construct' =>
        array (
            'file' => 'iteratoriterator.construct.php',
            'desc' => 'Create an iterator from anything that is traversable',
        ),
    'iterator_apply' =>
        array (
            'file' => 'function.iterator-apply.php',
            'desc' => 'Call a function for every element in an iterator',
        ),
    'iterator_count' =>
        array (
            'file' => 'function.iterator-count.php',
            'desc' => 'Count the elements in an iterator',
        ),
    'iterator_to_array' =>
        array (
            'file' => 'function.iterator-to-array.php',
            'desc' => 'Copy the iterator into an array',
        ),
    'JDDayOfWeek' =>
        array (
            'file' => 'function.jddayofweek.php',
            'desc' => 'Returns the day of the week',
        ),
    'JDMonthName' =>
        array (
            'file' => 'function.jdmonthname.php',
            'desc' => 'Returns a month name',
        ),
    'JDToFrench' =>
        array (
            'file' => 'function.jdtofrench.php',
            'desc' => 'Converts a Julian Day Count to the French Republican Calendar',
        ),
    'JDToGregorian' =>
        array (
            'file' => 'function.jdtogregorian.php',
            'desc' => 'Converts Julian Day Count to Gregorian date',
        ),
    'jdtojewish' =>
        array (
            'file' => 'function.jdtojewish.php',
            'desc' => 'Converts a Julian day count to a Jewish calendar date',
        ),
    'JDToJulian' =>
        array (
            'file' => 'function.jdtojulian.php',
            'desc' => 'Converts a Julian Day Count to a Julian Calendar Date',
        ),
    'jdtounix' =>
        array (
            'file' => 'function.jdtounix.php',
            'desc' => 'Convert Julian Day to Unix timestamp',
        ),
    'JewishToJD' =>
        array (
            'file' => 'function.jewishtojd.php',
            'desc' => 'Converts a date in the Jewish Calendar to Julian Day Count',
        ),
    'join' =>
        array (
            'file' => 'function.join.php',
            'desc' => 'Alias of implode',
        ),
    'jpeg2wbmp' =>
        array (
            'file' => 'function.jpeg2wbmp.php',
            'desc' => 'Convert JPEG image file to WBMP image file',
        ),
    'JsonSerializable::jsonSerialize' =>
        array (
            'file' => 'jsonserializable.jsonserialize.php',
            'desc' => 'Specify data which should be serialized to JSON',
        ),
    'json_decode' =>
        array (
            'file' => 'function.json-decode.php',
            'desc' => 'Decodes a JSON string',
        ),
    'json_encode' =>
        array (
            'file' => 'function.json-encode.php',
            'desc' => 'Returns the JSON representation of a value',
        ),
    'json_last_error' =>
        array (
            'file' => 'function.json-last-error.php',
            'desc' => 'Returns the last error occurred',
        ),
    'json_last_error_msg' =>
        array (
            'file' => 'function.json-last-error-msg.php',
            'desc' => 'Returns the error string of the last json_encode() or json_decode() call',
        ),
    'Judy::byCount' =>
        array (
            'file' => 'judy.bycount.php',
            'desc' => 'Locate the Nth index present in the Judy array',
        ),
    'Judy::count' =>
        array (
            'file' => 'judy.count.php',
            'desc' => 'Count the number of elements in the Judy array',
        ),
    'Judy::first' =>
        array (
            'file' => 'judy.first.php',
            'desc' => 'Search for the first index in the Judy array',
        ),
    'Judy::firstEmpty' =>
        array (
            'file' => 'judy.firstempty.php',
            'desc' => 'Search for the first absent index in the Judy array',
        ),
    'Judy::free' =>
        array (
            'file' => 'judy.free.php',
            'desc' => 'Free the entire Judy array',
        ),
    'Judy::getType' =>
        array (
            'file' => 'judy.gettype.php',
            'desc' => 'Return the type of the current Judy array',
        ),
    'Judy::last' =>
        array (
            'file' => 'judy.last.php',
            'desc' => 'Search for the last index in the Judy array',
        ),
    'Judy::lastEmpty' =>
        array (
            'file' => 'judy.lastempty.php',
            'desc' => 'Search for the last absent index in the Judy array',
        ),
    'Judy::memoryUsage' =>
        array (
            'file' => 'judy.memoryusage.php',
            'desc' => 'Return the memory used by the Judy array',
        ),
    'Judy::next' =>
        array (
            'file' => 'judy.next.php',
            'desc' => 'Search for the next index in the Judy array',
        ),
    'Judy::nextEmpty' =>
        array (
            'file' => 'judy.nextempty.php',
            'desc' => 'Search for the next absent index in the Judy array',
        ),
    'Judy::offsetExists' =>
        array (
            'file' => 'judy.offsetexists.php',
            'desc' => 'Whether a offset exists',
        ),
    'Judy::offsetGet' =>
        array (
            'file' => 'judy.offsetget.php',
            'desc' => 'Offset to retrieve',
        ),
    'Judy::offsetSet' =>
        array (
            'file' => 'judy.offsetset.php',
            'desc' => 'Offset to set',
        ),
    'Judy::offsetUnset' =>
        array (
            'file' => 'judy.offsetunset.php',
            'desc' => 'Offset to unset',
        ),
    'Judy::prev' =>
        array (
            'file' => 'judy.prev.php',
            'desc' => 'Search for the previous index in the Judy array',
        ),
    'Judy::prevEmpty' =>
        array (
            'file' => 'judy.prevempty.php',
            'desc' => 'Search for the previous absent index in the Judy array',
        ),
    'Judy::size' =>
        array (
            'file' => 'judy.size.php',
            'desc' => 'Return the size of the current Judy array',
        ),
    'Judy::__construct' =>
        array (
            'file' => 'judy.construct.php',
            'desc' => 'Construct a new Judy object',
        ),
    'Judy::__destruct' =>
        array (
            'file' => 'judy.destruct.php',
            'desc' => 'Destruct a Judy object',
        ),
    'judy_type' =>
        array (
            'file' => 'function.judy-type.php',
            'desc' => 'Return the type of a Judy array',
        ),
    'judy_version' =>
        array (
            'file' => 'function.judy-version.php',
            'desc' => 'Return or print the current PHP Judy version',
        ),
    'JulianToJD' =>
        array (
            'file' => 'function.juliantojd.php',
            'desc' => 'Converts a Julian Calendar date to Julian Day Count',
        ),
    'kadm5_chpass_principal' =>
        array (
            'file' => 'function.kadm5-chpass-principal.php',
            'desc' => 'Changes the principal\'s password',
        ),
    'kadm5_create_principal' =>
        array (
            'file' => 'function.kadm5-create-principal.php',
            'desc' => 'Creates a kerberos principal with the given parameters',
        ),
    'kadm5_delete_principal' =>
        array (
            'file' => 'function.kadm5-delete-principal.php',
            'desc' => 'Deletes a kerberos principal',
        ),
    'kadm5_destroy' =>
        array (
            'file' => 'function.kadm5-destroy.php',
            'desc' => 'Closes the connection to the admin server and releases all related resources',
        ),
    'kadm5_flush' =>
        array (
            'file' => 'function.kadm5-flush.php',
            'desc' => 'Flush all changes to the Kerberos database',
        ),
    'kadm5_get_policies' =>
        array (
            'file' => 'function.kadm5-get-policies.php',
            'desc' => 'Gets all policies from the Kerberos database',
        ),
    'kadm5_get_principal' =>
        array (
            'file' => 'function.kadm5-get-principal.php',
            'desc' => 'Gets the principal\'s entries from the Kerberos database',
        ),
    'kadm5_get_principals' =>
        array (
            'file' => 'function.kadm5-get-principals.php',
            'desc' => 'Gets all principals from the Kerberos database',
        ),
    'kadm5_init_with_password' =>
        array (
            'file' => 'function.kadm5-init-with-password.php',
            'desc' => 'Opens a connection to the KADM5 library',
        ),
    'kadm5_modify_principal' =>
        array (
            'file' => 'function.kadm5-modify-principal.php',
            'desc' => 'Modifies a kerberos principal with the given parameters',
        ),
    'key' =>
        array (
            'file' => 'function.key.php',
            'desc' => 'Fetch a key from an array',
        ),
    'key_exists' =>
        array (
            'file' => 'function.key-exists.php',
            'desc' => 'Alias of array_key_exists',
        ),
    'krsort' =>
        array (
            'file' => 'function.krsort.php',
            'desc' => 'Sort an array by key in reverse order',
        ),
    'ksort' =>
        array (
            'file' => 'function.ksort.php',
            'desc' => 'Sort an array by key',
        ),
    'KTaglib_ID3v2_AttachedPictureFrame::getDescription' =>
        array (
            'file' => 'id3v2attachedpictureframe.getdescription.php',
            'desc' => 'Returns a description for the picture in a picture frame',
        ),
    'KTaglib_ID3v2_AttachedPictureFrame::getMimeType' =>
        array (
            'file' => 'id3v2attachedpictureframe.getmimetype.php',
            'desc' => 'Returns the mime type of the picture',
        ),
    'KTaglib_ID3v2_AttachedPictureFrame::getType' =>
        array (
            'file' => 'id3v2attachedpictureframe.gettype.php',
            'desc' => 'Returns the type of the image',
        ),
    'KTaglib_ID3v2_AttachedPictureFrame::savePicture' =>
        array (
            'file' => 'id3v2attachedpictureframe.savepicture.php',
            'desc' => 'Saves the picture to a file',
        ),
    'KTaglib_ID3v2_AttachedPictureFrame::setMimeType' =>
        array (
            'file' => 'id3v2attachedpictureframe.setmimetype.php',
            'desc' => 'Set\'s the mime type of the picture',
        ),
    'KTaglib_ID3v2_AttachedPictureFrame::setPicture' =>
        array (
            'file' => 'id3v2attachedpictureframe.setpicture.php',
            'desc' => 'Sets the frame picture to the given image',
        ),
    'KTaglib_ID3v2_AttachedPictureFrame::setType' =>
        array (
            'file' => 'id3v2attachedpictureframe.settype.php',
            'desc' => 'Set the type of the image',
        ),
    'KTaglib_ID3v2_Frame::getSize' =>
        array (
            'file' => 'id3v2frame.getsize.php',
            'desc' => 'Returns the size of the frame in bytes',
        ),
    'KTaglib_ID3v2_Frame::__toString' =>
        array (
            'file' => 'id3v2frame.tostring.php',
            'desc' => 'Returns a string representation of the frame',
        ),
    'KTaglib_ID3v2_Tag::addFrame' =>
        array (
            'file' => 'id3v2tag.addframe.php',
            'desc' => 'Add a frame to the ID3v2 tag',
        ),
    'KTaglib_ID3v2_Tag::getFrameList' =>
        array (
            'file' => 'id3v2tag.getframelist.php',
            'desc' => 'Returns an array of ID3v2 frames, associated with the ID3v2 tag',
        ),
    'KTaglib_MPEG_AudioProperties::getBitrate' =>
        array (
            'file' => 'audioproperties.getbitrate.php',
            'desc' => 'Returns the bitrate of the MPEG file',
        ),
    'KTaglib_MPEG_AudioProperties::getChannels' =>
        array (
            'file' => 'audioproperties.getchannels.php',
            'desc' => 'Returns the amount of channels of a MPEG file',
        ),
    'KTaglib_MPEG_AudioProperties::getLayer' =>
        array (
            'file' => 'audioproperties.getlayer.php',
            'desc' => 'Returns the layer of a MPEG file',
        ),
    'KTaglib_MPEG_AudioProperties::getLength' =>
        array (
            'file' => 'audioproperties.getlength.php',
            'desc' => 'Returns the length of a MPEG file',
        ),
    'KTaglib_MPEG_AudioProperties::getSampleBitrate' =>
        array (
            'file' => 'audioproperties.getsamplebitrate.php',
            'desc' => 'Returns the sample bitrate of a MPEG file',
        ),
    'KTaglib_MPEG_AudioProperties::getVersion' =>
        array (
            'file' => 'audioproperties.getversion.php',
            'desc' => 'Returns the version of a MPEG file',
        ),
    'KTaglib_MPEG_AudioProperties::isCopyrighted' =>
        array (
            'file' => 'audioproperties.iscopyrighted.php',
            'desc' => 'Returns the copyright status of an MPEG file',
        ),
    'KTaglib_MPEG_AudioProperties::isOriginal' =>
        array (
            'file' => 'audioproperties.isoriginal.php',
            'desc' => 'Returns if the file is marked as the original file',
        ),
    'KTaglib_MPEG_AudioProperties::isProtectionEnabled' =>
        array (
            'file' => 'audioproperties.isprotectionenabled.php',
            'desc' => 'Returns if protection mechanisms of an MPEG file are enabled',
        ),
    'KTaglib_MPEG_File::getAudioProperties' =>
        array (
            'file' => 'mpegfile.getaudioproperties.php',
            'desc' => 'Returns an object that provides access to the audio properties',
        ),
    'KTaglib_MPEG_File::getID3v1Tag' =>
        array (
            'file' => 'mpegfile.getid3v1tag.php',
            'desc' => 'Returns an object representing an ID3v1 tag',
        ),
    'KTaglib_MPEG_File::getID3v2Tag' =>
        array (
            'file' => 'mpegfile.getid3v2tag.php',
            'desc' => 'Returns a ID3v2 object',
        ),
    'KTaglib_MPEG_File::__construct' =>
        array (
            'file' => 'mpegfile.construct.php',
            'desc' => 'Opens a new file',
        ),
    'KTaglib_Tag::getAlbum' =>
        array (
            'file' => 'tag.getalbum.php',
            'desc' => 'Returns the title string from a ID3 tag',
        ),
    'KTaglib_Tag::getArtist' =>
        array (
            'file' => 'tag.getartist.php',
            'desc' => 'Returns the artist string from a ID3 tag',
        ),
    'KTaglib_Tag::getComment' =>
        array (
            'file' => 'tag.getcomment.php',
            'desc' => 'Returns the comment from a ID3 tag',
        ),
    'KTaglib_Tag::getGenre' =>
        array (
            'file' => 'tag.getgenre.php',
            'desc' => 'Returns the genre from a ID3 tag',
        ),
    'KTaglib_Tag::getTitle' =>
        array (
            'file' => 'tag.gettitle.php',
            'desc' => 'Returns the title string from a ID3 tag',
        ),
    'KTaglib_Tag::getTrack' =>
        array (
            'file' => 'tag.gettrack.php',
            'desc' => 'Returns the track number from a ID3 tag',
        ),
    'KTaglib_Tag::getYear' =>
        array (
            'file' => 'tag.getyear.php',
            'desc' => 'Returns the year from a ID3 tag',
        ),
    'KTaglib_Tag::isEmpty' =>
        array (
            'file' => 'tag.isempty.php',
            'desc' => 'Returns true if the tag is empty',
        ),
    'Lapack::eigenValues' =>
        array (
            'file' => 'lapack.eigenvalues.php',
            'desc' => 'This function returns the eigenvalues for a given square matrix',
        ),
    'Lapack::identity' =>
        array (
            'file' => 'lapack.identity.php',
            'desc' => 'Return an identity matrix',
        ),
    'Lapack::leastSquaresByFactorisation' =>
        array (
            'file' => 'lapack.leastsquaresbyfactorisation.php',
            'desc' => 'Calculate the linear least squares solution of a matrix using QR factorisation',
        ),
    'Lapack::leastSquaresBySVD' =>
        array (
            'file' => 'lapack.leastsquaresbysvd.php',
            'desc' => 'Solve the linear least squares problem, using SVD',
        ),
    'Lapack::pseudoInverse' =>
        array (
            'file' => 'lapack.pseudoinverse.php',
            'desc' => 'Calculate the inverse of a matrix',
        ),
    'Lapack::singularValues' =>
        array (
            'file' => 'lapack.singularvalues.php',
            'desc' => 'Calculated the singular values of a matrix',
        ),
    'Lapack::solveLinearEquation' =>
        array (
            'file' => 'lapack.solvelinearequation.php',
            'desc' => 'Solve a system of linear equations',
        ),
    'lcfirst' =>
        array (
            'file' => 'function.lcfirst.php',
            'desc' => 'Make a string\'s first character lowercase',
        ),
    'lcg_value' =>
        array (
            'file' => 'function.lcg-value.php',
            'desc' => 'Combined linear congruential generator',
        ),
    'lchgrp' =>
        array (
            'file' => 'function.lchgrp.php',
            'desc' => 'Changes group ownership of symlink',
        ),
    'lchown' =>
        array (
            'file' => 'function.lchown.php',
            'desc' => 'Changes user ownership of symlink',
        ),
    'ldap_8859_to_t61' =>
        array (
            'file' => 'function.ldap-8859-to-t61.php',
            'desc' => 'Translate 8859 characters to t61 characters',
        ),
    'ldap_add' =>
        array (
            'file' => 'function.ldap-add.php',
            'desc' => 'Add entries to LDAP directory',
        ),
    'ldap_bind' =>
        array (
            'file' => 'function.ldap-bind.php',
            'desc' => 'Bind to LDAP directory',
        ),
    'ldap_close' =>
        array (
            'file' => 'function.ldap-close.php',
            'desc' => 'Alias of ldap_unbind',
        ),
    'ldap_compare' =>
        array (
            'file' => 'function.ldap-compare.php',
            'desc' => 'Compare value of attribute found in entry specified with DN',
        ),
    'ldap_connect' =>
        array (
            'file' => 'function.ldap-connect.php',
            'desc' => 'Connect to an LDAP server',
        ),
    'ldap_control_paged_result' =>
        array (
            'file' => 'function.ldap-control-paged-result.php',
            'desc' => 'Send LDAP pagination control',
        ),
    'ldap_control_paged_result_response' =>
        array (
            'file' => 'function.ldap-control-paged-result-response.php',
            'desc' => 'Retrieve the LDAP pagination cookie',
        ),
    'ldap_count_entries' =>
        array (
            'file' => 'function.ldap-count-entries.php',
            'desc' => 'Count the number of entries in a search',
        ),
    'ldap_delete' =>
        array (
            'file' => 'function.ldap-delete.php',
            'desc' => 'Delete an entry from a directory',
        ),
    'ldap_dn2ufn' =>
        array (
            'file' => 'function.ldap-dn2ufn.php',
            'desc' => 'Convert DN to User Friendly Naming format',
        ),
    'ldap_err2str' =>
        array (
            'file' => 'function.ldap-err2str.php',
            'desc' => 'Convert LDAP error number into string error message',
        ),
    'ldap_errno' =>
        array (
            'file' => 'function.ldap-errno.php',
            'desc' => 'Return the LDAP error number of the last LDAP command',
        ),
    'ldap_error' =>
        array (
            'file' => 'function.ldap-error.php',
            'desc' => 'Return the LDAP error message of the last LDAP command',
        ),
    'ldap_escape' =>
        array (
            'file' => 'function.ldap-escape.php',
            'desc' => 'Escape a string for use in an LDAP filter or DN',
        ),
    'ldap_explode_dn' =>
        array (
            'file' => 'function.ldap-explode-dn.php',
            'desc' => 'Splits DN into its component parts',
        ),
    'ldap_first_attribute' =>
        array (
            'file' => 'function.ldap-first-attribute.php',
            'desc' => 'Return first attribute',
        ),
    'ldap_first_entry' =>
        array (
            'file' => 'function.ldap-first-entry.php',
            'desc' => 'Return first result id',
        ),
    'ldap_first_reference' =>
        array (
            'file' => 'function.ldap-first-reference.php',
            'desc' => 'Return first reference',
        ),
    'ldap_free_result' =>
        array (
            'file' => 'function.ldap-free-result.php',
            'desc' => 'Free result memory',
        ),
    'ldap_get_attributes' =>
        array (
            'file' => 'function.ldap-get-attributes.php',
            'desc' => 'Get attributes from a search result entry',
        ),
    'ldap_get_dn' =>
        array (
            'file' => 'function.ldap-get-dn.php',
            'desc' => 'Get the DN of a result entry',
        ),
    'ldap_get_entries' =>
        array (
            'file' => 'function.ldap-get-entries.php',
            'desc' => 'Get all result entries',
        ),
    'ldap_get_option' =>
        array (
            'file' => 'function.ldap-get-option.php',
            'desc' => 'Get the current value for given option',
        ),
    'ldap_get_values' =>
        array (
            'file' => 'function.ldap-get-values.php',
            'desc' => 'Get all values from a result entry',
        ),
    'ldap_get_values_len' =>
        array (
            'file' => 'function.ldap-get-values-len.php',
            'desc' => 'Get all binary values from a result entry',
        ),
    'ldap_list' =>
        array (
            'file' => 'function.ldap-list.php',
            'desc' => 'Single-level search',
        ),
    'ldap_modify' =>
        array (
            'file' => 'function.ldap-modify.php',
            'desc' => 'Modify an LDAP entry',
        ),
    'ldap_modify_batch' =>
        array (
            'file' => 'function.ldap-modify-batch.php',
            'desc' => 'Batch and execute modifications on an LDAP entry',
        ),
    'ldap_mod_add' =>
        array (
            'file' => 'function.ldap-mod-add.php',
            'desc' => 'Add attribute values to current attributes',
        ),
    'ldap_mod_del' =>
        array (
            'file' => 'function.ldap-mod-del.php',
            'desc' => 'Delete attribute values from current attributes',
        ),
    'ldap_mod_replace' =>
        array (
            'file' => 'function.ldap-mod-replace.php',
            'desc' => 'Replace attribute values with new ones',
        ),
    'ldap_next_attribute' =>
        array (
            'file' => 'function.ldap-next-attribute.php',
            'desc' => 'Get the next attribute in result',
        ),
    'ldap_next_entry' =>
        array (
            'file' => 'function.ldap-next-entry.php',
            'desc' => 'Get next result entry',
        ),
    'ldap_next_reference' =>
        array (
            'file' => 'function.ldap-next-reference.php',
            'desc' => 'Get next reference',
        ),
    'ldap_parse_reference' =>
        array (
            'file' => 'function.ldap-parse-reference.php',
            'desc' => 'Extract information from reference entry',
        ),
    'ldap_parse_result' =>
        array (
            'file' => 'function.ldap-parse-result.php',
            'desc' => 'Extract information from result',
        ),
    'ldap_read' =>
        array (
            'file' => 'function.ldap-read.php',
            'desc' => 'Read an entry',
        ),
    'ldap_rename' =>
        array (
            'file' => 'function.ldap-rename.php',
            'desc' => 'Modify the name of an entry',
        ),
    'ldap_sasl_bind' =>
        array (
            'file' => 'function.ldap-sasl-bind.php',
            'desc' => 'Bind to LDAP directory using SASL',
        ),
    'ldap_search' =>
        array (
            'file' => 'function.ldap-search.php',
            'desc' => 'Search LDAP tree',
        ),
    'ldap_set_option' =>
        array (
            'file' => 'function.ldap-set-option.php',
            'desc' => 'Set the value of the given option',
        ),
    'ldap_set_rebind_proc' =>
        array (
            'file' => 'function.ldap-set-rebind-proc.php',
            'desc' => 'Set a callback function to do re-binds on referral chasing',
        ),
    'ldap_sort' =>
        array (
            'file' => 'function.ldap-sort.php',
            'desc' => 'Sort LDAP result entries',
        ),
    'ldap_start_tls' =>
        array (
            'file' => 'function.ldap-start-tls.php',
            'desc' => 'Start TLS',
        ),
    'ldap_t61_to_8859' =>
        array (
            'file' => 'function.ldap-t61-to-8859.php',
            'desc' => 'Translate t61 characters to 8859 characters',
        ),
    'ldap_unbind' =>
        array (
            'file' => 'function.ldap-unbind.php',
            'desc' => 'Unbind from LDAP directory',
        ),
    'levenshtein' =>
        array (
            'file' => 'function.levenshtein.php',
            'desc' => 'Calculate Levenshtein distance between two strings',
        ),
    'libxml_clear_errors' =>
        array (
            'file' => 'function.libxml-clear-errors.php',
            'desc' => 'Clear libxml error buffer',
        ),
    'libxml_disable_entity_loader' =>
        array (
            'file' => 'function.libxml-disable-entity-loader.php',
            'desc' => 'Disable the ability to load external entities',
        ),
    'libxml_get_errors' =>
        array (
            'file' => 'function.libxml-get-errors.php',
            'desc' => 'Retrieve array of errors',
        ),
    'libxml_get_last_error' =>
        array (
            'file' => 'function.libxml-get-last-error.php',
            'desc' => 'Retrieve last error from libxml',
        ),
    'libxml_set_external_entity_loader' =>
        array (
            'file' => 'function.libxml-set-external-entity-loader.php',
            'desc' => 'Changes the default external entity loader',
        ),
    'libxml_set_streams_context' =>
        array (
            'file' => 'function.libxml-set-streams-context.php',
            'desc' => 'Set the streams context for the next libxml document load or write',
        ),
    'libxml_use_internal_errors' =>
        array (
            'file' => 'function.libxml-use-internal-errors.php',
            'desc' => 'Disable libxml errors and allow user to fetch error information as needed',
        ),
    'LimitIterator::current' =>
        array (
            'file' => 'limititerator.current.php',
            'desc' => 'Get current element',
        ),
    'LimitIterator::getInnerIterator' =>
        array (
            'file' => 'limititerator.getinneriterator.php',
            'desc' => 'Get inner iterator',
        ),
    'LimitIterator::getPosition' =>
        array (
            'file' => 'limititerator.getposition.php',
            'desc' => 'Return the current position',
        ),
    'LimitIterator::key' =>
        array (
            'file' => 'limititerator.key.php',
            'desc' => 'Get current key',
        ),
    'LimitIterator::next' =>
        array (
            'file' => 'limititerator.next.php',
            'desc' => 'Move the iterator forward',
        ),
    'LimitIterator::rewind' =>
        array (
            'file' => 'limititerator.rewind.php',
            'desc' => 'Rewind the iterator to the specified starting offset',
        ),
    'LimitIterator::seek' =>
        array (
            'file' => 'limititerator.seek.php',
            'desc' => 'Seek to the given position',
        ),
    'LimitIterator::valid' =>
        array (
            'file' => 'limititerator.valid.php',
            'desc' => 'Check whether the current element is valid',
        ),
    'LimitIterator::__construct' =>
        array (
            'file' => 'limititerator.construct.php',
            'desc' => 'Construct a LimitIterator',
        ),
    'link' =>
        array (
            'file' => 'function.link.php',
            'desc' => 'Create a hard link',
        ),
    'linkinfo' =>
        array (
            'file' => 'function.linkinfo.php',
            'desc' => 'Gets information about a link',
        ),
    'list' =>
        array (
            'file' => 'function.list.php',
            'desc' => 'Assign variables as if they were an array',
        ),
    'Locale::acceptFromHttp' =>
        array (
            'file' => 'locale.acceptfromhttp.php',
            'desc' => 'Tries to find out best available locale based on HTTP &quot;Accept-Language&quot; header',
        ),
    'Locale::canonicalize' =>
        array (
            'file' => 'locale.canonicalize.php',
            'desc' => 'Canonicalize the locale string',
        ),
    'Locale::composeLocale' =>
        array (
            'file' => 'locale.composelocale.php',
            'desc' => 'Returns a correctly ordered and delimited locale ID',
        ),
    'Locale::filterMatches' =>
        array (
            'file' => 'locale.filtermatches.php',
            'desc' => 'Checks if a language tag filter matches with locale',
        ),
    'Locale::getAllVariants' =>
        array (
            'file' => 'locale.getallvariants.php',
            'desc' => 'Gets the variants for the input locale',
        ),
    'Locale::getDefault' =>
        array (
            'file' => 'locale.getdefault.php',
            'desc' => 'Gets the default locale value from the INTL global \'default_locale\'',
        ),
    'Locale::getDisplayLanguage' =>
        array (
            'file' => 'locale.getdisplaylanguage.php',
            'desc' => 'Returns an appropriately localized display name for language of the inputlocale',
        ),
    'Locale::getDisplayName' =>
        array (
            'file' => 'locale.getdisplayname.php',
            'desc' => 'Returns an appropriately localized display name for the input locale',
        ),
    'Locale::getDisplayRegion' =>
        array (
            'file' => 'locale.getdisplayregion.php',
            'desc' => 'Returns an appropriately localized display name for region of the input locale',
        ),
    'Locale::getDisplayScript' =>
        array (
            'file' => 'locale.getdisplayscript.php',
            'desc' => 'Returns an appropriately localized display name for script of the input locale',
        ),
    'Locale::getDisplayVariant' =>
        array (
            'file' => 'locale.getdisplayvariant.php',
            'desc' => 'Returns an appropriately localized display name for variants of the input locale',
        ),
    'Locale::getKeywords' =>
        array (
            'file' => 'locale.getkeywords.php',
            'desc' => 'Gets the keywords for the input locale',
        ),
    'Locale::getPrimaryLanguage' =>
        array (
            'file' => 'locale.getprimarylanguage.php',
            'desc' => 'Gets the primary language for the input locale',
        ),
    'Locale::getRegion' =>
        array (
            'file' => 'locale.getregion.php',
            'desc' => 'Gets the region for the input locale',
        ),
    'Locale::getScript' =>
        array (
            'file' => 'locale.getscript.php',
            'desc' => 'Gets the script for the input locale',
        ),
    'Locale::lookup' =>
        array (
            'file' => 'locale.lookup.php',
            'desc' => 'Searches the language tag list for the best match to the language',
        ),
    'Locale::parseLocale' =>
        array (
            'file' => 'locale.parselocale.php',
            'desc' => 'Returns a key-value array of locale ID subtag elements.',
        ),
    'Locale::setDefault' =>
        array (
            'file' => 'locale.setdefault.php',
            'desc' => 'sets the default runtime locale',
        ),
    'localeconv' =>
        array (
            'file' => 'function.localeconv.php',
            'desc' => 'Get numeric formatting information',
        ),
    'localtime' =>
        array (
            'file' => 'function.localtime.php',
            'desc' => 'Get the local time',
        ),
    'log' =>
        array (
            'file' => 'function.log.php',
            'desc' => 'Natural logarithm',
        ),
    'log1p' =>
        array (
            'file' => 'function.log1p.php',
            'desc' => 'Returns log(1 + number), computed in a way that is accurate even when
   the value of number is close to zero',
        ),
    'log10' =>
        array (
            'file' => 'function.log10.php',
            'desc' => 'Base-10 logarithm',
        ),
    'log_cmd_delete' =>
        array (
            'file' => 'function.log-cmd-delete.php',
            'desc' => 'Callback When Deleting Documents',
        ),
    'log_cmd_insert' =>
        array (
            'file' => 'function.log-cmd-insert.php',
            'desc' => 'Callback When Inserting Documents',
        ),
    'log_cmd_update' =>
        array (
            'file' => 'function.log-cmd-update.php',
            'desc' => 'Callback When Updating Documents',
        ),
    'log_getmore' =>
        array (
            'file' => 'function.log-getmore.php',
            'desc' => 'Callback When Retrieving Next Cursor Batch',
        ),
    'log_killcursor' =>
        array (
            'file' => 'function.log-killcursor.php',
            'desc' => 'Callback When Executing KILLCURSOR operations',
        ),
    'log_reply' =>
        array (
            'file' => 'function.log-reply.php',
            'desc' => 'Callback When Reading the MongoDB reply',
        ),
    'log_write_batch' =>
        array (
            'file' => 'function.log-write-batch.php',
            'desc' => 'Callback When Writing Batches',
        ),
    'long2ip' =>
        array (
            'file' => 'function.long2ip.php',
            'desc' => 'Converts an (IPv4) Internet network address into a string in Internet standard dotted format',
        ),
    'lstat' =>
        array (
            'file' => 'function.lstat.php',
            'desc' => 'Gives information about a file or symbolic link',
        ),
    'ltrim' =>
        array (
            'file' => 'function.ltrim.php',
            'desc' => 'Strip whitespace (or other characters) from the beginning of a string',
        ),
    'Lua::assign' =>
        array (
            'file' => 'lua.assign.php',
            'desc' => 'Assign a PHP variable to Lua',
        ),
    'Lua::call' =>
        array (
            'file' => 'lua.call.php',
            'desc' => 'Call Lua functions',
        ),
    'Lua::eval' =>
        array (
            'file' => 'lua.eval.php',
            'desc' => 'Evaluate a string as Lua code',
        ),
    'Lua::getVersion' =>
        array (
            'file' => 'lua.getversion.php',
        ),
    'Lua::include' =>
        array (
            'file' => 'lua.include.php',
            'desc' => 'Parse a Lua script file',
        ),
    'Lua::registerCallback' =>
        array (
            'file' => 'lua.registercallback.php',
            'desc' => 'Register a PHP function to Lua',
        ),
    'Lua::__construct' =>
        array (
            'file' => 'lua.construct.php',
            'desc' => 'Lua constructor',
        ),
    'LuaClosure::__invoke' =>
        array (
            'file' => 'luaclosure.invoke.php',
            'desc' => 'invoke luaclosure',
        ),
    'lzf_compress' =>
        array (
            'file' => 'function.lzf-compress.php',
            'desc' => 'LZF compression',
        ),
    'lzf_decompress' =>
        array (
            'file' => 'function.lzf-decompress.php',
            'desc' => 'LZF decompression',
        ),
    'lzf_optimized_for' =>
        array (
            'file' => 'function.lzf-optimized-for.php',
            'desc' => 'Determines what LZF extension was optimized for',
        ),
    'magic_quotes_runtime' =>
        array (
            'file' => 'function.magic-quotes-runtime.php',
            'desc' => 'Alias of set_magic_quotes_runtime',
        ),
    'mail' =>
        array (
            'file' => 'function.mail.php',
            'desc' => 'Send mail',
        ),
    'mailparse_determine_best_xfer_encoding' =>
        array (
            'file' => 'function.mailparse-determine-best-xfer-encoding.php',
            'desc' => 'Gets the best way of encoding',
        ),
    'mailparse_msg_create' =>
        array (
            'file' => 'function.mailparse-msg-create.php',
            'desc' => 'Create a mime mail resource',
        ),
    'mailparse_msg_extract_part' =>
        array (
            'file' => 'function.mailparse-msg-extract-part.php',
            'desc' => 'Extracts/decodes a message section',
        ),
    'mailparse_msg_extract_part_file' =>
        array (
            'file' => 'function.mailparse-msg-extract-part-file.php',
            'desc' => 'Extracts/decodes a message section',
        ),
    'mailparse_msg_extract_whole_part_file' =>
        array (
            'file' => 'function.mailparse-msg-extract-whole-part-file.php',
            'desc' => 'Extracts a message section including headers without decoding the transfer encoding',
        ),
    'mailparse_msg_free' =>
        array (
            'file' => 'function.mailparse-msg-free.php',
            'desc' => 'Frees a MIME resource',
        ),
    'mailparse_msg_get_part' =>
        array (
            'file' => 'function.mailparse-msg-get-part.php',
            'desc' => 'Returns a handle on a given section in a mimemessage',
        ),
    'mailparse_msg_get_part_data' =>
        array (
            'file' => 'function.mailparse-msg-get-part-data.php',
            'desc' => 'Returns an associative array of info about the message',
        ),
    'mailparse_msg_get_structure' =>
        array (
            'file' => 'function.mailparse-msg-get-structure.php',
            'desc' => 'Returns an array of mime section names in the supplied message',
        ),
    'mailparse_msg_parse' =>
        array (
            'file' => 'function.mailparse-msg-parse.php',
            'desc' => 'Incrementally parse data into buffer',
        ),
    'mailparse_msg_parse_file' =>
        array (
            'file' => 'function.mailparse-msg-parse-file.php',
            'desc' => 'Parses a file',
        ),
    'mailparse_rfc822_parse_addresses' =>
        array (
            'file' => 'function.mailparse-rfc822-parse-addresses.php',
            'desc' => 'Parse RFC 822 compliant addresses',
        ),
    'mailparse_stream_encode' =>
        array (
            'file' => 'function.mailparse-stream-encode.php',
            'desc' => 'Streams data from source file pointer, apply encoding and write to destfp',
        ),
    'mailparse_uudecode_all' =>
        array (
            'file' => 'function.mailparse-uudecode-all.php',
            'desc' => 'Scans the data from fp and extract each embedded uuencoded file',
        ),
    'main' =>
        array (
            'file' => 'function.main.php',
            'desc' => 'Dummy for main',
        ),
    'max' =>
        array (
            'file' => 'function.max.php',
            'desc' => 'Find highest value',
        ),
    'maxdb_affected_rows' =>
        array (
            'file' => 'function.maxdb-affected-rows.php',
            'desc' => 'Gets the number of affected rows in a previous MaxDB operation',
        ),
    'maxdb_autocommit' =>
        array (
            'file' => 'function.maxdb-autocommit.php',
            'desc' => 'Turns on or off auto-commiting database modifications',
        ),
    'maxdb_bind_param' =>
        array (
            'file' => 'function.maxdb-bind-param.php',
            'desc' => 'Alias of maxdb_stmt_bind_param',
        ),
    'maxdb_bind_result' =>
        array (
            'file' => 'function.maxdb-bind-result.php',
            'desc' => 'Alias of maxdb_stmt_bind_result',
        ),
    'maxdb_change_user' =>
        array (
            'file' => 'function.maxdb-change-user.php',
            'desc' => 'Changes the user of the specified database connection',
        ),
    'maxdb_character_set_name' =>
        array (
            'file' => 'function.maxdb-character-set-name.php',
            'desc' => 'Returns the default character set for the database connection',
        ),
    'maxdb_client_encoding' =>
        array (
            'file' => 'function.maxdb-client-encoding.php',
            'desc' => 'Alias of maxdb_character_set_name',
        ),
    'maxdb_close' =>
        array (
            'file' => 'function.maxdb-close.php',
            'desc' => 'Closes a previously opened database connection',
        ),
    'maxdb_close_long_data' =>
        array (
            'file' => 'function.maxdb-close-long-data.php',
            'desc' => 'Alias of maxdb_stmt_close_long_data',
        ),
    'maxdb_commit' =>
        array (
            'file' => 'function.maxdb-commit.php',
            'desc' => 'Commits the current transaction',
        ),
    'maxdb_connect' =>
        array (
            'file' => 'function.maxdb-connect.php',
            'desc' => 'Open a new connection to the MaxDB server',
        ),
    'maxdb_connect_errno' =>
        array (
            'file' => 'function.maxdb-connect-errno.php',
            'desc' => 'Returns the error code from last connect call',
        ),
    'maxdb_connect_error' =>
        array (
            'file' => 'function.maxdb-connect-error.php',
            'desc' => 'Returns a string description of the last connect error',
        ),
    'maxdb_data_seek' =>
        array (
            'file' => 'function.maxdb-data-seek.php',
            'desc' => 'Adjusts the result pointer to an arbitary row in the result',
        ),
    'maxdb_debug' =>
        array (
            'file' => 'function.maxdb-debug.php',
            'desc' => 'Performs debugging operations',
        ),
    'maxdb_disable_reads_from_master' =>
        array (
            'file' => 'function.maxdb-disable-reads-from-master.php',
            'desc' => 'Disable reads from master',
        ),
    'maxdb_disable_rpl_parse' =>
        array (
            'file' => 'function.maxdb-disable-rpl-parse.php',
            'desc' => 'Disable RPL parse',
        ),
    'maxdb_dump_debug_info' =>
        array (
            'file' => 'function.maxdb-dump-debug-info.php',
            'desc' => 'Dump debugging information into the log',
        ),
    'maxdb_embedded_connect' =>
        array (
            'file' => 'function.maxdb-embedded-connect.php',
            'desc' => 'Open a connection to an embedded MaxDB server',
        ),
    'maxdb_enable_reads_from_master' =>
        array (
            'file' => 'function.maxdb-enable-reads-from-master.php',
            'desc' => 'Enable reads from master',
        ),
    'maxdb_enable_rpl_parse' =>
        array (
            'file' => 'function.maxdb-enable-rpl-parse.php',
            'desc' => 'Enable RPL parse',
        ),
    'maxdb_errno' =>
        array (
            'file' => 'function.maxdb-errno.php',
            'desc' => 'Returns the error code for the most recent function call',
        ),
    'maxdb_error' =>
        array (
            'file' => 'function.maxdb-error.php',
            'desc' => 'Returns a string description of the last error',
        ),
    'maxdb_escape_string' =>
        array (
            'file' => 'function.maxdb-escape-string.php',
            'desc' => 'Alias of maxdb_real_escape_string',
        ),
    'maxdb_execute' =>
        array (
            'file' => 'function.maxdb-execute.php',
            'desc' => 'Alias of maxdb_stmt_execute',
        ),
    'maxdb_fetch' =>
        array (
            'file' => 'function.maxdb-fetch.php',
            'desc' => 'Alias of maxdb_stmt_fetch',
        ),
    'maxdb_fetch_array' =>
        array (
            'file' => 'function.maxdb-fetch-array.php',
            'desc' => 'Fetch a result row as an associative, a numeric array, or both',
        ),
    'maxdb_fetch_assoc' =>
        array (
            'file' => 'function.maxdb-fetch-assoc.php',
            'desc' => 'Fetch a result row as an associative array',
        ),
    'maxdb_fetch_field' =>
        array (
            'file' => 'function.maxdb-fetch-field.php',
            'desc' => 'Returns the next field in the result set',
        ),
    'maxdb_fetch_fields' =>
        array (
            'file' => 'function.maxdb-fetch-fields.php',
            'desc' => 'Returns an array of resources representing the fields in a result set',
        ),
    'maxdb_fetch_field_direct' =>
        array (
            'file' => 'function.maxdb-fetch-field-direct.php',
            'desc' => 'Fetch meta-data for a single field',
        ),
    'maxdb_fetch_lengths' =>
        array (
            'file' => 'function.maxdb-fetch-lengths.php',
            'desc' => 'Returns the lengths of the columns of the current row in the result set',
        ),
    'maxdb_fetch_object' =>
        array (
            'file' => 'function.maxdb-fetch-object.php',
            'desc' => 'Returns the current row of a result set as an object',
        ),
    'maxdb_fetch_row' =>
        array (
            'file' => 'function.maxdb-fetch-row.php',
            'desc' => 'Get a result row as an enumerated array',
        ),
    'maxdb_field_count' =>
        array (
            'file' => 'function.maxdb-field-count.php',
            'desc' => 'Returns the number of columns for the most recent query',
        ),
    'maxdb_field_seek' =>
        array (
            'file' => 'function.maxdb-field-seek.php',
            'desc' => 'Set result pointer to a specified field offset',
        ),
    'maxdb_field_tell' =>
        array (
            'file' => 'function.maxdb-field-tell.php',
            'desc' => 'Get current field offset of a result pointer',
        ),
    'maxdb_free_result' =>
        array (
            'file' => 'function.maxdb-free-result.php',
            'desc' => 'Frees the memory associated with a result',
        ),
    'maxdb_get_client_info' =>
        array (
            'file' => 'function.maxdb-get-client-info.php',
            'desc' => 'Returns the MaxDB client version as a string',
        ),
    'maxdb_get_client_version' =>
        array (
            'file' => 'function.maxdb-get-client-version.php',
            'desc' => 'Get MaxDB client info',
        ),
    'maxdb_get_host_info' =>
        array (
            'file' => 'function.maxdb-get-host-info.php',
            'desc' => 'Returns a string representing the type of connection used',
        ),
    'maxdb_get_metadata' =>
        array (
            'file' => 'function.maxdb-get-metadata.php',
            'desc' => 'Alias of maxdb_stmt_result_metadata',
        ),
    'maxdb_get_proto_info' =>
        array (
            'file' => 'function.maxdb-get-proto-info.php',
            'desc' => 'Returns the version of the MaxDB protocol used',
        ),
    'maxdb_get_server_info' =>
        array (
            'file' => 'function.maxdb-get-server-info.php',
            'desc' => 'Returns the version of the MaxDB server',
        ),
    'maxdb_get_server_version' =>
        array (
            'file' => 'function.maxdb-get-server-version.php',
            'desc' => 'Returns the version of the MaxDB server as an integer',
        ),
    'maxdb_info' =>
        array (
            'file' => 'function.maxdb-info.php',
            'desc' => 'Retrieves information about the most recently executed query',
        ),
    'maxdb_init' =>
        array (
            'file' => 'function.maxdb-init.php',
            'desc' => 'Initializes MaxDB and returns an resource for use with maxdb_real_connect',
        ),
    'maxdb_insert_id' =>
        array (
            'file' => 'function.maxdb-insert-id.php',
            'desc' => 'Returns the auto generated id used in the last query',
        ),
    'maxdb_kill' =>
        array (
            'file' => 'function.maxdb-kill.php',
            'desc' => 'Disconnects from a MaxDB server',
        ),
    'maxdb_master_query' =>
        array (
            'file' => 'function.maxdb-master-query.php',
            'desc' => 'Enforce execution of a query on the master in a master/slave setup',
        ),
    'maxdb_more_results' =>
        array (
            'file' => 'function.maxdb-more-results.php',
            'desc' => 'Check if there any more query results from a multi query',
        ),
    'maxdb_multi_query' =>
        array (
            'file' => 'function.maxdb-multi-query.php',
            'desc' => 'Performs a query on the database',
        ),
    'maxdb_next_result' =>
        array (
            'file' => 'function.maxdb-next-result.php',
            'desc' => 'Prepare next result from multi_query',
        ),
    'maxdb_num_fields' =>
        array (
            'file' => 'function.maxdb-num-fields.php',
            'desc' => 'Get the number of fields in a result',
        ),
    'maxdb_num_rows' =>
        array (
            'file' => 'function.maxdb-num-rows.php',
            'desc' => 'Gets the number of rows in a result',
        ),
    'maxdb_options' =>
        array (
            'file' => 'function.maxdb-options.php',
            'desc' => 'Set options',
        ),
    'maxdb_param_count' =>
        array (
            'file' => 'function.maxdb-param-count.php',
            'desc' => 'Alias of maxdb_stmt_param_count',
        ),
    'maxdb_ping' =>
        array (
            'file' => 'function.maxdb-ping.php',
            'desc' => 'Pings a server connection, or tries to reconnect if the connection has gone down',
        ),
    'maxdb_prepare' =>
        array (
            'file' => 'function.maxdb-prepare.php',
            'desc' => 'Prepare an SQL statement for execution',
        ),
    'maxdb_query' =>
        array (
            'file' => 'function.maxdb-query.php',
            'desc' => 'Performs a query on the database',
        ),
    'maxdb_real_connect' =>
        array (
            'file' => 'function.maxdb-real-connect.php',
            'desc' => 'Opens a connection to a MaxDB server',
        ),
    'maxdb_real_escape_string' =>
        array (
            'file' => 'function.maxdb-real-escape-string.php',
            'desc' => 'Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection',
        ),
    'maxdb_real_query' =>
        array (
            'file' => 'function.maxdb-real-query.php',
            'desc' => 'Execute an SQL query',
        ),
    'maxdb_report' =>
        array (
            'file' => 'function.maxdb-report.php',
            'desc' => 'Enables or disables internal report functions',
        ),
    'maxdb_rollback' =>
        array (
            'file' => 'function.maxdb-rollback.php',
            'desc' => 'Rolls back current transaction',
        ),
    'maxdb_rpl_parse_enabled' =>
        array (
            'file' => 'function.maxdb-rpl-parse-enabled.php',
            'desc' => 'Check if RPL parse is enabled',
        ),
    'maxdb_rpl_probe' =>
        array (
            'file' => 'function.maxdb-rpl-probe.php',
            'desc' => 'RPL probe',
        ),
    'maxdb_rpl_query_type' =>
        array (
            'file' => 'function.maxdb-rpl-query-type.php',
            'desc' => 'Returns RPL query type',
        ),
    'maxdb_select_db' =>
        array (
            'file' => 'function.maxdb-select-db.php',
            'desc' => 'Selects the default database for database queries',
        ),
    'maxdb_send_long_data' =>
        array (
            'file' => 'function.maxdb-send-long-data.php',
            'desc' => 'Alias of maxdb_stmt_send_long_data',
        ),
    'maxdb_send_query' =>
        array (
            'file' => 'function.maxdb-send-query.php',
            'desc' => 'Send the query and return',
        ),
    'maxdb_server_end' =>
        array (
            'file' => 'function.maxdb-server-end.php',
            'desc' => 'Shut down the embedded server',
        ),
    'maxdb_server_init' =>
        array (
            'file' => 'function.maxdb-server-init.php',
            'desc' => 'Initialize embedded server',
        ),
    'maxdb_set_opt' =>
        array (
            'file' => 'function.maxdb-set-opt.php',
            'desc' => 'Alias of maxdb_options',
        ),
    'maxdb_sqlstate' =>
        array (
            'file' => 'function.maxdb-sqlstate.php',
            'desc' => 'Returns the SQLSTATE error from previous MaxDB operation',
        ),
    'maxdb_ssl_set' =>
        array (
            'file' => 'function.maxdb-ssl-set.php',
            'desc' => 'Used for establishing secure connections using SSL',
        ),
    'maxdb_stat' =>
        array (
            'file' => 'function.maxdb-stat.php',
            'desc' => 'Gets the current system status',
        ),
    'maxdb_stmt_affected_rows' =>
        array (
            'file' => 'function.maxdb-stmt-affected-rows.php',
            'desc' => 'Returns the total number of rows changed, deleted, or
  inserted by the last executed statement',
        ),
    'maxdb_stmt_bind_param' =>
        array (
            'file' => 'function.maxdb-stmt-bind-param.php',
            'desc' => 'Binds variables to a prepared statement as parameters',
        ),
    'maxdb_stmt_bind_result' =>
        array (
            'file' => 'function.maxdb-stmt-bind-result.php',
            'desc' => 'Binds variables to a prepared statement for result storage',
        ),
    'maxdb_stmt_close' =>
        array (
            'file' => 'function.maxdb-stmt-close.php',
            'desc' => 'Closes a prepared statement',
        ),
    'maxdb_stmt_close_long_data' =>
        array (
            'file' => 'function.maxdb-stmt-close-long-data.php',
            'desc' => 'Ends a sequence of maxdb_stmt_send_long_data',
        ),
    'maxdb_stmt_data_seek' =>
        array (
            'file' => 'function.maxdb-stmt-data-seek.php',
            'desc' => 'Seeks to an arbitray row in statement result set',
        ),
    'maxdb_stmt_errno' =>
        array (
            'file' => 'function.maxdb-stmt-errno.php',
            'desc' => 'Returns the error code for the most recent statement call',
        ),
    'maxdb_stmt_error' =>
        array (
            'file' => 'function.maxdb-stmt-error.php',
            'desc' => 'Returns a string description for last statement error',
        ),
    'maxdb_stmt_execute' =>
        array (
            'file' => 'function.maxdb-stmt-execute.php',
            'desc' => 'Executes a prepared Query',
        ),
    'maxdb_stmt_fetch' =>
        array (
            'file' => 'function.maxdb-stmt-fetch.php',
            'desc' => 'Fetch results from a prepared statement into the bound variables',
        ),
    'maxdb_stmt_free_result' =>
        array (
            'file' => 'function.maxdb-stmt-free-result.php',
            'desc' => 'Frees stored result memory for the given statement handle',
        ),
    'maxdb_stmt_init' =>
        array (
            'file' => 'function.maxdb-stmt-init.php',
            'desc' => 'Initializes a statement and returns an resource for use with maxdb_stmt_prepare',
        ),
    'maxdb_stmt_num_rows' =>
        array (
            'file' => 'function.maxdb-stmt-num-rows.php',
            'desc' => 'Return the number of rows in statements result set',
        ),
    'maxdb_stmt_param_count' =>
        array (
            'file' => 'function.maxdb-stmt-param-count.php',
            'desc' => 'Returns the number of parameter for the given statement',
        ),
    'maxdb_stmt_prepare' =>
        array (
            'file' => 'function.maxdb-stmt-prepare.php',
            'desc' => 'Prepare an SQL statement for execution',
        ),
    'maxdb_stmt_reset' =>
        array (
            'file' => 'function.maxdb-stmt-reset.php',
            'desc' => 'Resets a prepared statement',
        ),
    'maxdb_stmt_result_metadata' =>
        array (
            'file' => 'function.maxdb-stmt-result-metadata.php',
            'desc' => 'Returns result set metadata from a prepared statement',
        ),
    'maxdb_stmt_send_long_data' =>
        array (
            'file' => 'function.maxdb-stmt-send-long-data.php',
            'desc' => 'Send data in blocks',
        ),
    'maxdb_stmt_sqlstate' =>
        array (
            'file' => 'function.maxdb-stmt-sqlstate.php',
            'desc' => 'Returns SQLSTATE error from previous statement operation',
        ),
    'maxdb_stmt_store_result' =>
        array (
            'file' => 'function.maxdb-stmt-store-result.php',
            'desc' => 'Transfers a result set from a prepared statement',
        ),
    'maxdb_store_result' =>
        array (
            'file' => 'function.maxdb-store-result.php',
            'desc' => 'Transfers a result set from the last query',
        ),
    'maxdb_thread_id' =>
        array (
            'file' => 'function.maxdb-thread-id.php',
            'desc' => 'Returns the thread ID for the current connection',
        ),
    'maxdb_thread_safe' =>
        array (
            'file' => 'function.maxdb-thread-safe.php',
            'desc' => 'Returns whether thread safety is given or not',
        ),
    'maxdb_use_result' =>
        array (
            'file' => 'function.maxdb-use-result.php',
            'desc' => 'Initiate a result set retrieval',
        ),
    'maxdb_warning_count' =>
        array (
            'file' => 'function.maxdb-warning-count.php',
            'desc' => 'Returns the number of warnings from the last query for the given link',
        ),
    'mb_check_encoding' =>
        array (
            'file' => 'function.mb-check-encoding.php',
            'desc' => 'Check if the string is valid for the specified encoding',
        ),
    'mb_convert_case' =>
        array (
            'file' => 'function.mb-convert-case.php',
            'desc' => 'Perform case folding on a string',
        ),
    'mb_convert_encoding' =>
        array (
            'file' => 'function.mb-convert-encoding.php',
            'desc' => 'Convert character encoding',
        ),
    'mb_convert_kana' =>
        array (
            'file' => 'function.mb-convert-kana.php',
            'desc' => 'Convert &quot;kana&quot; one from another (&quot;zen-kaku&quot;, &quot;han-kaku&quot; and more)',
        ),
    'mb_convert_variables' =>
        array (
            'file' => 'function.mb-convert-variables.php',
            'desc' => 'Convert character code in variable(s)',
        ),
    'mb_decode_mimeheader' =>
        array (
            'file' => 'function.mb-decode-mimeheader.php',
            'desc' => 'Decode string in MIME header field',
        ),
    'mb_decode_numericentity' =>
        array (
            'file' => 'function.mb-decode-numericentity.php',
            'desc' => 'Decode HTML numeric string reference to character',
        ),
    'mb_detect_encoding' =>
        array (
            'file' => 'function.mb-detect-encoding.php',
            'desc' => 'Detect character encoding',
        ),
    'mb_detect_order' =>
        array (
            'file' => 'function.mb-detect-order.php',
            'desc' => 'Set/Get character encoding detection order',
        ),
    'mb_encode_mimeheader' =>
        array (
            'file' => 'function.mb-encode-mimeheader.php',
            'desc' => 'Encode string for MIME header',
        ),
    'mb_encode_numericentity' =>
        array (
            'file' => 'function.mb-encode-numericentity.php',
            'desc' => 'Encode character to HTML numeric string reference',
        ),
    'mb_encoding_aliases' =>
        array (
            'file' => 'function.mb-encoding-aliases.php',
            'desc' => 'Get aliases of a known encoding type',
        ),
    'mb_ereg' =>
        array (
            'file' => 'function.mb-ereg.php',
            'desc' => 'Regular expression match with multibyte support',
        ),
    'mb_eregi' =>
        array (
            'file' => 'function.mb-eregi.php',
            'desc' => 'Regular expression match ignoring case with multibyte support',
        ),
    'mb_eregi_replace' =>
        array (
            'file' => 'function.mb-eregi-replace.php',
            'desc' => 'Replace regular expression with multibyte support ignoring case',
        ),
    'mb_ereg_match' =>
        array (
            'file' => 'function.mb-ereg-match.php',
            'desc' => 'Regular expression match for multibyte string',
        ),
    'mb_ereg_replace' =>
        array (
            'file' => 'function.mb-ereg-replace.php',
            'desc' => 'Replace regular expression with multibyte support',
        ),
    'mb_ereg_replace_callback' =>
        array (
            'file' => 'function.mb-ereg-replace-callback.php',
            'desc' => 'Perform a regular expresssion seach and replace with multibyte support using a callback',
        ),
    'mb_ereg_search' =>
        array (
            'file' => 'function.mb-ereg-search.php',
            'desc' => 'Multibyte regular expression match for predefined multibyte string',
        ),
    'mb_ereg_search_getpos' =>
        array (
            'file' => 'function.mb-ereg-search-getpos.php',
            'desc' => 'Returns start point for next regular expression match',
        ),
    'mb_ereg_search_getregs' =>
        array (
            'file' => 'function.mb-ereg-search-getregs.php',
            'desc' => 'Retrieve the result from the last multibyte regular expression match',
        ),
    'mb_ereg_search_init' =>
        array (
            'file' => 'function.mb-ereg-search-init.php',
            'desc' => 'Setup string and regular expression for a multibyte regular expression match',
        ),
    'mb_ereg_search_pos' =>
        array (
            'file' => 'function.mb-ereg-search-pos.php',
            'desc' => 'Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string',
        ),
    'mb_ereg_search_regs' =>
        array (
            'file' => 'function.mb-ereg-search-regs.php',
            'desc' => 'Returns the matched part of a multibyte regular expression',
        ),
    'mb_ereg_search_setpos' =>
        array (
            'file' => 'function.mb-ereg-search-setpos.php',
            'desc' => 'Set start point of next regular expression match',
        ),
    'mb_get_info' =>
        array (
            'file' => 'function.mb-get-info.php',
            'desc' => 'Get internal settings of mbstring',
        ),
    'mb_http_input' =>
        array (
            'file' => 'function.mb-http-input.php',
            'desc' => 'Detect HTTP input character encoding',
        ),
    'mb_http_output' =>
        array (
            'file' => 'function.mb-http-output.php',
            'desc' => 'Set/Get HTTP output character encoding',
        ),
    'mb_internal_encoding' =>
        array (
            'file' => 'function.mb-internal-encoding.php',
            'desc' => 'Set/Get internal character encoding',
        ),
    'mb_language' =>
        array (
            'file' => 'function.mb-language.php',
            'desc' => 'Set/Get current language',
        ),
    'mb_list_encodings' =>
        array (
            'file' => 'function.mb-list-encodings.php',
            'desc' => 'Returns an array of all supported encodings',
        ),
    'mb_output_handler' =>
        array (
            'file' => 'function.mb-output-handler.php',
            'desc' => 'Callback function converts character encoding in output buffer',
        ),
    'mb_parse_str' =>
        array (
            'file' => 'function.mb-parse-str.php',
            'desc' => 'Parse GET/POST/COOKIE data and set global variable',
        ),
    'mb_preferred_mime_name' =>
        array (
            'file' => 'function.mb-preferred-mime-name.php',
            'desc' => 'Get MIME charset string',
        ),
    'mb_regex_encoding' =>
        array (
            'file' => 'function.mb-regex-encoding.php',
            'desc' => 'Set/Get character encoding for multibyte regex',
        ),
    'mb_regex_set_options' =>
        array (
            'file' => 'function.mb-regex-set-options.php',
            'desc' => 'Set/Get the default options for mbregex functions',
        ),
    'mb_send_mail' =>
        array (
            'file' => 'function.mb-send-mail.php',
            'desc' => 'Send encoded mail',
        ),
    'mb_split' =>
        array (
            'file' => 'function.mb-split.php',
            'desc' => 'Split multibyte string using regular expression',
        ),
    'mb_strcut' =>
        array (
            'file' => 'function.mb-strcut.php',
            'desc' => 'Get part of string',
        ),
    'mb_strimwidth' =>
        array (
            'file' => 'function.mb-strimwidth.php',
            'desc' => 'Get truncated string with specified width',
        ),
    'mb_stripos' =>
        array (
            'file' => 'function.mb-stripos.php',
            'desc' => 'Finds position of first occurrence of a string within another, case insensitive',
        ),
    'mb_stristr' =>
        array (
            'file' => 'function.mb-stristr.php',
            'desc' => 'Finds first occurrence of a string within another, case insensitive',
        ),
    'mb_strlen' =>
        array (
            'file' => 'function.mb-strlen.php',
            'desc' => 'Get string length',
        ),
    'mb_strpos' =>
        array (
            'file' => 'function.mb-strpos.php',
            'desc' => 'Find position of first occurrence of string in a string',
        ),
    'mb_strrchr' =>
        array (
            'file' => 'function.mb-strrchr.php',
            'desc' => 'Finds the last occurrence of a character in a string within another',
        ),
    'mb_strrichr' =>
        array (
            'file' => 'function.mb-strrichr.php',
            'desc' => 'Finds the last occurrence of a character in a string within another, case insensitive',
        ),
    'mb_strripos' =>
        array (
            'file' => 'function.mb-strripos.php',
            'desc' => 'Finds position of last occurrence of a string within another, case insensitive',
        ),
    'mb_strrpos' =>
        array (
            'file' => 'function.mb-strrpos.php',
            'desc' => 'Find position of last occurrence of a string in a string',
        ),
    'mb_strstr' =>
        array (
            'file' => 'function.mb-strstr.php',
            'desc' => 'Finds first occurrence of a string within another',
        ),
    'mb_strtolower' =>
        array (
            'file' => 'function.mb-strtolower.php',
            'desc' => 'Make a string lowercase',
        ),
    'mb_strtoupper' =>
        array (
            'file' => 'function.mb-strtoupper.php',
            'desc' => 'Make a string uppercase',
        ),
    'mb_strwidth' =>
        array (
            'file' => 'function.mb-strwidth.php',
            'desc' => 'Return width of string',
        ),
    'mb_substitute_character' =>
        array (
            'file' => 'function.mb-substitute-character.php',
            'desc' => 'Set/Get substitution character',
        ),
    'mb_substr' =>
        array (
            'file' => 'function.mb-substr.php',
            'desc' => 'Get part of string',
        ),
    'mb_substr_count' =>
        array (
            'file' => 'function.mb-substr-count.php',
            'desc' => 'Count the number of substring occurrences',
        ),
    'mcrypt_cbc' =>
        array (
            'file' => 'function.mcrypt-cbc.php',
            'desc' => 'Encrypts/decrypts data in CBC mode',
        ),
    'mcrypt_cfb' =>
        array (
            'file' => 'function.mcrypt-cfb.php',
            'desc' => 'Encrypts/decrypts data in CFB mode',
        ),
    'mcrypt_create_iv' =>
        array (
            'file' => 'function.mcrypt-create-iv.php',
            'desc' => 'Creates an initialization vector (IV) from a random source',
        ),
    'mcrypt_decrypt' =>
        array (
            'file' => 'function.mcrypt-decrypt.php',
            'desc' => 'Decrypts crypttext with given parameters',
        ),
    'mcrypt_ecb' =>
        array (
            'file' => 'function.mcrypt-ecb.php',
            'desc' => 'Deprecated: Encrypts/decrypts data in ECB mode',
        ),
    'mcrypt_encrypt' =>
        array (
            'file' => 'function.mcrypt-encrypt.php',
            'desc' => 'Encrypts plaintext with given parameters',
        ),
    'mcrypt_enc_get_algorithms_name' =>
        array (
            'file' => 'function.mcrypt-enc-get-algorithms-name.php',
            'desc' => 'Returns the name of the opened algorithm',
        ),
    'mcrypt_enc_get_block_size' =>
        array (
            'file' => 'function.mcrypt-enc-get-block-size.php',
            'desc' => 'Returns the blocksize of the opened algorithm',
        ),
    'mcrypt_enc_get_iv_size' =>
        array (
            'file' => 'function.mcrypt-enc-get-iv-size.php',
            'desc' => 'Returns the size of the IV of the opened algorithm',
        ),
    'mcrypt_enc_get_key_size' =>
        array (
            'file' => 'function.mcrypt-enc-get-key-size.php',
            'desc' => 'Returns the maximum supported keysize of the opened mode',
        ),
    'mcrypt_enc_get_modes_name' =>
        array (
            'file' => 'function.mcrypt-enc-get-modes-name.php',
            'desc' => 'Returns the name of the opened mode',
        ),
    'mcrypt_enc_get_supported_key_sizes' =>
        array (
            'file' => 'function.mcrypt-enc-get-supported-key-sizes.php',
            'desc' => 'Returns an array with the supported keysizes of the opened algorithm',
        ),
    'mcrypt_enc_is_block_algorithm' =>
        array (
            'file' => 'function.mcrypt-enc-is-block-algorithm.php',
            'desc' => 'Checks whether the algorithm of the opened mode is a block algorithm',
        ),
    'mcrypt_enc_is_block_algorithm_mode' =>
        array (
            'file' => 'function.mcrypt-enc-is-block-algorithm-mode.php',
            'desc' => 'Checks whether the encryption of the opened mode works on blocks',
        ),
    'mcrypt_enc_is_block_mode' =>
        array (
            'file' => 'function.mcrypt-enc-is-block-mode.php',
            'desc' => 'Checks whether the opened mode outputs blocks',
        ),
    'mcrypt_enc_self_test' =>
        array (
            'file' => 'function.mcrypt-enc-self-test.php',
            'desc' => 'Runs a self test on the opened module',
        ),
    'mcrypt_generic' =>
        array (
            'file' => 'function.mcrypt-generic.php',
            'desc' => 'This function encrypts data',
        ),
    'mcrypt_generic_deinit' =>
        array (
            'file' => 'function.mcrypt-generic-deinit.php',
            'desc' => 'This function deinitializes an encryption module',
        ),
    'mcrypt_generic_end' =>
        array (
            'file' => 'function.mcrypt-generic-end.php',
            'desc' => 'This function terminates encryption',
        ),
    'mcrypt_generic_init' =>
        array (
            'file' => 'function.mcrypt-generic-init.php',
            'desc' => 'This function initializes all buffers needed for encryption',
        ),
    'mcrypt_get_block_size' =>
        array (
            'file' => 'function.mcrypt-get-block-size.php',
            'desc' => 'Gets the block size of the specified cipher',
        ),
    'mcrypt_get_cipher_name' =>
        array (
            'file' => 'function.mcrypt-get-cipher-name.php',
            'desc' => 'Gets the name of the specified cipher',
        ),
    'mcrypt_get_iv_size' =>
        array (
            'file' => 'function.mcrypt-get-iv-size.php',
            'desc' => 'Returns the size of the IV belonging to a specific cipher/mode combination',
        ),
    'mcrypt_get_key_size' =>
        array (
            'file' => 'function.mcrypt-get-key-size.php',
            'desc' => 'Gets the key size of the specified cipher',
        ),
    'mcrypt_list_algorithms' =>
        array (
            'file' => 'function.mcrypt-list-algorithms.php',
            'desc' => 'Gets an array of all supported ciphers',
        ),
    'mcrypt_list_modes' =>
        array (
            'file' => 'function.mcrypt-list-modes.php',
            'desc' => 'Gets an array of all supported modes',
        ),
    'mcrypt_module_close' =>
        array (
            'file' => 'function.mcrypt-module-close.php',
            'desc' => 'Closes the mcrypt module',
        ),
    'mcrypt_module_get_algo_block_size' =>
        array (
            'file' => 'function.mcrypt-module-get-algo-block-size.php',
            'desc' => 'Returns the blocksize of the specified algorithm',
        ),
    'mcrypt_module_get_algo_key_size' =>
        array (
            'file' => 'function.mcrypt-module-get-algo-key-size.php',
            'desc' => 'Returns the maximum supported keysize of the opened mode',
        ),
    'mcrypt_module_get_supported_key_sizes' =>
        array (
            'file' => 'function.mcrypt-module-get-supported-key-sizes.php',
            'desc' => 'Returns an array with the supported keysizes of the opened algorithm',
        ),
    'mcrypt_module_is_block_algorithm' =>
        array (
            'file' => 'function.mcrypt-module-is-block-algorithm.php',
            'desc' => 'This function checks whether the specified algorithm is a block algorithm',
        ),
    'mcrypt_module_is_block_algorithm_mode' =>
        array (
            'file' => 'function.mcrypt-module-is-block-algorithm-mode.php',
            'desc' => 'Returns if the specified module is a block algorithm or not',
        ),
    'mcrypt_module_is_block_mode' =>
        array (
            'file' => 'function.mcrypt-module-is-block-mode.php',
            'desc' => 'Returns if the specified mode outputs blocks or not',
        ),
    'mcrypt_module_open' =>
        array (
            'file' => 'function.mcrypt-module-open.php',
            'desc' => 'Opens the module of the algorithm and the mode to be used',
        ),
    'mcrypt_module_self_test' =>
        array (
            'file' => 'function.mcrypt-module-self-test.php',
            'desc' => 'This function runs a self test on the specified module',
        ),
    'mcrypt_ofb' =>
        array (
            'file' => 'function.mcrypt-ofb.php',
            'desc' => 'Encrypts/decrypts data in OFB mode',
        ),
    'md5' =>
        array (
            'file' => 'function.md5.php',
            'desc' => 'Calculate the md5 hash of a string',
        ),
    'md5_file' =>
        array (
            'file' => 'function.md5-file.php',
            'desc' => 'Calculates the md5 hash of a given file',
        ),
    'mdecrypt_generic' =>
        array (
            'file' => 'function.mdecrypt-generic.php',
            'desc' => 'Decrypts data',
        ),
    'Memcache::add' =>
        array (
            'file' => 'memcache.add.php',
            'desc' => 'Add an item to the server',
        ),
    'Memcache::addServer' =>
        array (
            'file' => 'memcache.addserver.php',
            'desc' => 'Add a memcached server to connection pool',
        ),
    'Memcache::close' =>
        array (
            'file' => 'memcache.close.php',
            'desc' => 'Close memcached server connection',
        ),
    'Memcache::connect' =>
        array (
            'file' => 'memcache.connect.php',
            'desc' => 'Open memcached server connection',
        ),
    'Memcache::decrement' =>
        array (
            'file' => 'memcache.decrement.php',
            'desc' => 'Decrement item\'s value',
        ),
    'Memcache::delete' =>
        array (
            'file' => 'memcache.delete.php',
            'desc' => 'Delete item from the server',
        ),
    'Memcache::flush' =>
        array (
            'file' => 'memcache.flush.php',
            'desc' => 'Flush all existing items at the server',
        ),
    'Memcache::get' =>
        array (
            'file' => 'memcache.get.php',
            'desc' => 'Retrieve item from the server',
        ),
    'Memcache::getExtendedStats' =>
        array (
            'file' => 'memcache.getextendedstats.php',
            'desc' => 'Get statistics from all servers in pool',
        ),
    'Memcache::getServerStatus' =>
        array (
            'file' => 'memcache.getserverstatus.php',
            'desc' => 'Returns server status',
        ),
    'Memcache::getStats' =>
        array (
            'file' => 'memcache.getstats.php',
            'desc' => 'Get statistics of the server',
        ),
    'Memcache::getVersion' =>
        array (
            'file' => 'memcache.getversion.php',
            'desc' => 'Return version of the server',
        ),
    'Memcache::increment' =>
        array (
            'file' => 'memcache.increment.php',
            'desc' => 'Increment item\'s value',
        ),
    'Memcache::pconnect' =>
        array (
            'file' => 'memcache.pconnect.php',
            'desc' => 'Open memcached server persistent connection',
        ),
    'Memcache::replace' =>
        array (
            'file' => 'memcache.replace.php',
            'desc' => 'Replace value of the existing item',
        ),
    'Memcache::set' =>
        array (
            'file' => 'memcache.set.php',
            'desc' => 'Store data at the server',
        ),
    'Memcache::setCompressThreshold' =>
        array (
            'file' => 'memcache.setcompressthreshold.php',
            'desc' => 'Enable automatic compression of large values',
        ),
    'Memcache::setServerParams' =>
        array (
            'file' => 'memcache.setserverparams.php',
            'desc' => 'Changes server parameters and status at runtime',
        ),
    'Memcached::add' =>
        array (
            'file' => 'memcached.add.php',
            'desc' => 'Add an item under a new key',
        ),
    'Memcached::addByKey' =>
        array (
            'file' => 'memcached.addbykey.php',
            'desc' => 'Add an item under a new key on a specific server',
        ),
    'Memcached::addServer' =>
        array (
            'file' => 'memcached.addserver.php',
            'desc' => 'Add a server to the server pool',
        ),
    'Memcached::addServers' =>
        array (
            'file' => 'memcached.addservers.php',
            'desc' => 'Add multiple servers to the server pool',
        ),
    'Memcached::append' =>
        array (
            'file' => 'memcached.append.php',
            'desc' => 'Append data to an existing item',
        ),
    'Memcached::appendByKey' =>
        array (
            'file' => 'memcached.appendbykey.php',
            'desc' => 'Append data to an existing item on a specific server',
        ),
    'Memcached::cas' =>
        array (
            'file' => 'memcached.cas.php',
            'desc' => 'Compare and swap an item',
        ),
    'Memcached::casByKey' =>
        array (
            'file' => 'memcached.casbykey.php',
            'desc' => 'Compare and swap an item on a specific server',
        ),
    'Memcached::decrement' =>
        array (
            'file' => 'memcached.decrement.php',
            'desc' => 'Decrement numeric item\'s value',
        ),
    'Memcached::decrementByKey' =>
        array (
            'file' => 'memcached.decrementbykey.php',
            'desc' => 'Decrement numeric item\'s value, stored on a specific server',
        ),
    'Memcached::delete' =>
        array (
            'file' => 'memcached.delete.php',
            'desc' => 'Delete an item',
        ),
    'Memcached::deleteByKey' =>
        array (
            'file' => 'memcached.deletebykey.php',
            'desc' => 'Delete an item from a specific server',
        ),
    'Memcached::deleteMulti' =>
        array (
            'file' => 'memcached.deletemulti.php',
            'desc' => 'Delete multiple items',
        ),
    'Memcached::deleteMultiByKey' =>
        array (
            'file' => 'memcached.deletemultibykey.php',
            'desc' => 'Delete multiple items from a specific server',
        ),
    'Memcached::fetch' =>
        array (
            'file' => 'memcached.fetch.php',
            'desc' => 'Fetch the next result',
        ),
    'Memcached::fetchAll' =>
        array (
            'file' => 'memcached.fetchall.php',
            'desc' => 'Fetch all the remaining results',
        ),
    'Memcached::flush' =>
        array (
            'file' => 'memcached.flush.php',
            'desc' => 'Invalidate all items in the cache',
        ),
    'Memcached::get' =>
        array (
            'file' => 'memcached.get.php',
            'desc' => 'Retrieve an item',
        ),
    'Memcached::getAllKeys' =>
        array (
            'file' => 'memcached.getallkeys.php',
            'desc' => 'Gets the keys stored on all the servers',
        ),
    'Memcached::getByKey' =>
        array (
            'file' => 'memcached.getbykey.php',
            'desc' => 'Retrieve an item from a specific server',
        ),
    'Memcached::getDelayed' =>
        array (
            'file' => 'memcached.getdelayed.php',
            'desc' => 'Request multiple items',
        ),
    'Memcached::getDelayedByKey' =>
        array (
            'file' => 'memcached.getdelayedbykey.php',
            'desc' => 'Request multiple items from a specific server',
        ),
    'Memcached::getMulti' =>
        array (
            'file' => 'memcached.getmulti.php',
            'desc' => 'Retrieve multiple items',
        ),
    'Memcached::getMultiByKey' =>
        array (
            'file' => 'memcached.getmultibykey.php',
            'desc' => 'Retrieve multiple items from a specific server',
        ),
    'Memcached::getOption' =>
        array (
            'file' => 'memcached.getoption.php',
            'desc' => 'Retrieve a Memcached option value',
        ),
    'Memcached::getResultCode' =>
        array (
            'file' => 'memcached.getresultcode.php',
            'desc' => 'Return the result code of the last operation',
        ),
    'Memcached::getResultMessage' =>
        array (
            'file' => 'memcached.getresultmessage.php',
            'desc' => 'Return the message describing the result of the last operation',
        ),
    'Memcached::getServerByKey' =>
        array (
            'file' => 'memcached.getserverbykey.php',
            'desc' => 'Map a key to a server',
        ),
    'Memcached::getServerList' =>
        array (
            'file' => 'memcached.getserverlist.php',
            'desc' => 'Get the list of the servers in the pool',
        ),
    'Memcached::getStats' =>
        array (
            'file' => 'memcached.getstats.php',
            'desc' => 'Get server pool statistics',
        ),
    'Memcached::getVersion' =>
        array (
            'file' => 'memcached.getversion.php',
            'desc' => 'Get server pool version info',
        ),
    'Memcached::increment' =>
        array (
            'file' => 'memcached.increment.php',
            'desc' => 'Increment numeric item\'s value',
        ),
    'Memcached::incrementByKey' =>
        array (
            'file' => 'memcached.incrementbykey.php',
            'desc' => 'Increment numeric item\'s value, stored on a specific server',
        ),
    'Memcached::isPersistent' =>
        array (
            'file' => 'memcached.ispersistent.php',
            'desc' => 'Check if a persitent connection to memcache is being used',
        ),
    'Memcached::isPristine' =>
        array (
            'file' => 'memcached.ispristine.php',
            'desc' => 'Check if the instance was recently created',
        ),
    'Memcached::prepend' =>
        array (
            'file' => 'memcached.prepend.php',
            'desc' => 'Prepend data to an existing item',
        ),
    'Memcached::prependByKey' =>
        array (
            'file' => 'memcached.prependbykey.php',
            'desc' => 'Prepend data to an existing item on a specific server',
        ),
    'Memcached::quit' =>
        array (
            'file' => 'memcached.quit.php',
            'desc' => 'Close any open connections',
        ),
    'Memcached::replace' =>
        array (
            'file' => 'memcached.replace.php',
            'desc' => 'Replace the item under an existing key',
        ),
    'Memcached::replaceByKey' =>
        array (
            'file' => 'memcached.replacebykey.php',
            'desc' => 'Replace the item under an existing key on a specific server',
        ),
    'Memcached::resetServerList' =>
        array (
            'file' => 'memcached.resetserverlist.php',
            'desc' => 'Clears all servers from the server list',
        ),
    'Memcached::set' =>
        array (
            'file' => 'memcached.set.php',
            'desc' => 'Store an item',
        ),
    'Memcached::setByKey' =>
        array (
            'file' => 'memcached.setbykey.php',
            'desc' => 'Store an item on a specific server',
        ),
    'Memcached::setMulti' =>
        array (
            'file' => 'memcached.setmulti.php',
            'desc' => 'Store multiple items',
        ),
    'Memcached::setMultiByKey' =>
        array (
            'file' => 'memcached.setmultibykey.php',
            'desc' => 'Store multiple items on a specific server',
        ),
    'Memcached::setOption' =>
        array (
            'file' => 'memcached.setoption.php',
            'desc' => 'Set a Memcached option',
        ),
    'Memcached::setOptions' =>
        array (
            'file' => 'memcached.setoptions.php',
            'desc' => 'Set Memcached options',
        ),
    'Memcached::setSaslAuthData' =>
        array (
            'file' => 'memcached.setsaslauthdata.php',
            'desc' => 'Set the credentials to use for authentication',
        ),
    'Memcached::touch' =>
        array (
            'file' => 'memcached.touch.php',
            'desc' => 'Set a new expiration on an item',
        ),
    'Memcached::touchByKey' =>
        array (
            'file' => 'memcached.touchbykey.php',
            'desc' => 'Set a new expiration on an item on a specific server',
        ),
    'Memcached::__construct' =>
        array (
            'file' => 'memcached.construct.php',
            'desc' => 'Create a Memcached instance',
        ),
    'memcache_debug' =>
        array (
            'file' => 'function.memcache-debug.php',
            'desc' => 'Turn debug output on/off',
        ),
    'memory_get_peak_usage' =>
        array (
            'file' => 'function.memory-get-peak-usage.php',
            'desc' => 'Returns the peak of memory allocated by PHP',
        ),
    'memory_get_usage' =>
        array (
            'file' => 'function.memory-get-usage.php',
            'desc' => 'Returns the amount of memory allocated to PHP',
        ),
    'MessageFormatter::create' =>
        array (
            'file' => 'messageformatter.create.php',
            'desc' => 'Constructs a new Message Formatter',
        ),
    'MessageFormatter::format' =>
        array (
            'file' => 'messageformatter.format.php',
            'desc' => 'Format the message',
        ),
    'MessageFormatter::formatMessage' =>
        array (
            'file' => 'messageformatter.formatmessage.php',
            'desc' => 'Quick format message',
        ),
    'MessageFormatter::getErrorCode' =>
        array (
            'file' => 'messageformatter.geterrorcode.php',
            'desc' => 'Get the error code from last operation',
        ),
    'MessageFormatter::getErrorMessage' =>
        array (
            'file' => 'messageformatter.geterrormessage.php',
            'desc' => 'Get the error text from the last operation',
        ),
    'MessageFormatter::getLocale' =>
        array (
            'file' => 'messageformatter.getlocale.php',
            'desc' => 'Get the locale for which the formatter was created.',
        ),
    'MessageFormatter::getPattern' =>
        array (
            'file' => 'messageformatter.getpattern.php',
            'desc' => 'Get the pattern used by the formatter',
        ),
    'MessageFormatter::parse' =>
        array (
            'file' => 'messageformatter.parse.php',
            'desc' => 'Parse input string according to pattern',
        ),
    'MessageFormatter::parseMessage' =>
        array (
            'file' => 'messageformatter.parsemessage.php',
            'desc' => 'Quick parse input string',
        ),
    'MessageFormatter::setPattern' =>
        array (
            'file' => 'messageformatter.setpattern.php',
            'desc' => 'Set the pattern used by the formatter',
        ),
    'metaphone' =>
        array (
            'file' => 'function.metaphone.php',
            'desc' => 'Calculate the metaphone key of a string',
        ),
    'method_exists' =>
        array (
            'file' => 'function.method-exists.php',
            'desc' => 'Checks if the class method exists',
        ),
    'mhash' =>
        array (
            'file' => 'function.mhash.php',
            'desc' => 'Computes hash',
        ),
    'mhash_count' =>
        array (
            'file' => 'function.mhash-count.php',
            'desc' => 'Gets the highest available hash ID',
        ),
    'mhash_get_block_size' =>
        array (
            'file' => 'function.mhash-get-block-size.php',
            'desc' => 'Gets the block size of the specified hash',
        ),
    'mhash_get_hash_name' =>
        array (
            'file' => 'function.mhash-get-hash-name.php',
            'desc' => 'Gets the name of the specified hash',
        ),
    'mhash_keygen_s2k' =>
        array (
            'file' => 'function.mhash-keygen-s2k.php',
            'desc' => 'Generates a key',
        ),
    'microtime' =>
        array (
            'file' => 'function.microtime.php',
            'desc' => 'Return current Unix timestamp with microseconds',
        ),
    'mime_content_type' =>
        array (
            'file' => 'function.mime-content-type.php',
            'desc' => 'Detect MIME Content-type for a file (deprecated)',
        ),
    'min' =>
        array (
            'file' => 'function.min.php',
            'desc' => 'Find lowest value',
        ),
    'ming_keypress' =>
        array (
            'file' => 'function.ming-keypress.php',
            'desc' => 'Returns the action flag for keyPress(char)',
        ),
    'ming_setcubicthreshold' =>
        array (
            'file' => 'function.ming-setcubicthreshold.php',
            'desc' => 'Set cubic threshold',
        ),
    'ming_setscale' =>
        array (
            'file' => 'function.ming-setscale.php',
            'desc' => 'Set the global scaling factor.',
        ),
    'ming_setswfcompression' =>
        array (
            'file' => 'function.ming-setswfcompression.php',
            'desc' => 'Sets the SWF output compression',
        ),
    'ming_useconstants' =>
        array (
            'file' => 'function.ming-useconstants.php',
            'desc' => 'Use constant pool',
        ),
    'ming_useswfversion' =>
        array (
            'file' => 'function.ming-useswfversion.php',
            'desc' => 'Sets the SWF version',
        ),
    'mkdir' =>
        array (
            'file' => 'function.mkdir.php',
            'desc' => 'Makes directory',
        ),
    'mktime' =>
        array (
            'file' => 'function.mktime.php',
            'desc' => 'Get Unix timestamp for a date',
        ),
    'money_format' =>
        array (
            'file' => 'function.money-format.php',
            'desc' => 'Formats a number as a currency string',
        ),
    'Mongo::connectUtil' =>
        array (
            'file' => 'mongo.connectutil.php',
            'desc' => 'Connects with a database server',
        ),
    'Mongo::getPoolSize' =>
        array (
            'file' => 'mongo.getpoolsize.php',
            'desc' => 'Get pool size for connection pools',
        ),
    'Mongo::getSlave' =>
        array (
            'file' => 'mongo.getslave.php',
            'desc' => 'Returns the address being used by this for slaveOkay reads',
        ),
    'Mongo::getSlaveOkay' =>
        array (
            'file' => 'mongo.getslaveokay.php',
            'desc' => 'Get slaveOkay setting for this connection',
        ),
    'Mongo::poolDebug' =>
        array (
            'file' => 'mongo.pooldebug.php',
            'desc' => 'Returns information about all connection pools.',
        ),
    'Mongo::setPoolSize' =>
        array (
            'file' => 'mongo.setpoolsize.php',
            'desc' => 'Set the size for future connection pools.',
        ),
    'Mongo::setSlaveOkay' =>
        array (
            'file' => 'mongo.setslaveokay.php',
            'desc' => 'Change slaveOkay setting for this connection',
        ),
    'Mongo::switchSlave' =>
        array (
            'file' => 'mongo.switchslave.php',
            'desc' => 'Choose a new secondary for slaveOkay reads',
        ),
    'Mongo::__construct' =>
        array (
            'file' => 'mongo.construct.php',
        ),
    'MongoBinData::__construct' =>
        array (
            'file' => 'mongobindata.construct.php',
            'desc' => 'Creates a new binary data object.',
        ),
    'MongoBinData::__toString' =>
        array (
            'file' => 'mongobindata.tostring.php',
            'desc' => 'The string representation of this binary data object.',
        ),
    'MongoClient::close' =>
        array (
            'file' => 'mongoclient.close.php',
            'desc' => 'Closes this connection',
        ),
    'MongoClient::connect' =>
        array (
            'file' => 'mongoclient.connect.php',
            'desc' => 'Connects to a database server',
        ),
    'MongoClient::dropDB' =>
        array (
            'file' => 'mongoclient.dropdb.php',
            'desc' => 'Drops a database [deprecated]',
        ),
    'MongoClient::getConnections' =>
        array (
            'file' => 'mongoclient.getconnections.php',
            'desc' => 'Return info about all open connections',
        ),
    'MongoClient::getHosts' =>
        array (
            'file' => 'mongoclient.gethosts.php',
            'desc' => 'Updates status for all associated hosts',
        ),
    'MongoClient::getReadPreference' =>
        array (
            'file' => 'mongoclient.getreadpreference.php',
            'desc' => 'Get the read preference for this connection',
        ),
    'MongoClient::getWriteConcern' =>
        array (
            'file' => 'mongoclient.getwriteconcern.php',
            'desc' => 'Get the write concern for this connection',
        ),
    'MongoClient::killCursor' =>
        array (
            'file' => 'mongoclient.killcursor.php',
            'desc' => 'Kills a specific cursor on the server',
        ),
    'MongoClient::listDBs' =>
        array (
            'file' => 'mongoclient.listdbs.php',
            'desc' => 'Lists all of the databases available.',
        ),
    'MongoClient::selectCollection' =>
        array (
            'file' => 'mongoclient.selectcollection.php',
            'desc' => 'Gets a database collection',
        ),
    'MongoClient::selectDB' =>
        array (
            'file' => 'mongoclient.selectdb.php',
            'desc' => 'Gets a database',
        ),
    'MongoClient::setReadPreference' =>
        array (
            'file' => 'mongoclient.setreadpreference.php',
            'desc' => 'Set the read preference for this connection',
        ),
    'MongoClient::setWriteConcern' =>
        array (
            'file' => 'mongoclient.setwriteconcern.php',
            'desc' => 'Set the write concern for this connection',
        ),
    'MongoClient::__construct' =>
        array (
            'file' => 'mongoclient.construct.php',
            'desc' => 'Creates a new database connection object',
        ),
    'MongoClient::__get' =>
        array (
            'file' => 'mongoclient.get.php',
            'desc' => 'Gets a database',
        ),
    'MongoClient::__toString' =>
        array (
            'file' => 'mongoclient.tostring.php',
            'desc' => 'String representation of this connection',
        ),
    'MongoCode::__construct' =>
        array (
            'file' => 'mongocode.construct.php',
            'desc' => 'Creates a new code object',
        ),
    'MongoCode::__toString' =>
        array (
            'file' => 'mongocode.tostring.php',
            'desc' => 'Returns this code as a string',
        ),
    'MongoCollection::aggregate' =>
        array (
            'file' => 'mongocollection.aggregate.php',
            'desc' => 'Perform an aggregation using the aggregation framework',
        ),
    'MongoCollection::aggregateCursor' =>
        array (
            'file' => 'mongocollection.aggregatecursor.php',
            'desc' => 'Execute an aggregation pipeline command and retrieve results through a cursor',
        ),
    'MongoCollection::batchInsert' =>
        array (
            'file' => 'mongocollection.batchinsert.php',
            'desc' => 'Inserts multiple documents into this collection',
        ),
    'MongoCollection::count' =>
        array (
            'file' => 'mongocollection.count.php',
            'desc' => 'Counts the number of documents in this collection',
        ),
    'MongoCollection::createDBRef' =>
        array (
            'file' => 'mongocollection.createdbref.php',
            'desc' => 'Creates a database reference',
        ),
    'MongoCollection::createIndex' =>
        array (
            'file' => 'mongocollection.createindex.php',
            'desc' => 'Creates an index on the specified field(s) if it does not already exist.',
        ),
    'MongoCollection::deleteIndex' =>
        array (
            'file' => 'mongocollection.deleteindex.php',
            'desc' => 'Deletes an index from this collection',
        ),
    'MongoCollection::deleteIndexes' =>
        array (
            'file' => 'mongocollection.deleteindexes.php',
            'desc' => 'Delete all indices for this collection',
        ),
    'MongoCollection::distinct' =>
        array (
            'file' => 'mongocollection.distinct.php',
            'desc' => 'Retrieve a list of distinct values for the given key across a collection.',
        ),
    'MongoCollection::drop' =>
        array (
            'file' => 'mongocollection.drop.php',
            'desc' => 'Drops this collection',
        ),
    'MongoCollection::ensureIndex' =>
        array (
            'file' => 'mongocollection.ensureindex.php',
            'desc' => 'Creates an index on the specified field(s) if it does not already exist.',
        ),
    'MongoCollection::find' =>
        array (
            'file' => 'mongocollection.find.php',
            'desc' => 'Queries this collection, returning a MongoCursor
  for the result set',
        ),
    'MongoCollection::findAndModify' =>
        array (
            'file' => 'mongocollection.findandmodify.php',
            'desc' => 'Update a document and return it',
        ),
    'MongoCollection::findOne' =>
        array (
            'file' => 'mongocollection.findone.php',
            'desc' => 'Queries this collection, returning a single element',
        ),
    'MongoCollection::getDBRef' =>
        array (
            'file' => 'mongocollection.getdbref.php',
            'desc' => 'Fetches the document pointed to by a database reference',
        ),
    'MongoCollection::getIndexInfo' =>
        array (
            'file' => 'mongocollection.getindexinfo.php',
            'desc' => 'Returns information about indexes on this collection',
        ),
    'MongoCollection::getName' =>
        array (
            'file' => 'mongocollection.getname.php',
            'desc' => 'Returns this collection\'s name',
        ),
    'MongoCollection::getReadPreference' =>
        array (
            'file' => 'mongocollection.getreadpreference.php',
            'desc' => 'Get the read preference for this collection',
        ),
    'MongoCollection::getSlaveOkay' =>
        array (
            'file' => 'mongocollection.getslaveokay.php',
            'desc' => 'Get slaveOkay setting for this collection',
        ),
    'MongoCollection::getWriteConcern' =>
        array (
            'file' => 'mongocollection.getwriteconcern.php',
            'desc' => 'Get the write concern for this collection',
        ),
    'MongoCollection::group' =>
        array (
            'file' => 'mongocollection.group.php',
            'desc' => 'Performs an operation similar to SQL\'s GROUP BY command',
        ),
    'MongoCollection::insert' =>
        array (
            'file' => 'mongocollection.insert.php',
            'desc' => 'Inserts a document into the collection',
        ),
    'MongoCollection::parallelCollectionScan' =>
        array (
            'file' => 'mongocollection.parallelcollectionscan.php',
            'desc' => 'Returns an array of cursors to iterator over a full collection in parallel',
        ),
    'MongoCollection::remove' =>
        array (
            'file' => 'mongocollection.remove.php',
            'desc' => 'Remove records from this collection',
        ),
    'MongoCollection::save' =>
        array (
            'file' => 'mongocollection.save.php',
            'desc' => 'Saves a document to this collection',
        ),
    'MongoCollection::setReadPreference' =>
        array (
            'file' => 'mongocollection.setreadpreference.php',
            'desc' => 'Set the read preference for this collection',
        ),
    'MongoCollection::setSlaveOkay' =>
        array (
            'file' => 'mongocollection.setslaveokay.php',
            'desc' => 'Change slaveOkay setting for this collection',
        ),
    'MongoCollection::setWriteConcern' =>
        array (
            'file' => 'mongocollection.setwriteconcern.php',
            'desc' => 'Set the write concern for this database',
        ),
    'MongoCollection::toIndexString' =>
        array (
            'file' => 'mongocollection.toindexstring.php',
            'desc' => 'Converts keys specifying an index to its identifying string',
        ),
    'MongoCollection::update' =>
        array (
            'file' => 'mongocollection.update.php',
            'desc' => 'Update records based on a given criteria',
        ),
    'MongoCollection::validate' =>
        array (
            'file' => 'mongocollection.validate.php',
            'desc' => 'Validates this collection',
        ),
    'MongoCollection::__construct' =>
        array (
            'file' => 'mongocollection.construct.php',
            'desc' => 'Creates a new collection',
        ),
    'MongoCollection::__get' =>
        array (
            'file' => 'mongocollection.get.php',
            'desc' => 'Gets a collection',
        ),
    'MongoCollection::__toString' =>
        array (
            'file' => 'mongocollection.--tostring.php',
            'desc' => 'String representation of this collection',
        ),
    'MongoCommandCursor::batchSize' =>
        array (
            'file' => 'mongocommandcursor.batchsize.php',
            'desc' => 'Limits the number of elements returned in one batch.',
        ),
    'MongoCommandCursor::createFromDocument' =>
        array (
            'file' => 'mongocommandcursor.createfromdocument.php',
            'desc' => 'Create a new command cursor from an existing cursor document',
        ),
    'MongoCommandCursor::current' =>
        array (
            'file' => 'mongocommandcursor.current.php',
            'desc' => 'Returns the current element',
        ),
    'MongoCommandCursor::dead' =>
        array (
            'file' => 'mongocommandcursor.dead.php',
            'desc' => 'Checks if there are documents that have not been sent yet from the database for this cursor',
        ),
    'MongoCommandCursor::info' =>
        array (
            'file' => 'mongocommandcursor.info.php',
            'desc' => 'Gets the query, fields, limit, and skip for this cursor',
        ),
    'MongoCommandCursor::key' =>
        array (
            'file' => 'mongocommandcursor.key.php',
            'desc' => 'Returns the current result\'s _id',
        ),
    'MongoCommandCursor::next' =>
        array (
            'file' => 'mongocommandcursor.next.php',
            'desc' => 'Advances the cursor to the next result',
        ),
    'MongoCommandCursor::rewind' =>
        array (
            'file' => 'mongocommandcursor.rewind.php',
            'desc' => 'Executes the command and resets the cursor to the start of the result set',
        ),
    'MongoCommandCursor::timeout' =>
        array (
            'file' => 'mongocommandcursor.timeout.php',
            'desc' => 'Sets a client-side timeout for this command',
        ),
    'MongoCommandCursor::valid' =>
        array (
            'file' => 'mongocommandcursor.valid.php',
            'desc' => 'Fetches a new result item, and returns whether it could',
        ),
    'MongoCommandCursor::__construct' =>
        array (
            'file' => 'mongocommandcursor.construct.php',
            'desc' => 'Create a new command cursor',
        ),
    'MongoCursor::addOption' =>
        array (
            'file' => 'mongocursor.addoption.php',
            'desc' => 'Adds a top-level key/value pair to a query',
        ),
    'MongoCursor::awaitData' =>
        array (
            'file' => 'mongocursor.awaitdata.php',
            'desc' => 'Sets whether this cursor will wait for a while for a tailable cursor to return more data',
        ),
    'MongoCursor::batchSize' =>
        array (
            'file' => 'mongocursor.batchsize.php',
            'desc' => 'Limits the number of elements returned in one batch.',
        ),
    'MongoCursor::count' =>
        array (
            'file' => 'mongocursor.count.php',
            'desc' => 'Counts the number of results for this query',
        ),
    'MongoCursor::current' =>
        array (
            'file' => 'mongocursor.current.php',
            'desc' => 'Returns the current element',
        ),
    'MongoCursor::dead' =>
        array (
            'file' => 'mongocursor.dead.php',
            'desc' => 'Checks if there are documents that have not been sent yet from the database for this cursor',
        ),
    'MongoCursor::doQuery' =>
        array (
            'file' => 'mongocursor.doquery.php',
            'desc' => 'Execute the query.',
        ),
    'MongoCursor::explain' =>
        array (
            'file' => 'mongocursor.explain.php',
            'desc' => 'Return an explanation of the query, often useful for optimization and debugging',
        ),
    'MongoCursor::fields' =>
        array (
            'file' => 'mongocursor.fields.php',
            'desc' => 'Sets the fields for a query',
        ),
    'MongoCursor::getNext' =>
        array (
            'file' => 'mongocursor.getnext.php',
            'desc' => 'Advances the cursor to the next result, and returns that result',
        ),
    'MongoCursor::getReadPreference' =>
        array (
            'file' => 'mongocursor.getreadpreference.php',
            'desc' => 'Get the read preference for this query',
        ),
    'MongoCursor::hasNext' =>
        array (
            'file' => 'mongocursor.hasnext.php',
            'desc' => 'Checks if there are any more elements in this cursor',
        ),
    'MongoCursor::hint' =>
        array (
            'file' => 'mongocursor.hint.php',
            'desc' => 'Gives the database a hint about the query',
        ),
    'MongoCursor::immortal' =>
        array (
            'file' => 'mongocursor.immortal.php',
            'desc' => 'Sets whether this cursor will timeout',
        ),
    'MongoCursor::info' =>
        array (
            'file' => 'mongocursor.info.php',
            'desc' => 'Gets the query, fields, limit, and skip for this cursor',
        ),
    'MongoCursor::key' =>
        array (
            'file' => 'mongocursor.key.php',
            'desc' => 'Returns the current result\'s _id',
        ),
    'MongoCursor::limit' =>
        array (
            'file' => 'mongocursor.limit.php',
            'desc' => 'Limits the number of results returned',
        ),
    'MongoCursor::maxTimeMS' =>
        array (
            'file' => 'mongocursor.maxtimems.php',
            'desc' => 'Sets a server-side timeout for this query',
        ),
    'MongoCursor::next' =>
        array (
            'file' => 'mongocursor.next.php',
            'desc' => 'Advances the cursor to the next result, and returns that result',
        ),
    'MongoCursor::partial' =>
        array (
            'file' => 'mongocursor.partial.php',
            'desc' => 'If this query should fetch partial results from mongos if a shard is down',
        ),
    'MongoCursor::reset' =>
        array (
            'file' => 'mongocursor.reset.php',
            'desc' => 'Clears the cursor',
        ),
    'MongoCursor::rewind' =>
        array (
            'file' => 'mongocursor.rewind.php',
            'desc' => 'Returns the cursor to the beginning of the result set',
        ),
    'MongoCursor::setFlag' =>
        array (
            'file' => 'mongocursor.setflag.php',
            'desc' => 'Sets arbitrary flags in case there is no method available the specific flag',
        ),
    'MongoCursor::setReadPreference' =>
        array (
            'file' => 'mongocursor.setreadpreference.php',
            'desc' => 'Set the read preference for this query',
        ),
    'MongoCursor::skip' =>
        array (
            'file' => 'mongocursor.skip.php',
            'desc' => 'Skips a number of results',
        ),
    'MongoCursor::slaveOkay' =>
        array (
            'file' => 'mongocursor.slaveokay.php',
            'desc' => 'Sets whether this query can be done on a secondary [deprecated]',
        ),
    'MongoCursor::snapshot' =>
        array (
            'file' => 'mongocursor.snapshot.php',
            'desc' => 'Use snapshot mode for the query',
        ),
    'MongoCursor::sort' =>
        array (
            'file' => 'mongocursor.sort.php',
            'desc' => 'Sorts the results by given fields',
        ),
    'MongoCursor::tailable' =>
        array (
            'file' => 'mongocursor.tailable.php',
            'desc' => 'Sets whether this cursor will be left open after fetching the last results',
        ),
    'MongoCursor::timeout' =>
        array (
            'file' => 'mongocursor.timeout.php',
            'desc' => 'Sets a client-side timeout for this query',
        ),
    'MongoCursor::valid' =>
        array (
            'file' => 'mongocursor.valid.php',
            'desc' => 'Checks if the cursor is reading a valid result.',
        ),
    'MongoCursor::__construct' =>
        array (
            'file' => 'mongocursor.construct.php',
            'desc' => 'Create a new cursor',
        ),
    'MongoCursorException::getHost' =>
        array (
            'file' => 'mongocursorexception.gethost.php',
            'desc' => 'The hostname of the server that encountered the error',
        ),
    'MongoDate::toDateTime' =>
        array (
            'file' => 'mongodate.todatetime.php',
            'desc' => 'Returns a DateTime object representing this date',
        ),
    'MongoDate::__construct' =>
        array (
            'file' => 'mongodate.construct.php',
            'desc' => 'Creates a new date.',
        ),
    'MongoDate::__toString' =>
        array (
            'file' => 'mongodate.tostring.php',
            'desc' => 'Returns a string representation of this date',
        ),
    'MongoDB::authenticate' =>
        array (
            'file' => 'mongodb.authenticate.php',
            'desc' => 'Log in to this database',
        ),
    'MongoDB::command' =>
        array (
            'file' => 'mongodb.command.php',
            'desc' => 'Execute a database command',
        ),
    'MongoDB::createCollection' =>
        array (
            'file' => 'mongodb.createcollection.php',
            'desc' => 'Creates a collection',
        ),
    'MongoDB::createDBRef' =>
        array (
            'file' => 'mongodb.createdbref.php',
            'desc' => 'Creates a database reference',
        ),
    'MongoDB::drop' =>
        array (
            'file' => 'mongodb.drop.php',
            'desc' => 'Drops this database',
        ),
    'MongoDB::dropCollection' =>
        array (
            'file' => 'mongodb.dropcollection.php',
            'desc' => 'Drops a collection [deprecated]',
        ),
    'MongoDB::execute' =>
        array (
            'file' => 'mongodb.execute.php',
            'desc' => 'Runs JavaScript code on the database server.',
        ),
    'MongoDB::forceError' =>
        array (
            'file' => 'mongodb.forceerror.php',
            'desc' => 'Creates a database error',
        ),
    'MongoDB::getCollectionInfo' =>
        array (
            'file' => 'mongodb.getcollectioninfo.php',
            'desc' => 'Returns information about indexes on this collection',
        ),
    'MongoDB::getCollectionNames' =>
        array (
            'file' => 'mongodb.getcollectionnames.php',
            'desc' => 'Get all collections from this database',
        ),
    'MongoDB::getDBRef' =>
        array (
            'file' => 'mongodb.getdbref.php',
            'desc' => 'Fetches the document pointed to by a database reference',
        ),
    'MongoDB::getGridFS' =>
        array (
            'file' => 'mongodb.getgridfs.php',
            'desc' => 'Fetches toolkit for dealing with files stored in this database',
        ),
    'MongoDB::getProfilingLevel' =>
        array (
            'file' => 'mongodb.getprofilinglevel.php',
            'desc' => 'Gets this database\'s profiling level',
        ),
    'MongoDB::getReadPreference' =>
        array (
            'file' => 'mongodb.getreadpreference.php',
            'desc' => 'Get the read preference for this database',
        ),
    'MongoDB::getSlaveOkay' =>
        array (
            'file' => 'mongodb.getslaveokay.php',
            'desc' => 'Get slaveOkay setting for this database',
        ),
    'MongoDB::getWriteConcern' =>
        array (
            'file' => 'mongodb.getwriteconcern.php',
            'desc' => 'Get the write concern for this database',
        ),
    'MongoDB::lastError' =>
        array (
            'file' => 'mongodb.lasterror.php',
            'desc' => 'Check if there was an error on the most recent db operation performed',
        ),
    'MongoDB::listCollections' =>
        array (
            'file' => 'mongodb.listcollections.php',
            'desc' => 'Gets an array of all MongoCollections for this database',
        ),
    'MongoDB::prevError' =>
        array (
            'file' => 'mongodb.preverror.php',
            'desc' => 'Checks for the last error thrown during a database operation',
        ),
    'MongoDB::repair' =>
        array (
            'file' => 'mongodb.repair.php',
            'desc' => 'Repairs and compacts this database',
        ),
    'MongoDB::resetError' =>
        array (
            'file' => 'mongodb.reseterror.php',
            'desc' => 'Clears any flagged errors on the database',
        ),
    'MongoDB::selectCollection' =>
        array (
            'file' => 'mongodb.selectcollection.php',
            'desc' => 'Gets a collection',
        ),
    'MongoDB::setProfilingLevel' =>
        array (
            'file' => 'mongodb.setprofilinglevel.php',
            'desc' => 'Sets this database\'s profiling level',
        ),
    'MongoDB::setReadPreference' =>
        array (
            'file' => 'mongodb.setreadpreference.php',
            'desc' => 'Set the read preference for this database',
        ),
    'MongoDB::setSlaveOkay' =>
        array (
            'file' => 'mongodb.setslaveokay.php',
            'desc' => 'Change slaveOkay setting for this database',
        ),
    'MongoDB::setWriteConcern' =>
        array (
            'file' => 'mongodb.setwriteconcern.php',
            'desc' => 'Set the write concern for this database',
        ),
    'MongoDB::__construct' =>
        array (
            'file' => 'mongodb.construct.php',
            'desc' => 'Creates a new database',
        ),
    'MongoDB::__get' =>
        array (
            'file' => 'mongodb.get.php',
            'desc' => 'Gets a collection',
        ),
    'MongoDB::__toString' =>
        array (
            'file' => 'mongodb.--tostring.php',
            'desc' => 'The name of this database',
        ),
    'MongoDB context options' =>
        array (
            'file' => 'context.mongodb.php',
            'desc' => 'MongoDB context option listing',
        ),
    'MongoDBRef::create' =>
        array (
            'file' => 'mongodbref.create.php',
            'desc' => 'Creates a new database reference',
        ),
    'MongoDBRef::get' =>
        array (
            'file' => 'mongodbref.get.php',
            'desc' => 'Fetches the object pointed to by a reference',
        ),
    'MongoDBRef::isRef' =>
        array (
            'file' => 'mongodbref.isref.php',
            'desc' => 'Checks if an array is a database reference',
        ),
    'MongoDeleteBatch::__construct' =>
        array (
            'file' => 'mongodeletebatch.construct.php',
        ),
    'MongoGridFS::delete' =>
        array (
            'file' => 'mongogridfs.delete.php',
            'desc' => 'Remove a file and its chunks from the database',
        ),
    'MongoGridFS::drop' =>
        array (
            'file' => 'mongogridfs.drop.php',
            'desc' => 'Drops the files and chunks collections',
        ),
    'MongoGridFS::find' =>
        array (
            'file' => 'mongogridfs.find.php',
            'desc' => 'Queries for files',
        ),
    'MongoGridFS::findOne' =>
        array (
            'file' => 'mongogridfs.findone.php',
            'desc' => 'Returns a single file matching the criteria',
        ),
    'MongoGridFS::get' =>
        array (
            'file' => 'mongogridfs.get.php',
            'desc' => 'Retrieve a file from the database',
        ),
    'MongoGridFS::put' =>
        array (
            'file' => 'mongogridfs.put.php',
            'desc' => 'Stores a file in the database',
        ),
    'MongoGridFS::remove' =>
        array (
            'file' => 'mongogridfs.remove.php',
            'desc' => 'Remove files and their chunks from the database',
        ),
    'MongoGridFS::storeBytes' =>
        array (
            'file' => 'mongogridfs.storebytes.php',
            'desc' => 'Stores a string of bytes in the database',
        ),
    'MongoGridFS::storeFile' =>
        array (
            'file' => 'mongogridfs.storefile.php',
            'desc' => 'Stores a file in the database',
        ),
    'MongoGridFS::storeUpload' =>
        array (
            'file' => 'mongogridfs.storeupload.php',
            'desc' => 'Stores an uploaded file in the database',
        ),
    'MongoGridFS::__construct' =>
        array (
            'file' => 'mongogridfs.construct.php',
            'desc' => 'Creates new file collections',
        ),
    'MongoGridFSCursor::current' =>
        array (
            'file' => 'mongogridfscursor.current.php',
            'desc' => 'Returns the current file',
        ),
    'MongoGridFSCursor::getNext' =>
        array (
            'file' => 'mongogridfscursor.getnext.php',
            'desc' => 'Return the next file to which this cursor points, and advance the cursor',
        ),
    'MongoGridFSCursor::key' =>
        array (
            'file' => 'mongogridfscursor.key.php',
            'desc' => 'Returns the current result\'s filename',
        ),
    'MongoGridFSCursor::__construct' =>
        array (
            'file' => 'mongogridfscursor.construct.php',
            'desc' => 'Create a new cursor',
        ),
    'MongoGridFSFile::getBytes' =>
        array (
            'file' => 'mongogridfsfile.getbytes.php',
            'desc' => 'Returns this file\'s contents as a string of bytes',
        ),
    'MongoGridFSFile::getFilename' =>
        array (
            'file' => 'mongogridfsfile.getfilename.php',
            'desc' => 'Returns this file\'s filename',
        ),
    'MongoGridFSFile::getResource' =>
        array (
            'file' => 'mongogridfsfile.getresource.php',
            'desc' => 'Returns a resource that can be used to read the stored file',
        ),
    'MongoGridFSFile::getSize' =>
        array (
            'file' => 'mongogridfsfile.getsize.php',
            'desc' => 'Returns this file\'s size',
        ),
    'MongoGridFSFile::write' =>
        array (
            'file' => 'mongogridfsfile.write.php',
            'desc' => 'Writes this file to the filesystem',
        ),
    'MongoGridfsFile::__construct' =>
        array (
            'file' => 'mongogridfsfile.construct.php',
            'desc' => 'Create a new GridFS file',
        ),
    'MongoId::getHostname' =>
        array (
            'file' => 'mongoid.gethostname.php',
            'desc' => 'Gets the hostname being used for this machine\'s ids',
        ),
    'MongoId::getInc' =>
        array (
            'file' => 'mongoid.getinc.php',
            'desc' => 'Gets the incremented value to create this id',
        ),
    'MongoId::getPID' =>
        array (
            'file' => 'mongoid.getpid.php',
            'desc' => 'Gets the process ID',
        ),
    'MongoId::getTimestamp' =>
        array (
            'file' => 'mongoid.gettimestamp.php',
            'desc' => 'Gets the number of seconds since the epoch that this id was created',
        ),
    'MongoId::isValid' =>
        array (
            'file' => 'mongoid.isvalid.php',
            'desc' => 'Check if a value is a valid ObjectId',
        ),
    'MongoId::__construct' =>
        array (
            'file' => 'mongoid.construct.php',
            'desc' => 'Creates a new id',
        ),
    'MongoId::__set_state' =>
        array (
            'file' => 'mongoid.set-state.php',
            'desc' => 'Create a dummy MongoId',
        ),
    'MongoId::__toString' =>
        array (
            'file' => 'mongoid.tostring.php',
            'desc' => 'Returns a hexidecimal representation of this id',
        ),
    'MongoInsertBatch::__construct' =>
        array (
            'file' => 'mongoinsertbatch.construct.php',
        ),
    'MongoInt32::__construct' =>
        array (
            'file' => 'mongoint32.construct.php',
            'desc' => 'Creates a new 32-bit integer.',
        ),
    'MongoInt32::__toString' =>
        array (
            'file' => 'mongoint32.tostring.php',
            'desc' => 'Returns the string representation of this 32-bit integer.',
        ),
    'MongoInt64::__construct' =>
        array (
            'file' => 'mongoint64.construct.php',
            'desc' => 'Creates a new 64-bit integer.',
        ),
    'MongoInt64::__toString' =>
        array (
            'file' => 'mongoint64.tostring.php',
            'desc' => 'Returns the string representation of this 64-bit integer.',
        ),
    'MongoLog::getCallback' =>
        array (
            'file' => 'mongolog.getcallback.php',
            'desc' => 'Gets the previously set callback function',
        ),
    'MongoLog::getLevel' =>
        array (
            'file' => 'mongolog.getlevel.php',
            'desc' => 'Gets the level(s) currently being logged',
        ),
    'MongoLog::getModule' =>
        array (
            'file' => 'mongolog.getmodule.php',
            'desc' => 'Gets the module(s) currently being logged',
        ),
    'MongoLog::setCallback' =>
        array (
            'file' => 'mongolog.setcallback.php',
            'desc' => 'Sets a callback function to be invoked for events',
        ),
    'MongoLog::setLevel' =>
        array (
            'file' => 'mongolog.setlevel.php',
            'desc' => 'Sets the level(s) to be logged',
        ),
    'MongoLog::setModule' =>
        array (
            'file' => 'mongolog.setmodule.php',
            'desc' => 'Sets the module(s) to be logged',
        ),
    'MongoPool::getSize' =>
        array (
            'file' => 'mongopool.getsize.php',
            'desc' => 'Get pool size for connection pools',
        ),
    'MongoPool::info' =>
        array (
            'file' => 'mongopool.info.php',
            'desc' => 'Returns information about all connection pools.',
        ),
    'MongoPool::setSize' =>
        array (
            'file' => 'mongopool.setsize.php',
            'desc' => 'Set the size for future connection pools.',
        ),
    'MongoRegex::__construct' =>
        array (
            'file' => 'mongoregex.construct.php',
            'desc' => 'Creates a new regular expression',
        ),
    'MongoRegex::__toString' =>
        array (
            'file' => 'mongoregex.tostring.php',
            'desc' => 'A string representation of this regular expression',
        ),
    'MongoResultException::getDocument' =>
        array (
            'file' => 'mongoresultexception.getdocument.php',
            'desc' => 'Retrieve the full result document',
        ),
    'MongoTimestamp::__construct' =>
        array (
            'file' => 'mongotimestamp.construct.php',
            'desc' => 'Creates a new timestamp.',
        ),
    'MongoTimestamp::__toString' =>
        array (
            'file' => 'mongotimestamp.tostring.php',
            'desc' => 'Returns a string representation of this timestamp',
        ),
    'MongoUpdateBatch::__construct' =>
        array (
            'file' => 'mongoupdatebatch.construct.php',
        ),
    'MongoWriteBatch::add' =>
        array (
            'file' => 'mongowritebatch.add.php',
            'desc' => 'Adds a write operation to a batch',
        ),
    'MongoWriteBatch::execute' =>
        array (
            'file' => 'mongowritebatch.execute.php',
            'desc' => 'Executes a batch of write operations',
        ),
    'MongoWriteBatch::__construct' =>
        array (
            'file' => 'mongowritebatch.construct.php',
            'desc' => 'Creates a new batch of write operations',
        ),
    'MongoWriteConcernException::getDocument' =>
        array (
            'file' => 'mongowriteconcernexception.getdocument.php',
            'desc' => 'Get the error document',
        ),
    'move_uploaded_file' =>
        array (
            'file' => 'function.move-uploaded-file.php',
            'desc' => 'Moves an uploaded file to a new location',
        ),
    'mqseries_back' =>
        array (
            'file' => 'function.mqseries-back.php',
            'desc' => 'MQSeries MQBACK',
        ),
    'mqseries_begin' =>
        array (
            'file' => 'function.mqseries-begin.php',
            'desc' => 'MQseries MQBEGIN',
        ),
    'mqseries_close' =>
        array (
            'file' => 'function.mqseries-close.php',
            'desc' => 'MQSeries MQCLOSE',
        ),
    'mqseries_cmit' =>
        array (
            'file' => 'function.mqseries-cmit.php',
            'desc' => 'MQSeries MQCMIT',
        ),
    'mqseries_conn' =>
        array (
            'file' => 'function.mqseries-conn.php',
            'desc' => 'MQSeries MQCONN',
        ),
    'mqseries_connx' =>
        array (
            'file' => 'function.mqseries-connx.php',
            'desc' => 'MQSeries MQCONNX',
        ),
    'mqseries_disc' =>
        array (
            'file' => 'function.mqseries-disc.php',
            'desc' => 'MQSeries MQDISC',
        ),
    'mqseries_get' =>
        array (
            'file' => 'function.mqseries-get.php',
            'desc' => 'MQSeries MQGET',
        ),
    'mqseries_inq' =>
        array (
            'file' => 'function.mqseries-inq.php',
            'desc' => 'MQSeries MQINQ',
        ),
    'mqseries_open' =>
        array (
            'file' => 'function.mqseries-open.php',
            'desc' => 'MQSeries MQOPEN',
        ),
    'mqseries_put' =>
        array (
            'file' => 'function.mqseries-put.php',
            'desc' => 'MQSeries MQPUT',
        ),
    'mqseries_put1' =>
        array (
            'file' => 'function.mqseries-put1.php',
            'desc' => 'MQSeries MQPUT1',
        ),
    'mqseries_set' =>
        array (
            'file' => 'function.mqseries-set.php',
            'desc' => 'MQSeries MQSET',
        ),
    'mqseries_strerror' =>
        array (
            'file' => 'function.mqseries-strerror.php',
            'desc' => 'Returns the error message corresponding to a result code (MQRC).',
        ),
    'msession_connect' =>
        array (
            'file' => 'function.msession-connect.php',
            'desc' => 'Connect to msession server',
        ),
    'msession_count' =>
        array (
            'file' => 'function.msession-count.php',
            'desc' => 'Get session count',
        ),
    'msession_create' =>
        array (
            'file' => 'function.msession-create.php',
            'desc' => 'Create a session',
        ),
    'msession_destroy' =>
        array (
            'file' => 'function.msession-destroy.php',
            'desc' => 'Destroy a session',
        ),
    'msession_disconnect' =>
        array (
            'file' => 'function.msession-disconnect.php',
            'desc' => 'Close connection to msession server',
        ),
    'msession_find' =>
        array (
            'file' => 'function.msession-find.php',
            'desc' => 'Find all sessions with name and value',
        ),
    'msession_get' =>
        array (
            'file' => 'function.msession-get.php',
            'desc' => 'Get value from session',
        ),
    'msession_get_array' =>
        array (
            'file' => 'function.msession-get-array.php',
            'desc' => 'Get array of msession variables',
        ),
    'msession_get_data' =>
        array (
            'file' => 'function.msession-get-data.php',
            'desc' => 'Get data session unstructured data',
        ),
    'msession_inc' =>
        array (
            'file' => 'function.msession-inc.php',
            'desc' => 'Increment value in session',
        ),
    'msession_list' =>
        array (
            'file' => 'function.msession-list.php',
            'desc' => 'List all sessions',
        ),
    'msession_listvar' =>
        array (
            'file' => 'function.msession-listvar.php',
            'desc' => 'List sessions with variable',
        ),
    'msession_lock' =>
        array (
            'file' => 'function.msession-lock.php',
            'desc' => 'Lock a session',
        ),
    'msession_plugin' =>
        array (
            'file' => 'function.msession-plugin.php',
            'desc' => 'Call an escape function within the msession personality plugin',
        ),
    'msession_randstr' =>
        array (
            'file' => 'function.msession-randstr.php',
            'desc' => 'Get random string',
        ),
    'msession_set' =>
        array (
            'file' => 'function.msession-set.php',
            'desc' => 'Set value in session',
        ),
    'msession_set_array' =>
        array (
            'file' => 'function.msession-set-array.php',
            'desc' => 'Set msession variables from an array',
        ),
    'msession_set_data' =>
        array (
            'file' => 'function.msession-set-data.php',
            'desc' => 'Set data session unstructured data',
        ),
    'msession_timeout' =>
        array (
            'file' => 'function.msession-timeout.php',
            'desc' => 'Set/get session timeout',
        ),
    'msession_uniq' =>
        array (
            'file' => 'function.msession-uniq.php',
            'desc' => 'Get unique id',
        ),
    'msession_unlock' =>
        array (
            'file' => 'function.msession-unlock.php',
            'desc' => 'Unlock a session',
        ),
    'msg_get_queue' =>
        array (
            'file' => 'function.msg-get-queue.php',
            'desc' => 'Create or attach to a message queue',
        ),
    'msg_queue_exists' =>
        array (
            'file' => 'function.msg-queue-exists.php',
            'desc' => 'Check whether a message queue exists',
        ),
    'msg_receive' =>
        array (
            'file' => 'function.msg-receive.php',
            'desc' => 'Receive a message from a message queue',
        ),
    'msg_remove_queue' =>
        array (
            'file' => 'function.msg-remove-queue.php',
            'desc' => 'Destroy a message queue',
        ),
    'msg_send' =>
        array (
            'file' => 'function.msg-send.php',
            'desc' => 'Send a message to a message queue',
        ),
    'msg_set_queue' =>
        array (
            'file' => 'function.msg-set-queue.php',
            'desc' => 'Set information in the message queue data structure',
        ),
    'msg_stat_queue' =>
        array (
            'file' => 'function.msg-stat-queue.php',
            'desc' => 'Returns information from the message queue data structure',
        ),
    'msql' =>
        array (
            'file' => 'function.msql.php',
            'desc' => 'Alias of msql_db_query',
        ),
    'msql_affected_rows' =>
        array (
            'file' => 'function.msql-affected-rows.php',
            'desc' => 'Returns number of affected rows',
        ),
    'msql_close' =>
        array (
            'file' => 'function.msql-close.php',
            'desc' => 'Close mSQL connection',
        ),
    'msql_connect' =>
        array (
            'file' => 'function.msql-connect.php',
            'desc' => 'Open mSQL connection',
        ),
    'msql_createdb' =>
        array (
            'file' => 'function.msql-createdb.php',
            'desc' => 'Alias of msql_create_db',
        ),
    'msql_create_db' =>
        array (
            'file' => 'function.msql-create-db.php',
            'desc' => 'Create mSQL database',
        ),
    'msql_data_seek' =>
        array (
            'file' => 'function.msql-data-seek.php',
            'desc' => 'Move internal row pointer',
        ),
    'msql_dbname' =>
        array (
            'file' => 'function.msql-dbname.php',
            'desc' => 'Alias of msql_result',
        ),
    'msql_db_query' =>
        array (
            'file' => 'function.msql-db-query.php',
            'desc' => 'Send mSQL query',
        ),
    'msql_drop_db' =>
        array (
            'file' => 'function.msql-drop-db.php',
            'desc' => 'Drop (delete) mSQL database',
        ),
    'msql_error' =>
        array (
            'file' => 'function.msql-error.php',
            'desc' => 'Returns error message of last msql call',
        ),
    'msql_fetch_array' =>
        array (
            'file' => 'function.msql-fetch-array.php',
            'desc' => 'Fetch row as array',
        ),
    'msql_fetch_field' =>
        array (
            'file' => 'function.msql-fetch-field.php',
            'desc' => 'Get field information',
        ),
    'msql_fetch_object' =>
        array (
            'file' => 'function.msql-fetch-object.php',
            'desc' => 'Fetch row as object',
        ),
    'msql_fetch_row' =>
        array (
            'file' => 'function.msql-fetch-row.php',
            'desc' => 'Get row as enumerated array',
        ),
    'msql_fieldflags' =>
        array (
            'file' => 'function.msql-fieldflags.php',
            'desc' => 'Alias of msql_field_flags',
        ),
    'msql_fieldlen' =>
        array (
            'file' => 'function.msql-fieldlen.php',
            'desc' => 'Alias of msql_field_len',
        ),
    'msql_fieldname' =>
        array (
            'file' => 'function.msql-fieldname.php',
            'desc' => 'Alias of msql_field_name',
        ),
    'msql_fieldtable' =>
        array (
            'file' => 'function.msql-fieldtable.php',
            'desc' => 'Alias of msql_field_table',
        ),
    'msql_fieldtype' =>
        array (
            'file' => 'function.msql-fieldtype.php',
            'desc' => 'Alias of msql_field_type',
        ),
    'msql_field_flags' =>
        array (
            'file' => 'function.msql-field-flags.php',
            'desc' => 'Get field flags',
        ),
    'msql_field_len' =>
        array (
            'file' => 'function.msql-field-len.php',
            'desc' => 'Get field length',
        ),
    'msql_field_name' =>
        array (
            'file' => 'function.msql-field-name.php',
            'desc' => 'Get the name of the specified field in a result',
        ),
    'msql_field_seek' =>
        array (
            'file' => 'function.msql-field-seek.php',
            'desc' => 'Set field offset',
        ),
    'msql_field_table' =>
        array (
            'file' => 'function.msql-field-table.php',
            'desc' => 'Get table name for field',
        ),
    'msql_field_type' =>
        array (
            'file' => 'function.msql-field-type.php',
            'desc' => 'Get field type',
        ),
    'msql_free_result' =>
        array (
            'file' => 'function.msql-free-result.php',
            'desc' => 'Free result memory',
        ),
    'msql_list_dbs' =>
        array (
            'file' => 'function.msql-list-dbs.php',
            'desc' => 'List mSQL databases on server',
        ),
    'msql_list_fields' =>
        array (
            'file' => 'function.msql-list-fields.php',
            'desc' => 'List result fields',
        ),
    'msql_list_tables' =>
        array (
            'file' => 'function.msql-list-tables.php',
            'desc' => 'List tables in an mSQL database',
        ),
    'msql_numfields' =>
        array (
            'file' => 'function.msql-numfields.php',
            'desc' => 'Alias of msql_num_fields',
        ),
    'msql_numrows' =>
        array (
            'file' => 'function.msql-numrows.php',
            'desc' => 'Alias of msql_num_rows',
        ),
    'msql_num_fields' =>
        array (
            'file' => 'function.msql-num-fields.php',
            'desc' => 'Get number of fields in result',
        ),
    'msql_num_rows' =>
        array (
            'file' => 'function.msql-num-rows.php',
            'desc' => 'Get number of rows in result',
        ),
    'msql_pconnect' =>
        array (
            'file' => 'function.msql-pconnect.php',
            'desc' => 'Open persistent mSQL connection',
        ),
    'msql_query' =>
        array (
            'file' => 'function.msql-query.php',
            'desc' => 'Send mSQL query',
        ),
    'msql_regcase' =>
        array (
            'file' => 'function.msql-regcase.php',
            'desc' => 'Alias of sql_regcase',
        ),
    'msql_result' =>
        array (
            'file' => 'function.msql-result.php',
            'desc' => 'Get result data',
        ),
    'msql_select_db' =>
        array (
            'file' => 'function.msql-select-db.php',
            'desc' => 'Select mSQL database',
        ),
    'msql_tablename' =>
        array (
            'file' => 'function.msql-tablename.php',
            'desc' => 'Alias of msql_result',
        ),
    'mssql_bind' =>
        array (
            'file' => 'function.mssql-bind.php',
            'desc' => 'Adds a parameter to a stored procedure or a remote stored procedure',
        ),
    'mssql_close' =>
        array (
            'file' => 'function.mssql-close.php',
            'desc' => 'Close MS SQL Server connection',
        ),
    'mssql_connect' =>
        array (
            'file' => 'function.mssql-connect.php',
            'desc' => 'Open MS SQL server connection',
        ),
    'mssql_data_seek' =>
        array (
            'file' => 'function.mssql-data-seek.php',
            'desc' => 'Moves internal row pointer',
        ),
    'mssql_execute' =>
        array (
            'file' => 'function.mssql-execute.php',
            'desc' => 'Executes a stored procedure on a MS SQL server database',
        ),
    'mssql_fetch_array' =>
        array (
            'file' => 'function.mssql-fetch-array.php',
            'desc' => 'Fetch a result row as an associative array, a numeric array, or both',
        ),
    'mssql_fetch_assoc' =>
        array (
            'file' => 'function.mssql-fetch-assoc.php',
            'desc' => 'Returns an associative array of the current row in the result',
        ),
    'mssql_fetch_batch' =>
        array (
            'file' => 'function.mssql-fetch-batch.php',
            'desc' => 'Returns the next batch of records',
        ),
    'mssql_fetch_field' =>
        array (
            'file' => 'function.mssql-fetch-field.php',
            'desc' => 'Get field information',
        ),
    'mssql_fetch_object' =>
        array (
            'file' => 'function.mssql-fetch-object.php',
            'desc' => 'Fetch row as object',
        ),
    'mssql_fetch_row' =>
        array (
            'file' => 'function.mssql-fetch-row.php',
            'desc' => 'Get row as enumerated array',
        ),
    'mssql_field_length' =>
        array (
            'file' => 'function.mssql-field-length.php',
            'desc' => 'Get the length of a field',
        ),
    'mssql_field_name' =>
        array (
            'file' => 'function.mssql-field-name.php',
            'desc' => 'Get the name of a field',
        ),
    'mssql_field_seek' =>
        array (
            'file' => 'function.mssql-field-seek.php',
            'desc' => 'Seeks to the specified field offset',
        ),
    'mssql_field_type' =>
        array (
            'file' => 'function.mssql-field-type.php',
            'desc' => 'Gets the type of a field',
        ),
    'mssql_free_result' =>
        array (
            'file' => 'function.mssql-free-result.php',
            'desc' => 'Free result memory',
        ),
    'mssql_free_statement' =>
        array (
            'file' => 'function.mssql-free-statement.php',
            'desc' => 'Free statement memory',
        ),
    'mssql_get_last_message' =>
        array (
            'file' => 'function.mssql-get-last-message.php',
            'desc' => 'Returns the last message from the server',
        ),
    'mssql_guid_string' =>
        array (
            'file' => 'function.mssql-guid-string.php',
            'desc' => 'Converts a 16 byte binary GUID to a string',
        ),
    'mssql_init' =>
        array (
            'file' => 'function.mssql-init.php',
            'desc' => 'Initializes a stored procedure or a remote stored procedure',
        ),
    'mssql_min_error_severity' =>
        array (
            'file' => 'function.mssql-min-error-severity.php',
            'desc' => 'Sets the minimum error severity',
        ),
    'mssql_min_message_severity' =>
        array (
            'file' => 'function.mssql-min-message-severity.php',
            'desc' => 'Sets the minimum message severity',
        ),
    'mssql_next_result' =>
        array (
            'file' => 'function.mssql-next-result.php',
            'desc' => 'Move the internal result pointer to the next result',
        ),
    'mssql_num_fields' =>
        array (
            'file' => 'function.mssql-num-fields.php',
            'desc' => 'Gets the number of fields in result',
        ),
    'mssql_num_rows' =>
        array (
            'file' => 'function.mssql-num-rows.php',
            'desc' => 'Gets the number of rows in result',
        ),
    'mssql_pconnect' =>
        array (
            'file' => 'function.mssql-pconnect.php',
            'desc' => 'Open persistent MS SQL connection',
        ),
    'mssql_query' =>
        array (
            'file' => 'function.mssql-query.php',
            'desc' => 'Send MS SQL query',
        ),
    'mssql_result' =>
        array (
            'file' => 'function.mssql-result.php',
            'desc' => 'Get result data',
        ),
    'mssql_rows_affected' =>
        array (
            'file' => 'function.mssql-rows-affected.php',
            'desc' => 'Returns the number of records affected by the query',
        ),
    'mssql_select_db' =>
        array (
            'file' => 'function.mssql-select-db.php',
            'desc' => 'Select MS SQL database',
        ),
    'mt_getrandmax' =>
        array (
            'file' => 'function.mt-getrandmax.php',
            'desc' => 'Show largest possible random value',
        ),
    'mt_rand' =>
        array (
            'file' => 'function.mt-rand.php',
            'desc' => 'Generate a better random value',
        ),
    'mt_srand' =>
        array (
            'file' => 'function.mt-srand.php',
            'desc' => 'Seed the better random number generator',
        ),
    'MultipleIterator::attachIterator' =>
        array (
            'file' => 'multipleiterator.attachiterator.php',
            'desc' => 'Attaches iterator information',
        ),
    'MultipleIterator::containsIterator' =>
        array (
            'file' => 'multipleiterator.containsiterator.php',
            'desc' => 'Checks if an iterator is attached',
        ),
    'MultipleIterator::countIterators' =>
        array (
            'file' => 'multipleiterator.countiterators.php',
            'desc' => 'Gets the number of attached iterator instances',
        ),
    'MultipleIterator::current' =>
        array (
            'file' => 'multipleiterator.current.php',
            'desc' => 'Gets the registered iterator instances',
        ),
    'MultipleIterator::detachIterator' =>
        array (
            'file' => 'multipleiterator.detachiterator.php',
            'desc' => 'Detaches an iterator',
        ),
    'MultipleIterator::getFlags' =>
        array (
            'file' => 'multipleiterator.getflags.php',
            'desc' => 'Gets the flag information',
        ),
    'MultipleIterator::key' =>
        array (
            'file' => 'multipleiterator.key.php',
            'desc' => 'Gets the registered iterator instances',
        ),
    'MultipleIterator::next' =>
        array (
            'file' => 'multipleiterator.next.php',
            'desc' => 'Moves all attached iterator instances forward',
        ),
    'MultipleIterator::rewind' =>
        array (
            'file' => 'multipleiterator.rewind.php',
            'desc' => 'Rewinds all attached iterator instances',
        ),
    'MultipleIterator::setFlags' =>
        array (
            'file' => 'multipleiterator.setflags.php',
            'desc' => 'Sets flags',
        ),
    'MultipleIterator::valid' =>
        array (
            'file' => 'multipleiterator.valid.php',
            'desc' => 'Checks the validity of sub iterators',
        ),
    'MultipleIterator::__construct' =>
        array (
            'file' => 'multipleiterator.construct.php',
            'desc' => 'Constructs a new MultipleIterator',
        ),
    'Mutex::create' =>
        array (
            'file' => 'mutex.create.php',
            'desc' => 'Create a Mutex',
        ),
    'Mutex::destroy' =>
        array (
            'file' => 'mutex.destroy.php',
            'desc' => 'Destroy Mutex',
        ),
    'Mutex::lock' =>
        array (
            'file' => 'mutex.lock.php',
            'desc' => 'Acquire Mutex',
        ),
    'Mutex::trylock' =>
        array (
            'file' => 'mutex.trylock.php',
            'desc' => 'Attempt to Acquire Mutex',
        ),
    'Mutex::unlock' =>
        array (
            'file' => 'mutex.unlock.php',
            'desc' => 'Release Mutex',
        ),
    'mysqli::$affected_rows' =>
        array (
            'file' => 'mysqli.affected-rows.php',
            'desc' => 'Gets the number of affected rows in a previous MySQL operation',
        ),
    'mysqli::$client_info' =>
        array (
            'file' => 'mysqli.client-info.php',
            'desc' => 'Get MySQL client info',
        ),
    'mysqli::$connect_errno' =>
        array (
            'file' => 'mysqli.connect-errno.php',
            'desc' => 'Returns the error code from last connect call',
        ),
    'mysqli::$connect_error' =>
        array (
            'file' => 'mysqli.connect-error.php',
            'desc' => 'Returns a string description of the last connect error',
        ),
    'mysqli::$errno' =>
        array (
            'file' => 'mysqli.errno.php',
            'desc' => 'Returns the error code for the most recent function call',
        ),
    'mysqli::$error' =>
        array (
            'file' => 'mysqli.error.php',
            'desc' => 'Returns a string description of the last error',
        ),
    'mysqli::$error_list' =>
        array (
            'file' => 'mysqli.error-list.php',
            'desc' => 'Returns a list of errors from the last command executed',
        ),
    'mysqli::$field_count' =>
        array (
            'file' => 'mysqli.field-count.php',
            'desc' => 'Returns the number of columns for the most recent query',
        ),
    'mysqli::$host_info' =>
        array (
            'file' => 'mysqli.get-host-info.php',
            'desc' => 'Returns a string representing the type of connection used',
        ),
    'mysqli::$info' =>
        array (
            'file' => 'mysqli.info.php',
            'desc' => 'Retrieves information about the most recently executed query',
        ),
    'mysqli::$insert_id' =>
        array (
            'file' => 'mysqli.insert-id.php',
            'desc' => 'Returns the auto generated id used in the last query',
        ),
    'mysqli::$protocol_version' =>
        array (
            'file' => 'mysqli.get-proto-info.php',
            'desc' => 'Returns the version of the MySQL protocol used',
        ),
    'mysqli::$server_info' =>
        array (
            'file' => 'mysqli.get-server-info.php',
            'desc' => 'Returns the version of the MySQL server',
        ),
    'mysqli::$server_version' =>
        array (
            'file' => 'mysqli.get-server-version.php',
            'desc' => 'Returns the version of the MySQL server as an integer',
        ),
    'mysqli::$sqlstate' =>
        array (
            'file' => 'mysqli.sqlstate.php',
            'desc' => 'Returns the SQLSTATE error from previous MySQL operation',
        ),
    'mysqli::$thread_id' =>
        array (
            'file' => 'mysqli.thread-id.php',
            'desc' => 'Returns the thread ID for the current connection',
        ),
    'mysqli::$warning_count' =>
        array (
            'file' => 'mysqli.warning-count.php',
            'desc' => 'Returns the number of warnings from the last query for the given link',
        ),
    'mysqli::autocommit' =>
        array (
            'file' => 'mysqli.autocommit.php',
            'desc' => 'Turns on or off auto-committing database modifications',
        ),
    'mysqli::begin_transaction' =>
        array (
            'file' => 'mysqli.begin-transaction.php',
            'desc' => 'Starts a transaction',
        ),
    'mysqli::change_user' =>
        array (
            'file' => 'mysqli.change-user.php',
            'desc' => 'Changes the user of the specified database connection',
        ),
    'mysqli::character_set_name' =>
        array (
            'file' => 'mysqli.character-set-name.php',
            'desc' => 'Returns the default character set for the database connection',
        ),
    'mysqli::close' =>
        array (
            'file' => 'mysqli.close.php',
            'desc' => 'Closes a previously opened database connection',
        ),
    'mysqli::commit' =>
        array (
            'file' => 'mysqli.commit.php',
            'desc' => 'Commits the current transaction',
        ),
    'mysqli::debug' =>
        array (
            'file' => 'mysqli.debug.php',
            'desc' => 'Performs debugging operations',
        ),
    'mysqli::disable_reads_from_master' =>
        array (
            'file' => 'function.mysqli-disable-reads-from-master.php',
            'desc' => 'Disable reads from master',
        ),
    'mysqli::dump_debug_info' =>
        array (
            'file' => 'mysqli.dump-debug-info.php',
            'desc' => 'Dump debugging information into the log',
        ),
    'mysqli::get_charset' =>
        array (
            'file' => 'mysqli.get-charset.php',
            'desc' => 'Returns a character set object',
        ),
    'mysqli::get_client_info' =>
        array (
            'file' => 'mysqli.get-client-info.php',
            'desc' => 'Get MySQL client info',
        ),
    'mysqli::get_connection_stats' =>
        array (
            'file' => 'mysqli.get-connection-stats.php',
            'desc' => 'Returns statistics about the client connection',
        ),
    'mysqli::get_warnings' =>
        array (
            'file' => 'mysqli.get-warnings.php',
            'desc' => 'Get result of SHOW WARNINGS',
        ),
    'mysqli::init' =>
        array (
            'file' => 'mysqli.init.php',
            'desc' => 'Initializes MySQLi and returns a resource for use with mysqli_real_connect()',
        ),
    'mysqli::kill' =>
        array (
            'file' => 'mysqli.kill.php',
            'desc' => 'Asks the server to kill a MySQL thread',
        ),
    'mysqli::more_results' =>
        array (
            'file' => 'mysqli.more-results.php',
            'desc' => 'Check if there are any more query results from a multi query',
        ),
    'mysqli::multi_query' =>
        array (
            'file' => 'mysqli.multi-query.php',
            'desc' => 'Performs a query on the database',
        ),
    'mysqli::next_result' =>
        array (
            'file' => 'mysqli.next-result.php',
            'desc' => 'Prepare next result from multi_query',
        ),
    'mysqli::options' =>
        array (
            'file' => 'mysqli.options.php',
            'desc' => 'Set options',
        ),
    'mysqli::ping' =>
        array (
            'file' => 'mysqli.ping.php',
            'desc' => 'Pings a server connection, or tries to reconnect if the connection has gone down',
        ),
    'mysqli::poll' =>
        array (
            'file' => 'mysqli.poll.php',
            'desc' => 'Poll connections',
        ),
    'mysqli::prepare' =>
        array (
            'file' => 'mysqli.prepare.php',
            'desc' => 'Prepare an SQL statement for execution',
        ),
    'mysqli::query' =>
        array (
            'file' => 'mysqli.query.php',
            'desc' => 'Performs a query on the database',
        ),
    'mysqli::real_connect' =>
        array (
            'file' => 'mysqli.real-connect.php',
            'desc' => 'Opens a connection to a mysql server',
        ),
    'mysqli::real_escape_string' =>
        array (
            'file' => 'mysqli.real-escape-string.php',
            'desc' => 'Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection',
        ),
    'mysqli::real_query' =>
        array (
            'file' => 'mysqli.real-query.php',
            'desc' => 'Execute an SQL query',
        ),
    'mysqli::reap_async_query' =>
        array (
            'file' => 'mysqli.reap-async-query.php',
            'desc' => 'Get result from async query',
        ),
    'mysqli::refresh' =>
        array (
            'file' => 'mysqli.refresh.php',
            'desc' => 'Refreshes',
        ),
    'mysqli::release_savepoint' =>
        array (
            'file' => 'mysqli.release-savepoint.php',
            'desc' => 'Rolls back a transaction to the named savepoint',
        ),
    'mysqli::rollback' =>
        array (
            'file' => 'mysqli.rollback.php',
            'desc' => 'Rolls back current transaction',
        ),
    'mysqli::rpl_query_type' =>
        array (
            'file' => 'mysqli.rpl-query-type.php',
            'desc' => 'Returns RPL query type',
        ),
    'mysqli::savepoint' =>
        array (
            'file' => 'mysqli.savepoint.php',
            'desc' => 'Set a named transaction savepoint',
        ),
    'mysqli::select_db' =>
        array (
            'file' => 'mysqli.select-db.php',
            'desc' => 'Selects the default database for database queries',
        ),
    'mysqli::send_query' =>
        array (
            'file' => 'mysqli.send-query.php',
            'desc' => 'Send the query and return',
        ),
    'mysqli::set_charset' =>
        array (
            'file' => 'mysqli.set-charset.php',
            'desc' => 'Sets the default client character set',
        ),
    'mysqli::set_local_infile_default' =>
        array (
            'file' => 'mysqli.set-local-infile-default.php',
            'desc' => 'Unsets user defined handler for load local infile command',
        ),
    'mysqli::set_local_infile_handler' =>
        array (
            'file' => 'mysqli.set-local-infile-handler.php',
            'desc' => 'Set callback function for LOAD DATA LOCAL INFILE command',
        ),
    'mysqli::set_opt' =>
        array (
            'file' => 'function.mysqli-set-opt.php',
            'desc' => 'Alias of mysqli_options',
        ),
    'mysqli::ssl_set' =>
        array (
            'file' => 'mysqli.ssl-set.php',
            'desc' => 'Used for establishing secure connections using SSL',
        ),
    'mysqli::stat' =>
        array (
            'file' => 'mysqli.stat.php',
            'desc' => 'Gets the current system status',
        ),
    'mysqli::stmt_init' =>
        array (
            'file' => 'mysqli.stmt-init.php',
            'desc' => 'Initializes a statement and returns an object for use with mysqli_stmt_prepare',
        ),
    'mysqli::store_result' =>
        array (
            'file' => 'mysqli.store-result.php',
            'desc' => 'Transfers a result set from the last query',
        ),
    'mysqli::thread_safe' =>
        array (
            'file' => 'mysqli.thread-safe.php',
            'desc' => 'Returns whether thread safety is given or not',
        ),
    'mysqli::use_result' =>
        array (
            'file' => 'mysqli.use-result.php',
            'desc' => 'Initiate a result set retrieval',
        ),
    'mysqli::__construct' =>
        array (
            'file' => 'mysqli.construct.php',
            'desc' => 'Open a new connection to the MySQL server',
        ),
    'mysqli_bind_param' =>
        array (
            'file' => 'function.mysqli-bind-param.php',
            'desc' => 'Alias for mysqli_stmt_bind_param',
        ),
    'mysqli_bind_result' =>
        array (
            'file' => 'function.mysqli-bind-result.php',
            'desc' => 'Alias for mysqli_stmt_bind_result',
        ),
    'mysqli_client_encoding' =>
        array (
            'file' => 'function.mysqli-client-encoding.php',
            'desc' => 'Alias of mysqli_character_set_name',
        ),
    'mysqli_connect' =>
        array (
            'file' => 'function.mysqli-connect.php',
            'desc' => 'Alias of mysqli::__construct',
        ),
    'mysqli_disable_rpl_parse' =>
        array (
            'file' => 'function.mysqli-disable-rpl-parse.php',
            'desc' => 'Disable RPL parse',
        ),
    'mysqli_driver::$report_mode' =>
        array (
            'file' => 'mysqli-driver.report-mode.php',
            'desc' => 'Enables or disables internal report functions',
        ),
    'mysqli_driver::embedded_server_end' =>
        array (
            'file' => 'mysqli-driver.embedded-server-end.php',
            'desc' => 'Stop embedded server',
        ),
    'mysqli_driver::embedded_server_start' =>
        array (
            'file' => 'mysqli-driver.embedded-server-start.php',
            'desc' => 'Initialize and start embedded server',
        ),
    'mysqli_enable_reads_from_master' =>
        array (
            'file' => 'function.mysqli-enable-reads-from-master.php',
            'desc' => 'Enable reads from master',
        ),
    'mysqli_enable_rpl_parse' =>
        array (
            'file' => 'function.mysqli-enable-rpl-parse.php',
            'desc' => 'Enable RPL parse',
        ),
    'mysqli_escape_string' =>
        array (
            'file' => 'function.mysqli-escape-string.php',
            'desc' => 'Alias of mysqli_real_escape_string',
        ),
    'mysqli_execute' =>
        array (
            'file' => 'function.mysqli-execute.php',
            'desc' => 'Alias for mysqli_stmt_execute',
        ),
    'mysqli_fetch' =>
        array (
            'file' => 'function.mysqli-fetch.php',
            'desc' => 'Alias for mysqli_stmt_fetch',
        ),
    'mysqli_get_cache_stats' =>
        array (
            'file' => 'function.mysqli-get-cache-stats.php',
            'desc' => 'Returns client Zval cache statistics',
        ),
    'mysqli_get_client_stats' =>
        array (
            'file' => 'mysqli.get-client-stats.php',
            'desc' => 'Returns client per-process statistics',
        ),
    'mysqli_get_client_version' =>
        array (
            'file' => 'mysqli.get-client-version.php',
            'desc' => 'Returns the MySQL client version as an integer',
        ),
    'mysqli_get_links_stats' =>
        array (
            'file' => 'function.mysqli-get-links-stats.php',
            'desc' => 'Return information about open and cached links',
        ),
    'mysqli_get_metadata' =>
        array (
            'file' => 'function.mysqli-get-metadata.php',
            'desc' => 'Alias for mysqli_stmt_result_metadata',
        ),
    'mysqli_master_query' =>
        array (
            'file' => 'function.mysqli-master-query.php',
            'desc' => 'Enforce execution of a query on the master in a master/slave setup',
        ),
    'mysqli_param_count' =>
        array (
            'file' => 'function.mysqli-param-count.php',
            'desc' => 'Alias for mysqli_stmt_param_count',
        ),
    'mysqli_report' =>
        array (
            'file' => 'function.mysqli-report.php',
            'desc' => 'Alias of mysqli_driver-&gt;report_mode',
        ),
    'mysqli_result::$current_field' =>
        array (
            'file' => 'mysqli-result.current-field.php',
            'desc' => 'Get current field offset of a result pointer',
        ),
    'mysqli_result::$field_count' =>
        array (
            'file' => 'mysqli-result.field-count.php',
            'desc' => 'Get the number of fields in a result',
        ),
    'mysqli_result::$lengths' =>
        array (
            'file' => 'mysqli-result.lengths.php',
            'desc' => 'Returns the lengths of the columns of the current row in the result set',
        ),
    'mysqli_result::$num_rows' =>
        array (
            'file' => 'mysqli-result.num-rows.php',
            'desc' => 'Gets the number of rows in a result',
        ),
    'mysqli_result::data_seek' =>
        array (
            'file' => 'mysqli-result.data-seek.php',
            'desc' => 'Adjusts the result pointer to an arbitrary row in the result',
        ),
    'mysqli_result::fetch_all' =>
        array (
            'file' => 'mysqli-result.fetch-all.php',
            'desc' => 'Fetches all result rows as an associative array, a numeric array, or both',
        ),
    'mysqli_result::fetch_array' =>
        array (
            'file' => 'mysqli-result.fetch-array.php',
            'desc' => 'Fetch a result row as an associative, a numeric array, or both',
        ),
    'mysqli_result::fetch_assoc' =>
        array (
            'file' => 'mysqli-result.fetch-assoc.php',
            'desc' => 'Fetch a result row as an associative array',
        ),
    'mysqli_result::fetch_field' =>
        array (
            'file' => 'mysqli-result.fetch-field.php',
            'desc' => 'Returns the next field in the result set',
        ),
    'mysqli_result::fetch_fields' =>
        array (
            'file' => 'mysqli-result.fetch-fields.php',
            'desc' => 'Returns an array of objects representing the fields in a result set',
        ),
    'mysqli_result::fetch_field_direct' =>
        array (
            'file' => 'mysqli-result.fetch-field-direct.php',
            'desc' => 'Fetch meta-data for a single field',
        ),
    'mysqli_result::fetch_object' =>
        array (
            'file' => 'mysqli-result.fetch-object.php',
            'desc' => 'Returns the current row of a result set as an object',
        ),
    'mysqli_result::fetch_row' =>
        array (
            'file' => 'mysqli-result.fetch-row.php',
            'desc' => 'Get a result row as an enumerated array',
        ),
    'mysqli_result::field_seek' =>
        array (
            'file' => 'mysqli-result.field-seek.php',
            'desc' => 'Set result pointer to a specified field offset',
        ),
    'mysqli_result::free' =>
        array (
            'file' => 'mysqli-result.free.php',
            'desc' => 'Frees the memory associated with a result',
        ),
    'mysqli_rpl_parse_enabled' =>
        array (
            'file' => 'function.mysqli-rpl-parse-enabled.php',
            'desc' => 'Check if RPL parse is enabled',
        ),
    'mysqli_rpl_probe' =>
        array (
            'file' => 'function.mysqli-rpl-probe.php',
            'desc' => 'RPL probe',
        ),
    'mysqli_send_long_data' =>
        array (
            'file' => 'function.mysqli-send-long-data.php',
            'desc' => 'Alias for mysqli_stmt_send_long_data',
        ),
    'mysqli_slave_query' =>
        array (
            'file' => 'function.mysqli-slave-query.php',
            'desc' => 'Force execution of a query on a slave in a master/slave setup',
        ),
    'mysqli_stmt::$affected_rows' =>
        array (
            'file' => 'mysqli-stmt.affected-rows.php',
            'desc' => 'Returns the total number of rows changed, deleted, or
  inserted by the last executed statement',
        ),
    'mysqli_stmt::$errno' =>
        array (
            'file' => 'mysqli-stmt.errno.php',
            'desc' => 'Returns the error code for the most recent statement call',
        ),
    'mysqli_stmt::$error' =>
        array (
            'file' => 'mysqli-stmt.error.php',
            'desc' => 'Returns a string description for last statement error',
        ),
    'mysqli_stmt::$error_list' =>
        array (
            'file' => 'mysqli-stmt.error-list.php',
            'desc' => 'Returns a list of errors from the last statement executed',
        ),
    'mysqli_stmt::$field_count' =>
        array (
            'file' => 'mysqli-stmt.field-count.php',
            'desc' => 'Returns the number of field in the given statement',
        ),
    'mysqli_stmt::$insert_id' =>
        array (
            'file' => 'mysqli-stmt.insert-id.php',
            'desc' => 'Get the ID generated from the previous INSERT operation',
        ),
    'mysqli_stmt::$num_rows' =>
        array (
            'file' => 'mysqli-stmt.num-rows.php',
            'desc' => 'Return the number of rows in statements result set',
        ),
    'mysqli_stmt::$param_count' =>
        array (
            'file' => 'mysqli-stmt.param-count.php',
            'desc' => 'Returns the number of parameter for the given statement',
        ),
    'mysqli_stmt::$sqlstate' =>
        array (
            'file' => 'mysqli-stmt.sqlstate.php',
            'desc' => 'Returns SQLSTATE error from previous statement operation',
        ),
    'mysqli_stmt::attr_get' =>
        array (
            'file' => 'mysqli-stmt.attr-get.php',
            'desc' => 'Used to get the current value of a statement attribute',
        ),
    'mysqli_stmt::attr_set' =>
        array (
            'file' => 'mysqli-stmt.attr-set.php',
            'desc' => 'Used to modify the behavior of a prepared statement',
        ),
    'mysqli_stmt::bind_param' =>
        array (
            'file' => 'mysqli-stmt.bind-param.php',
            'desc' => 'Binds variables to a prepared statement as parameters',
        ),
    'mysqli_stmt::bind_result' =>
        array (
            'file' => 'mysqli-stmt.bind-result.php',
            'desc' => 'Binds variables to a prepared statement for result storage',
        ),
    'mysqli_stmt::close' =>
        array (
            'file' => 'mysqli-stmt.close.php',
            'desc' => 'Closes a prepared statement',
        ),
    'mysqli_stmt::data_seek' =>
        array (
            'file' => 'mysqli-stmt.data-seek.php',
            'desc' => 'Seeks to an arbitrary row in statement result set',
        ),
    'mysqli_stmt::execute' =>
        array (
            'file' => 'mysqli-stmt.execute.php',
            'desc' => 'Executes a prepared Query',
        ),
    'mysqli_stmt::fetch' =>
        array (
            'file' => 'mysqli-stmt.fetch.php',
            'desc' => 'Fetch results from a prepared statement into the bound variables',
        ),
    'mysqli_stmt::free_result' =>
        array (
            'file' => 'mysqli-stmt.free-result.php',
            'desc' => 'Frees stored result memory for the given statement handle',
        ),
    'mysqli_stmt::get_result' =>
        array (
            'file' => 'mysqli-stmt.get-result.php',
            'desc' => 'Gets a result set from a prepared statement',
        ),
    'mysqli_stmt::get_warnings' =>
        array (
            'file' => 'mysqli-stmt.get-warnings.php',
            'desc' => 'Get result of SHOW WARNINGS',
        ),
    'mysqli_stmt::more_results' =>
        array (
            'file' => 'mysqli-stmt.more-results.php',
            'desc' => 'Check if there are more query results from a multiple query',
        ),
    'mysqli_stmt::next_result' =>
        array (
            'file' => 'mysqli-stmt.next-result.php',
            'desc' => 'Reads the next result from a multiple query',
        ),
    'mysqli_stmt::prepare' =>
        array (
            'file' => 'mysqli-stmt.prepare.php',
            'desc' => 'Prepare an SQL statement for execution',
        ),
    'mysqli_stmt::reset' =>
        array (
            'file' => 'mysqli-stmt.reset.php',
            'desc' => 'Resets a prepared statement',
        ),
    'mysqli_stmt::result_metadata' =>
        array (
            'file' => 'mysqli-stmt.result-metadata.php',
            'desc' => 'Returns result set metadata from a prepared statement',
        ),
    'mysqli_stmt::send_long_data' =>
        array (
            'file' => 'mysqli-stmt.send-long-data.php',
            'desc' => 'Send data in blocks',
        ),
    'mysqli_stmt::store_result' =>
        array (
            'file' => 'mysqli-stmt.store-result.php',
            'desc' => 'Transfers a result set from a prepared statement',
        ),
    'mysqli_warning::next' =>
        array (
            'file' => 'mysqli-warning.next.php',
        ),
    'mysqli_warning::__construct' =>
        array (
            'file' => 'mysqli-warning.construct.php',
        ),
    'MysqlndUhConnection::changeUser' =>
        array (
            'file' => 'mysqlnduhconnection.changeuser.php',
            'desc' => 'Changes the user of the specified mysqlnd database connection',
        ),
    'MysqlndUhConnection::charsetName' =>
        array (
            'file' => 'mysqlnduhconnection.charsetname.php',
            'desc' => 'Returns the default character set for the database connection',
        ),
    'MysqlndUhConnection::close' =>
        array (
            'file' => 'mysqlnduhconnection.close.php',
            'desc' => 'Closes a previously opened database connection',
        ),
    'MysqlndUhConnection::connect' =>
        array (
            'file' => 'mysqlnduhconnection.connect.php',
            'desc' => 'Open a new connection to the MySQL server',
        ),
    'MysqlndUhConnection::endPSession' =>
        array (
            'file' => 'mysqlnduhconnection.endpsession.php',
            'desc' => 'End a persistent connection',
        ),
    'MysqlndUhConnection::escapeString' =>
        array (
            'file' => 'mysqlnduhconnection.escapestring.php',
            'desc' => 'Escapes special characters in a string for use in an SQL statement,
   taking into account the current charset of the connection',
        ),
    'MysqlndUhConnection::getAffectedRows' =>
        array (
            'file' => 'mysqlnduhconnection.getaffectedrows.php',
            'desc' => 'Gets the number of affected rows in a previous MySQL operation',
        ),
    'MysqlndUhConnection::getErrorNumber' =>
        array (
            'file' => 'mysqlnduhconnection.geterrornumber.php',
            'desc' => 'Returns the error code for the most recent function call',
        ),
    'MysqlndUhConnection::getErrorString' =>
        array (
            'file' => 'mysqlnduhconnection.geterrorstring.php',
            'desc' => 'Returns a string description of the last error',
        ),
    'MysqlndUhConnection::getFieldCount' =>
        array (
            'file' => 'mysqlnduhconnection.getfieldcount.php',
            'desc' => 'Returns the number of columns for the most recent query',
        ),
    'MysqlndUhConnection::getHostInformation' =>
        array (
            'file' => 'mysqlnduhconnection.gethostinformation.php',
            'desc' => 'Returns a string representing the type of connection used',
        ),
    'MysqlndUhConnection::getLastInsertId' =>
        array (
            'file' => 'mysqlnduhconnection.getlastinsertid.php',
            'desc' => 'Returns the auto generated id used in the last query.',
        ),
    'MysqlndUhConnection::getLastMessage' =>
        array (
            'file' => 'mysqlnduhconnection.getlastmessage.php',
            'desc' => 'Retrieves information about the most recently executed query',
        ),
    'MysqlndUhConnection::getProtocolInformation' =>
        array (
            'file' => 'mysqlnduhconnection.getprotocolinformation.php',
            'desc' => 'Returns the version of the MySQL protocol used',
        ),
    'MysqlndUhConnection::getServerInformation' =>
        array (
            'file' => 'mysqlnduhconnection.getserverinformation.php',
            'desc' => 'Returns the version of the MySQL server',
        ),
    'MysqlndUhConnection::getServerStatistics' =>
        array (
            'file' => 'mysqlnduhconnection.getserverstatistics.php',
            'desc' => 'Gets the current system status',
        ),
    'MysqlndUhConnection::getServerVersion' =>
        array (
            'file' => 'mysqlnduhconnection.getserverversion.php',
            'desc' => 'Returns the version of the MySQL server as an integer',
        ),
    'MysqlndUhConnection::getSqlstate' =>
        array (
            'file' => 'mysqlnduhconnection.getsqlstate.php',
            'desc' => 'Returns the SQLSTATE error from previous MySQL operation',
        ),
    'MysqlndUhConnection::getStatistics' =>
        array (
            'file' => 'mysqlnduhconnection.getstatistics.php',
            'desc' => 'Returns statistics about the client connection.',
        ),
    'MysqlndUhConnection::getThreadId' =>
        array (
            'file' => 'mysqlnduhconnection.getthreadid.php',
            'desc' => 'Returns the thread ID for the current connection',
        ),
    'MysqlndUhConnection::getWarningCount' =>
        array (
            'file' => 'mysqlnduhconnection.getwarningcount.php',
            'desc' => 'Returns the number of warnings from the last query for the given link',
        ),
    'MysqlndUhConnection::init' =>
        array (
            'file' => 'mysqlnduhconnection.init.php',
            'desc' => 'Initialize mysqlnd connection',
        ),
    'MysqlndUhConnection::killConnection' =>
        array (
            'file' => 'mysqlnduhconnection.killconnection.php',
            'desc' => 'Asks the server to kill a MySQL thread',
        ),
    'MysqlndUhConnection::listFields' =>
        array (
            'file' => 'mysqlnduhconnection.listfields.php',
            'desc' => 'List MySQL table fields',
        ),
    'MysqlndUhConnection::listMethod' =>
        array (
            'file' => 'mysqlnduhconnection.listmethod.php',
            'desc' => 'Wrapper for assorted list commands',
        ),
    'MysqlndUhConnection::moreResults' =>
        array (
            'file' => 'mysqlnduhconnection.moreresults.php',
            'desc' => 'Check if there are any more query results from a multi query',
        ),
    'MysqlndUhConnection::nextResult' =>
        array (
            'file' => 'mysqlnduhconnection.nextresult.php',
            'desc' => 'Prepare next result from multi_query',
        ),
    'MysqlndUhConnection::ping' =>
        array (
            'file' => 'mysqlnduhconnection.ping.php',
            'desc' => 'Pings a server connection, or tries to reconnect if the connection has gone down',
        ),
    'MysqlndUhConnection::query' =>
        array (
            'file' => 'mysqlnduhconnection.query.php',
            'desc' => 'Performs a query on the database',
        ),
    'MysqlndUhConnection::queryReadResultsetHeader' =>
        array (
            'file' => 'mysqlnduhconnection.queryreadresultsetheader.php',
            'desc' => 'Read a result set header',
        ),
    'MysqlndUhConnection::reapQuery' =>
        array (
            'file' => 'mysqlnduhconnection.reapquery.php',
            'desc' => 'Get result from async query',
        ),
    'MysqlndUhConnection::refreshServer' =>
        array (
            'file' => 'mysqlnduhconnection.refreshserver.php',
            'desc' => 'Flush or reset tables and caches',
        ),
    'MysqlndUhConnection::restartPSession' =>
        array (
            'file' => 'mysqlnduhconnection.restartpsession.php',
            'desc' => 'Restart a persistent mysqlnd connection',
        ),
    'MysqlndUhConnection::selectDb' =>
        array (
            'file' => 'mysqlnduhconnection.selectdb.php',
            'desc' => 'Selects the default database for database queries',
        ),
    'MysqlndUhConnection::sendClose' =>
        array (
            'file' => 'mysqlnduhconnection.sendclose.php',
            'desc' => 'Sends a close command to MySQL',
        ),
    'MysqlndUhConnection::sendQuery' =>
        array (
            'file' => 'mysqlnduhconnection.sendquery.php',
            'desc' => 'Sends a query to MySQL',
        ),
    'MysqlndUhConnection::serverDumpDebugInformation' =>
        array (
            'file' => 'mysqlnduhconnection.serverdumpdebuginformation.php',
            'desc' => 'Dump debugging information into the log for the MySQL server',
        ),
    'MysqlndUhConnection::setAutocommit' =>
        array (
            'file' => 'mysqlnduhconnection.setautocommit.php',
            'desc' => 'Turns on or off auto-committing database modifications',
        ),
    'MysqlndUhConnection::setCharset' =>
        array (
            'file' => 'mysqlnduhconnection.setcharset.php',
            'desc' => 'Sets the default client character set',
        ),
    'MysqlndUhConnection::setClientOption' =>
        array (
            'file' => 'mysqlnduhconnection.setclientoption.php',
            'desc' => 'Sets a client option',
        ),
    'MysqlndUhConnection::setServerOption' =>
        array (
            'file' => 'mysqlnduhconnection.setserveroption.php',
            'desc' => 'Sets a server option',
        ),
    'MysqlndUhConnection::shutdownServer' =>
        array (
            'file' => 'mysqlnduhconnection.shutdownserver.php',
        ),
    'MysqlndUhConnection::simpleCommand' =>
        array (
            'file' => 'mysqlnduhconnection.simplecommand.php',
            'desc' => 'Sends a basic COM_* command',
        ),
    'MysqlndUhConnection::simpleCommandHandleResponse' =>
        array (
            'file' => 'mysqlnduhconnection.simplecommandhandleresponse.php',
            'desc' => 'Process a response for a basic COM_* command send to the client',
        ),
    'MysqlndUhConnection::sslSet' =>
        array (
            'file' => 'mysqlnduhconnection.sslset.php',
            'desc' => 'Used for establishing secure connections using SSL',
        ),
    'MysqlndUhConnection::stmtInit' =>
        array (
            'file' => 'mysqlnduhconnection.stmtinit.php',
            'desc' => 'Initializes a statement and returns a resource for use with mysqli_statement::prepare',
        ),
    'MysqlndUhConnection::storeResult' =>
        array (
            'file' => 'mysqlnduhconnection.storeresult.php',
            'desc' => 'Transfers a result set from the last query',
        ),
    'MysqlndUhConnection::txCommit' =>
        array (
            'file' => 'mysqlnduhconnection.txcommit.php',
            'desc' => 'Commits the current transaction',
        ),
    'MysqlndUhConnection::txRollback' =>
        array (
            'file' => 'mysqlnduhconnection.txrollback.php',
            'desc' => 'Rolls back current transaction',
        ),
    'MysqlndUhConnection::useResult' =>
        array (
            'file' => 'mysqlnduhconnection.useresult.php',
            'desc' => 'Initiate a result set retrieval',
        ),
    'MysqlndUhConnection::__construct' =>
        array (
            'file' => 'mysqlnduhconnection.construct.php',
        ),
    'MysqlndUhPreparedStatement::execute' =>
        array (
            'file' => 'mysqlnduhpreparedstatement.execute.php',
            'desc' => 'Executes a prepared Query',
        ),
    'MysqlndUhPreparedStatement::prepare' =>
        array (
            'file' => 'mysqlnduhpreparedstatement.prepare.php',
            'desc' => 'Prepare an SQL statement for execution',
        ),
    'MysqlndUhPreparedStatement::__construct' =>
        array (
            'file' => 'mysqlnduhpreparedstatement.construct.php',
        ),
    'mysqlnd_memcache_get_config' =>
        array (
            'file' => 'function.mysqlnd-memcache-get-config.php',
            'desc' => 'Returns information about the plugin configuration',
        ),
    'mysqlnd_memcache_set' =>
        array (
            'file' => 'function.mysqlnd-memcache-set.php',
            'desc' => 'Associate a MySQL connection with a Memcache connection',
        ),
    'mysqlnd_ms_dump_servers' =>
        array (
            'file' => 'function.mysqlnd-ms-dump-servers.php',
            'desc' => 'Returns a list of currently configured servers',
        ),
    'mysqlnd_ms_fabric_select_global' =>
        array (
            'file' => 'function.mysqlnd-ms-fabric-select-global.php',
            'desc' => 'Switch to global sharding server for a given table',
        ),
    'mysqlnd_ms_fabric_select_shard' =>
        array (
            'file' => 'function.mysqlnd-ms-fabric-select-shard.php',
            'desc' => 'Switch to shard',
        ),
    'mysqlnd_ms_get_last_gtid' =>
        array (
            'file' => 'function.mysqlnd-ms-get-last-gtid.php',
            'desc' => 'Returns the latest global transaction ID',
        ),
    'mysqlnd_ms_get_last_used_connection' =>
        array (
            'file' => 'function.mysqlnd-ms-get-last-used-connection.php',
            'desc' => 'Returns an array which describes the last used connection',
        ),
    'mysqlnd_ms_get_stats' =>
        array (
            'file' => 'function.mysqlnd-ms-get-stats.php',
            'desc' => 'Returns query distribution and connection statistics',
        ),
    'mysqlnd_ms_match_wild' =>
        array (
            'file' => 'function.mysqlnd-ms-match-wild.php',
            'desc' => 'Finds whether a table name matches a wildcard pattern or not',
        ),
    'mysqlnd_ms_query_is_select' =>
        array (
            'file' => 'function.mysqlnd-ms-query-is-select.php',
            'desc' => 'Find whether to send the query to the master, the slave or the last used MySQL server',
        ),
    'mysqlnd_ms_set_qos' =>
        array (
            'file' => 'function.mysqlnd-ms-set-qos.php',
            'desc' => 'Sets the quality of service needed from the cluster',
        ),
    'mysqlnd_ms_set_user_pick_server' =>
        array (
            'file' => 'function.mysqlnd-ms-set-user-pick-server.php',
            'desc' => 'Sets a callback for user-defined read/write splitting',
        ),
    'mysqlnd_ms_xa_begin' =>
        array (
            'file' => 'function.mysqlnd-ms-xa-begin.php',
            'desc' => 'Starts a distributed/XA transaction among MySQL servers',
        ),
    'mysqlnd_ms_xa_commit' =>
        array (
            'file' => 'function.mysqlnd-ms-xa-commit.php',
            'desc' => 'Commits a distributed/XA transaction among MySQL servers',
        ),
    'mysqlnd_ms_xa_gc' =>
        array (
            'file' => 'function.mysqlnd-ms-xa-gc.php',
            'desc' => 'Garbage collects unfinished XA transactions after severe errors',
        ),
    'mysqlnd_ms_xa_rollback' =>
        array (
            'file' => 'function.mysqlnd-ms-xa-rollback.php',
            'desc' => 'Rolls back a distributed/XA transaction among MySQL servers',
        ),
    'mysqlnd_qc_clear_cache' =>
        array (
            'file' => 'function.mysqlnd-qc-clear-cache.php',
            'desc' => 'Flush all cache contents',
        ),
    'mysqlnd_qc_get_available_handlers' =>
        array (
            'file' => 'function.mysqlnd-qc-get-available-handlers.php',
            'desc' => 'Returns a list of available storage handler',
        ),
    'mysqlnd_qc_get_cache_info' =>
        array (
            'file' => 'function.mysqlnd-qc-get-cache-info.php',
            'desc' => 'Returns information on the current handler, the number of cache entries and cache entries, if available',
        ),
    'mysqlnd_qc_get_core_stats' =>
        array (
            'file' => 'function.mysqlnd-qc-get-core-stats.php',
            'desc' => 'Statistics collected by the core of the query cache',
        ),
    'mysqlnd_qc_get_normalized_query_trace_log' =>
        array (
            'file' => 'function.mysqlnd-qc-get-normalized-query-trace-log.php',
            'desc' => 'Returns a normalized query trace log for each query inspected by the query cache',
        ),
    'mysqlnd_qc_get_query_trace_log' =>
        array (
            'file' => 'function.mysqlnd-qc-get-query-trace-log.php',
            'desc' => 'Returns a backtrace for each query inspected by the query cache',
        ),
    'mysqlnd_qc_set_cache_condition' =>
        array (
            'file' => 'function.mysqlnd-qc-set-cache-condition.php',
            'desc' => 'Set conditions for automatic caching',
        ),
    'mysqlnd_qc_set_is_select' =>
        array (
            'file' => 'function.mysqlnd-qc-set-is-select.php',
            'desc' => 'Installs a callback which decides whether a statement is cached',
        ),
    'mysqlnd_qc_set_storage_handler' =>
        array (
            'file' => 'function.mysqlnd-qc-set-storage-handler.php',
            'desc' => 'Change current storage handler',
        ),
    'mysqlnd_qc_set_user_handlers' =>
        array (
            'file' => 'function.mysqlnd-qc-set-user-handlers.php',
            'desc' => 'Sets the callback functions for a user-defined procedural storage handler',
        ),
    'mysqlnd_uh_convert_to_mysqlnd' =>
        array (
            'file' => 'function.mysqlnd-uh-convert-to-mysqlnd.php',
            'desc' => 'Converts a MySQL connection handle into a mysqlnd connection handle',
        ),
    'mysqlnd_uh_set_connection_proxy' =>
        array (
            'file' => 'function.mysqlnd-uh-set-connection-proxy.php',
            'desc' => 'Installs a proxy for mysqlnd connections',
        ),
    'mysqlnd_uh_set_statement_proxy' =>
        array (
            'file' => 'function.mysqlnd-uh-set-statement-proxy.php',
            'desc' => 'Installs a proxy for mysqlnd statements',
        ),
    'mysql_affected_rows' =>
        array (
            'file' => 'function.mysql-affected-rows.php',
            'desc' => 'Get number of affected rows in previous MySQL operation',
        ),
    'mysql_client_encoding' =>
        array (
            'file' => 'function.mysql-client-encoding.php',
            'desc' => 'Returns the name of the character set',
        ),
    'mysql_close' =>
        array (
            'file' => 'function.mysql-close.php',
            'desc' => 'Close MySQL connection',
        ),
    'mysql_connect' =>
        array (
            'file' => 'function.mysql-connect.php',
            'desc' => 'Open a connection to a MySQL Server',
        ),
    'mysql_create_db' =>
        array (
            'file' => 'function.mysql-create-db.php',
            'desc' => 'Create a MySQL database',
        ),
    'mysql_data_seek' =>
        array (
            'file' => 'function.mysql-data-seek.php',
            'desc' => 'Move internal result pointer',
        ),
    'mysql_db_name' =>
        array (
            'file' => 'function.mysql-db-name.php',
            'desc' => 'Retrieves database name from the call to mysql_list_dbs',
        ),
    'mysql_db_query' =>
        array (
            'file' => 'function.mysql-db-query.php',
            'desc' => 'Selects a database and executes a query on it',
        ),
    'mysql_drop_db' =>
        array (
            'file' => 'function.mysql-drop-db.php',
            'desc' => 'Drop (delete) a MySQL database',
        ),
    'mysql_errno' =>
        array (
            'file' => 'function.mysql-errno.php',
            'desc' => 'Returns the numerical value of the error message from previous MySQL operation',
        ),
    'mysql_error' =>
        array (
            'file' => 'function.mysql-error.php',
            'desc' => 'Returns the text of the error message from previous MySQL operation',
        ),
    'mysql_escape_string' =>
        array (
            'file' => 'function.mysql-escape-string.php',
            'desc' => 'Escapes a string for use in a mysql_query',
        ),
    'mysql_fetch_array' =>
        array (
            'file' => 'function.mysql-fetch-array.php',
            'desc' => 'Fetch a result row as an associative array, a numeric array, or both',
        ),
    'mysql_fetch_assoc' =>
        array (
            'file' => 'function.mysql-fetch-assoc.php',
            'desc' => 'Fetch a result row as an associative array',
        ),
    'mysql_fetch_field' =>
        array (
            'file' => 'function.mysql-fetch-field.php',
            'desc' => 'Get column information from a result and return as an object',
        ),
    'mysql_fetch_lengths' =>
        array (
            'file' => 'function.mysql-fetch-lengths.php',
            'desc' => 'Get the length of each output in a result',
        ),
    'mysql_fetch_object' =>
        array (
            'file' => 'function.mysql-fetch-object.php',
            'desc' => 'Fetch a result row as an object',
        ),
    'mysql_fetch_row' =>
        array (
            'file' => 'function.mysql-fetch-row.php',
            'desc' => 'Get a result row as an enumerated array',
        ),
    'mysql_field_flags' =>
        array (
            'file' => 'function.mysql-field-flags.php',
            'desc' => 'Get the flags associated with the specified field in a result',
        ),
    'mysql_field_len' =>
        array (
            'file' => 'function.mysql-field-len.php',
            'desc' => 'Returns the length of the specified field',
        ),
    'mysql_field_name' =>
        array (
            'file' => 'function.mysql-field-name.php',
            'desc' => 'Get the name of the specified field in a result',
        ),
    'mysql_field_seek' =>
        array (
            'file' => 'function.mysql-field-seek.php',
            'desc' => 'Set result pointer to a specified field offset',
        ),
    'mysql_field_table' =>
        array (
            'file' => 'function.mysql-field-table.php',
            'desc' => 'Get name of the table the specified field is in',
        ),
    'mysql_field_type' =>
        array (
            'file' => 'function.mysql-field-type.php',
            'desc' => 'Get the type of the specified field in a result',
        ),
    'mysql_free_result' =>
        array (
            'file' => 'function.mysql-free-result.php',
            'desc' => 'Free result memory',
        ),
    'mysql_get_client_info' =>
        array (
            'file' => 'function.mysql-get-client-info.php',
            'desc' => 'Get MySQL client info',
        ),
    'mysql_get_host_info' =>
        array (
            'file' => 'function.mysql-get-host-info.php',
            'desc' => 'Get MySQL host info',
        ),
    'mysql_get_proto_info' =>
        array (
            'file' => 'function.mysql-get-proto-info.php',
            'desc' => 'Get MySQL protocol info',
        ),
    'mysql_get_server_info' =>
        array (
            'file' => 'function.mysql-get-server-info.php',
            'desc' => 'Get MySQL server info',
        ),
    'mysql_info' =>
        array (
            'file' => 'function.mysql-info.php',
            'desc' => 'Get information about the most recent query',
        ),
    'mysql_insert_id' =>
        array (
            'file' => 'function.mysql-insert-id.php',
            'desc' => 'Get the ID generated in the last query',
        ),
    'mysql_list_dbs' =>
        array (
            'file' => 'function.mysql-list-dbs.php',
            'desc' => 'List databases available on a MySQL server',
        ),
    'mysql_list_fields' =>
        array (
            'file' => 'function.mysql-list-fields.php',
            'desc' => 'List MySQL table fields',
        ),
    'mysql_list_processes' =>
        array (
            'file' => 'function.mysql-list-processes.php',
            'desc' => 'List MySQL processes',
        ),
    'mysql_list_tables' =>
        array (
            'file' => 'function.mysql-list-tables.php',
            'desc' => 'List tables in a MySQL database',
        ),
    'mysql_num_fields' =>
        array (
            'file' => 'function.mysql-num-fields.php',
            'desc' => 'Get number of fields in result',
        ),
    'mysql_num_rows' =>
        array (
            'file' => 'function.mysql-num-rows.php',
            'desc' => 'Get number of rows in result',
        ),
    'mysql_pconnect' =>
        array (
            'file' => 'function.mysql-pconnect.php',
            'desc' => 'Open a persistent connection to a MySQL server',
        ),
    'mysql_ping' =>
        array (
            'file' => 'function.mysql-ping.php',
            'desc' => 'Ping a server connection or reconnect if there is no connection',
        ),
    'mysql_query' =>
        array (
            'file' => 'function.mysql-query.php',
            'desc' => 'Send a MySQL query',
        ),
    'mysql_real_escape_string' =>
        array (
            'file' => 'function.mysql-real-escape-string.php',
            'desc' => 'Escapes special characters in a string for use in an SQL statement',
        ),
    'mysql_result' =>
        array (
            'file' => 'function.mysql-result.php',
            'desc' => 'Get result data',
        ),
    'mysql_select_db' =>
        array (
            'file' => 'function.mysql-select-db.php',
            'desc' => 'Select a MySQL database',
        ),
    'mysql_set_charset' =>
        array (
            'file' => 'function.mysql-set-charset.php',
            'desc' => 'Sets the client character set',
        ),
    'mysql_stat' =>
        array (
            'file' => 'function.mysql-stat.php',
            'desc' => 'Get current system status',
        ),
    'mysql_tablename' =>
        array (
            'file' => 'function.mysql-tablename.php',
            'desc' => 'Get table name of field',
        ),
    'mysql_thread_id' =>
        array (
            'file' => 'function.mysql-thread-id.php',
            'desc' => 'Return the current thread ID',
        ),
    'mysql_unbuffered_query' =>
        array (
            'file' => 'function.mysql-unbuffered-query.php',
            'desc' => 'Send an SQL query to MySQL without fetching and buffering the result rows.',
        ),
    'm_checkstatus' =>
        array (
            'file' => 'function.m-checkstatus.php',
            'desc' => 'Check to see if a transaction has completed',
        ),
    'm_completeauthorizations' =>
        array (
            'file' => 'function.m-completeauthorizations.php',
            'desc' => 'Number of complete authorizations in queue, returning an array of their identifiers',
        ),
    'm_connect' =>
        array (
            'file' => 'function.m-connect.php',
            'desc' => 'Establish the connection to MCVE',
        ),
    'm_connectionerror' =>
        array (
            'file' => 'function.m-connectionerror.php',
            'desc' => 'Get a textual representation of why a connection failed',
        ),
    'm_deletetrans' =>
        array (
            'file' => 'function.m-deletetrans.php',
            'desc' => 'Delete specified transaction from MCVE_CONN structure',
        ),
    'm_destroyconn' =>
        array (
            'file' => 'function.m-destroyconn.php',
            'desc' => 'Destroy the connection and MCVE_CONN structure',
        ),
    'm_destroyengine' =>
        array (
            'file' => 'function.m-destroyengine.php',
            'desc' => 'Free memory associated with IP/SSL connectivity',
        ),
    'm_getcell' =>
        array (
            'file' => 'function.m-getcell.php',
            'desc' => 'Get a specific cell from a comma delimited response by column name',
        ),
    'm_getcellbynum' =>
        array (
            'file' => 'function.m-getcellbynum.php',
            'desc' => 'Get a specific cell from a comma delimited response by column number',
        ),
    'm_getcommadelimited' =>
        array (
            'file' => 'function.m-getcommadelimited.php',
            'desc' => 'Get the RAW comma delimited data returned from MCVE',
        ),
    'm_getheader' =>
        array (
            'file' => 'function.m-getheader.php',
            'desc' => 'Get the name of the column in a comma-delimited response',
        ),
    'm_initconn' =>
        array (
            'file' => 'function.m-initconn.php',
            'desc' => 'Create and initialize an MCVE_CONN structure',
        ),
    'm_initengine' =>
        array (
            'file' => 'function.m-initengine.php',
            'desc' => 'Ready the client for IP/SSL Communication',
        ),
    'm_iscommadelimited' =>
        array (
            'file' => 'function.m-iscommadelimited.php',
            'desc' => 'Checks to see if response is comma delimited',
        ),
    'm_maxconntimeout' =>
        array (
            'file' => 'function.m-maxconntimeout.php',
            'desc' => 'The maximum amount of time the API will attempt a connection to MCVE',
        ),
    'm_monitor' =>
        array (
            'file' => 'function.m-monitor.php',
            'desc' => 'Perform communication with MCVE (send/receive data) Non-blocking',
        ),
    'm_numcolumns' =>
        array (
            'file' => 'function.m-numcolumns.php',
            'desc' => 'Number of columns returned in a comma delimited response',
        ),
    'm_numrows' =>
        array (
            'file' => 'function.m-numrows.php',
            'desc' => 'Number of rows returned in a comma delimited response',
        ),
    'm_parsecommadelimited' =>
        array (
            'file' => 'function.m-parsecommadelimited.php',
            'desc' => 'Parse the comma delimited response so m_getcell, etc will work',
        ),
    'm_responsekeys' =>
        array (
            'file' => 'function.m-responsekeys.php',
            'desc' => 'Returns array of strings which represents the keys that can be used
 for response parameters on this transaction',
        ),
    'm_responseparam' =>
        array (
            'file' => 'function.m-responseparam.php',
            'desc' => 'Get a custom response parameter',
        ),
    'm_returnstatus' =>
        array (
            'file' => 'function.m-returnstatus.php',
            'desc' => 'Check to see if the transaction was successful',
        ),
    'm_setblocking' =>
        array (
            'file' => 'function.m-setblocking.php',
            'desc' => 'Set blocking/non-blocking mode for connection',
        ),
    'm_setdropfile' =>
        array (
            'file' => 'function.m-setdropfile.php',
            'desc' => 'Set the connection method to Drop-File',
        ),
    'm_setip' =>
        array (
            'file' => 'function.m-setip.php',
            'desc' => 'Set the connection method to IP',
        ),
    'm_setssl' =>
        array (
            'file' => 'function.m-setssl.php',
            'desc' => 'Set the connection method to SSL',
        ),
    'm_setssl_cafile' =>
        array (
            'file' => 'function.m-setssl-cafile.php',
            'desc' => 'Set SSL CA (Certificate Authority) file for verification of server
 certificate',
        ),
    'm_setssl_files' =>
        array (
            'file' => 'function.m-setssl-files.php',
            'desc' => 'Set certificate key files and certificates if server requires client certificate
 verification',
        ),
    'm_settimeout' =>
        array (
            'file' => 'function.m-settimeout.php',
            'desc' => 'Set maximum transaction time (per trans)',
        ),
    'm_sslcert_gen_hash' =>
        array (
            'file' => 'function.m-sslcert-gen-hash.php',
            'desc' => 'Generate hash for SSL client certificate verification',
        ),
    'm_transactionssent' =>
        array (
            'file' => 'function.m-transactionssent.php',
            'desc' => 'Check to see if outgoing buffer is clear',
        ),
    'm_transinqueue' =>
        array (
            'file' => 'function.m-transinqueue.php',
            'desc' => 'Number of transactions in client-queue',
        ),
    'm_transkeyval' =>
        array (
            'file' => 'function.m-transkeyval.php',
            'desc' => 'Add key/value pair to a transaction. Replaces deprecated transparam()',
        ),
    'm_transnew' =>
        array (
            'file' => 'function.m-transnew.php',
            'desc' => 'Start a new transaction',
        ),
    'm_transsend' =>
        array (
            'file' => 'function.m-transsend.php',
            'desc' => 'Finalize and send the transaction',
        ),
    'm_uwait' =>
        array (
            'file' => 'function.m-uwait.php',
            'desc' => 'Wait x microsecs',
        ),
    'm_validateidentifier' =>
        array (
            'file' => 'function.m-validateidentifier.php',
            'desc' => 'Whether or not to validate the passed identifier on any transaction it is passed to',
        ),
    'm_verifyconnection' =>
        array (
            'file' => 'function.m-verifyconnection.php',
            'desc' => 'Set whether or not to PING upon connect to verify connection',
        ),
    'm_verifysslcert' =>
        array (
            'file' => 'function.m-verifysslcert.php',
            'desc' => 'Set whether or not to verify the server ssl certificate',
        ),
    'natcasesort' =>
        array (
            'file' => 'function.natcasesort.php',
            'desc' => 'Sort an array using a case insensitive &quot;natural order&quot; algorithm',
        ),
    'natsort' =>
        array (
            'file' => 'function.natsort.php',
            'desc' => 'Sort an array using a &quot;natural order&quot; algorithm',
        ),
    'ncurses_addch' =>
        array (
            'file' => 'function.ncurses-addch.php',
            'desc' => 'Add character at current position and advance cursor',
        ),
    'ncurses_addchnstr' =>
        array (
            'file' => 'function.ncurses-addchnstr.php',
            'desc' => 'Add attributed string with specified length at current position',
        ),
    'ncurses_addchstr' =>
        array (
            'file' => 'function.ncurses-addchstr.php',
            'desc' => 'Add attributed string at current position',
        ),
    'ncurses_addnstr' =>
        array (
            'file' => 'function.ncurses-addnstr.php',
            'desc' => 'Add string with specified length at current position',
        ),
    'ncurses_addstr' =>
        array (
            'file' => 'function.ncurses-addstr.php',
            'desc' => 'Output text at current position',
        ),
    'ncurses_assume_default_colors' =>
        array (
            'file' => 'function.ncurses-assume-default-colors.php',
            'desc' => 'Define default colors for color 0',
        ),
    'ncurses_attroff' =>
        array (
            'file' => 'function.ncurses-attroff.php',
            'desc' => 'Turn off the given attributes',
        ),
    'ncurses_attron' =>
        array (
            'file' => 'function.ncurses-attron.php',
            'desc' => 'Turn on the given attributes',
        ),
    'ncurses_attrset' =>
        array (
            'file' => 'function.ncurses-attrset.php',
            'desc' => 'Set given attributes',
        ),
    'ncurses_baudrate' =>
        array (
            'file' => 'function.ncurses-baudrate.php',
            'desc' => 'Returns baudrate of terminal',
        ),
    'ncurses_beep' =>
        array (
            'file' => 'function.ncurses-beep.php',
            'desc' => 'Let the terminal beep',
        ),
    'ncurses_bkgd' =>
        array (
            'file' => 'function.ncurses-bkgd.php',
            'desc' => 'Set background property for terminal screen',
        ),
    'ncurses_bkgdset' =>
        array (
            'file' => 'function.ncurses-bkgdset.php',
            'desc' => 'Control screen background',
        ),
    'ncurses_border' =>
        array (
            'file' => 'function.ncurses-border.php',
            'desc' => 'Draw a border around the screen using attributed characters',
        ),
    'ncurses_bottom_panel' =>
        array (
            'file' => 'function.ncurses-bottom-panel.php',
            'desc' => 'Moves a visible panel to the bottom of the stack',
        ),
    'ncurses_can_change_color' =>
        array (
            'file' => 'function.ncurses-can-change-color.php',
            'desc' => 'Checks if terminal color definitions can be changed',
        ),
    'ncurses_cbreak' =>
        array (
            'file' => 'function.ncurses-cbreak.php',
            'desc' => 'Switch off input buffering',
        ),
    'ncurses_clear' =>
        array (
            'file' => 'function.ncurses-clear.php',
            'desc' => 'Clear screen',
        ),
    'ncurses_clrtobot' =>
        array (
            'file' => 'function.ncurses-clrtobot.php',
            'desc' => 'Clear screen from current position to bottom',
        ),
    'ncurses_clrtoeol' =>
        array (
            'file' => 'function.ncurses-clrtoeol.php',
            'desc' => 'Clear screen from current position to end of line',
        ),
    'ncurses_color_content' =>
        array (
            'file' => 'function.ncurses-color-content.php',
            'desc' => 'Retrieves RGB components of a color',
        ),
    'ncurses_color_set' =>
        array (
            'file' => 'function.ncurses-color-set.php',
            'desc' => 'Set active foreground and background colors',
        ),
    'ncurses_curs_set' =>
        array (
            'file' => 'function.ncurses-curs-set.php',
            'desc' => 'Set cursor state',
        ),
    'ncurses_define_key' =>
        array (
            'file' => 'function.ncurses-define-key.php',
            'desc' => 'Define a keycode',
        ),
    'ncurses_def_prog_mode' =>
        array (
            'file' => 'function.ncurses-def-prog-mode.php',
            'desc' => 'Saves terminals (program) mode',
        ),
    'ncurses_def_shell_mode' =>
        array (
            'file' => 'function.ncurses-def-shell-mode.php',
            'desc' => 'Saves terminals (shell) mode',
        ),
    'ncurses_delay_output' =>
        array (
            'file' => 'function.ncurses-delay-output.php',
            'desc' => 'Delay output on terminal using padding characters',
        ),
    'ncurses_delch' =>
        array (
            'file' => 'function.ncurses-delch.php',
            'desc' => 'Delete character at current position, move rest of line left',
        ),
    'ncurses_deleteln' =>
        array (
            'file' => 'function.ncurses-deleteln.php',
            'desc' => 'Delete line at current position, move rest of screen up',
        ),
    'ncurses_delwin' =>
        array (
            'file' => 'function.ncurses-delwin.php',
            'desc' => 'Delete a ncurses window',
        ),
    'ncurses_del_panel' =>
        array (
            'file' => 'function.ncurses-del-panel.php',
            'desc' => 'Remove panel from the stack and delete it (but not the associated window)',
        ),
    'ncurses_doupdate' =>
        array (
            'file' => 'function.ncurses-doupdate.php',
            'desc' => 'Write all prepared refreshes to terminal',
        ),
    'ncurses_echo' =>
        array (
            'file' => 'function.ncurses-echo.php',
            'desc' => 'Activate keyboard input echo',
        ),
    'ncurses_echochar' =>
        array (
            'file' => 'function.ncurses-echochar.php',
            'desc' => 'Single character output including refresh',
        ),
    'ncurses_end' =>
        array (
            'file' => 'function.ncurses-end.php',
            'desc' => 'Stop using ncurses, clean up the screen',
        ),
    'ncurses_erase' =>
        array (
            'file' => 'function.ncurses-erase.php',
            'desc' => 'Erase terminal screen',
        ),
    'ncurses_erasechar' =>
        array (
            'file' => 'function.ncurses-erasechar.php',
            'desc' => 'Returns current erase character',
        ),
    'ncurses_filter' =>
        array (
            'file' => 'function.ncurses-filter.php',
            'desc' => 'Set LINES for iniscr() and newterm() to 1',
        ),
    'ncurses_flash' =>
        array (
            'file' => 'function.ncurses-flash.php',
            'desc' => 'Flash terminal screen (visual bell)',
        ),
    'ncurses_flushinp' =>
        array (
            'file' => 'function.ncurses-flushinp.php',
            'desc' => 'Flush keyboard input buffer',
        ),
    'ncurses_getch' =>
        array (
            'file' => 'function.ncurses-getch.php',
            'desc' => 'Read a character from keyboard',
        ),
    'ncurses_getmaxyx' =>
        array (
            'file' => 'function.ncurses-getmaxyx.php',
            'desc' => 'Returns the size of a window',
        ),
    'ncurses_getmouse' =>
        array (
            'file' => 'function.ncurses-getmouse.php',
            'desc' => 'Reads mouse event',
        ),
    'ncurses_getyx' =>
        array (
            'file' => 'function.ncurses-getyx.php',
            'desc' => 'Returns the current cursor position for a window',
        ),
    'ncurses_halfdelay' =>
        array (
            'file' => 'function.ncurses-halfdelay.php',
            'desc' => 'Put terminal into halfdelay mode',
        ),
    'ncurses_has_colors' =>
        array (
            'file' => 'function.ncurses-has-colors.php',
            'desc' => 'Checks if terminal has color capabilities',
        ),
    'ncurses_has_ic' =>
        array (
            'file' => 'function.ncurses-has-ic.php',
            'desc' => 'Check for insert- and delete-capabilities',
        ),
    'ncurses_has_il' =>
        array (
            'file' => 'function.ncurses-has-il.php',
            'desc' => 'Check for line insert- and delete-capabilities',
        ),
    'ncurses_has_key' =>
        array (
            'file' => 'function.ncurses-has-key.php',
            'desc' => 'Check for presence of a function key on terminal keyboard',
        ),
    'ncurses_hide_panel' =>
        array (
            'file' => 'function.ncurses-hide-panel.php',
            'desc' => 'Remove panel from the stack, making it invisible',
        ),
    'ncurses_hline' =>
        array (
            'file' => 'function.ncurses-hline.php',
            'desc' => 'Draw a horizontal line at current position using an attributed character and max. n characters long',
        ),
    'ncurses_inch' =>
        array (
            'file' => 'function.ncurses-inch.php',
            'desc' => 'Get character and attribute at current position',
        ),
    'ncurses_init' =>
        array (
            'file' => 'function.ncurses-init.php',
            'desc' => 'Initialize ncurses',
        ),
    'ncurses_init_color' =>
        array (
            'file' => 'function.ncurses-init-color.php',
            'desc' => 'Define a terminal color',
        ),
    'ncurses_init_pair' =>
        array (
            'file' => 'function.ncurses-init-pair.php',
            'desc' => 'Define a color pair',
        ),
    'ncurses_insch' =>
        array (
            'file' => 'function.ncurses-insch.php',
            'desc' => 'Insert character moving rest of line including character at current position',
        ),
    'ncurses_insdelln' =>
        array (
            'file' => 'function.ncurses-insdelln.php',
            'desc' => 'Insert lines before current line scrolling down (negative numbers delete and scroll up)',
        ),
    'ncurses_insertln' =>
        array (
            'file' => 'function.ncurses-insertln.php',
            'desc' => 'Insert a line, move rest of screen down',
        ),
    'ncurses_insstr' =>
        array (
            'file' => 'function.ncurses-insstr.php',
            'desc' => 'Insert string at current position, moving rest of line right',
        ),
    'ncurses_instr' =>
        array (
            'file' => 'function.ncurses-instr.php',
            'desc' => 'Reads string from terminal screen',
        ),
    'ncurses_isendwin' =>
        array (
            'file' => 'function.ncurses-isendwin.php',
            'desc' => 'Ncurses is in endwin mode, normal screen output may be performed',
        ),
    'ncurses_keyok' =>
        array (
            'file' => 'function.ncurses-keyok.php',
            'desc' => 'Enable or disable a keycode',
        ),
    'ncurses_keypad' =>
        array (
            'file' => 'function.ncurses-keypad.php',
            'desc' => 'Turns keypad on or off',
        ),
    'ncurses_killchar' =>
        array (
            'file' => 'function.ncurses-killchar.php',
            'desc' => 'Returns current line kill character',
        ),
    'ncurses_longname' =>
        array (
            'file' => 'function.ncurses-longname.php',
            'desc' => 'Returns terminals description',
        ),
    'ncurses_meta' =>
        array (
            'file' => 'function.ncurses-meta.php',
            'desc' => 'Enables/Disable 8-bit meta key information',
        ),
    'ncurses_mouseinterval' =>
        array (
            'file' => 'function.ncurses-mouseinterval.php',
            'desc' => 'Set timeout for mouse button clicks',
        ),
    'ncurses_mousemask' =>
        array (
            'file' => 'function.ncurses-mousemask.php',
            'desc' => 'Sets mouse options',
        ),
    'ncurses_mouse_trafo' =>
        array (
            'file' => 'function.ncurses-mouse-trafo.php',
            'desc' => 'Transforms coordinates',
        ),
    'ncurses_move' =>
        array (
            'file' => 'function.ncurses-move.php',
            'desc' => 'Move output position',
        ),
    'ncurses_move_panel' =>
        array (
            'file' => 'function.ncurses-move-panel.php',
            'desc' => 'Moves a panel so that its upper-left corner is at [startx, starty]',
        ),
    'ncurses_mvaddch' =>
        array (
            'file' => 'function.ncurses-mvaddch.php',
            'desc' => 'Move current position and add character',
        ),
    'ncurses_mvaddchnstr' =>
        array (
            'file' => 'function.ncurses-mvaddchnstr.php',
            'desc' => 'Move position and add attributed string with specified length',
        ),
    'ncurses_mvaddchstr' =>
        array (
            'file' => 'function.ncurses-mvaddchstr.php',
            'desc' => 'Move position and add attributed string',
        ),
    'ncurses_mvaddnstr' =>
        array (
            'file' => 'function.ncurses-mvaddnstr.php',
            'desc' => 'Move position and add string with specified length',
        ),
    'ncurses_mvaddstr' =>
        array (
            'file' => 'function.ncurses-mvaddstr.php',
            'desc' => 'Move position and add string',
        ),
    'ncurses_mvcur' =>
        array (
            'file' => 'function.ncurses-mvcur.php',
            'desc' => 'Move cursor immediately',
        ),
    'ncurses_mvdelch' =>
        array (
            'file' => 'function.ncurses-mvdelch.php',
            'desc' => 'Move position and delete character, shift rest of line left',
        ),
    'ncurses_mvgetch' =>
        array (
            'file' => 'function.ncurses-mvgetch.php',
            'desc' => 'Move position and get character at new position',
        ),
    'ncurses_mvhline' =>
        array (
            'file' => 'function.ncurses-mvhline.php',
            'desc' => 'Set new position and draw a horizontal line using an attributed character and max. n characters long',
        ),
    'ncurses_mvinch' =>
        array (
            'file' => 'function.ncurses-mvinch.php',
            'desc' => 'Move position and get attributed character at new position',
        ),
    'ncurses_mvvline' =>
        array (
            'file' => 'function.ncurses-mvvline.php',
            'desc' => 'Set new position and draw a vertical line using an attributed character and max. n characters long',
        ),
    'ncurses_mvwaddstr' =>
        array (
            'file' => 'function.ncurses-mvwaddstr.php',
            'desc' => 'Add string at new position in window',
        ),
    'ncurses_napms' =>
        array (
            'file' => 'function.ncurses-napms.php',
            'desc' => 'Sleep',
        ),
    'ncurses_newpad' =>
        array (
            'file' => 'function.ncurses-newpad.php',
            'desc' => 'Creates a new pad (window)',
        ),
    'ncurses_newwin' =>
        array (
            'file' => 'function.ncurses-newwin.php',
            'desc' => 'Create a new window',
        ),
    'ncurses_new_panel' =>
        array (
            'file' => 'function.ncurses-new-panel.php',
            'desc' => 'Create a new panel and associate it with window',
        ),
    'ncurses_nl' =>
        array (
            'file' => 'function.ncurses-nl.php',
            'desc' => 'Translate newline and carriage return / line feed',
        ),
    'ncurses_nocbreak' =>
        array (
            'file' => 'function.ncurses-nocbreak.php',
            'desc' => 'Switch terminal to cooked mode',
        ),
    'ncurses_noecho' =>
        array (
            'file' => 'function.ncurses-noecho.php',
            'desc' => 'Switch off keyboard input echo',
        ),
    'ncurses_nonl' =>
        array (
            'file' => 'function.ncurses-nonl.php',
            'desc' => 'Do not translate newline and carriage return / line feed',
        ),
    'ncurses_noqiflush' =>
        array (
            'file' => 'function.ncurses-noqiflush.php',
            'desc' => 'Do not flush on signal characters',
        ),
    'ncurses_noraw' =>
        array (
            'file' => 'function.ncurses-noraw.php',
            'desc' => 'Switch terminal out of raw mode',
        ),
    'ncurses_pair_content' =>
        array (
            'file' => 'function.ncurses-pair-content.php',
            'desc' => 'Retrieves foreground and background colors of a color pair',
        ),
    'ncurses_panel_above' =>
        array (
            'file' => 'function.ncurses-panel-above.php',
            'desc' => 'Returns the panel above panel',
        ),
    'ncurses_panel_below' =>
        array (
            'file' => 'function.ncurses-panel-below.php',
            'desc' => 'Returns the panel below panel',
        ),
    'ncurses_panel_window' =>
        array (
            'file' => 'function.ncurses-panel-window.php',
            'desc' => 'Returns the window associated with panel',
        ),
    'ncurses_pnoutrefresh' =>
        array (
            'file' => 'function.ncurses-pnoutrefresh.php',
            'desc' => 'Copies a region from a pad into the virtual screen',
        ),
    'ncurses_prefresh' =>
        array (
            'file' => 'function.ncurses-prefresh.php',
            'desc' => 'Copies a region from a pad into the virtual screen',
        ),
    'ncurses_putp' =>
        array (
            'file' => 'function.ncurses-putp.php',
            'desc' => 'Apply padding information to the string and output it',
        ),
    'ncurses_qiflush' =>
        array (
            'file' => 'function.ncurses-qiflush.php',
            'desc' => 'Flush on signal characters',
        ),
    'ncurses_raw' =>
        array (
            'file' => 'function.ncurses-raw.php',
            'desc' => 'Switch terminal into raw mode',
        ),
    'ncurses_refresh' =>
        array (
            'file' => 'function.ncurses-refresh.php',
            'desc' => 'Refresh screen',
        ),
    'ncurses_replace_panel' =>
        array (
            'file' => 'function.ncurses-replace-panel.php',
            'desc' => 'Replaces the window associated with panel',
        ),
    'ncurses_resetty' =>
        array (
            'file' => 'function.ncurses-resetty.php',
            'desc' => 'Restores saved terminal state',
        ),
    'ncurses_reset_prog_mode' =>
        array (
            'file' => 'function.ncurses-reset-prog-mode.php',
            'desc' => 'Resets the prog mode saved by def_prog_mode',
        ),
    'ncurses_reset_shell_mode' =>
        array (
            'file' => 'function.ncurses-reset-shell-mode.php',
            'desc' => 'Resets the shell mode saved by def_shell_mode',
        ),
    'ncurses_savetty' =>
        array (
            'file' => 'function.ncurses-savetty.php',
            'desc' => 'Saves terminal state',
        ),
    'ncurses_scrl' =>
        array (
            'file' => 'function.ncurses-scrl.php',
            'desc' => 'Scroll window content up or down without changing current position',
        ),
    'ncurses_scr_dump' =>
        array (
            'file' => 'function.ncurses-scr-dump.php',
            'desc' => 'Dump screen content to file',
        ),
    'ncurses_scr_init' =>
        array (
            'file' => 'function.ncurses-scr-init.php',
            'desc' => 'Initialize screen from file dump',
        ),
    'ncurses_scr_restore' =>
        array (
            'file' => 'function.ncurses-scr-restore.php',
            'desc' => 'Restore screen from file dump',
        ),
    'ncurses_scr_set' =>
        array (
            'file' => 'function.ncurses-scr-set.php',
            'desc' => 'Inherit screen from file dump',
        ),
    'ncurses_show_panel' =>
        array (
            'file' => 'function.ncurses-show-panel.php',
            'desc' => 'Places an invisible panel on top of the stack, making it visible',
        ),
    'ncurses_slk_attr' =>
        array (
            'file' => 'function.ncurses-slk-attr.php',
            'desc' => 'Returns current soft label key attribute',
        ),
    'ncurses_slk_attroff' =>
        array (
            'file' => 'function.ncurses-slk-attroff.php',
            'desc' => 'Turn off the given attributes for soft function-key labels',
        ),
    'ncurses_slk_attron' =>
        array (
            'file' => 'function.ncurses-slk-attron.php',
            'desc' => 'Turn on the given attributes for soft function-key labels',
        ),
    'ncurses_slk_attrset' =>
        array (
            'file' => 'function.ncurses-slk-attrset.php',
            'desc' => 'Set given attributes for soft function-key labels',
        ),
    'ncurses_slk_clear' =>
        array (
            'file' => 'function.ncurses-slk-clear.php',
            'desc' => 'Clears soft labels from screen',
        ),
    'ncurses_slk_color' =>
        array (
            'file' => 'function.ncurses-slk-color.php',
            'desc' => 'Sets color for soft label keys',
        ),
    'ncurses_slk_init' =>
        array (
            'file' => 'function.ncurses-slk-init.php',
            'desc' => 'Initializes soft label key functions',
        ),
    'ncurses_slk_noutrefresh' =>
        array (
            'file' => 'function.ncurses-slk-noutrefresh.php',
            'desc' => 'Copies soft label keys to virtual screen',
        ),
    'ncurses_slk_refresh' =>
        array (
            'file' => 'function.ncurses-slk-refresh.php',
            'desc' => 'Copies soft label keys to screen',
        ),
    'ncurses_slk_restore' =>
        array (
            'file' => 'function.ncurses-slk-restore.php',
            'desc' => 'Restores soft label keys',
        ),
    'ncurses_slk_set' =>
        array (
            'file' => 'function.ncurses-slk-set.php',
            'desc' => 'Sets function key labels',
        ),
    'ncurses_slk_touch' =>
        array (
            'file' => 'function.ncurses-slk-touch.php',
            'desc' => 'Forces output when ncurses_slk_noutrefresh is performed',
        ),
    'ncurses_standend' =>
        array (
            'file' => 'function.ncurses-standend.php',
            'desc' => 'Stop using \'standout\' attribute',
        ),
    'ncurses_standout' =>
        array (
            'file' => 'function.ncurses-standout.php',
            'desc' => 'Start using \'standout\' attribute',
        ),
    'ncurses_start_color' =>
        array (
            'file' => 'function.ncurses-start-color.php',
            'desc' => 'Initializes color functionality',
        ),
    'ncurses_termattrs' =>
        array (
            'file' => 'function.ncurses-termattrs.php',
            'desc' => 'Returns a logical OR of all attribute flags supported by terminal',
        ),
    'ncurses_termname' =>
        array (
            'file' => 'function.ncurses-termname.php',
            'desc' => 'Returns terminals (short)-name',
        ),
    'ncurses_timeout' =>
        array (
            'file' => 'function.ncurses-timeout.php',
            'desc' => 'Set timeout for special key sequences',
        ),
    'ncurses_top_panel' =>
        array (
            'file' => 'function.ncurses-top-panel.php',
            'desc' => 'Moves a visible panel to the top of the stack',
        ),
    'ncurses_typeahead' =>
        array (
            'file' => 'function.ncurses-typeahead.php',
            'desc' => 'Specify different filedescriptor for typeahead checking',
        ),
    'ncurses_ungetch' =>
        array (
            'file' => 'function.ncurses-ungetch.php',
            'desc' => 'Put a character back into the input stream',
        ),
    'ncurses_ungetmouse' =>
        array (
            'file' => 'function.ncurses-ungetmouse.php',
            'desc' => 'Pushes mouse event to queue',
        ),
    'ncurses_update_panels' =>
        array (
            'file' => 'function.ncurses-update-panels.php',
            'desc' => 'Refreshes the virtual screen to reflect the relations between panels in the stack',
        ),
    'ncurses_use_default_colors' =>
        array (
            'file' => 'function.ncurses-use-default-colors.php',
            'desc' => 'Assign terminal default colors to color id -1',
        ),
    'ncurses_use_env' =>
        array (
            'file' => 'function.ncurses-use-env.php',
            'desc' => 'Control use of environment information about terminal size',
        ),
    'ncurses_use_extended_names' =>
        array (
            'file' => 'function.ncurses-use-extended-names.php',
            'desc' => 'Control use of extended names in terminfo descriptions',
        ),
    'ncurses_vidattr' =>
        array (
            'file' => 'function.ncurses-vidattr.php',
            'desc' => 'Display the string on the terminal in the video attribute mode',
        ),
    'ncurses_vline' =>
        array (
            'file' => 'function.ncurses-vline.php',
            'desc' => 'Draw a vertical line at current position using an attributed character and max. n characters long',
        ),
    'ncurses_waddch' =>
        array (
            'file' => 'function.ncurses-waddch.php',
            'desc' => 'Adds character at current position in a window and advance cursor',
        ),
    'ncurses_waddstr' =>
        array (
            'file' => 'function.ncurses-waddstr.php',
            'desc' => 'Outputs text at current postion in window',
        ),
    'ncurses_wattroff' =>
        array (
            'file' => 'function.ncurses-wattroff.php',
            'desc' => 'Turns off attributes for a window',
        ),
    'ncurses_wattron' =>
        array (
            'file' => 'function.ncurses-wattron.php',
            'desc' => 'Turns on attributes for a window',
        ),
    'ncurses_wattrset' =>
        array (
            'file' => 'function.ncurses-wattrset.php',
            'desc' => 'Set the attributes for a window',
        ),
    'ncurses_wborder' =>
        array (
            'file' => 'function.ncurses-wborder.php',
            'desc' => 'Draws a border around the window using attributed characters',
        ),
    'ncurses_wclear' =>
        array (
            'file' => 'function.ncurses-wclear.php',
            'desc' => 'Clears window',
        ),
    'ncurses_wcolor_set' =>
        array (
            'file' => 'function.ncurses-wcolor-set.php',
            'desc' => 'Sets windows color pairings',
        ),
    'ncurses_werase' =>
        array (
            'file' => 'function.ncurses-werase.php',
            'desc' => 'Erase window contents',
        ),
    'ncurses_wgetch' =>
        array (
            'file' => 'function.ncurses-wgetch.php',
            'desc' => 'Reads a character from keyboard (window)',
        ),
    'ncurses_whline' =>
        array (
            'file' => 'function.ncurses-whline.php',
            'desc' => 'Draws a horizontal line in a window at current position using an attributed character and max. n characters long',
        ),
    'ncurses_wmouse_trafo' =>
        array (
            'file' => 'function.ncurses-wmouse-trafo.php',
            'desc' => 'Transforms window/stdscr coordinates',
        ),
    'ncurses_wmove' =>
        array (
            'file' => 'function.ncurses-wmove.php',
            'desc' => 'Moves windows output position',
        ),
    'ncurses_wnoutrefresh' =>
        array (
            'file' => 'function.ncurses-wnoutrefresh.php',
            'desc' => 'Copies window to virtual screen',
        ),
    'ncurses_wrefresh' =>
        array (
            'file' => 'function.ncurses-wrefresh.php',
            'desc' => 'Refresh window on terminal screen',
        ),
    'ncurses_wstandend' =>
        array (
            'file' => 'function.ncurses-wstandend.php',
            'desc' => 'End standout mode for a window',
        ),
    'ncurses_wstandout' =>
        array (
            'file' => 'function.ncurses-wstandout.php',
            'desc' => 'Enter standout mode for a window',
        ),
    'ncurses_wvline' =>
        array (
            'file' => 'function.ncurses-wvline.php',
            'desc' => 'Draws a vertical line in a window at current position using an attributed character and max. n characters long',
        ),
    'newt_bell' =>
        array (
            'file' => 'function.newt-bell.php',
            'desc' => 'Send a beep to the terminal',
        ),
    'newt_button' =>
        array (
            'file' => 'function.newt-button.php',
            'desc' => 'Create a new button',
        ),
    'newt_button_bar' =>
        array (
            'file' => 'function.newt-button-bar.php',
            'desc' => 'This function returns a grid containing the buttons created.',
        ),
    'newt_centered_window' =>
        array (
            'file' => 'function.newt-centered-window.php',
            'desc' => 'Open a centered window of the specified size',
        ),
    'newt_checkbox' =>
        array (
            'file' => 'function.newt-checkbox.php',
        ),
    'newt_checkbox_get_value' =>
        array (
            'file' => 'function.newt-checkbox-get-value.php',
            'desc' => 'Retreives value of checkox resource',
        ),
    'newt_checkbox_set_flags' =>
        array (
            'file' => 'function.newt-checkbox-set-flags.php',
            'desc' => 'Configures checkbox resource',
        ),
    'newt_checkbox_set_value' =>
        array (
            'file' => 'function.newt-checkbox-set-value.php',
            'desc' => 'Sets the value of the checkbox',
        ),
    'newt_checkbox_tree' =>
        array (
            'file' => 'function.newt-checkbox-tree.php',
        ),
    'newt_checkbox_tree_add_item' =>
        array (
            'file' => 'function.newt-checkbox-tree-add-item.php',
            'desc' => 'Adds new item to the checkbox tree',
        ),
    'newt_checkbox_tree_find_item' =>
        array (
            'file' => 'function.newt-checkbox-tree-find-item.php',
            'desc' => 'Finds an item in the checkbox tree',
        ),
    'newt_checkbox_tree_get_current' =>
        array (
            'file' => 'function.newt-checkbox-tree-get-current.php',
            'desc' => 'Returns checkbox tree selected item',
        ),
    'newt_checkbox_tree_get_entry_value' =>
        array (
            'file' => 'function.newt-checkbox-tree-get-entry-value.php',
        ),
    'newt_checkbox_tree_get_multi_selection' =>
        array (
            'file' => 'function.newt-checkbox-tree-get-multi-selection.php',
        ),
    'newt_checkbox_tree_get_selection' =>
        array (
            'file' => 'function.newt-checkbox-tree-get-selection.php',
        ),
    'newt_checkbox_tree_multi' =>
        array (
            'file' => 'function.newt-checkbox-tree-multi.php',
        ),
    'newt_checkbox_tree_set_current' =>
        array (
            'file' => 'function.newt-checkbox-tree-set-current.php',
        ),
    'newt_checkbox_tree_set_entry' =>
        array (
            'file' => 'function.newt-checkbox-tree-set-entry.php',
        ),
    'newt_checkbox_tree_set_entry_value' =>
        array (
            'file' => 'function.newt-checkbox-tree-set-entry-value.php',
        ),
    'newt_checkbox_tree_set_width' =>
        array (
            'file' => 'function.newt-checkbox-tree-set-width.php',
        ),
    'newt_clear_key_buffer' =>
        array (
            'file' => 'function.newt-clear-key-buffer.php',
            'desc' => 'Discards the contents of the terminal\'s input buffer without
  waiting for additional input',
        ),
    'newt_cls' =>
        array (
            'file' => 'function.newt-cls.php',
        ),
    'newt_compact_button' =>
        array (
            'file' => 'function.newt-compact-button.php',
        ),
    'newt_component_add_callback' =>
        array (
            'file' => 'function.newt-component-add-callback.php',
        ),
    'newt_component_takes_focus' =>
        array (
            'file' => 'function.newt-component-takes-focus.php',
        ),
    'newt_create_grid' =>
        array (
            'file' => 'function.newt-create-grid.php',
        ),
    'newt_cursor_off' =>
        array (
            'file' => 'function.newt-cursor-off.php',
        ),
    'newt_cursor_on' =>
        array (
            'file' => 'function.newt-cursor-on.php',
        ),
    'newt_delay' =>
        array (
            'file' => 'function.newt-delay.php',
        ),
    'newt_draw_form' =>
        array (
            'file' => 'function.newt-draw-form.php',
        ),
    'newt_draw_root_text' =>
        array (
            'file' => 'function.newt-draw-root-text.php',
            'desc' => 'Displays the string text at the position indicated',
        ),
    'newt_entry' =>
        array (
            'file' => 'function.newt-entry.php',
        ),
    'newt_entry_get_value' =>
        array (
            'file' => 'function.newt-entry-get-value.php',
        ),
    'newt_entry_set' =>
        array (
            'file' => 'function.newt-entry-set.php',
        ),
    'newt_entry_set_filter' =>
        array (
            'file' => 'function.newt-entry-set-filter.php',
        ),
    'newt_entry_set_flags' =>
        array (
            'file' => 'function.newt-entry-set-flags.php',
        ),
    'newt_finished' =>
        array (
            'file' => 'function.newt-finished.php',
            'desc' => 'Uninitializes newt interface',
        ),
    'newt_form' =>
        array (
            'file' => 'function.newt-form.php',
            'desc' => 'Create a form',
        ),
    'newt_form_add_component' =>
        array (
            'file' => 'function.newt-form-add-component.php',
            'desc' => 'Adds a single component to the form',
        ),
    'newt_form_add_components' =>
        array (
            'file' => 'function.newt-form-add-components.php',
            'desc' => 'Add several components to the form',
        ),
    'newt_form_add_hot_key' =>
        array (
            'file' => 'function.newt-form-add-hot-key.php',
        ),
    'newt_form_destroy' =>
        array (
            'file' => 'function.newt-form-destroy.php',
            'desc' => 'Destroys a form',
        ),
    'newt_form_get_current' =>
        array (
            'file' => 'function.newt-form-get-current.php',
        ),
    'newt_form_run' =>
        array (
            'file' => 'function.newt-form-run.php',
            'desc' => 'Runs a form',
        ),
    'newt_form_set_background' =>
        array (
            'file' => 'function.newt-form-set-background.php',
        ),
    'newt_form_set_height' =>
        array (
            'file' => 'function.newt-form-set-height.php',
        ),
    'newt_form_set_size' =>
        array (
            'file' => 'function.newt-form-set-size.php',
        ),
    'newt_form_set_timer' =>
        array (
            'file' => 'function.newt-form-set-timer.php',
        ),
    'newt_form_set_width' =>
        array (
            'file' => 'function.newt-form-set-width.php',
        ),
    'newt_form_watch_fd' =>
        array (
            'file' => 'function.newt-form-watch-fd.php',
        ),
    'newt_get_screen_size' =>
        array (
            'file' => 'function.newt-get-screen-size.php',
            'desc' => 'Fills in the passed references with the current size of the
  terminal',
        ),
    'newt_grid_add_components_to_form' =>
        array (
            'file' => 'function.newt-grid-add-components-to-form.php',
        ),
    'newt_grid_basic_window' =>
        array (
            'file' => 'function.newt-grid-basic-window.php',
        ),
    'newt_grid_free' =>
        array (
            'file' => 'function.newt-grid-free.php',
        ),
    'newt_grid_get_size' =>
        array (
            'file' => 'function.newt-grid-get-size.php',
        ),
    'newt_grid_h_close_stacked' =>
        array (
            'file' => 'function.newt-grid-h-close-stacked.php',
        ),
    'newt_grid_h_stacked' =>
        array (
            'file' => 'function.newt-grid-h-stacked.php',
        ),
    'newt_grid_place' =>
        array (
            'file' => 'function.newt-grid-place.php',
        ),
    'newt_grid_set_field' =>
        array (
            'file' => 'function.newt-grid-set-field.php',
        ),
    'newt_grid_simple_window' =>
        array (
            'file' => 'function.newt-grid-simple-window.php',
        ),
    'newt_grid_v_close_stacked' =>
        array (
            'file' => 'function.newt-grid-v-close-stacked.php',
        ),
    'newt_grid_v_stacked' =>
        array (
            'file' => 'function.newt-grid-v-stacked.php',
        ),
    'newt_grid_wrapped_window' =>
        array (
            'file' => 'function.newt-grid-wrapped-window.php',
        ),
    'newt_grid_wrapped_window_at' =>
        array (
            'file' => 'function.newt-grid-wrapped-window-at.php',
        ),
    'newt_init' =>
        array (
            'file' => 'function.newt-init.php',
            'desc' => 'Initialize newt',
        ),
    'newt_label' =>
        array (
            'file' => 'function.newt-label.php',
        ),
    'newt_label_set_text' =>
        array (
            'file' => 'function.newt-label-set-text.php',
        ),
    'newt_listbox' =>
        array (
            'file' => 'function.newt-listbox.php',
        ),
    'newt_listbox_append_entry' =>
        array (
            'file' => 'function.newt-listbox-append-entry.php',
        ),
    'newt_listbox_clear' =>
        array (
            'file' => 'function.newt-listbox-clear.php',
        ),
    'newt_listbox_clear_selection' =>
        array (
            'file' => 'function.newt-listbox-clear-selection.php',
        ),
    'newt_listbox_delete_entry' =>
        array (
            'file' => 'function.newt-listbox-delete-entry.php',
        ),
    'newt_listbox_get_current' =>
        array (
            'file' => 'function.newt-listbox-get-current.php',
        ),
    'newt_listbox_get_selection' =>
        array (
            'file' => 'function.newt-listbox-get-selection.php',
        ),
    'newt_listbox_insert_entry' =>
        array (
            'file' => 'function.newt-listbox-insert-entry.php',
        ),
    'newt_listbox_item_count' =>
        array (
            'file' => 'function.newt-listbox-item-count.php',
        ),
    'newt_listbox_select_item' =>
        array (
            'file' => 'function.newt-listbox-select-item.php',
        ),
    'newt_listbox_set_current' =>
        array (
            'file' => 'function.newt-listbox-set-current.php',
        ),
    'newt_listbox_set_current_by_key' =>
        array (
            'file' => 'function.newt-listbox-set-current-by-key.php',
        ),
    'newt_listbox_set_data' =>
        array (
            'file' => 'function.newt-listbox-set-data.php',
        ),
    'newt_listbox_set_entry' =>
        array (
            'file' => 'function.newt-listbox-set-entry.php',
        ),
    'newt_listbox_set_width' =>
        array (
            'file' => 'function.newt-listbox-set-width.php',
        ),
    'newt_listitem' =>
        array (
            'file' => 'function.newt-listitem.php',
        ),
    'newt_listitem_get_data' =>
        array (
            'file' => 'function.newt-listitem-get-data.php',
        ),
    'newt_listitem_set' =>
        array (
            'file' => 'function.newt-listitem-set.php',
        ),
    'newt_open_window' =>
        array (
            'file' => 'function.newt-open-window.php',
            'desc' => 'Open a window of the specified size and position',
        ),
    'newt_pop_help_line' =>
        array (
            'file' => 'function.newt-pop-help-line.php',
            'desc' => 'Replaces the current help line with the one from the stack',
        ),
    'newt_pop_window' =>
        array (
            'file' => 'function.newt-pop-window.php',
            'desc' => 'Removes the top window from the display',
        ),
    'newt_push_help_line' =>
        array (
            'file' => 'function.newt-push-help-line.php',
            'desc' => 'Saves the current help line on a stack, and displays the new line',
        ),
    'newt_radiobutton' =>
        array (
            'file' => 'function.newt-radiobutton.php',
        ),
    'newt_radio_get_current' =>
        array (
            'file' => 'function.newt-radio-get-current.php',
        ),
    'newt_redraw_help_line' =>
        array (
            'file' => 'function.newt-redraw-help-line.php',
        ),
    'newt_reflow_text' =>
        array (
            'file' => 'function.newt-reflow-text.php',
        ),
    'newt_refresh' =>
        array (
            'file' => 'function.newt-refresh.php',
            'desc' => 'Updates modified portions of the screen',
        ),
    'newt_resize_screen' =>
        array (
            'file' => 'function.newt-resize-screen.php',
        ),
    'newt_resume' =>
        array (
            'file' => 'function.newt-resume.php',
            'desc' => 'Resume using the newt interface after calling
  newt_suspend',
        ),
    'newt_run_form' =>
        array (
            'file' => 'function.newt-run-form.php',
            'desc' => 'Runs a form',
        ),
    'newt_scale' =>
        array (
            'file' => 'function.newt-scale.php',
        ),
    'newt_scale_set' =>
        array (
            'file' => 'function.newt-scale-set.php',
        ),
    'newt_scrollbar_set' =>
        array (
            'file' => 'function.newt-scrollbar-set.php',
        ),
    'newt_set_help_callback' =>
        array (
            'file' => 'function.newt-set-help-callback.php',
        ),
    'newt_set_suspend_callback' =>
        array (
            'file' => 'function.newt-set-suspend-callback.php',
            'desc' => 'Set a callback function which gets invoked when user
  presses the suspend key',
        ),
    'newt_suspend' =>
        array (
            'file' => 'function.newt-suspend.php',
            'desc' => 'Tells newt to return the terminal to its initial state',
        ),
    'newt_textbox' =>
        array (
            'file' => 'function.newt-textbox.php',
        ),
    'newt_textbox_get_num_lines' =>
        array (
            'file' => 'function.newt-textbox-get-num-lines.php',
        ),
    'newt_textbox_reflowed' =>
        array (
            'file' => 'function.newt-textbox-reflowed.php',
        ),
    'newt_textbox_set_height' =>
        array (
            'file' => 'function.newt-textbox-set-height.php',
        ),
    'newt_textbox_set_text' =>
        array (
            'file' => 'function.newt-textbox-set-text.php',
        ),
    'newt_vertical_scrollbar' =>
        array (
            'file' => 'function.newt-vertical-scrollbar.php',
        ),
    'newt_wait_for_key' =>
        array (
            'file' => 'function.newt-wait-for-key.php',
            'desc' => 'Doesn\'t return until a key has been pressed',
        ),
    'newt_win_choice' =>
        array (
            'file' => 'function.newt-win-choice.php',
        ),
    'newt_win_entries' =>
        array (
            'file' => 'function.newt-win-entries.php',
        ),
    'newt_win_menu' =>
        array (
            'file' => 'function.newt-win-menu.php',
        ),
    'newt_win_message' =>
        array (
            'file' => 'function.newt-win-message.php',
        ),
    'newt_win_messagev' =>
        array (
            'file' => 'function.newt-win-messagev.php',
        ),
    'newt_win_ternary' =>
        array (
            'file' => 'function.newt-win-ternary.php',
        ),
    'next' =>
        array (
            'file' => 'function.next.php',
            'desc' => 'Advance the internal array pointer of an array',
        ),
    'ngettext' =>
        array (
            'file' => 'function.ngettext.php',
            'desc' => 'Plural version of gettext',
        ),
    'nl2br' =>
        array (
            'file' => 'function.nl2br.php',
            'desc' => 'Inserts HTML line breaks before all newlines in a string',
        ),
    'nl_langinfo' =>
        array (
            'file' => 'function.nl-langinfo.php',
            'desc' => 'Query language and locale information',
        ),
    'NoRewindIterator::current' =>
        array (
            'file' => 'norewinditerator.current.php',
            'desc' => 'Get the current value',
        ),
    'NoRewindIterator::getInnerIterator' =>
        array (
            'file' => 'norewinditerator.getinneriterator.php',
            'desc' => 'Get the inner iterator',
        ),
    'NoRewindIterator::key' =>
        array (
            'file' => 'norewinditerator.key.php',
            'desc' => 'Get the current key',
        ),
    'NoRewindIterator::next' =>
        array (
            'file' => 'norewinditerator.next.php',
            'desc' => 'Forward to the next element',
        ),
    'NoRewindIterator::rewind' =>
        array (
            'file' => 'norewinditerator.rewind.php',
            'desc' => 'Prevents the rewind operation on the inner iterator.',
        ),
    'NoRewindIterator::valid' =>
        array (
            'file' => 'norewinditerator.valid.php',
            'desc' => 'Validates the iterator',
        ),
    'NoRewindIterator::__construct' =>
        array (
            'file' => 'norewinditerator.construct.php',
            'desc' => 'Construct a NoRewindIterator',
        ),
    'Normalizer::isNormalized' =>
        array (
            'file' => 'normalizer.isnormalized.php',
            'desc' => 'Checks if the provided string is already in the specified normalization
   form.',
        ),
    'Normalizer::normalize' =>
        array (
            'file' => 'normalizer.normalize.php',
            'desc' => 'Normalizes the input provided and returns the normalized string',
        ),
    'nsapi_request_headers' =>
        array (
            'file' => 'function.nsapi-request-headers.php',
            'desc' => 'Fetch all HTTP request headers',
        ),
    'nsapi_response_headers' =>
        array (
            'file' => 'function.nsapi-response-headers.php',
            'desc' => 'Fetch all HTTP response headers',
        ),
    'nsapi_virtual' =>
        array (
            'file' => 'function.nsapi-virtual.php',
            'desc' => 'Perform an NSAPI sub-request',
        ),
    'nthmac' =>
        array (
            'file' => 'function.nthmac.php',
            'desc' => 'Obtain a nthmac key (needs 2 arguments)',
        ),
    'NumberFormatter::create' =>
        array (
            'file' => 'numberformatter.create.php',
            'desc' => 'Create a number formatter',
        ),
    'NumberFormatter::format' =>
        array (
            'file' => 'numberformatter.format.php',
            'desc' => 'Format a number',
        ),
    'NumberFormatter::formatCurrency' =>
        array (
            'file' => 'numberformatter.formatcurrency.php',
            'desc' => 'Format a currency value',
        ),
    'NumberFormatter::getAttribute' =>
        array (
            'file' => 'numberformatter.getattribute.php',
            'desc' => 'Get an attribute',
        ),
    'NumberFormatter::getErrorCode' =>
        array (
            'file' => 'numberformatter.geterrorcode.php',
            'desc' => 'Get formatter\'s last error code.',
        ),
    'NumberFormatter::getErrorMessage' =>
        array (
            'file' => 'numberformatter.geterrormessage.php',
            'desc' => 'Get formatter\'s last error message.',
        ),
    'NumberFormatter::getLocale' =>
        array (
            'file' => 'numberformatter.getlocale.php',
            'desc' => 'Get formatter locale',
        ),
    'NumberFormatter::getPattern' =>
        array (
            'file' => 'numberformatter.getpattern.php',
            'desc' => 'Get formatter pattern',
        ),
    'NumberFormatter::getSymbol' =>
        array (
            'file' => 'numberformatter.getsymbol.php',
            'desc' => 'Get a symbol value',
        ),
    'NumberFormatter::getTextAttribute' =>
        array (
            'file' => 'numberformatter.gettextattribute.php',
            'desc' => 'Get a text attribute',
        ),
    'NumberFormatter::parse' =>
        array (
            'file' => 'numberformatter.parse.php',
            'desc' => 'Parse a number',
        ),
    'NumberFormatter::parseCurrency' =>
        array (
            'file' => 'numberformatter.parsecurrency.php',
            'desc' => 'Parse a currency number',
        ),
    'NumberFormatter::setAttribute' =>
        array (
            'file' => 'numberformatter.setattribute.php',
            'desc' => 'Set an attribute',
        ),
    'NumberFormatter::setPattern' =>
        array (
            'file' => 'numberformatter.setpattern.php',
            'desc' => 'Set formatter pattern',
        ),
    'NumberFormatter::setSymbol' =>
        array (
            'file' => 'numberformatter.setsymbol.php',
            'desc' => 'Set a symbol value',
        ),
    'NumberFormatter::setTextAttribute' =>
        array (
            'file' => 'numberformatter.settextattribute.php',
            'desc' => 'Set a text attribute',
        ),
    'number_format' =>
        array (
            'file' => 'function.number-format.php',
            'desc' => 'Format a number with grouped thousands',
        ),
    'OAuth::disableDebug' =>
        array (
            'file' => 'oauth.disabledebug.php',
            'desc' => 'Turn off verbose debugging',
        ),
    'OAuth::disableRedirects' =>
        array (
            'file' => 'oauth.disableredirects.php',
            'desc' => 'Turn off redirects',
        ),
    'OAuth::disableSSLChecks' =>
        array (
            'file' => 'oauth.disablesslchecks.php',
            'desc' => 'Turn off SSL checks',
        ),
    'OAuth::enableDebug' =>
        array (
            'file' => 'oauth.enabledebug.php',
            'desc' => 'Turn on verbose debugging',
        ),
    'OAuth::enableRedirects' =>
        array (
            'file' => 'oauth.enableredirects.php',
            'desc' => 'Turn on redirects',
        ),
    'OAuth::enableSSLChecks' =>
        array (
            'file' => 'oauth.enablesslchecks.php',
            'desc' => 'Turn on SSL checks',
        ),
    'OAuth::fetch' =>
        array (
            'file' => 'oauth.fetch.php',
            'desc' => 'Fetch an OAuth protected resource',
        ),
    'OAuth::generateSignature' =>
        array (
            'file' => 'oauth.generatesignature.php',
            'desc' => 'Generate a signature',
        ),
    'OAuth::getAccessToken' =>
        array (
            'file' => 'oauth.getaccesstoken.php',
            'desc' => 'Fetch an access token',
        ),
    'OAuth::getCAPath' =>
        array (
            'file' => 'oauth.getcapath.php',
            'desc' => 'Gets CA information',
        ),
    'OAuth::getLastResponse' =>
        array (
            'file' => 'oauth.getlastresponse.php',
            'desc' => 'Get the last response',
        ),
    'OAuth::getLastResponseHeaders' =>
        array (
            'file' => 'oauth.getlastresponseheaders.php',
            'desc' => 'Get headers for last response',
        ),
    'OAuth::getLastResponseInfo' =>
        array (
            'file' => 'oauth.getlastresponseinfo.php',
            'desc' => 'Get HTTP information about the last response',
        ),
    'OAuth::getRequestHeader' =>
        array (
            'file' => 'oauth.getrequestheader.php',
            'desc' => 'Generate OAuth header string signature',
        ),
    'OAuth::getRequestToken' =>
        array (
            'file' => 'oauth.getrequesttoken.php',
            'desc' => 'Fetch a request token',
        ),
    'OAuth::setAuthType' =>
        array (
            'file' => 'oauth.setauthtype.php',
            'desc' => 'Set authorization type',
        ),
    'OAuth::setCAPath' =>
        array (
            'file' => 'oauth.setcapath.php',
            'desc' => 'Set CA path and info',
        ),
    'OAuth::setNonce' =>
        array (
            'file' => 'oauth.setnonce.php',
            'desc' => 'Set the nonce for subsequent requests',
        ),
    'OAuth::setRequestEngine' =>
        array (
            'file' => 'oauth.setrequestengine.php',
        ),
    'OAuth::setRSACertificate' =>
        array (
            'file' => 'oauth.setrsacertificate.php',
            'desc' => 'Set the RSA certificate',
        ),
    'OAuth::setSSLChecks' =>
        array (
            'file' => 'oauth.setsslchecks.php',
            'desc' => 'Tweak specific SSL checks for requests.',
        ),
    'OAuth::setTimestamp' =>
        array (
            'file' => 'oauth.settimestamp.php',
            'desc' => 'Set the timestamp',
        ),
    'OAuth::setToken' =>
        array (
            'file' => 'oauth.settoken.php',
            'desc' => 'Sets the token and secret',
        ),
    'OAuth::setVersion' =>
        array (
            'file' => 'oauth.setversion.php',
            'desc' => 'Set the OAuth version',
        ),
    'OAuth::__construct' =>
        array (
            'file' => 'oauth.construct.php',
            'desc' => 'Create a new OAuth object',
        ),
    'OAuth::__destruct' =>
        array (
            'file' => 'oauth.destruct.php',
            'desc' => 'The destructor',
        ),
    'OAuthProvider::addRequiredParameter' =>
        array (
            'file' => 'oauthprovider.addrequiredparameter.php',
            'desc' => 'Add required parameters',
        ),
    'OAuthProvider::callconsumerHandler' =>
        array (
            'file' => 'oauthprovider.callconsumerhandler.php',
            'desc' => 'Calls the consumerNonceHandler callback',
        ),
    'OAuthProvider::callTimestampNonceHandler' =>
        array (
            'file' => 'oauthprovider.calltimestampnoncehandler.php',
            'desc' => 'Calls the timestampNonceHandler callback',
        ),
    'OAuthProvider::calltokenHandler' =>
        array (
            'file' => 'oauthprovider.calltokenhandler.php',
            'desc' => 'Calls the tokenNonceHandler callback',
        ),
    'OAuthProvider::checkOAuthRequest' =>
        array (
            'file' => 'oauthprovider.checkoauthrequest.php',
            'desc' => 'Check an oauth request',
        ),
    'OAuthProvider::consumerHandler' =>
        array (
            'file' => 'oauthprovider.consumerhandler.php',
            'desc' => 'Set the consumerHandler handler callback',
        ),
    'OAuthProvider::generateToken' =>
        array (
            'file' => 'oauthprovider.generatetoken.php',
            'desc' => 'Generate a random token',
        ),
    'OAuthProvider::is2LeggedEndpoint' =>
        array (
            'file' => 'oauthprovider.is2leggedendpoint.php',
            'desc' => 'is2LeggedEndpoint',
        ),
    'OAuthProvider::isRequestTokenEndpoint' =>
        array (
            'file' => 'oauthprovider.isrequesttokenendpoint.php',
            'desc' => 'Sets isRequestTokenEndpoint',
        ),
    'OAuthProvider::removeRequiredParameter' =>
        array (
            'file' => 'oauthprovider.removerequiredparameter.php',
            'desc' => 'Remove a required parameter',
        ),
    'OAuthProvider::reportProblem' =>
        array (
            'file' => 'oauthprovider.reportproblem.php',
            'desc' => 'Report a problem',
        ),
    'OAuthProvider::setParam' =>
        array (
            'file' => 'oauthprovider.setparam.php',
            'desc' => 'Set a parameter',
        ),
    'OAuthProvider::setRequestTokenPath' =>
        array (
            'file' => 'oauthprovider.setrequesttokenpath.php',
            'desc' => 'Set request token path',
        ),
    'OAuthProvider::timestampNonceHandler' =>
        array (
            'file' => 'oauthprovider.timestampnoncehandler.php',
            'desc' => 'Set the timestampNonceHandler handler callback',
        ),
    'OAuthProvider::tokenHandler' =>
        array (
            'file' => 'oauthprovider.tokenhandler.php',
            'desc' => 'Set the tokenHandler handler callback',
        ),
    'OAuthProvider::__construct' =>
        array (
            'file' => 'oauthprovider.construct.php',
            'desc' => 'Constructs a new OAuthProvider object',
        ),
    'oauth_get_sbs' =>
        array (
            'file' => 'function.oauth-get-sbs.php',
            'desc' => 'Generate a Signature Base String',
        ),
    'oauth_urlencode' =>
        array (
            'file' => 'function.oauth-urlencode.php',
            'desc' => 'Encode a URI to RFC 3986',
        ),
    'ob_clean' =>
        array (
            'file' => 'function.ob-clean.php',
            'desc' => 'Clean (erase) the output buffer',
        ),
    'ob_deflatehandler' =>
        array (
            'file' => 'function.ob-deflatehandler.php',
            'desc' => 'Deflate output handler',
        ),
    'ob_end_clean' =>
        array (
            'file' => 'function.ob-end-clean.php',
            'desc' => 'Clean (erase) the output buffer and turn off output buffering',
        ),
    'ob_end_flush' =>
        array (
            'file' => 'function.ob-end-flush.php',
            'desc' => 'Flush (send) the output buffer and turn off output buffering',
        ),
    'ob_etaghandler' =>
        array (
            'file' => 'function.ob-etaghandler.php',
            'desc' => 'ETag output handler',
        ),
    'ob_flush' =>
        array (
            'file' => 'function.ob-flush.php',
            'desc' => 'Flush (send) the output buffer',
        ),
    'ob_get_clean' =>
        array (
            'file' => 'function.ob-get-clean.php',
            'desc' => 'Get current buffer contents and delete current output buffer',
        ),
    'ob_get_contents' =>
        array (
            'file' => 'function.ob-get-contents.php',
            'desc' => 'Return the contents of the output buffer',
        ),
    'ob_get_flush' =>
        array (
            'file' => 'function.ob-get-flush.php',
            'desc' => 'Flush the output buffer, return it as a string and turn off output buffering',
        ),
    'ob_get_length' =>
        array (
            'file' => 'function.ob-get-length.php',
            'desc' => 'Return the length of the output buffer',
        ),
    'ob_get_level' =>
        array (
            'file' => 'function.ob-get-level.php',
            'desc' => 'Return the nesting level of the output buffering mechanism',
        ),
    'ob_get_status' =>
        array (
            'file' => 'function.ob-get-status.php',
            'desc' => 'Get status of output buffers',
        ),
    'ob_gzhandler' =>
        array (
            'file' => 'function.ob-gzhandler.php',
            'desc' => 'ob_start callback function to gzip output buffer',
        ),
    'ob_iconv_handler' =>
        array (
            'file' => 'function.ob-iconv-handler.php',
            'desc' => 'Convert character encoding as output buffer handler',
        ),
    'ob_implicit_flush' =>
        array (
            'file' => 'function.ob-implicit-flush.php',
            'desc' => 'Turn implicit flush on/off',
        ),
    'ob_inflatehandler' =>
        array (
            'file' => 'function.ob-inflatehandler.php',
            'desc' => 'Inflate output handler',
        ),
    'ob_list_handlers' =>
        array (
            'file' => 'function.ob-list-handlers.php',
            'desc' => 'List all output handlers in use',
        ),
    'ob_start' =>
        array (
            'file' => 'function.ob-start.php',
            'desc' => 'Turn on output buffering',
        ),
    'ob_tidyhandler' =>
        array (
            'file' => 'function.ob-tidyhandler.php',
            'desc' => 'ob_start callback function to repair the buffer',
        ),
    'OCI-Collection::append' =>
        array (
            'file' => 'oci-collection.append.php',
            'desc' => 'Appends element to the collection',
        ),
    'OCI-Collection::assign' =>
        array (
            'file' => 'oci-collection.assign.php',
            'desc' => 'Assigns a value to the collection from another existing collection',
        ),
    'OCI-Collection::assignElem' =>
        array (
            'file' => 'oci-collection.assignelem.php',
            'desc' => 'Assigns a value to the element of the collection',
        ),
    'OCI-Collection::free' =>
        array (
            'file' => 'oci-collection.free.php',
            'desc' => 'Frees the resources associated with the collection object',
        ),
    'OCI-Collection::getElem' =>
        array (
            'file' => 'oci-collection.getelem.php',
            'desc' => 'Returns value of the element',
        ),
    'OCI-Collection::max' =>
        array (
            'file' => 'oci-collection.max.php',
            'desc' => 'Returns the maximum number of elements in the collection',
        ),
    'OCI-Collection::size' =>
        array (
            'file' => 'oci-collection.size.php',
            'desc' => 'Returns size of the collection',
        ),
    'OCI-Collection::trim' =>
        array (
            'file' => 'oci-collection.trim.php',
            'desc' => 'Trims elements from the end of the collection',
        ),
    'OCI-Lob::append' =>
        array (
            'file' => 'oci-lob.append.php',
            'desc' => 'Appends data from the large object to another large object',
        ),
    'OCI-Lob::close' =>
        array (
            'file' => 'oci-lob.close.php',
            'desc' => 'Closes LOB descriptor',
        ),
    'OCI-Lob::eof' =>
        array (
            'file' => 'oci-lob.eof.php',
            'desc' => 'Tests for end-of-file on a large object\'s descriptor',
        ),
    'OCI-Lob::erase' =>
        array (
            'file' => 'oci-lob.erase.php',
            'desc' => 'Erases a specified portion of the internal LOB data',
        ),
    'OCI-Lob::export' =>
        array (
            'file' => 'oci-lob.export.php',
            'desc' => 'Exports LOB\'s contents to a file',
        ),
    'OCI-Lob::flush' =>
        array (
            'file' => 'oci-lob.flush.php',
            'desc' => 'Flushes/writes buffer of the LOB to the server',
        ),
    'OCI-Lob::free' =>
        array (
            'file' => 'oci-lob.free.php',
            'desc' => 'Frees resources associated with the LOB descriptor',
        ),
    'OCI-Lob::getBuffering' =>
        array (
            'file' => 'oci-lob.getbuffering.php',
            'desc' => 'Returns current state of buffering for the large object',
        ),
    'OCI-Lob::import' =>
        array (
            'file' => 'oci-lob.import.php',
            'desc' => 'Imports file data to the LOB',
        ),
    'OCI-Lob::load' =>
        array (
            'file' => 'oci-lob.load.php',
            'desc' => 'Returns large object\'s contents',
        ),
    'OCI-Lob::read' =>
        array (
            'file' => 'oci-lob.read.php',
            'desc' => 'Reads part of the large object',
        ),
    'OCI-Lob::rewind' =>
        array (
            'file' => 'oci-lob.rewind.php',
            'desc' => 'Moves the internal pointer to the beginning of the large object',
        ),
    'OCI-Lob::save' =>
        array (
            'file' => 'oci-lob.save.php',
            'desc' => 'Saves data to the large object',
        ),
    'OCI-Lob::saveFile' =>
        array (
            'file' => 'oci-lob.savefile.php',
            'desc' => 'Alias of OCI-Lob::import',
        ),
    'OCI-Lob::seek' =>
        array (
            'file' => 'oci-lob.seek.php',
            'desc' => 'Sets the internal pointer of the large object',
        ),
    'OCI-Lob::setBuffering' =>
        array (
            'file' => 'oci-lob.setbuffering.php',
            'desc' => 'Changes current state of buffering for the large object',
        ),
    'OCI-Lob::size' =>
        array (
            'file' => 'oci-lob.size.php',
            'desc' => 'Returns size of large object',
        ),
    'OCI-Lob::tell' =>
        array (
            'file' => 'oci-lob.tell.php',
            'desc' => 'Returns the current position of internal pointer of large object',
        ),
    'OCI-Lob::truncate' =>
        array (
            'file' => 'oci-lob.truncate.php',
            'desc' => 'Truncates large object',
        ),
    'OCI-Lob::write' =>
        array (
            'file' => 'oci-lob.write.php',
            'desc' => 'Writes data to the large object',
        ),
    'OCI-Lob::writeTemporary' =>
        array (
            'file' => 'oci-lob.writetemporary.php',
            'desc' => 'Writes a temporary large object',
        ),
    'OCI-Lob::writeToFile' =>
        array (
            'file' => 'oci-lob.writetofile.php',
            'desc' => 'Alias of OCI-Lob::export',
        ),
    'ocibindbyname' =>
        array (
            'file' => 'function.ocibindbyname.php',
            'desc' => 'Alias of oci_bind_by_name',
        ),
    'ocicancel' =>
        array (
            'file' => 'function.ocicancel.php',
            'desc' => 'Alias of oci_cancel',
        ),
    'ocicloselob' =>
        array (
            'file' => 'function.ocicloselob.php',
            'desc' => 'Alias of OCI-Lob::close',
        ),
    'ocicollappend' =>
        array (
            'file' => 'function.ocicollappend.php',
            'desc' => 'Alias of OCI-Collection::append',
        ),
    'ocicollassign' =>
        array (
            'file' => 'function.ocicollassign.php',
            'desc' => 'Alias of OCI-Collection::assign',
        ),
    'ocicollassignelem' =>
        array (
            'file' => 'function.ocicollassignelem.php',
            'desc' => 'Alias of OCI-Collection::assignElem',
        ),
    'ocicollgetelem' =>
        array (
            'file' => 'function.ocicollgetelem.php',
            'desc' => 'Alias of OCI-Collection::getElem',
        ),
    'ocicollmax' =>
        array (
            'file' => 'function.ocicollmax.php',
            'desc' => 'Alias of OCI-Collection::max',
        ),
    'ocicollsize' =>
        array (
            'file' => 'function.ocicollsize.php',
            'desc' => 'Alias of OCI-Collection::size',
        ),
    'ocicolltrim' =>
        array (
            'file' => 'function.ocicolltrim.php',
            'desc' => 'Alias of OCI-Collection::trim',
        ),
    'ocicolumnisnull' =>
        array (
            'file' => 'function.ocicolumnisnull.php',
            'desc' => 'Alias of oci_field_is_null',
        ),
    'ocicolumnname' =>
        array (
            'file' => 'function.ocicolumnname.php',
            'desc' => 'Alias of oci_field_name',
        ),
    'ocicolumnprecision' =>
        array (
            'file' => 'function.ocicolumnprecision.php',
            'desc' => 'Alias of oci_field_precision',
        ),
    'ocicolumnscale' =>
        array (
            'file' => 'function.ocicolumnscale.php',
            'desc' => 'Alias of oci_field_scale',
        ),
    'ocicolumnsize' =>
        array (
            'file' => 'function.ocicolumnsize.php',
            'desc' => 'Alias of oci_field_size',
        ),
    'ocicolumntype' =>
        array (
            'file' => 'function.ocicolumntype.php',
            'desc' => 'Alias of oci_field_type',
        ),
    'ocicolumntyperaw' =>
        array (
            'file' => 'function.ocicolumntyperaw.php',
            'desc' => 'Alias of oci_field_type_raw',
        ),
    'ocicommit' =>
        array (
            'file' => 'function.ocicommit.php',
            'desc' => 'Alias of oci_commit',
        ),
    'ocidefinebyname' =>
        array (
            'file' => 'function.ocidefinebyname.php',
            'desc' => 'Alias of oci_define_by_name',
        ),
    'ocierror' =>
        array (
            'file' => 'function.ocierror.php',
            'desc' => 'Alias of oci_error',
        ),
    'ociexecute' =>
        array (
            'file' => 'function.ociexecute.php',
            'desc' => 'Alias of oci_execute',
        ),
    'ocifetch' =>
        array (
            'file' => 'function.ocifetch.php',
            'desc' => 'Alias of oci_fetch',
        ),
    'ocifetchinto' =>
        array (
            'file' => 'function.ocifetchinto.php',
            'desc' => 'Obsolete variant of oci_fetch_array, oci_fetch_object,
   oci_fetch_assoc and
   oci_fetch_row',
        ),
    'ocifetchstatement' =>
        array (
            'file' => 'function.ocifetchstatement.php',
            'desc' => 'Alias of oci_fetch_all',
        ),
    'ocifreecollection' =>
        array (
            'file' => 'function.ocifreecollection.php',
            'desc' => 'Alias of OCI-Collection::free',
        ),
    'ocifreecursor' =>
        array (
            'file' => 'function.ocifreecursor.php',
            'desc' => 'Alias of oci_free_statement',
        ),
    'ocifreedesc' =>
        array (
            'file' => 'function.ocifreedesc.php',
            'desc' => 'Alias of OCI-Lob::free',
        ),
    'ocifreestatement' =>
        array (
            'file' => 'function.ocifreestatement.php',
            'desc' => 'Alias of oci_free_statement',
        ),
    'ociinternaldebug' =>
        array (
            'file' => 'function.ociinternaldebug.php',
            'desc' => 'Alias of oci_internal_debug',
        ),
    'ociloadlob' =>
        array (
            'file' => 'function.ociloadlob.php',
            'desc' => 'Alias of OCI-Lob::load',
        ),
    'ocilogoff' =>
        array (
            'file' => 'function.ocilogoff.php',
            'desc' => 'Alias of oci_close',
        ),
    'ocilogon' =>
        array (
            'file' => 'function.ocilogon.php',
            'desc' => 'Alias of oci_connect',
        ),
    'ocinewcollection' =>
        array (
            'file' => 'function.ocinewcollection.php',
            'desc' => 'Alias of oci_new_collection',
        ),
    'ocinewcursor' =>
        array (
            'file' => 'function.ocinewcursor.php',
            'desc' => 'Alias of oci_new_cursor',
        ),
    'ocinewdescriptor' =>
        array (
            'file' => 'function.ocinewdescriptor.php',
            'desc' => 'Alias of oci_new_descriptor',
        ),
    'ocinlogon' =>
        array (
            'file' => 'function.ocinlogon.php',
            'desc' => 'Alias of oci_new_connect',
        ),
    'ocinumcols' =>
        array (
            'file' => 'function.ocinumcols.php',
            'desc' => 'Alias of oci_num_fields',
        ),
    'ociparse' =>
        array (
            'file' => 'function.ociparse.php',
            'desc' => 'Alias of oci_parse',
        ),
    'ociplogon' =>
        array (
            'file' => 'function.ociplogon.php',
            'desc' => 'Alias of oci_pconnect',
        ),
    'ociresult' =>
        array (
            'file' => 'function.ociresult.php',
            'desc' => 'Alias of oci_result',
        ),
    'ocirollback' =>
        array (
            'file' => 'function.ocirollback.php',
            'desc' => 'Alias of oci_rollback',
        ),
    'ocirowcount' =>
        array (
            'file' => 'function.ocirowcount.php',
            'desc' => 'Alias of oci_num_rows',
        ),
    'ocisavelob' =>
        array (
            'file' => 'function.ocisavelob.php',
            'desc' => 'Alias of OCI-Lob::save',
        ),
    'ocisavelobfile' =>
        array (
            'file' => 'function.ocisavelobfile.php',
            'desc' => 'Alias of OCI-Lob::import',
        ),
    'ociserverversion' =>
        array (
            'file' => 'function.ociserverversion.php',
            'desc' => 'Alias of oci_server_version',
        ),
    'ocisetprefetch' =>
        array (
            'file' => 'function.ocisetprefetch.php',
            'desc' => 'Alias of oci_set_prefetch',
        ),
    'ocistatementtype' =>
        array (
            'file' => 'function.ocistatementtype.php',
            'desc' => 'Alias of oci_statement_type',
        ),
    'ociwritelobtofile' =>
        array (
            'file' => 'function.ociwritelobtofile.php',
            'desc' => 'Alias of OCI-Lob::export',
        ),
    'ociwritetemporarylob' =>
        array (
            'file' => 'function.ociwritetemporarylob.php',
            'desc' => 'Alias of OCI-Lob::writeTemporary',
        ),
    'oci_bind_array_by_name' =>
        array (
            'file' => 'function.oci-bind-array-by-name.php',
            'desc' => 'Binds a PHP array to an Oracle PL/SQL array parameter',
        ),
    'oci_bind_by_name' =>
        array (
            'file' => 'function.oci-bind-by-name.php',
            'desc' => 'Binds a PHP variable to an Oracle placeholder',
        ),
    'oci_cancel' =>
        array (
            'file' => 'function.oci-cancel.php',
            'desc' => 'Cancels reading from cursor',
        ),
    'oci_client_version' =>
        array (
            'file' => 'function.oci-client-version.php',
            'desc' => 'Returns the Oracle client library version',
        ),
    'oci_close' =>
        array (
            'file' => 'function.oci-close.php',
            'desc' => 'Closes an Oracle connection',
        ),
    'oci_commit' =>
        array (
            'file' => 'function.oci-commit.php',
            'desc' => 'Commits the outstanding database transaction',
        ),
    'oci_connect' =>
        array (
            'file' => 'function.oci-connect.php',
            'desc' => 'Connect to an Oracle database',
        ),
    'oci_define_by_name' =>
        array (
            'file' => 'function.oci-define-by-name.php',
            'desc' => 'Associates a PHP variable with a column for query fetches',
        ),
    'oci_error' =>
        array (
            'file' => 'function.oci-error.php',
            'desc' => 'Returns the last error found',
        ),
    'oci_execute' =>
        array (
            'file' => 'function.oci-execute.php',
            'desc' => 'Executes a statement',
        ),
    'oci_fetch' =>
        array (
            'file' => 'function.oci-fetch.php',
            'desc' => 'Fetches the next row from a query into internal buffers',
        ),
    'oci_fetch_all' =>
        array (
            'file' => 'function.oci-fetch-all.php',
            'desc' => 'Fetches multiple rows from a query into a two-dimensional array',
        ),
    'oci_fetch_array' =>
        array (
            'file' => 'function.oci-fetch-array.php',
            'desc' => 'Returns the next row from a query as an associative or numeric array',
        ),
    'oci_fetch_assoc' =>
        array (
            'file' => 'function.oci-fetch-assoc.php',
            'desc' => 'Returns the next row from a query as an associative array',
        ),
    'oci_fetch_object' =>
        array (
            'file' => 'function.oci-fetch-object.php',
            'desc' => 'Returns the next row from a query as an object',
        ),
    'oci_fetch_row' =>
        array (
            'file' => 'function.oci-fetch-row.php',
            'desc' => 'Returns the next row from a query as a numeric array',
        ),
    'oci_field_is_null' =>
        array (
            'file' => 'function.oci-field-is-null.php',
            'desc' => 'Checks if a field in the currently fetched row is NULL',
        ),
    'oci_field_name' =>
        array (
            'file' => 'function.oci-field-name.php',
            'desc' => 'Returns the name of a field from the statement',
        ),
    'oci_field_precision' =>
        array (
            'file' => 'function.oci-field-precision.php',
            'desc' => 'Tell the precision of a field',
        ),
    'oci_field_scale' =>
        array (
            'file' => 'function.oci-field-scale.php',
            'desc' => 'Tell the scale of the field',
        ),
    'oci_field_size' =>
        array (
            'file' => 'function.oci-field-size.php',
            'desc' => 'Returns field\'s size',
        ),
    'oci_field_type' =>
        array (
            'file' => 'function.oci-field-type.php',
            'desc' => 'Returns a field\'s data type name',
        ),
    'oci_field_type_raw' =>
        array (
            'file' => 'function.oci-field-type-raw.php',
            'desc' => 'Tell the raw Oracle data type of the field',
        ),
    'oci_free_descriptor' =>
        array (
            'file' => 'function.oci-free-descriptor.php',
            'desc' => 'Frees a descriptor',
        ),
    'oci_free_statement' =>
        array (
            'file' => 'function.oci-free-statement.php',
            'desc' => 'Frees all resources associated with statement or cursor',
        ),
    'oci_get_implicit_resultset' =>
        array (
            'file' => 'function.oci-get-implicit-resultset.php',
            'desc' => 'Returns the next child statement resource from a parent statement resource that has Oracle Database 12c Implicit Result Sets',
        ),
    'oci_internal_debug' =>
        array (
            'file' => 'function.oci-internal-debug.php',
            'desc' => 'Enables or disables internal debug output',
        ),
    'oci_lob_copy' =>
        array (
            'file' => 'function.oci-lob-copy.php',
            'desc' => 'Copies large object',
        ),
    'oci_lob_is_equal' =>
        array (
            'file' => 'function.oci-lob-is-equal.php',
            'desc' => 'Compares two LOB/FILE locators for equality',
        ),
    'oci_new_collection' =>
        array (
            'file' => 'function.oci-new-collection.php',
            'desc' => 'Allocates new collection object',
        ),
    'oci_new_connect' =>
        array (
            'file' => 'function.oci-new-connect.php',
            'desc' => 'Connect to the Oracle server using a unique connection',
        ),
    'oci_new_cursor' =>
        array (
            'file' => 'function.oci-new-cursor.php',
            'desc' => 'Allocates and returns a new cursor (statement handle)',
        ),
    'oci_new_descriptor' =>
        array (
            'file' => 'function.oci-new-descriptor.php',
            'desc' => 'Initializes a new empty LOB or FILE descriptor',
        ),
    'oci_num_fields' =>
        array (
            'file' => 'function.oci-num-fields.php',
            'desc' => 'Returns the number of result columns in a statement',
        ),
    'oci_num_rows' =>
        array (
            'file' => 'function.oci-num-rows.php',
            'desc' => 'Returns number of rows affected during statement execution',
        ),
    'oci_parse' =>
        array (
            'file' => 'function.oci-parse.php',
            'desc' => 'Prepares an Oracle statement for execution',
        ),
    'oci_password_change' =>
        array (
            'file' => 'function.oci-password-change.php',
            'desc' => 'Changes password of Oracle\'s user',
        ),
    'oci_pconnect' =>
        array (
            'file' => 'function.oci-pconnect.php',
            'desc' => 'Connect to an Oracle database using a persistent connection',
        ),
    'oci_result' =>
        array (
            'file' => 'function.oci-result.php',
            'desc' => 'Returns field\'s value from the fetched row',
        ),
    'oci_rollback' =>
        array (
            'file' => 'function.oci-rollback.php',
            'desc' => 'Rolls back the outstanding database transaction',
        ),
    'oci_server_version' =>
        array (
            'file' => 'function.oci-server-version.php',
            'desc' => 'Returns the Oracle Database version',
        ),
    'oci_set_action' =>
        array (
            'file' => 'function.oci-set-action.php',
            'desc' => 'Sets the action name',
        ),
    'oci_set_client_identifier' =>
        array (
            'file' => 'function.oci-set-client-identifier.php',
            'desc' => 'Sets the client identifier',
        ),
    'oci_set_client_info' =>
        array (
            'file' => 'function.oci-set-client-info.php',
            'desc' => 'Sets the client information',
        ),
    'oci_set_edition' =>
        array (
            'file' => 'function.oci-set-edition.php',
            'desc' => 'Sets the database edition',
        ),
    'oci_set_module_name' =>
        array (
            'file' => 'function.oci-set-module-name.php',
            'desc' => 'Sets the module name',
        ),
    'oci_set_prefetch' =>
        array (
            'file' => 'function.oci-set-prefetch.php',
            'desc' => 'Sets number of rows to be prefetched by queries',
        ),
    'oci_statement_type' =>
        array (
            'file' => 'function.oci-statement-type.php',
            'desc' => 'Returns the type of a statement',
        ),
    'octdec' =>
        array (
            'file' => 'function.octdec.php',
            'desc' => 'Octal to decimal',
        ),
    'odbc_autocommit' =>
        array (
            'file' => 'function.odbc-autocommit.php',
            'desc' => 'Toggle autocommit behaviour',
        ),
    'odbc_binmode' =>
        array (
            'file' => 'function.odbc-binmode.php',
            'desc' => 'Handling of binary column data',
        ),
    'odbc_close' =>
        array (
            'file' => 'function.odbc-close.php',
            'desc' => 'Close an ODBC connection',
        ),
    'odbc_close_all' =>
        array (
            'file' => 'function.odbc-close-all.php',
            'desc' => 'Close all ODBC connections',
        ),
    'odbc_columnprivileges' =>
        array (
            'file' => 'function.odbc-columnprivileges.php',
            'desc' => 'Lists columns and associated privileges for the given table',
        ),
    'odbc_columns' =>
        array (
            'file' => 'function.odbc-columns.php',
            'desc' => 'Lists the column names in specified tables',
        ),
    'odbc_commit' =>
        array (
            'file' => 'function.odbc-commit.php',
            'desc' => 'Commit an ODBC transaction',
        ),
    'odbc_connect' =>
        array (
            'file' => 'function.odbc-connect.php',
            'desc' => 'Connect to a datasource',
        ),
    'odbc_cursor' =>
        array (
            'file' => 'function.odbc-cursor.php',
            'desc' => 'Get cursorname',
        ),
    'odbc_data_source' =>
        array (
            'file' => 'function.odbc-data-source.php',
            'desc' => 'Returns information about a current connection',
        ),
    'odbc_do' =>
        array (
            'file' => 'function.odbc-do.php',
            'desc' => 'Alias of odbc_exec',
        ),
    'odbc_error' =>
        array (
            'file' => 'function.odbc-error.php',
            'desc' => 'Get the last error code',
        ),
    'odbc_errormsg' =>
        array (
            'file' => 'function.odbc-errormsg.php',
            'desc' => 'Get the last error message',
        ),
    'odbc_exec' =>
        array (
            'file' => 'function.odbc-exec.php',
            'desc' => 'Prepare and execute an SQL statement',
        ),
    'odbc_execute' =>
        array (
            'file' => 'function.odbc-execute.php',
            'desc' => 'Execute a prepared statement',
        ),
    'odbc_fetch_array' =>
        array (
            'file' => 'function.odbc-fetch-array.php',
            'desc' => 'Fetch a result row as an associative array',
        ),
    'odbc_fetch_into' =>
        array (
            'file' => 'function.odbc-fetch-into.php',
            'desc' => 'Fetch one result row into array',
        ),
    'odbc_fetch_object' =>
        array (
            'file' => 'function.odbc-fetch-object.php',
            'desc' => 'Fetch a result row as an object',
        ),
    'odbc_fetch_row' =>
        array (
            'file' => 'function.odbc-fetch-row.php',
            'desc' => 'Fetch a row',
        ),
    'odbc_field_len' =>
        array (
            'file' => 'function.odbc-field-len.php',
            'desc' => 'Get the length (precision) of a field',
        ),
    'odbc_field_name' =>
        array (
            'file' => 'function.odbc-field-name.php',
            'desc' => 'Get the columnname',
        ),
    'odbc_field_num' =>
        array (
            'file' => 'function.odbc-field-num.php',
            'desc' => 'Return column number',
        ),
    'odbc_field_precision' =>
        array (
            'file' => 'function.odbc-field-precision.php',
            'desc' => 'Alias of odbc_field_len',
        ),
    'odbc_field_scale' =>
        array (
            'file' => 'function.odbc-field-scale.php',
            'desc' => 'Get the scale of a field',
        ),
    'odbc_field_type' =>
        array (
            'file' => 'function.odbc-field-type.php',
            'desc' => 'Datatype of a field',
        ),
    'odbc_foreignkeys' =>
        array (
            'file' => 'function.odbc-foreignkeys.php',
            'desc' => 'Retrieves a list of foreign keys',
        ),
    'odbc_free_result' =>
        array (
            'file' => 'function.odbc-free-result.php',
            'desc' => 'Free resources associated with a result',
        ),
    'odbc_gettypeinfo' =>
        array (
            'file' => 'function.odbc-gettypeinfo.php',
            'desc' => 'Retrieves information about data types supported by the data source',
        ),
    'odbc_longreadlen' =>
        array (
            'file' => 'function.odbc-longreadlen.php',
            'desc' => 'Handling of LONG columns',
        ),
    'odbc_next_result' =>
        array (
            'file' => 'function.odbc-next-result.php',
            'desc' => 'Checks if multiple results are available',
        ),
    'odbc_num_fields' =>
        array (
            'file' => 'function.odbc-num-fields.php',
            'desc' => 'Number of columns in a result',
        ),
    'odbc_num_rows' =>
        array (
            'file' => 'function.odbc-num-rows.php',
            'desc' => 'Number of rows in a result',
        ),
    'odbc_pconnect' =>
        array (
            'file' => 'function.odbc-pconnect.php',
            'desc' => 'Open a persistent database connection',
        ),
    'odbc_prepare' =>
        array (
            'file' => 'function.odbc-prepare.php',
            'desc' => 'Prepares a statement for execution',
        ),
    'odbc_primarykeys' =>
        array (
            'file' => 'function.odbc-primarykeys.php',
            'desc' => 'Gets the primary keys for a table',
        ),
    'odbc_procedurecolumns' =>
        array (
            'file' => 'function.odbc-procedurecolumns.php',
            'desc' => 'Retrieve information about parameters to procedures',
        ),
    'odbc_procedures' =>
        array (
            'file' => 'function.odbc-procedures.php',
            'desc' => 'Get the list of procedures stored in a specific data source',
        ),
    'odbc_result' =>
        array (
            'file' => 'function.odbc-result.php',
            'desc' => 'Get result data',
        ),
    'odbc_result_all' =>
        array (
            'file' => 'function.odbc-result-all.php',
            'desc' => 'Print result as HTML table',
        ),
    'odbc_rollback' =>
        array (
            'file' => 'function.odbc-rollback.php',
            'desc' => 'Rollback a transaction',
        ),
    'odbc_setoption' =>
        array (
            'file' => 'function.odbc-setoption.php',
            'desc' => 'Adjust ODBC settings',
        ),
    'odbc_specialcolumns' =>
        array (
            'file' => 'function.odbc-specialcolumns.php',
            'desc' => 'Retrieves special columns',
        ),
    'odbc_statistics' =>
        array (
            'file' => 'function.odbc-statistics.php',
            'desc' => 'Retrieve statistics about a table',
        ),
    'odbc_tableprivileges' =>
        array (
            'file' => 'function.odbc-tableprivileges.php',
            'desc' => 'Lists tables and the privileges associated with each table',
        ),
    'odbc_tables' =>
        array (
            'file' => 'function.odbc-tables.php',
            'desc' => 'Get the list of table names stored in a specific data source',
        ),
    'ogg://' =>
        array (
            'file' => 'wrappers.audio.php',
            'desc' => 'Audio streams',
        ),
    'opcache_compile_file' =>
        array (
            'file' => 'function.opcache-compile-file.php',
            'desc' => 'Compiles and caches a PHP script without executing it',
        ),
    'opcache_get_configuration' =>
        array (
            'file' => 'function.opcache-get-configuration.php',
            'desc' => 'Get configuration information about the cache',
        ),
    'opcache_get_status' =>
        array (
            'file' => 'function.opcache-get-status.php',
            'desc' => 'Get status information about the cache',
        ),
    'opcache_invalidate' =>
        array (
            'file' => 'function.opcache-invalidate.php',
            'desc' => 'Invalidates a cached script',
        ),
    'opcache_reset' =>
        array (
            'file' => 'function.opcache-reset.php',
            'desc' => 'Resets the contents of the opcode cache',
        ),
    'openal_buffer_create' =>
        array (
            'file' => 'function.openal-buffer-create.php',
            'desc' => 'Generate OpenAL buffer',
        ),
    'openal_buffer_data' =>
        array (
            'file' => 'function.openal-buffer-data.php',
            'desc' => 'Load a buffer with data',
        ),
    'openal_buffer_destroy' =>
        array (
            'file' => 'function.openal-buffer-destroy.php',
            'desc' => 'Destroys an OpenAL buffer',
        ),
    'openal_buffer_get' =>
        array (
            'file' => 'function.openal-buffer-get.php',
            'desc' => 'Retrieve an OpenAL buffer property',
        ),
    'openal_buffer_loadwav' =>
        array (
            'file' => 'function.openal-buffer-loadwav.php',
            'desc' => 'Load a .wav file into a buffer',
        ),
    'openal_context_create' =>
        array (
            'file' => 'function.openal-context-create.php',
            'desc' => 'Create an audio processing context',
        ),
    'openal_context_current' =>
        array (
            'file' => 'function.openal-context-current.php',
            'desc' => 'Make the specified context current',
        ),
    'openal_context_destroy' =>
        array (
            'file' => 'function.openal-context-destroy.php',
            'desc' => 'Destroys a context',
        ),
    'openal_context_process' =>
        array (
            'file' => 'function.openal-context-process.php',
            'desc' => 'Process the specified context',
        ),
    'openal_context_suspend' =>
        array (
            'file' => 'function.openal-context-suspend.php',
            'desc' => 'Suspend the specified context',
        ),
    'openal_device_close' =>
        array (
            'file' => 'function.openal-device-close.php',
            'desc' => 'Close an OpenAL device',
        ),
    'openal_device_open' =>
        array (
            'file' => 'function.openal-device-open.php',
            'desc' => 'Initialize the OpenAL audio layer',
        ),
    'openal_listener_get' =>
        array (
            'file' => 'function.openal-listener-get.php',
            'desc' => 'Retrieve a listener property',
        ),
    'openal_listener_set' =>
        array (
            'file' => 'function.openal-listener-set.php',
            'desc' => 'Set a listener property',
        ),
    'openal_source_create' =>
        array (
            'file' => 'function.openal-source-create.php',
            'desc' => 'Generate a source resource',
        ),
    'openal_source_destroy' =>
        array (
            'file' => 'function.openal-source-destroy.php',
            'desc' => 'Destroy a source resource',
        ),
    'openal_source_get' =>
        array (
            'file' => 'function.openal-source-get.php',
            'desc' => 'Retrieve an OpenAL source property',
        ),
    'openal_source_pause' =>
        array (
            'file' => 'function.openal-source-pause.php',
            'desc' => 'Pause the source',
        ),
    'openal_source_play' =>
        array (
            'file' => 'function.openal-source-play.php',
            'desc' => 'Start playing the source',
        ),
    'openal_source_rewind' =>
        array (
            'file' => 'function.openal-source-rewind.php',
            'desc' => 'Rewind the source',
        ),
    'openal_source_set' =>
        array (
            'file' => 'function.openal-source-set.php',
            'desc' => 'Set source property',
        ),
    'openal_source_stop' =>
        array (
            'file' => 'function.openal-source-stop.php',
            'desc' => 'Stop playing the source',
        ),
    'openal_stream' =>
        array (
            'file' => 'function.openal-stream.php',
            'desc' => 'Begin streaming on a source',
        ),
    'opendir' =>
        array (
            'file' => 'function.opendir.php',
            'desc' => 'Open directory handle',
        ),
    'openlog' =>
        array (
            'file' => 'function.openlog.php',
            'desc' => 'Open connection to system logger',
        ),
    'openssl_cipher_iv_length' =>
        array (
            'file' => 'function.openssl-cipher-iv-length.php',
            'desc' => 'Gets the cipher iv length',
        ),
    'openssl_csr_export' =>
        array (
            'file' => 'function.openssl-csr-export.php',
            'desc' => 'Exports a CSR as a string',
        ),
    'openssl_csr_export_to_file' =>
        array (
            'file' => 'function.openssl-csr-export-to-file.php',
            'desc' => 'Exports a CSR to a file',
        ),
    'openssl_csr_get_public_key' =>
        array (
            'file' => 'function.openssl-csr-get-public-key.php',
            'desc' => 'Returns the public key of a CERT',
        ),
    'openssl_csr_get_subject' =>
        array (
            'file' => 'function.openssl-csr-get-subject.php',
            'desc' => 'Returns the subject of a CERT',
        ),
    'openssl_csr_new' =>
        array (
            'file' => 'function.openssl-csr-new.php',
            'desc' => 'Generates a CSR',
        ),
    'openssl_csr_sign' =>
        array (
            'file' => 'function.openssl-csr-sign.php',
            'desc' => 'Sign a CSR with another certificate (or itself) and generate a certificate',
        ),
    'openssl_decrypt' =>
        array (
            'file' => 'function.openssl-decrypt.php',
            'desc' => 'Decrypts data',
        ),
    'openssl_dh_compute_key' =>
        array (
            'file' => 'function.openssl-dh-compute-key.php',
            'desc' => 'Computes shared secret for public value of remote DH key and local DH key',
        ),
    'openssl_digest' =>
        array (
            'file' => 'function.openssl-digest.php',
            'desc' => 'Computes a digest',
        ),
    'openssl_encrypt' =>
        array (
            'file' => 'function.openssl-encrypt.php',
            'desc' => 'Encrypts data',
        ),
    'openssl_error_string' =>
        array (
            'file' => 'function.openssl-error-string.php',
            'desc' => 'Return openSSL error message',
        ),
    'openssl_free_key' =>
        array (
            'file' => 'function.openssl-free-key.php',
            'desc' => 'Free key resource',
        ),
    'openssl_get_cert_locations' =>
        array (
            'file' => 'function.openssl-get-cert-locations.php',
            'desc' => 'Retrieve the available certificate locations',
        ),
    'openssl_get_cipher_methods' =>
        array (
            'file' => 'function.openssl-get-cipher-methods.php',
            'desc' => 'Gets available cipher methods',
        ),
    'openssl_get_md_methods' =>
        array (
            'file' => 'function.openssl-get-md-methods.php',
            'desc' => 'Gets available digest methods',
        ),
    'openssl_get_privatekey' =>
        array (
            'file' => 'function.openssl-get-privatekey.php',
            'desc' => 'Alias of openssl_pkey_get_private',
        ),
    'openssl_get_publickey' =>
        array (
            'file' => 'function.openssl-get-publickey.php',
            'desc' => 'Alias of openssl_pkey_get_public',
        ),
    'openssl_open' =>
        array (
            'file' => 'function.openssl-open.php',
            'desc' => 'Open sealed data',
        ),
    'openssl_pbkdf2' =>
        array (
            'file' => 'function.openssl-pbkdf2.php',
            'desc' => 'Generates a PKCS5 v2 PBKDF2 string, defaults to SHA-1',
        ),
    'openssl_pkcs7_decrypt' =>
        array (
            'file' => 'function.openssl-pkcs7-decrypt.php',
            'desc' => 'Decrypts an S/MIME encrypted message',
        ),
    'openssl_pkcs7_encrypt' =>
        array (
            'file' => 'function.openssl-pkcs7-encrypt.php',
            'desc' => 'Encrypt an S/MIME message',
        ),
    'openssl_pkcs7_sign' =>
        array (
            'file' => 'function.openssl-pkcs7-sign.php',
            'desc' => 'Sign an S/MIME message',
        ),
    'openssl_pkcs7_verify' =>
        array (
            'file' => 'function.openssl-pkcs7-verify.php',
            'desc' => 'Verifies the signature of an S/MIME signed message',
        ),
    'openssl_pkcs12_export' =>
        array (
            'file' => 'function.openssl-pkcs12-export.php',
            'desc' => 'Exports a PKCS#12 Compatible Certificate Store File to variable.',
        ),
    'openssl_pkcs12_export_to_file' =>
        array (
            'file' => 'function.openssl-pkcs12-export-to-file.php',
            'desc' => 'Exports a PKCS#12 Compatible Certificate Store File',
        ),
    'openssl_pkcs12_read' =>
        array (
            'file' => 'function.openssl-pkcs12-read.php',
            'desc' => 'Parse a PKCS#12 Certificate Store into an array',
        ),
    'openssl_pkey_export' =>
        array (
            'file' => 'function.openssl-pkey-export.php',
            'desc' => 'Gets an exportable representation of a key into a string',
        ),
    'openssl_pkey_export_to_file' =>
        array (
            'file' => 'function.openssl-pkey-export-to-file.php',
            'desc' => 'Gets an exportable representation of a key into a file',
        ),
    'openssl_pkey_free' =>
        array (
            'file' => 'function.openssl-pkey-free.php',
            'desc' => 'Frees a private key',
        ),
    'openssl_pkey_get_details' =>
        array (
            'file' => 'function.openssl-pkey-get-details.php',
            'desc' => 'Returns an array with the key details',
        ),
    'openssl_pkey_get_private' =>
        array (
            'file' => 'function.openssl-pkey-get-private.php',
            'desc' => 'Get a private key',
        ),
    'openssl_pkey_get_public' =>
        array (
            'file' => 'function.openssl-pkey-get-public.php',
            'desc' => 'Extract public key from certificate and prepare it for use',
        ),
    'openssl_pkey_new' =>
        array (
            'file' => 'function.openssl-pkey-new.php',
            'desc' => 'Generates a new private key',
        ),
    'openssl_private_decrypt' =>
        array (
            'file' => 'function.openssl-private-decrypt.php',
            'desc' => 'Decrypts data with private key',
        ),
    'openssl_private_encrypt' =>
        array (
            'file' => 'function.openssl-private-encrypt.php',
            'desc' => 'Encrypts data with private key',
        ),
    'openssl_public_decrypt' =>
        array (
            'file' => 'function.openssl-public-decrypt.php',
            'desc' => 'Decrypts data with public key',
        ),
    'openssl_public_encrypt' =>
        array (
            'file' => 'function.openssl-public-encrypt.php',
            'desc' => 'Encrypts data with public key',
        ),
    'openssl_random_pseudo_bytes' =>
        array (
            'file' => 'function.openssl-random-pseudo-bytes.php',
            'desc' => 'Generate a pseudo-random string of bytes',
        ),
    'openssl_seal' =>
        array (
            'file' => 'function.openssl-seal.php',
            'desc' => 'Seal (encrypt) data',
        ),
    'openssl_sign' =>
        array (
            'file' => 'function.openssl-sign.php',
            'desc' => 'Generate signature',
        ),
    'openssl_spki_export' =>
        array (
            'file' => 'function.openssl-spki-export.php',
            'desc' => 'Exports a valid PEM formatted public key signed public key and challenge',
        ),
    'openssl_spki_export_challenge' =>
        array (
            'file' => 'function.openssl-spki-export-challenge.php',
            'desc' => 'Exports the challenge assoicated with a signed public key and challenge',
        ),
    'openssl_spki_new' =>
        array (
            'file' => 'function.openssl-spki-new.php',
            'desc' => 'Generate a new signed public key and challenge',
        ),
    'openssl_spki_verify' =>
        array (
            'file' => 'function.openssl-spki-verify.php',
            'desc' => 'Verifies a signed public key and challenge',
        ),
    'openssl_verify' =>
        array (
            'file' => 'function.openssl-verify.php',
            'desc' => 'Verify signature',
        ),
    'openssl_x509_checkpurpose' =>
        array (
            'file' => 'function.openssl-x509-checkpurpose.php',
        ),
    'openssl_x509_check_private_key' =>
        array (
            'file' => 'function.openssl-x509-check-private-key.php',
            'desc' => 'Checks if a private key corresponds to a certificate',
        ),
    'openssl_x509_export' =>
        array (
            'file' => 'function.openssl-x509-export.php',
            'desc' => 'Exports a certificate as a string',
        ),
    'openssl_x509_export_to_file' =>
        array (
            'file' => 'function.openssl-x509-export-to-file.php',
            'desc' => 'Exports a certificate to file',
        ),
    'openssl_x509_fingerprint' =>
        array (
            'file' => 'function.openssl-x509-fingerprint.php',
            'desc' => 'Calculates the fingerprint, or digest, of a given X.509 certificate',
        ),
    'openssl_x509_free' =>
        array (
            'file' => 'function.openssl-x509-free.php',
            'desc' => 'Free certificate resource',
        ),
    'openssl_x509_parse' =>
        array (
            'file' => 'function.openssl-x509-parse.php',
            'desc' => 'Parse an X509 certificate and return the information as an array',
        ),
    'openssl_x509_read' =>
        array (
            'file' => 'function.openssl-x509-read.php',
            'desc' => 'Parse an X.509 certificate and return a resource identifier for
  it',
        ),
    'ord' =>
        array (
            'file' => 'function.ord.php',
            'desc' => 'Return ASCII value of character',
        ),
    'OuterIterator::getInnerIterator' =>
        array (
            'file' => 'outeriterator.getinneriterator.php',
            'desc' => 'Returns the inner iterator for the current entry.',
        ),
    'output_add_rewrite_var' =>
        array (
            'file' => 'function.output-add-rewrite-var.php',
            'desc' => 'Add URL rewriter values',
        ),
    'output_reset_rewrite_vars' =>
        array (
            'file' => 'function.output-reset-rewrite-vars.php',
            'desc' => 'Reset URL rewriter values',
        ),
    'override_function' =>
        array (
            'file' => 'function.override-function.php',
            'desc' => 'Overrides built-in functions',
        ),
    'pack' =>
        array (
            'file' => 'function.pack.php',
            'desc' => 'Pack data into binary string',
        ),
    'ParentIterator::accept' =>
        array (
            'file' => 'parentiterator.accept.php',
            'desc' => 'Determines acceptability',
        ),
    'ParentIterator::getChildren' =>
        array (
            'file' => 'parentiterator.getchildren.php',
            'desc' => 'Return the inner iterator\'s children contained in a ParentIterator',
        ),
    'ParentIterator::hasChildren' =>
        array (
            'file' => 'parentiterator.haschildren.php',
            'desc' => 'Check whether the inner iterator\'s current element has children',
        ),
    'ParentIterator::next' =>
        array (
            'file' => 'parentiterator.next.php',
            'desc' => 'Move the iterator forward',
        ),
    'ParentIterator::rewind' =>
        array (
            'file' => 'parentiterator.rewind.php',
            'desc' => 'Rewind the iterator',
        ),
    'ParentIterator::__construct' =>
        array (
            'file' => 'parentiterator.construct.php',
            'desc' => 'Constructs a ParentIterator',
        ),
    'parsekit_compile_file' =>
        array (
            'file' => 'function.parsekit-compile-file.php',
            'desc' => 'Compile a PHP file and return the resulting op array',
        ),
    'parsekit_compile_string' =>
        array (
            'file' => 'function.parsekit-compile-string.php',
            'desc' => 'Compile a string of PHP code and return the resulting op array',
        ),
    'parsekit_func_arginfo' =>
        array (
            'file' => 'function.parsekit-func-arginfo.php',
            'desc' => 'Return information regarding function argument(s)',
        ),
    'parse_ini_file' =>
        array (
            'file' => 'function.parse-ini-file.php',
            'desc' => 'Parse a configuration file',
        ),
    'parse_ini_string' =>
        array (
            'file' => 'function.parse-ini-string.php',
            'desc' => 'Parse a configuration string',
        ),
    'parse_str' =>
        array (
            'file' => 'function.parse-str.php',
            'desc' => 'Parses the string into variables',
        ),
    'parse_url' =>
        array (
            'file' => 'function.parse-url.php',
            'desc' => 'Parse a URL and return its components',
        ),
    'passthru' =>
        array (
            'file' => 'function.passthru.php',
            'desc' => 'Execute an external program and display raw output',
        ),
    'password_get_info' =>
        array (
            'file' => 'function.password-get-info.php',
            'desc' => 'Returns information about the given hash',
        ),
    'password_hash' =>
        array (
            'file' => 'function.password-hash.php',
            'desc' => 'Creates a password hash',
        ),
    'password_needs_rehash' =>
        array (
            'file' => 'function.password-needs-rehash.php',
            'desc' => 'Checks if the given hash matches the given options',
        ),
    'password_verify' =>
        array (
            'file' => 'function.password-verify.php',
            'desc' => 'Verifies that a password matches a hash',
        ),
    'pathinfo' =>
        array (
            'file' => 'function.pathinfo.php',
            'desc' => 'Returns information about a file path',
        ),
    'pclose' =>
        array (
            'file' => 'function.pclose.php',
            'desc' => 'Closes process file pointer',
        ),
    'pcntl_alarm' =>
        array (
            'file' => 'function.pcntl-alarm.php',
            'desc' => 'Set an alarm clock for delivery of a signal',
        ),
    'pcntl_errno' =>
        array (
            'file' => 'function.pcntl-errno.php',
            'desc' => 'Alias of pcntl_strerror',
        ),
    'pcntl_exec' =>
        array (
            'file' => 'function.pcntl-exec.php',
            'desc' => 'Executes specified program in current process space',
        ),
    'pcntl_fork' =>
        array (
            'file' => 'function.pcntl-fork.php',
            'desc' => 'Forks the currently running process',
        ),
    'pcntl_getpriority' =>
        array (
            'file' => 'function.pcntl-getpriority.php',
            'desc' => 'Get the priority of any process',
        ),
    'pcntl_get_last_error' =>
        array (
            'file' => 'function.pcntl-get-last-error.php',
            'desc' => 'Retrieve the error number set by the last pcntl function which failed',
        ),
    'pcntl_setpriority' =>
        array (
            'file' => 'function.pcntl-setpriority.php',
            'desc' => 'Change the priority of any process',
        ),
    'pcntl_signal' =>
        array (
            'file' => 'function.pcntl-signal.php',
            'desc' => 'Installs a signal handler',
        ),
    'pcntl_signal_dispatch' =>
        array (
            'file' => 'function.pcntl-signal-dispatch.php',
            'desc' => 'Calls signal handlers for pending signals',
        ),
    'pcntl_sigprocmask' =>
        array (
            'file' => 'function.pcntl-sigprocmask.php',
            'desc' => 'Sets and retrieves blocked signals',
        ),
    'pcntl_sigtimedwait' =>
        array (
            'file' => 'function.pcntl-sigtimedwait.php',
            'desc' => 'Waits for signals, with a timeout',
        ),
    'pcntl_sigwaitinfo' =>
        array (
            'file' => 'function.pcntl-sigwaitinfo.php',
            'desc' => 'Waits for signals',
        ),
    'pcntl_strerror' =>
        array (
            'file' => 'function.pcntl-strerror.php',
            'desc' => 'Retrieve the system error message associated with the given errno',
        ),
    'pcntl_wait' =>
        array (
            'file' => 'function.pcntl-wait.php',
            'desc' => 'Waits on or returns the status of a forked child',
        ),
    'pcntl_waitpid' =>
        array (
            'file' => 'function.pcntl-waitpid.php',
            'desc' => 'Waits on or returns the status of a forked child',
        ),
    'pcntl_wexitstatus' =>
        array (
            'file' => 'function.pcntl-wexitstatus.php',
            'desc' => 'Returns the return code of a terminated child',
        ),
    'pcntl_wifexited' =>
        array (
            'file' => 'function.pcntl-wifexited.php',
            'desc' => 'Checks if status code represents a normal exit',
        ),
    'pcntl_wifsignaled' =>
        array (
            'file' => 'function.pcntl-wifsignaled.php',
            'desc' => 'Checks whether the status code represents a termination due to a signal',
        ),
    'pcntl_wifstopped' =>
        array (
            'file' => 'function.pcntl-wifstopped.php',
            'desc' => 'Checks whether the child process is currently stopped',
        ),
    'pcntl_wstopsig' =>
        array (
            'file' => 'function.pcntl-wstopsig.php',
            'desc' => 'Returns the signal which caused the child to stop',
        ),
    'pcntl_wtermsig' =>
        array (
            'file' => 'function.pcntl-wtermsig.php',
            'desc' => 'Returns the signal which caused the child to terminate',
        ),
    'PDF_activate_item' =>
        array (
            'file' => 'function.pdf-activate-item.php',
            'desc' => 'Activate structure element or other content item',
        ),
    'PDF_add_annotation' =>
        array (
            'file' => 'function.pdf-add-annotation.php',
            'desc' => 'Add annotation [deprecated]',
        ),
    'PDF_add_bookmark' =>
        array (
            'file' => 'function.pdf-add-bookmark.php',
            'desc' => 'Add bookmark for current page [deprecated]',
        ),
    'PDF_add_launchlink' =>
        array (
            'file' => 'function.pdf-add-launchlink.php',
            'desc' => 'Add launch annotation for current page [deprecated]',
        ),
    'PDF_add_locallink' =>
        array (
            'file' => 'function.pdf-add-locallink.php',
            'desc' => 'Add link annotation for current page [deprecated]',
        ),
    'PDF_add_nameddest' =>
        array (
            'file' => 'function.pdf-add-nameddest.php',
            'desc' => 'Create named destination',
        ),
    'PDF_add_note' =>
        array (
            'file' => 'function.pdf-add-note.php',
            'desc' => 'Set annotation for current page [deprecated]',
        ),
    'PDF_add_outline' =>
        array (
            'file' => 'function.pdf-add-outline.php',
            'desc' => 'Add bookmark for current page [deprecated]',
        ),
    'PDF_add_pdflink' =>
        array (
            'file' => 'function.pdf-add-pdflink.php',
            'desc' => 'Add file link annotation for current page [deprecated]',
        ),
    'PDF_add_table_cell' =>
        array (
            'file' => 'function.pdf-add-table-cell.php',
            'desc' => 'Add a cell to a new or existing table',
        ),
    'PDF_add_textflow' =>
        array (
            'file' => 'function.pdf-add-textflow.php',
            'desc' => 'Create Textflow or add text to existing Textflow',
        ),
    'PDF_add_thumbnail' =>
        array (
            'file' => 'function.pdf-add-thumbnail.php',
            'desc' => 'Add thumbnail for current page',
        ),
    'PDF_add_weblink' =>
        array (
            'file' => 'function.pdf-add-weblink.php',
            'desc' => 'Add weblink for current page [deprecated]',
        ),
    'PDF_arc' =>
        array (
            'file' => 'function.pdf-arc.php',
            'desc' => 'Draw a counterclockwise circular arc segment',
        ),
    'PDF_arcn' =>
        array (
            'file' => 'function.pdf-arcn.php',
            'desc' => 'Draw a clockwise circular arc segment',
        ),
    'PDF_attach_file' =>
        array (
            'file' => 'function.pdf-attach-file.php',
            'desc' => 'Add file attachment for current page [deprecated]',
        ),
    'PDF_begin_document' =>
        array (
            'file' => 'function.pdf-begin-document.php',
            'desc' => 'Create new PDF file',
        ),
    'PDF_begin_font' =>
        array (
            'file' => 'function.pdf-begin-font.php',
            'desc' => 'Start a Type 3 font definition',
        ),
    'PDF_begin_glyph' =>
        array (
            'file' => 'function.pdf-begin-glyph.php',
            'desc' => 'Start glyph definition for Type 3 font',
        ),
    'PDF_begin_item' =>
        array (
            'file' => 'function.pdf-begin-item.php',
            'desc' => 'Open structure element or other content item',
        ),
    'PDF_begin_layer' =>
        array (
            'file' => 'function.pdf-begin-layer.php',
            'desc' => 'Start layer',
        ),
    'PDF_begin_page' =>
        array (
            'file' => 'function.pdf-begin-page.php',
            'desc' => 'Start new page [deprecated]',
        ),
    'PDF_begin_page_ext' =>
        array (
            'file' => 'function.pdf-begin-page-ext.php',
            'desc' => 'Start new page',
        ),
    'PDF_begin_pattern' =>
        array (
            'file' => 'function.pdf-begin-pattern.php',
            'desc' => 'Start pattern definition',
        ),
    'PDF_begin_template' =>
        array (
            'file' => 'function.pdf-begin-template.php',
            'desc' => 'Start template definition [deprecated]',
        ),
    'PDF_begin_template_ext' =>
        array (
            'file' => 'function.pdf-begin-template-ext.php',
            'desc' => 'Start template definition',
        ),
    'PDF_circle' =>
        array (
            'file' => 'function.pdf-circle.php',
            'desc' => 'Draw a circle',
        ),
    'PDF_clip' =>
        array (
            'file' => 'function.pdf-clip.php',
            'desc' => 'Clip to current path',
        ),
    'PDF_close' =>
        array (
            'file' => 'function.pdf-close.php',
            'desc' => 'Close pdf resource [deprecated]',
        ),
    'PDF_closepath' =>
        array (
            'file' => 'function.pdf-closepath.php',
            'desc' => 'Close current path',
        ),
    'PDF_closepath_fill_stroke' =>
        array (
            'file' => 'function.pdf-closepath-fill-stroke.php',
            'desc' => 'Close, fill and stroke current path',
        ),
    'PDF_closepath_stroke' =>
        array (
            'file' => 'function.pdf-closepath-stroke.php',
            'desc' => 'Close and stroke path',
        ),
    'PDF_close_image' =>
        array (
            'file' => 'function.pdf-close-image.php',
            'desc' => 'Close image',
        ),
    'PDF_close_pdi' =>
        array (
            'file' => 'function.pdf-close-pdi.php',
            'desc' => 'Close the input PDF document [deprecated]',
        ),
    'PDF_close_pdi_page' =>
        array (
            'file' => 'function.pdf-close-pdi-page.php',
            'desc' => 'Close the page handle',
        ),
    'PDF_concat' =>
        array (
            'file' => 'function.pdf-concat.php',
            'desc' => 'Concatenate a matrix to the CTM',
        ),
    'PDF_continue_text' =>
        array (
            'file' => 'function.pdf-continue-text.php',
            'desc' => 'Output text in next line',
        ),
    'PDF_create_3dview' =>
        array (
            'file' => 'function.pdf-create-3dview.php',
            'desc' => 'Create 3D view',
        ),
    'PDF_create_action' =>
        array (
            'file' => 'function.pdf-create-action.php',
            'desc' => 'Create action for objects or events',
        ),
    'PDF_create_annotation' =>
        array (
            'file' => 'function.pdf-create-annotation.php',
            'desc' => 'Create rectangular annotation',
        ),
    'PDF_create_bookmark' =>
        array (
            'file' => 'function.pdf-create-bookmark.php',
            'desc' => 'Create bookmark',
        ),
    'PDF_create_field' =>
        array (
            'file' => 'function.pdf-create-field.php',
            'desc' => 'Create form field',
        ),
    'PDF_create_fieldgroup' =>
        array (
            'file' => 'function.pdf-create-fieldgroup.php',
            'desc' => 'Create form field group',
        ),
    'PDF_create_gstate' =>
        array (
            'file' => 'function.pdf-create-gstate.php',
            'desc' => 'Create graphics state object',
        ),
    'PDF_create_pvf' =>
        array (
            'file' => 'function.pdf-create-pvf.php',
            'desc' => 'Create PDFlib virtual file',
        ),
    'PDF_create_textflow' =>
        array (
            'file' => 'function.pdf-create-textflow.php',
            'desc' => 'Create textflow object',
        ),
    'PDF_curveto' =>
        array (
            'file' => 'function.pdf-curveto.php',
            'desc' => 'Draw Bezier curve',
        ),
    'PDF_define_layer' =>
        array (
            'file' => 'function.pdf-define-layer.php',
            'desc' => 'Create layer definition',
        ),
    'PDF_delete' =>
        array (
            'file' => 'function.pdf-delete.php',
            'desc' => 'Delete PDFlib object',
        ),
    'PDF_delete_pvf' =>
        array (
            'file' => 'function.pdf-delete-pvf.php',
            'desc' => 'Delete PDFlib virtual file',
        ),
    'PDF_delete_table' =>
        array (
            'file' => 'function.pdf-delete-table.php',
            'desc' => 'Delete table object',
        ),
    'PDF_delete_textflow' =>
        array (
            'file' => 'function.pdf-delete-textflow.php',
            'desc' => 'Delete textflow object',
        ),
    'PDF_encoding_set_char' =>
        array (
            'file' => 'function.pdf-encoding-set-char.php',
            'desc' => 'Add glyph name and/or Unicode value',
        ),
    'PDF_endpath' =>
        array (
            'file' => 'function.pdf-endpath.php',
            'desc' => 'End current path',
        ),
    'PDF_end_document' =>
        array (
            'file' => 'function.pdf-end-document.php',
            'desc' => 'Close PDF file',
        ),
    'PDF_end_font' =>
        array (
            'file' => 'function.pdf-end-font.php',
            'desc' => 'Terminate Type 3 font definition',
        ),
    'PDF_end_glyph' =>
        array (
            'file' => 'function.pdf-end-glyph.php',
            'desc' => 'Terminate glyph definition for Type 3 font',
        ),
    'PDF_end_item' =>
        array (
            'file' => 'function.pdf-end-item.php',
            'desc' => 'Close structure element or other content item',
        ),
    'PDF_end_layer' =>
        array (
            'file' => 'function.pdf-end-layer.php',
            'desc' => 'Deactivate all active layers',
        ),
    'PDF_end_page' =>
        array (
            'file' => 'function.pdf-end-page.php',
            'desc' => 'Finish page',
        ),
    'PDF_end_page_ext' =>
        array (
            'file' => 'function.pdf-end-page-ext.php',
            'desc' => 'Finish page',
        ),
    'PDF_end_pattern' =>
        array (
            'file' => 'function.pdf-end-pattern.php',
            'desc' => 'Finish pattern',
        ),
    'PDF_end_template' =>
        array (
            'file' => 'function.pdf-end-template.php',
            'desc' => 'Finish template',
        ),
    'PDF_fill' =>
        array (
            'file' => 'function.pdf-fill.php',
            'desc' => 'Fill current path',
        ),
    'PDF_fill_imageblock' =>
        array (
            'file' => 'function.pdf-fill-imageblock.php',
            'desc' => 'Fill image block with variable data',
        ),
    'PDF_fill_pdfblock' =>
        array (
            'file' => 'function.pdf-fill-pdfblock.php',
            'desc' => 'Fill PDF block with variable data',
        ),
    'PDF_fill_stroke' =>
        array (
            'file' => 'function.pdf-fill-stroke.php',
            'desc' => 'Fill and stroke path',
        ),
    'PDF_fill_textblock' =>
        array (
            'file' => 'function.pdf-fill-textblock.php',
            'desc' => 'Fill text block with variable data',
        ),
    'PDF_findfont' =>
        array (
            'file' => 'function.pdf-findfont.php',
            'desc' => 'Prepare font for later use [deprecated]',
        ),
    'PDF_fit_image' =>
        array (
            'file' => 'function.pdf-fit-image.php',
            'desc' => 'Place image or template',
        ),
    'PDF_fit_pdi_page' =>
        array (
            'file' => 'function.pdf-fit-pdi-page.php',
            'desc' => 'Place imported PDF page',
        ),
    'PDF_fit_table' =>
        array (
            'file' => 'function.pdf-fit-table.php',
            'desc' => 'Place table on page',
        ),
    'PDF_fit_textflow' =>
        array (
            'file' => 'function.pdf-fit-textflow.php',
            'desc' => 'Format textflow in rectangular area',
        ),
    'PDF_fit_textline' =>
        array (
            'file' => 'function.pdf-fit-textline.php',
            'desc' => 'Place single line of text',
        ),
    'PDF_get_apiname' =>
        array (
            'file' => 'function.pdf-get-apiname.php',
            'desc' => 'Get name of unsuccessfull API function',
        ),
    'PDF_get_buffer' =>
        array (
            'file' => 'function.pdf-get-buffer.php',
            'desc' => 'Get PDF output buffer',
        ),
    'PDF_get_errmsg' =>
        array (
            'file' => 'function.pdf-get-errmsg.php',
            'desc' => 'Get error text',
        ),
    'PDF_get_errnum' =>
        array (
            'file' => 'function.pdf-get-errnum.php',
            'desc' => 'Get error number',
        ),
    'PDF_get_font' =>
        array (
            'file' => 'function.pdf-get-font.php',
            'desc' => 'Get font [deprecated]',
        ),
    'PDF_get_fontname' =>
        array (
            'file' => 'function.pdf-get-fontname.php',
            'desc' => 'Get font name [deprecated]',
        ),
    'PDF_get_fontsize' =>
        array (
            'file' => 'function.pdf-get-fontsize.php',
            'desc' => 'Font handling [deprecated]',
        ),
    'PDF_get_image_height' =>
        array (
            'file' => 'function.pdf-get-image-height.php',
            'desc' => 'Get image height [deprecated]',
        ),
    'PDF_get_image_width' =>
        array (
            'file' => 'function.pdf-get-image-width.php',
            'desc' => 'Get image width [deprecated]',
        ),
    'PDF_get_majorversion' =>
        array (
            'file' => 'function.pdf-get-majorversion.php',
            'desc' => 'Get major version number [deprecated]',
        ),
    'PDF_get_minorversion' =>
        array (
            'file' => 'function.pdf-get-minorversion.php',
            'desc' => 'Get minor version number [deprecated]',
        ),
    'PDF_get_parameter' =>
        array (
            'file' => 'function.pdf-get-parameter.php',
            'desc' => 'Get string parameter',
        ),
    'PDF_get_pdi_parameter' =>
        array (
            'file' => 'function.pdf-get-pdi-parameter.php',
            'desc' => 'Get PDI string parameter [deprecated]',
        ),
    'PDF_get_pdi_value' =>
        array (
            'file' => 'function.pdf-get-pdi-value.php',
            'desc' => 'Get PDI numerical parameter [deprecated]',
        ),
    'PDF_get_value' =>
        array (
            'file' => 'function.pdf-get-value.php',
            'desc' => 'Get numerical parameter',
        ),
    'PDF_info_font' =>
        array (
            'file' => 'function.pdf-info-font.php',
            'desc' => 'Query detailed information about a loaded font',
        ),
    'PDF_info_matchbox' =>
        array (
            'file' => 'function.pdf-info-matchbox.php',
            'desc' => 'Query matchbox information',
        ),
    'PDF_info_table' =>
        array (
            'file' => 'function.pdf-info-table.php',
            'desc' => 'Retrieve table information',
        ),
    'PDF_info_textflow' =>
        array (
            'file' => 'function.pdf-info-textflow.php',
            'desc' => 'Query textflow state',
        ),
    'PDF_info_textline' =>
        array (
            'file' => 'function.pdf-info-textline.php',
            'desc' => 'Perform textline formatting and query metrics',
        ),
    'PDF_initgraphics' =>
        array (
            'file' => 'function.pdf-initgraphics.php',
            'desc' => 'Reset graphic state',
        ),
    'PDF_lineto' =>
        array (
            'file' => 'function.pdf-lineto.php',
            'desc' => 'Draw a line',
        ),
    'PDF_load_3ddata' =>
        array (
            'file' => 'function.pdf-load-3ddata.php',
            'desc' => 'Load 3D model',
        ),
    'PDF_load_font' =>
        array (
            'file' => 'function.pdf-load-font.php',
            'desc' => 'Search and prepare font',
        ),
    'PDF_load_iccprofile' =>
        array (
            'file' => 'function.pdf-load-iccprofile.php',
            'desc' => 'Search and prepare ICC profile',
        ),
    'PDF_load_image' =>
        array (
            'file' => 'function.pdf-load-image.php',
            'desc' => 'Open image file',
        ),
    'PDF_makespotcolor' =>
        array (
            'file' => 'function.pdf-makespotcolor.php',
            'desc' => 'Make spot color',
        ),
    'PDF_moveto' =>
        array (
            'file' => 'function.pdf-moveto.php',
            'desc' => 'Set current point',
        ),
    'PDF_new' =>
        array (
            'file' => 'function.pdf-new.php',
            'desc' => 'Create PDFlib object',
        ),
    'PDF_open_ccitt' =>
        array (
            'file' => 'function.pdf-open-ccitt.php',
            'desc' => 'Open raw CCITT image [deprecated]',
        ),
    'PDF_open_file' =>
        array (
            'file' => 'function.pdf-open-file.php',
            'desc' => 'Create PDF file [deprecated]',
        ),
    'PDF_open_gif' =>
        array (
            'file' => 'function.pdf-open-gif.php',
            'desc' => 'Open GIF image [deprecated]',
        ),
    'PDF_open_image' =>
        array (
            'file' => 'function.pdf-open-image.php',
            'desc' => 'Use image data [deprecated]',
        ),
    'PDF_open_image_file' =>
        array (
            'file' => 'function.pdf-open-image-file.php',
            'desc' => 'Read image from file [deprecated]',
        ),
    'PDF_open_jpeg' =>
        array (
            'file' => 'function.pdf-open-jpeg.php',
            'desc' => 'Open JPEG image [deprecated]',
        ),
    'PDF_open_memory_image' =>
        array (
            'file' => 'function.pdf-open-memory-image.php',
            'desc' => 'Open image created with PHP\'s image functions [not supported]',
        ),
    'PDF_open_pdi' =>
        array (
            'file' => 'function.pdf-open-pdi.php',
            'desc' => 'Open PDF file [deprecated]',
        ),
    'PDF_open_pdi_document' =>
        array (
            'file' => 'function.pdf-open-pdi-document.php',
            'desc' => 'Prepare a pdi document',
        ),
    'PDF_open_pdi_page' =>
        array (
            'file' => 'function.pdf-open-pdi-page.php',
            'desc' => 'Prepare a page',
        ),
    'PDF_open_tiff' =>
        array (
            'file' => 'function.pdf-open-tiff.php',
            'desc' => 'Open TIFF image [deprecated]',
        ),
    'PDF_pcos_get_number' =>
        array (
            'file' => 'function.pdf-pcos-get-number.php',
            'desc' => 'Get value of pCOS path with type number or boolean',
        ),
    'PDF_pcos_get_stream' =>
        array (
            'file' => 'function.pdf-pcos-get-stream.php',
            'desc' => 'Get contents of pCOS path with type stream, fstream, or string',
        ),
    'PDF_pcos_get_string' =>
        array (
            'file' => 'function.pdf-pcos-get-string.php',
            'desc' => 'Get value of pCOS path with type name, string, or boolean',
        ),
    'PDF_place_image' =>
        array (
            'file' => 'function.pdf-place-image.php',
            'desc' => 'Place image on the page [deprecated]',
        ),
    'PDF_place_pdi_page' =>
        array (
            'file' => 'function.pdf-place-pdi-page.php',
            'desc' => 'Place PDF page [deprecated]',
        ),
    'PDF_process_pdi' =>
        array (
            'file' => 'function.pdf-process-pdi.php',
            'desc' => 'Process imported PDF document',
        ),
    'PDF_rect' =>
        array (
            'file' => 'function.pdf-rect.php',
            'desc' => 'Draw rectangle',
        ),
    'PDF_restore' =>
        array (
            'file' => 'function.pdf-restore.php',
            'desc' => 'Restore graphics state',
        ),
    'PDF_resume_page' =>
        array (
            'file' => 'function.pdf-resume-page.php',
            'desc' => 'Resume page',
        ),
    'PDF_rotate' =>
        array (
            'file' => 'function.pdf-rotate.php',
            'desc' => 'Rotate coordinate system',
        ),
    'PDF_save' =>
        array (
            'file' => 'function.pdf-save.php',
            'desc' => 'Save graphics state',
        ),
    'PDF_scale' =>
        array (
            'file' => 'function.pdf-scale.php',
            'desc' => 'Scale coordinate system',
        ),
    'PDF_setcolor' =>
        array (
            'file' => 'function.pdf-setcolor.php',
            'desc' => 'Set fill and stroke color',
        ),
    'PDF_setdash' =>
        array (
            'file' => 'function.pdf-setdash.php',
            'desc' => 'Set simple dash pattern',
        ),
    'PDF_setdashpattern' =>
        array (
            'file' => 'function.pdf-setdashpattern.php',
            'desc' => 'Set dash pattern',
        ),
    'PDF_setflat' =>
        array (
            'file' => 'function.pdf-setflat.php',
            'desc' => 'Set flatness',
        ),
    'PDF_setfont' =>
        array (
            'file' => 'function.pdf-setfont.php',
            'desc' => 'Set font',
        ),
    'PDF_setgray' =>
        array (
            'file' => 'function.pdf-setgray.php',
            'desc' => 'Set color to gray [deprecated]',
        ),
    'PDF_setgray_fill' =>
        array (
            'file' => 'function.pdf-setgray-fill.php',
            'desc' => 'Set fill color to gray [deprecated]',
        ),
    'PDF_setgray_stroke' =>
        array (
            'file' => 'function.pdf-setgray-stroke.php',
            'desc' => 'Set stroke color to gray [deprecated]',
        ),
    'PDF_setlinecap' =>
        array (
            'file' => 'function.pdf-setlinecap.php',
            'desc' => 'Set linecap parameter',
        ),
    'PDF_setlinejoin' =>
        array (
            'file' => 'function.pdf-setlinejoin.php',
            'desc' => 'Set linejoin parameter',
        ),
    'PDF_setlinewidth' =>
        array (
            'file' => 'function.pdf-setlinewidth.php',
            'desc' => 'Set line width',
        ),
    'PDF_setmatrix' =>
        array (
            'file' => 'function.pdf-setmatrix.php',
            'desc' => 'Set current transformation matrix',
        ),
    'PDF_setmiterlimit' =>
        array (
            'file' => 'function.pdf-setmiterlimit.php',
            'desc' => 'Set miter limit',
        ),
    'PDF_setpolydash' =>
        array (
            'file' => 'function.pdf-setpolydash.php',
            'desc' => 'Set complicated dash pattern [deprecated]',
        ),
    'PDF_setrgbcolor' =>
        array (
            'file' => 'function.pdf-setrgbcolor.php',
            'desc' => 'Set fill and stroke rgb color values [deprecated]',
        ),
    'PDF_setrgbcolor_fill' =>
        array (
            'file' => 'function.pdf-setrgbcolor-fill.php',
            'desc' => 'Set fill rgb color values [deprecated]',
        ),
    'PDF_setrgbcolor_stroke' =>
        array (
            'file' => 'function.pdf-setrgbcolor-stroke.php',
            'desc' => 'Set stroke rgb color values [deprecated]',
        ),
    'PDF_set_border_color' =>
        array (
            'file' => 'function.pdf-set-border-color.php',
            'desc' => 'Set border color of annotations [deprecated]',
        ),
    'PDF_set_border_dash' =>
        array (
            'file' => 'function.pdf-set-border-dash.php',
            'desc' => 'Set border dash style of annotations [deprecated]',
        ),
    'PDF_set_border_style' =>
        array (
            'file' => 'function.pdf-set-border-style.php',
            'desc' => 'Set border style of annotations [deprecated]',
        ),
    'PDF_set_char_spacing' =>
        array (
            'file' => 'function.pdf-set-char-spacing.php',
            'desc' => 'Set character spacing [deprecated]',
        ),
    'PDF_set_duration' =>
        array (
            'file' => 'function.pdf-set-duration.php',
            'desc' => 'Set duration between pages [deprecated]',
        ),
    'PDF_set_gstate' =>
        array (
            'file' => 'function.pdf-set-gstate.php',
            'desc' => 'Activate graphics state object',
        ),
    'PDF_set_horiz_scaling' =>
        array (
            'file' => 'function.pdf-set-horiz-scaling.php',
            'desc' => 'Set horizontal text scaling [deprecated]',
        ),
    'PDF_set_info' =>
        array (
            'file' => 'function.pdf-set-info.php',
            'desc' => 'Fill document info field',
        ),
    'PDF_set_info_author' =>
        array (
            'file' => 'function.pdf-set-info-author.php',
            'desc' => 'Fill the author document info field [deprecated]',
        ),
    'PDF_set_info_creator' =>
        array (
            'file' => 'function.pdf-set-info-creator.php',
            'desc' => 'Fill the creator document info field [deprecated]',
        ),
    'PDF_set_info_keywords' =>
        array (
            'file' => 'function.pdf-set-info-keywords.php',
            'desc' => 'Fill the keywords document info field [deprecated]',
        ),
    'PDF_set_info_subject' =>
        array (
            'file' => 'function.pdf-set-info-subject.php',
            'desc' => 'Fill the subject document info field [deprecated]',
        ),
    'PDF_set_info_title' =>
        array (
            'file' => 'function.pdf-set-info-title.php',
            'desc' => 'Fill the title document info field [deprecated]',
        ),
    'PDF_set_layer_dependency' =>
        array (
            'file' => 'function.pdf-set-layer-dependency.php',
            'desc' => 'Define relationships among layers',
        ),
    'PDF_set_leading' =>
        array (
            'file' => 'function.pdf-set-leading.php',
            'desc' => 'Set distance between text lines [deprecated]',
        ),
    'PDF_set_parameter' =>
        array (
            'file' => 'function.pdf-set-parameter.php',
            'desc' => 'Set string parameter',
        ),
    'PDF_set_text_matrix' =>
        array (
            'file' => 'function.pdf-set-text-matrix.php',
            'desc' => 'Set text matrix [deprecated]',
        ),
    'PDF_set_text_pos' =>
        array (
            'file' => 'function.pdf-set-text-pos.php',
            'desc' => 'Set text position',
        ),
    'PDF_set_text_rendering' =>
        array (
            'file' => 'function.pdf-set-text-rendering.php',
            'desc' => 'Determine text rendering [deprecated]',
        ),
    'PDF_set_text_rise' =>
        array (
            'file' => 'function.pdf-set-text-rise.php',
            'desc' => 'Set text rise [deprecated]',
        ),
    'PDF_set_value' =>
        array (
            'file' => 'function.pdf-set-value.php',
            'desc' => 'Set numerical parameter',
        ),
    'PDF_set_word_spacing' =>
        array (
            'file' => 'function.pdf-set-word-spacing.php',
            'desc' => 'Set spacing between words [deprecated]',
        ),
    'PDF_shading' =>
        array (
            'file' => 'function.pdf-shading.php',
            'desc' => 'Define blend',
        ),
    'PDF_shading_pattern' =>
        array (
            'file' => 'function.pdf-shading-pattern.php',
            'desc' => 'Define shading pattern',
        ),
    'PDF_shfill' =>
        array (
            'file' => 'function.pdf-shfill.php',
            'desc' => 'Fill area with shading',
        ),
    'PDF_show' =>
        array (
            'file' => 'function.pdf-show.php',
            'desc' => 'Output text at current position',
        ),
    'PDF_show_boxed' =>
        array (
            'file' => 'function.pdf-show-boxed.php',
            'desc' => 'Output text in a box [deprecated]',
        ),
    'PDF_show_xy' =>
        array (
            'file' => 'function.pdf-show-xy.php',
            'desc' => 'Output text at given position',
        ),
    'PDF_skew' =>
        array (
            'file' => 'function.pdf-skew.php',
            'desc' => 'Skew the coordinate system',
        ),
    'PDF_stringwidth' =>
        array (
            'file' => 'function.pdf-stringwidth.php',
            'desc' => 'Return width of text',
        ),
    'PDF_stroke' =>
        array (
            'file' => 'function.pdf-stroke.php',
            'desc' => 'Stroke path',
        ),
    'PDF_suspend_page' =>
        array (
            'file' => 'function.pdf-suspend-page.php',
            'desc' => 'Suspend page',
        ),
    'PDF_translate' =>
        array (
            'file' => 'function.pdf-translate.php',
            'desc' => 'Set origin of coordinate system',
        ),
    'PDF_utf8_to_utf16' =>
        array (
            'file' => 'function.pdf-utf8-to-utf16.php',
            'desc' => 'Convert string from UTF-8 to UTF-16',
        ),
    'PDF_utf16_to_utf8' =>
        array (
            'file' => 'function.pdf-utf16-to-utf8.php',
            'desc' => 'Convert string from UTF-16 to UTF-8',
        ),
    'PDF_utf32_to_utf16' =>
        array (
            'file' => 'function.pdf-utf32-to-utf16.php',
            'desc' => 'Convert string from UTF-32 to UTF-16',
        ),
    'PDO::beginTransaction' =>
        array (
            'file' => 'pdo.begintransaction.php',
            'desc' => 'Initiates a transaction',
        ),
    'PDO::commit' =>
        array (
            'file' => 'pdo.commit.php',
            'desc' => 'Commits a transaction',
        ),
    'PDO::cubrid_schema' =>
        array (
            'file' => 'pdo.cubrid-schema.php',
            'desc' => 'Get the requested schema information',
        ),
    'PDO::errorCode' =>
        array (
            'file' => 'pdo.errorcode.php',
            'desc' => 'Fetch the SQLSTATE associated with the last operation on the database handle',
        ),
    'PDO::errorInfo' =>
        array (
            'file' => 'pdo.errorinfo.php',
            'desc' => 'Fetch extended error information associated with the last operation on the database handle',
        ),
    'PDO::exec' =>
        array (
            'file' => 'pdo.exec.php',
            'desc' => 'Execute an SQL statement and return the number of affected rows',
        ),
    'PDO::getAttribute' =>
        array (
            'file' => 'pdo.getattribute.php',
            'desc' => 'Retrieve a database connection attribute',
        ),
    'PDO::getAvailableDrivers' =>
        array (
            'file' => 'pdo.getavailabledrivers.php',
            'desc' => 'Return an array of available PDO drivers',
        ),
    'PDO::inTransaction' =>
        array (
            'file' => 'pdo.intransaction.php',
            'desc' => 'Checks if inside a transaction',
        ),
    'PDO::lastInsertId' =>
        array (
            'file' => 'pdo.lastinsertid.php',
            'desc' => 'Returns the ID of the last inserted row or sequence value',
        ),
    'PDO::pgsqlGetNotify' =>
        array (
            'file' => 'pdo.pgsqlgetnotify.php',
            'desc' => 'Get asynchronous notification',
        ),
    'PDO::pgsqlGetPid' =>
        array (
            'file' => 'pdo.pgsqlgetpid.php',
            'desc' => 'Get the server PID',
        ),
    'PDO::pgsqlLOBCreate' =>
        array (
            'file' => 'pdo.pgsqllobcreate.php',
            'desc' => 'Creates a new large object',
        ),
    'PDO::pgsqlLOBOpen' =>
        array (
            'file' => 'pdo.pgsqllobopen.php',
            'desc' => 'Opens an existing large object stream',
        ),
    'PDO::pgsqlLOBUnlink' =>
        array (
            'file' => 'pdo.pgsqllobunlink.php',
            'desc' => 'Deletes the large object',
        ),
    'PDO::prepare' =>
        array (
            'file' => 'pdo.prepare.php',
            'desc' => 'Prepares a statement for execution and returns a statement object',
        ),
    'PDO::query' =>
        array (
            'file' => 'pdo.query.php',
            'desc' => 'Executes an SQL statement, returning a result set as a PDOStatement object',
        ),
    'PDO::quote' =>
        array (
            'file' => 'pdo.quote.php',
            'desc' => 'Quotes a string for use in a query.',
        ),
    'PDO::rollBack' =>
        array (
            'file' => 'pdo.rollback.php',
            'desc' => 'Rolls back a transaction',
        ),
    'PDO::setAttribute' =>
        array (
            'file' => 'pdo.setattribute.php',
            'desc' => 'Set an attribute',
        ),
    'PDO::sqliteCreateAggregate' =>
        array (
            'file' => 'pdo.sqlitecreateaggregate.php',
            'desc' => 'Registers an aggregating User Defined Function for use in SQL statements',
        ),
    'PDO::sqliteCreateFunction' =>
        array (
            'file' => 'pdo.sqlitecreatefunction.php',
            'desc' => 'Registers a User Defined Function for use in SQL statements',
        ),
    'PDO::__construct' =>
        array (
            'file' => 'pdo.construct.php',
            'desc' => 'Creates a PDO instance representing a connection to a database',
        ),
    'PDOStatement::bindColumn' =>
        array (
            'file' => 'pdostatement.bindcolumn.php',
            'desc' => 'Bind a column to a PHP variable',
        ),
    'PDOStatement::bindParam' =>
        array (
            'file' => 'pdostatement.bindparam.php',
            'desc' => 'Binds a parameter to the specified variable name',
        ),
    'PDOStatement::bindValue' =>
        array (
            'file' => 'pdostatement.bindvalue.php',
            'desc' => 'Binds a value to a parameter',
        ),
    'PDOStatement::closeCursor' =>
        array (
            'file' => 'pdostatement.closecursor.php',
            'desc' => 'Closes the cursor, enabling the statement to be executed again.',
        ),
    'PDOStatement::columnCount' =>
        array (
            'file' => 'pdostatement.columncount.php',
            'desc' => 'Returns the number of columns in the result set',
        ),
    'PDOStatement::debugDumpParams' =>
        array (
            'file' => 'pdostatement.debugdumpparams.php',
            'desc' => 'Dump an SQL prepared command',
        ),
    'PDOStatement::errorCode' =>
        array (
            'file' => 'pdostatement.errorcode.php',
            'desc' => 'Fetch the SQLSTATE associated with the last operation on the statement handle',
        ),
    'PDOStatement::errorInfo' =>
        array (
            'file' => 'pdostatement.errorinfo.php',
            'desc' => 'Fetch extended error information associated with the last operation on the statement handle',
        ),
    'PDOStatement::execute' =>
        array (
            'file' => 'pdostatement.execute.php',
            'desc' => 'Executes a prepared statement',
        ),
    'PDOStatement::fetch' =>
        array (
            'file' => 'pdostatement.fetch.php',
            'desc' => 'Fetches the next row from a result set',
        ),
    'PDOStatement::fetchAll' =>
        array (
            'file' => 'pdostatement.fetchall.php',
            'desc' => 'Returns an array containing all of the result set rows',
        ),
    'PDOStatement::fetchColumn' =>
        array (
            'file' => 'pdostatement.fetchcolumn.php',
            'desc' => 'Returns a single column from the next row of a result set',
        ),
    'PDOStatement::fetchObject' =>
        array (
            'file' => 'pdostatement.fetchobject.php',
            'desc' => 'Fetches the next row and returns it as an object.',
        ),
    'PDOStatement::getAttribute' =>
        array (
            'file' => 'pdostatement.getattribute.php',
            'desc' => 'Retrieve a statement attribute',
        ),
    'PDOStatement::getColumnMeta' =>
        array (
            'file' => 'pdostatement.getcolumnmeta.php',
            'desc' => 'Returns metadata for a column in a result set',
        ),
    'PDOStatement::nextRowset' =>
        array (
            'file' => 'pdostatement.nextrowset.php',
            'desc' => 'Advances to the next rowset in a multi-rowset statement handle',
        ),
    'PDOStatement::rowCount' =>
        array (
            'file' => 'pdostatement.rowcount.php',
            'desc' => 'Returns the number of rows affected by the last SQL statement',
        ),
    'PDOStatement::setAttribute' =>
        array (
            'file' => 'pdostatement.setattribute.php',
            'desc' => 'Set a statement attribute',
        ),
    'PDOStatement::setFetchMode' =>
        array (
            'file' => 'pdostatement.setfetchmode.php',
            'desc' => 'Set the default fetch mode for this statement',
        ),
    'PDO_4D DSN' =>
        array (
            'file' => 'ref.pdo-4d.connection.php',
            'desc' => 'Connecting to 4D SQL server',
        ),
    'PDO_CUBRID DSN' =>
        array (
            'file' => 'ref.pdo-cubrid.connection.php',
            'desc' => 'Connecting to CUBRID databases',
        ),
    'PDO_DBLIB DSN' =>
        array (
            'file' => 'ref.pdo-dblib.connection.php',
            'desc' => 'Connecting to Microsoft SQL Server and Sybase databases',
        ),
    'PDO_FIREBIRD DSN' =>
        array (
            'file' => 'ref.pdo-firebird.connection.php',
            'desc' => 'Connecting to Firebird databases',
        ),
    'PDO_IBM DSN' =>
        array (
            'file' => 'ref.pdo-ibm.connection.php',
            'desc' => 'Connecting to IBM databases',
        ),
    'PDO_INFORMIX DSN' =>
        array (
            'file' => 'ref.pdo-informix.connection.php',
            'desc' => 'Connecting to Informix databases',
        ),
    'PDO_MYSQL DSN' =>
        array (
            'file' => 'ref.pdo-mysql.connection.php',
            'desc' => 'Connecting to MySQL databases',
        ),
    'PDO_OCI DSN' =>
        array (
            'file' => 'ref.pdo-oci.connection.php',
            'desc' => 'Connecting to Oracle databases',
        ),
    'PDO_ODBC DSN' =>
        array (
            'file' => 'ref.pdo-odbc.connection.php',
            'desc' => 'Connecting to ODBC or DB2 databases',
        ),
    'PDO_PGSQL DSN' =>
        array (
            'file' => 'ref.pdo-pgsql.connection.php',
            'desc' => 'Connecting to PostgreSQL databases',
        ),
    'PDO_SQLITE DSN' =>
        array (
            'file' => 'ref.pdo-sqlite.connection.php',
            'desc' => 'Connecting to SQLite databases',
        ),
    'PDO_SQLSRV DSN' =>
        array (
            'file' => 'ref.pdo-sqlsrv.connection.php',
            'desc' => 'Connecting to MS SQL Server and SQL Azure databases',
        ),
    'pfsockopen' =>
        array (
            'file' => 'function.pfsockopen.php',
            'desc' => 'Open persistent Internet or Unix domain socket connection',
        ),
    'pg_affected_rows' =>
        array (
            'file' => 'function.pg-affected-rows.php',
            'desc' => 'Returns number of affected records (tuples)',
        ),
    'pg_cancel_query' =>
        array (
            'file' => 'function.pg-cancel-query.php',
            'desc' => 'Cancel an asynchronous query',
        ),
    'pg_client_encoding' =>
        array (
            'file' => 'function.pg-client-encoding.php',
            'desc' => 'Gets the client encoding',
        ),
    'pg_close' =>
        array (
            'file' => 'function.pg-close.php',
            'desc' => 'Closes a PostgreSQL connection',
        ),
    'pg_connect' =>
        array (
            'file' => 'function.pg-connect.php',
            'desc' => 'Open a PostgreSQL connection',
        ),
    'pg_connection_busy' =>
        array (
            'file' => 'function.pg-connection-busy.php',
            'desc' => 'Get connection is busy or not',
        ),
    'pg_connection_reset' =>
        array (
            'file' => 'function.pg-connection-reset.php',
            'desc' => 'Reset connection (reconnect)',
        ),
    'pg_connection_status' =>
        array (
            'file' => 'function.pg-connection-status.php',
            'desc' => 'Get connection status',
        ),
    'pg_connect_poll' =>
        array (
            'file' => 'function.pg-connect-poll.php',
            'desc' => 'Poll the status of an in-progress asynchronous PostgreSQL connection
   attempt.',
        ),
    'pg_consume_input' =>
        array (
            'file' => 'function.pg-consume-input.php',
            'desc' => 'Reads input on the connection',
        ),
    'pg_convert' =>
        array (
            'file' => 'function.pg-convert.php',
            'desc' => 'Convert associative array values into suitable for SQL statement',
        ),
    'pg_copy_from' =>
        array (
            'file' => 'function.pg-copy-from.php',
            'desc' => 'Insert records into a table from an array',
        ),
    'pg_copy_to' =>
        array (
            'file' => 'function.pg-copy-to.php',
            'desc' => 'Copy a table to an array',
        ),
    'pg_dbname' =>
        array (
            'file' => 'function.pg-dbname.php',
            'desc' => 'Get the database name',
        ),
    'pg_delete' =>
        array (
            'file' => 'function.pg-delete.php',
            'desc' => 'Deletes records',
        ),
    'pg_end_copy' =>
        array (
            'file' => 'function.pg-end-copy.php',
            'desc' => 'Sync with PostgreSQL backend',
        ),
    'pg_escape_bytea' =>
        array (
            'file' => 'function.pg-escape-bytea.php',
            'desc' => 'Escape a string for insertion into a bytea field',
        ),
    'pg_escape_identifier' =>
        array (
            'file' => 'function.pg-escape-identifier.php',
            'desc' => 'Escape a identifier for insertion into a text field',
        ),
    'pg_escape_literal' =>
        array (
            'file' => 'function.pg-escape-literal.php',
            'desc' => 'Escape a literal for insertion into a text field',
        ),
    'pg_escape_string' =>
        array (
            'file' => 'function.pg-escape-string.php',
            'desc' => 'Escape a string for query',
        ),
    'pg_execute' =>
        array (
            'file' => 'function.pg-execute.php',
            'desc' => 'Sends a request to execute a prepared statement with given parameters, and waits for the result.',
        ),
    'pg_fetch_all' =>
        array (
            'file' => 'function.pg-fetch-all.php',
            'desc' => 'Fetches all rows from a result as an array',
        ),
    'pg_fetch_all_columns' =>
        array (
            'file' => 'function.pg-fetch-all-columns.php',
            'desc' => 'Fetches all rows in a particular result column as an array',
        ),
    'pg_fetch_array' =>
        array (
            'file' => 'function.pg-fetch-array.php',
            'desc' => 'Fetch a row as an array',
        ),
    'pg_fetch_assoc' =>
        array (
            'file' => 'function.pg-fetch-assoc.php',
            'desc' => 'Fetch a row as an associative array',
        ),
    'pg_fetch_object' =>
        array (
            'file' => 'function.pg-fetch-object.php',
            'desc' => 'Fetch a row as an object',
        ),
    'pg_fetch_result' =>
        array (
            'file' => 'function.pg-fetch-result.php',
            'desc' => 'Returns values from a result resource',
        ),
    'pg_fetch_row' =>
        array (
            'file' => 'function.pg-fetch-row.php',
            'desc' => 'Get a row as an enumerated array',
        ),
    'pg_field_is_null' =>
        array (
            'file' => 'function.pg-field-is-null.php',
            'desc' => 'Test if a field is SQL NULL',
        ),
    'pg_field_name' =>
        array (
            'file' => 'function.pg-field-name.php',
            'desc' => 'Returns the name of a field',
        ),
    'pg_field_num' =>
        array (
            'file' => 'function.pg-field-num.php',
            'desc' => 'Returns the field number of the named field',
        ),
    'pg_field_prtlen' =>
        array (
            'file' => 'function.pg-field-prtlen.php',
            'desc' => 'Returns the printed length',
        ),
    'pg_field_size' =>
        array (
            'file' => 'function.pg-field-size.php',
            'desc' => 'Returns the internal storage size of the named field',
        ),
    'pg_field_table' =>
        array (
            'file' => 'function.pg-field-table.php',
            'desc' => 'Returns the name or oid of the tables field',
        ),
    'pg_field_type' =>
        array (
            'file' => 'function.pg-field-type.php',
            'desc' => 'Returns the type name for the corresponding field number',
        ),
    'pg_field_type_oid' =>
        array (
            'file' => 'function.pg-field-type-oid.php',
            'desc' => 'Returns the type ID (OID) for the corresponding field number',
        ),
    'pg_flush' =>
        array (
            'file' => 'function.pg-flush.php',
            'desc' => 'Flush outbound query data on the connection',
        ),
    'pg_free_result' =>
        array (
            'file' => 'function.pg-free-result.php',
            'desc' => 'Free result memory',
        ),
    'pg_get_notify' =>
        array (
            'file' => 'function.pg-get-notify.php',
            'desc' => 'Gets SQL NOTIFY message',
        ),
    'pg_get_pid' =>
        array (
            'file' => 'function.pg-get-pid.php',
            'desc' => 'Gets the backend\'s process ID',
        ),
    'pg_get_result' =>
        array (
            'file' => 'function.pg-get-result.php',
            'desc' => 'Get asynchronous query result',
        ),
    'pg_host' =>
        array (
            'file' => 'function.pg-host.php',
            'desc' => 'Returns the host name associated with the connection',
        ),
    'pg_insert' =>
        array (
            'file' => 'function.pg-insert.php',
            'desc' => 'Insert array into table',
        ),
    'pg_last_error' =>
        array (
            'file' => 'function.pg-last-error.php',
            'desc' => 'Get the last error message string of a connection',
        ),
    'pg_last_notice' =>
        array (
            'file' => 'function.pg-last-notice.php',
            'desc' => 'Returns the last notice message from PostgreSQL server',
        ),
    'pg_last_oid' =>
        array (
            'file' => 'function.pg-last-oid.php',
            'desc' => 'Returns the last row\'s OID',
        ),
    'pg_lo_close' =>
        array (
            'file' => 'function.pg-lo-close.php',
            'desc' => 'Close a large object',
        ),
    'pg_lo_create' =>
        array (
            'file' => 'function.pg-lo-create.php',
            'desc' => 'Create a large object',
        ),
    'pg_lo_export' =>
        array (
            'file' => 'function.pg-lo-export.php',
            'desc' => 'Export a large object to file',
        ),
    'pg_lo_import' =>
        array (
            'file' => 'function.pg-lo-import.php',
            'desc' => 'Import a large object from file',
        ),
    'pg_lo_open' =>
        array (
            'file' => 'function.pg-lo-open.php',
            'desc' => 'Open a large object',
        ),
    'pg_lo_read' =>
        array (
            'file' => 'function.pg-lo-read.php',
            'desc' => 'Read a large object',
        ),
    'pg_lo_read_all' =>
        array (
            'file' => 'function.pg-lo-read-all.php',
            'desc' => 'Reads an entire large object and send straight to browser',
        ),
    'pg_lo_seek' =>
        array (
            'file' => 'function.pg-lo-seek.php',
            'desc' => 'Seeks position within a large object',
        ),
    'pg_lo_tell' =>
        array (
            'file' => 'function.pg-lo-tell.php',
            'desc' => 'Returns current seek position a of large object',
        ),
    'pg_lo_truncate' =>
        array (
            'file' => 'function.pg-lo-truncate.php',
            'desc' => 'Truncates a large object',
        ),
    'pg_lo_unlink' =>
        array (
            'file' => 'function.pg-lo-unlink.php',
            'desc' => 'Delete a large object',
        ),
    'pg_lo_write' =>
        array (
            'file' => 'function.pg-lo-write.php',
            'desc' => 'Write to a large object',
        ),
    'pg_meta_data' =>
        array (
            'file' => 'function.pg-meta-data.php',
            'desc' => 'Get meta data for table',
        ),
    'pg_num_fields' =>
        array (
            'file' => 'function.pg-num-fields.php',
            'desc' => 'Returns the number of fields in a result',
        ),
    'pg_num_rows' =>
        array (
            'file' => 'function.pg-num-rows.php',
            'desc' => 'Returns the number of rows in a result',
        ),
    'pg_options' =>
        array (
            'file' => 'function.pg-options.php',
            'desc' => 'Get the options associated with the connection',
        ),
    'pg_parameter_status' =>
        array (
            'file' => 'function.pg-parameter-status.php',
            'desc' => 'Looks up a current parameter setting of the server.',
        ),
    'pg_pconnect' =>
        array (
            'file' => 'function.pg-pconnect.php',
            'desc' => 'Open a persistent PostgreSQL connection',
        ),
    'pg_ping' =>
        array (
            'file' => 'function.pg-ping.php',
            'desc' => 'Ping database connection',
        ),
    'pg_port' =>
        array (
            'file' => 'function.pg-port.php',
            'desc' => 'Return the port number associated with the connection',
        ),
    'pg_prepare' =>
        array (
            'file' => 'function.pg-prepare.php',
            'desc' => 'Submits a request to create a prepared statement with the 
  given parameters, and waits for completion.',
        ),
    'pg_put_line' =>
        array (
            'file' => 'function.pg-put-line.php',
            'desc' => 'Send a NULL-terminated string to PostgreSQL backend',
        ),
    'pg_query' =>
        array (
            'file' => 'function.pg-query.php',
            'desc' => 'Execute a query',
        ),
    'pg_query_params' =>
        array (
            'file' => 'function.pg-query-params.php',
            'desc' => 'Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.',
        ),
    'pg_result_error' =>
        array (
            'file' => 'function.pg-result-error.php',
            'desc' => 'Get error message associated with result',
        ),
    'pg_result_error_field' =>
        array (
            'file' => 'function.pg-result-error-field.php',
            'desc' => 'Returns an individual field of an error report.',
        ),
    'pg_result_seek' =>
        array (
            'file' => 'function.pg-result-seek.php',
            'desc' => 'Set internal row offset in result resource',
        ),
    'pg_result_status' =>
        array (
            'file' => 'function.pg-result-status.php',
            'desc' => 'Get status of query result',
        ),
    'pg_select' =>
        array (
            'file' => 'function.pg-select.php',
            'desc' => 'Select records',
        ),
    'pg_send_execute' =>
        array (
            'file' => 'function.pg-send-execute.php',
            'desc' => 'Sends a request to execute a prepared statement with given parameters, without waiting for the result(s).',
        ),
    'pg_send_prepare' =>
        array (
            'file' => 'function.pg-send-prepare.php',
            'desc' => 'Sends a request to create a prepared statement with the given parameters, without waiting for completion.',
        ),
    'pg_send_query' =>
        array (
            'file' => 'function.pg-send-query.php',
            'desc' => 'Sends asynchronous query',
        ),
    'pg_send_query_params' =>
        array (
            'file' => 'function.pg-send-query-params.php',
            'desc' => 'Submits a command and separate parameters to the server without waiting for the result(s).',
        ),
    'pg_set_client_encoding' =>
        array (
            'file' => 'function.pg-set-client-encoding.php',
            'desc' => 'Set the client encoding',
        ),
    'pg_set_error_verbosity' =>
        array (
            'file' => 'function.pg-set-error-verbosity.php',
            'desc' => 'Determines the verbosity of messages returned by pg_last_error 
   and pg_result_error.',
        ),
    'pg_socket' =>
        array (
            'file' => 'function.pg-socket.php',
            'desc' => 'Get a read only handle to the socket underlying a PostgreSQL connection',
        ),
    'pg_trace' =>
        array (
            'file' => 'function.pg-trace.php',
            'desc' => 'Enable tracing a PostgreSQL connection',
        ),
    'pg_transaction_status' =>
        array (
            'file' => 'function.pg-transaction-status.php',
            'desc' => 'Returns the current in-transaction status of the server.',
        ),
    'pg_tty' =>
        array (
            'file' => 'function.pg-tty.php',
            'desc' => 'Return the TTY name associated with the connection',
        ),
    'pg_unescape_bytea' =>
        array (
            'file' => 'function.pg-unescape-bytea.php',
            'desc' => 'Unescape binary for bytea type',
        ),
    'pg_untrace' =>
        array (
            'file' => 'function.pg-untrace.php',
            'desc' => 'Disable tracing of a PostgreSQL connection',
        ),
    'pg_update' =>
        array (
            'file' => 'function.pg-update.php',
            'desc' => 'Update table',
        ),
    'pg_version' =>
        array (
            'file' => 'function.pg-version.php',
            'desc' => 'Returns an array with client, protocol and server version (when available)',
        ),
    'phar://' =>
        array (
            'file' => 'wrappers.phar.php',
            'desc' => 'PHP Archive',
        ),
    'Phar::addEmptyDir' =>
        array (
            'file' => 'phar.addemptydir.php',
            'desc' => 'Add an empty directory to the phar archive',
        ),
    'Phar::addFile' =>
        array (
            'file' => 'phar.addfile.php',
            'desc' => 'Add a file from the filesystem to the phar archive',
        ),
    'Phar::addFromString' =>
        array (
            'file' => 'phar.addfromstring.php',
            'desc' => 'Add a file from a string to the phar archive',
        ),
    'Phar::apiVersion' =>
        array (
            'file' => 'phar.apiversion.php',
            'desc' => 'Returns the api version',
        ),
    'Phar::buildFromDirectory' =>
        array (
            'file' => 'phar.buildfromdirectory.php',
            'desc' => 'Construct a phar archive from the files within a directory.',
        ),
    'Phar::buildFromIterator' =>
        array (
            'file' => 'phar.buildfromiterator.php',
            'desc' => 'Construct a phar archive from an iterator.',
        ),
    'Phar::canCompress' =>
        array (
            'file' => 'phar.cancompress.php',
            'desc' => 'Returns whether phar extension supports compression using either zlib or bzip2',
        ),
    'Phar::canWrite' =>
        array (
            'file' => 'phar.canwrite.php',
            'desc' => 'Returns whether phar extension supports writing and creating phars',
        ),
    'Phar::compress' =>
        array (
            'file' => 'phar.compress.php',
            'desc' => 'Compresses the entire Phar archive using Gzip or Bzip2 compression',
        ),
    'Phar::compressAllFilesBZIP2' =>
        array (
            'file' => 'phar.compressallfilesbzip2.php',
            'desc' => 'Compresses all files in the current Phar archive using Bzip2 compression',
        ),
    'Phar::compressAllFilesGZ' =>
        array (
            'file' => 'phar.compressallfilesgz.php',
            'desc' => 'Compresses all files in the current Phar archive using Gzip compression',
        ),
    'Phar::compressFiles' =>
        array (
            'file' => 'phar.compressfiles.php',
            'desc' => 'Compresses all files in the current Phar archive',
        ),
    'Phar::convertToData' =>
        array (
            'file' => 'phar.converttodata.php',
            'desc' => 'Convert a phar archive to a non-executable tar or zip file',
        ),
    'Phar::convertToExecutable' =>
        array (
            'file' => 'phar.converttoexecutable.php',
            'desc' => 'Convert a phar archive to another executable phar archive file format',
        ),
    'Phar::copy' =>
        array (
            'file' => 'phar.copy.php',
            'desc' => 'Copy a file internal to the phar archive to another new file within the phar',
        ),
    'Phar::count' =>
        array (
            'file' => 'phar.count.php',
            'desc' => 'Returns the number of entries (files) in the Phar archive',
        ),
    'Phar::createDefaultStub' =>
        array (
            'file' => 'phar.createdefaultstub.php',
            'desc' => 'Create a phar-file format specific stub',
        ),
    'Phar::decompress' =>
        array (
            'file' => 'phar.decompress.php',
            'desc' => 'Decompresses the entire Phar archive',
        ),
    'Phar::decompressFiles' =>
        array (
            'file' => 'phar.decompressfiles.php',
            'desc' => 'Decompresses all files in the current Phar archive',
        ),
    'Phar::delete' =>
        array (
            'file' => 'phar.delete.php',
            'desc' => 'Delete a file within a phar archive',
        ),
    'Phar::delMetadata' =>
        array (
            'file' => 'phar.delmetadata.php',
            'desc' => 'Deletes the global metadata of the phar',
        ),
    'Phar::extractTo' =>
        array (
            'file' => 'phar.extractto.php',
            'desc' => 'Extract the contents of a phar archive to a directory',
        ),
    'Phar::getMetadata' =>
        array (
            'file' => 'phar.getmetadata.php',
            'desc' => 'Returns phar archive meta-data',
        ),
    'Phar::getModified' =>
        array (
            'file' => 'phar.getmodified.php',
            'desc' => 'Return whether phar was modified',
        ),
    'Phar::getSignature' =>
        array (
            'file' => 'phar.getsignature.php',
            'desc' => 'Return MD5/SHA1/SHA256/SHA512/OpenSSL signature of a Phar archive',
        ),
    'Phar::getStub' =>
        array (
            'file' => 'phar.getstub.php',
            'desc' => 'Return the PHP loader or bootstrap stub of a Phar archive',
        ),
    'Phar::getSupportedCompression' =>
        array (
            'file' => 'phar.getsupportedcompression.php',
            'desc' => 'Return array of supported compression algorithms',
        ),
    'Phar::getSupportedSignatures' =>
        array (
            'file' => 'phar.getsupportedsignatures.php',
            'desc' => 'Return array of supported signature types',
        ),
    'Phar::getVersion' =>
        array (
            'file' => 'phar.getversion.php',
            'desc' => 'Return version info of Phar archive',
        ),
    'Phar::hasMetadata' =>
        array (
            'file' => 'phar.hasmetadata.php',
            'desc' => 'Returns whether phar has global meta-data',
        ),
    'Phar::interceptFileFuncs' =>
        array (
            'file' => 'phar.interceptfilefuncs.php',
            'desc' => 'instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions',
        ),
    'Phar::isBuffering' =>
        array (
            'file' => 'phar.isbuffering.php',
            'desc' => 'Used to determine whether Phar write operations are being buffered, or are flushing directly to disk',
        ),
    'Phar::isCompressed' =>
        array (
            'file' => 'phar.iscompressed.php',
            'desc' => 'Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)',
        ),
    'Phar::isFileFormat' =>
        array (
            'file' => 'phar.isfileformat.php',
            'desc' => 'Returns true if the phar archive is based on the tar/phar/zip file format depending on the parameter',
        ),
    'Phar::isValidPharFilename' =>
        array (
            'file' => 'phar.isvalidpharfilename.php',
            'desc' => 'Returns whether the given filename is a valid phar filename',
        ),
    'Phar::isWritable' =>
        array (
            'file' => 'phar.iswritable.php',
            'desc' => 'Returns true if the phar archive can be modified',
        ),
    'Phar::loadPhar' =>
        array (
            'file' => 'phar.loadphar.php',
            'desc' => 'Loads any phar archive with an alias',
        ),
    'Phar::mapPhar' =>
        array (
            'file' => 'phar.mapphar.php',
            'desc' => 'Reads the currently executed file (a phar) and registers its manifest',
        ),
    'Phar::mount' =>
        array (
            'file' => 'phar.mount.php',
            'desc' => 'Mount an external path or file to a virtual location within the phar archive',
        ),
    'Phar::mungServer' =>
        array (
            'file' => 'phar.mungserver.php',
            'desc' => 'Defines a list of up to 4 $_SERVER variables that should be modified for execution',
        ),
    'Phar::offsetExists' =>
        array (
            'file' => 'phar.offsetexists.php',
            'desc' => 'determines whether a file exists in the phar',
        ),
    'Phar::offsetGet' =>
        array (
            'file' => 'phar.offsetget.php',
            'desc' => 'Gets a PharFileInfo object for a specific file',
        ),
    'Phar::offsetSet' =>
        array (
            'file' => 'phar.offsetset.php',
            'desc' => 'set the contents of an internal file to those of an external file',
        ),
    'Phar::offsetUnset' =>
        array (
            'file' => 'phar.offsetunset.php',
            'desc' => 'remove a file from a phar',
        ),
    'Phar::running' =>
        array (
            'file' => 'phar.running.php',
            'desc' => 'Returns the full path on disk or full phar URL to the currently executing Phar archive',
        ),
    'Phar::setAlias' =>
        array (
            'file' => 'phar.setalias.php',
            'desc' => 'Set the alias for the Phar archive',
        ),
    'Phar::setDefaultStub' =>
        array (
            'file' => 'phar.setdefaultstub.php',
            'desc' => 'Used to set the PHP loader or bootstrap stub of a Phar archive to the default loader',
        ),
    'Phar::setMetadata' =>
        array (
            'file' => 'phardata.setmetadata.php',
            'desc' => 'Sets phar archive meta-data',
        ),
    'Phar::setSignatureAlgorithm' =>
        array (
            'file' => 'phardata.setsignaturealgorithm.php',
            'desc' => 'set the signature algorithm for a phar and apply it.  The',
        ),
    'Phar::setStub' =>
        array (
            'file' => 'phar.setstub.php',
            'desc' => 'Used to set the PHP loader or bootstrap stub of a Phar archive',
        ),
    'Phar::startBuffering' =>
        array (
            'file' => 'phar.startbuffering.php',
            'desc' => 'Start buffering Phar write operations, do not modify the Phar object on disk',
        ),
    'Phar::stopBuffering' =>
        array (
            'file' => 'phar.stopbuffering.php',
            'desc' => 'Stop buffering write requests to the Phar archive, and save changes to disk',
        ),
    'Phar::uncompressAllFiles' =>
        array (
            'file' => 'phar.uncompressallfiles.php',
            'desc' => 'Uncompresses all files in the current Phar archive',
        ),
    'Phar::unlinkArchive' =>
        array (
            'file' => 'phar.unlinkarchive.php',
            'desc' => 'Completely remove a phar archive from disk and from memory',
        ),
    'Phar::webPhar' =>
        array (
            'file' => 'phar.webphar.php',
            'desc' => 'mapPhar for web-based phars. front controller for web applications',
        ),
    'Phar::__construct' =>
        array (
            'file' => 'phar.construct.php',
            'desc' => 'Construct a Phar archive object',
        ),
    'Phar context options' =>
        array (
            'file' => 'context.phar.php',
            'desc' => 'Phar context option listing',
        ),
    'PharData::addEmptyDir' =>
        array (
            'file' => 'phardata.addemptydir.php',
            'desc' => 'Add an empty directory to the tar/zip archive',
        ),
    'PharData::addFile' =>
        array (
            'file' => 'phardata.addfile.php',
            'desc' => 'Add a file from the filesystem to the tar/zip archive',
        ),
    'PharData::addFromString' =>
        array (
            'file' => 'phardata.addfromstring.php',
            'desc' => 'Add a file from the filesystem to the tar/zip archive',
        ),
    'PharData::buildFromDirectory' =>
        array (
            'file' => 'phardata.buildfromdirectory.php',
            'desc' => 'Construct a tar/zip archive from the files within a directory.',
        ),
    'PharData::buildFromIterator' =>
        array (
            'file' => 'phardata.buildfromiterator.php',
            'desc' => 'Construct a tar or zip archive from an iterator.',
        ),
    'PharData::compress' =>
        array (
            'file' => 'phardata.compress.php',
            'desc' => 'Compresses the entire tar/zip archive using Gzip or Bzip2 compression',
        ),
    'PharData::compressFiles' =>
        array (
            'file' => 'phardata.compressfiles.php',
            'desc' => 'Compresses all files in the current tar/zip archive',
        ),
    'PharData::convertToData' =>
        array (
            'file' => 'phardata.converttodata.php',
            'desc' => 'Convert a phar archive to a non-executable tar or zip file',
        ),
    'PharData::convertToExecutable' =>
        array (
            'file' => 'phardata.converttoexecutable.php',
            'desc' => 'Convert a non-executable tar/zip archive to an executable phar archive',
        ),
    'PharData::copy' =>
        array (
            'file' => 'phardata.copy.php',
            'desc' => 'Copy a file internal to the phar archive to another new file within the phar',
        ),
    'PharData::decompress' =>
        array (
            'file' => 'phardata.decompress.php',
            'desc' => 'Decompresses the entire Phar archive',
        ),
    'PharData::decompressFiles' =>
        array (
            'file' => 'phardata.decompressfiles.php',
            'desc' => 'Decompresses all files in the current zip archive',
        ),
    'PharData::delete' =>
        array (
            'file' => 'phardata.delete.php',
            'desc' => 'Delete a file within a tar/zip archive',
        ),
    'PharData::delMetadata' =>
        array (
            'file' => 'phardata.delmetadata.php',
            'desc' => 'Deletes the global metadata of a zip archive',
        ),
    'PharData::extractTo' =>
        array (
            'file' => 'phardata.extractto.php',
            'desc' => 'Extract the contents of a tar/zip archive to a directory',
        ),
    'PharData::isWritable' =>
        array (
            'file' => 'phardata.iswritable.php',
            'desc' => 'Returns true if the tar/zip archive can be modified',
        ),
    'PharData::offsetSet' =>
        array (
            'file' => 'phardata.offsetset.php',
            'desc' => 'set the contents of a file within the tar/zip to those of an external file or string',
        ),
    'PharData::offsetUnset' =>
        array (
            'file' => 'phardata.offsetunset.php',
            'desc' => 'remove a file from a tar/zip archive',
        ),
    'PharData::setAlias' =>
        array (
            'file' => 'phardata.setalias.php',
            'desc' => 'dummy function (Phar::setAlias is not valid for PharData)',
        ),
    'PharData::setDefaultStub' =>
        array (
            'file' => 'phardata.setdefaultstub.php',
            'desc' => 'dummy function (Phar::setDefaultStub is not valid for PharData)',
        ),
    'PharData::setStub' =>
        array (
            'file' => 'phardata.setstub.php',
            'desc' => 'dummy function (Phar::setStub is not valid for PharData)',
        ),
    'PharData::__construct' =>
        array (
            'file' => 'phardata.construct.php',
            'desc' => 'Construct a non-executable tar or zip archive object',
        ),
    'PharException' =>
        array (
            'file' => 'pharexception.intro.unused.php',
            'desc' => 'The PharException class provides a phar-specific exception class
    for try/catch blocks.',
        ),
    'PharFileInfo::chmod' =>
        array (
            'file' => 'pharfileinfo.chmod.php',
            'desc' => 'Sets file-specific permission bits',
        ),
    'PharFileInfo::compress' =>
        array (
            'file' => 'pharfileinfo.compress.php',
            'desc' => 'Compresses the current Phar entry with either zlib or bzip2 compression',
        ),
    'PharFileInfo::decompress' =>
        array (
            'file' => 'pharfileinfo.decompress.php',
            'desc' => 'Decompresses the current Phar entry within the phar',
        ),
    'PharFileInfo::delMetadata' =>
        array (
            'file' => 'pharfileinfo.delmetadata.php',
            'desc' => 'Deletes the metadata of the entry',
        ),
    'PharFileInfo::getCompressedSize' =>
        array (
            'file' => 'pharfileinfo.getcompressedsize.php',
            'desc' => 'Returns the actual size of the file (with compression) inside the Phar archive',
        ),
    'PharFileInfo::getCRC32' =>
        array (
            'file' => 'pharfileinfo.getcrc32.php',
            'desc' => 'Returns CRC32 code or throws an exception if CRC has not been verified',
        ),
    'PharFileInfo::getMetadata' =>
        array (
            'file' => 'pharfileinfo.getmetadata.php',
            'desc' => 'Returns file-specific meta-data saved with a file',
        ),
    'PharFileInfo::getPharFlags' =>
        array (
            'file' => 'pharfileinfo.getpharflags.php',
            'desc' => 'Returns the Phar file entry flags',
        ),
    'PharFileInfo::hasMetadata' =>
        array (
            'file' => 'pharfileinfo.hasmetadata.php',
            'desc' => 'Returns the metadata of the entry',
        ),
    'PharFileInfo::isCompressed' =>
        array (
            'file' => 'pharfileinfo.iscompressed.php',
            'desc' => 'Returns whether the entry is compressed',
        ),
    'PharFileInfo::isCompressedBZIP2' =>
        array (
            'file' => 'pharfileinfo.iscompressedbzip2.php',
            'desc' => 'Returns whether the entry is compressed using bzip2',
        ),
    'PharFileInfo::isCompressedGZ' =>
        array (
            'file' => 'pharfileinfo.iscompressedgz.php',
            'desc' => 'Returns whether the entry is compressed using gz',
        ),
    'PharFileInfo::isCRCChecked' =>
        array (
            'file' => 'pharfileinfo.iscrcchecked.php',
            'desc' => 'Returns whether file entry has had its CRC verified',
        ),
    'PharFileInfo::setCompressedBZIP2' =>
        array (
            'file' => 'pharfileinfo.setcompressedbzip2.php',
            'desc' => 'Compresses the current Phar entry within the phar using Bzip2 compression',
        ),
    'PharFileInfo::setCompressedGZ' =>
        array (
            'file' => 'pharfileinfo.setcompressedgz.php',
            'desc' => 'Compresses the current Phar entry within the phar using gz compression',
        ),
    'PharFileInfo::setMetadata' =>
        array (
            'file' => 'pharfileinfo.setmetadata.php',
            'desc' => 'Sets file-specific meta-data saved with a file',
        ),
    'PharFileInfo::setUncompressed' =>
        array (
            'file' => 'pharfileinfo.setuncompressed.php',
            'desc' => 'Uncompresses the current Phar entry within the phar, if it is compressed',
        ),
    'PharFileInfo::__construct' =>
        array (
            'file' => 'pharfileinfo.construct.php',
            'desc' => 'Construct a Phar entry object',
        ),
    'php://' =>
        array (
            'file' => 'wrappers.php.php',
            'desc' => 'Accessing various I/O streams',
        ),
    'phpcredits' =>
        array (
            'file' => 'function.phpcredits.php',
            'desc' => 'Prints out the credits for PHP',
        ),
    'phpinfo' =>
        array (
            'file' => 'function.phpinfo.php',
            'desc' => 'Outputs information about PHP\'s configuration',
        ),
    'phpversion' =>
        array (
            'file' => 'function.phpversion.php',
            'desc' => 'Gets the current PHP version',
        ),
    'php_check_syntax' =>
        array (
            'file' => 'function.php-check-syntax.php',
            'desc' => 'Check the PHP syntax of (and execute) the specified file',
        ),
    'php_ini_loaded_file' =>
        array (
            'file' => 'function.php-ini-loaded-file.php',
            'desc' => 'Retrieve a path to the loaded php.ini file',
        ),
    'php_ini_scanned_files' =>
        array (
            'file' => 'function.php-ini-scanned-files.php',
            'desc' => 'Return a list of .ini files parsed from the additional ini dir',
        ),
    'php_logo_guid' =>
        array (
            'file' => 'function.php-logo-guid.php',
            'desc' => 'Gets the logo guid',
        ),
    'php_sapi_name' =>
        array (
            'file' => 'function.php-sapi-name.php',
            'desc' => 'Returns the type of interface between web server and PHP',
        ),
    'php_strip_whitespace' =>
        array (
            'file' => 'function.php-strip-whitespace.php',
            'desc' => 'Return source with stripped comments and whitespace',
        ),
    'php_uname' =>
        array (
            'file' => 'function.php-uname.php',
            'desc' => 'Returns information about the operating system PHP is running on',
        ),
    'php_user_filter::filter' =>
        array (
            'file' => 'php-user-filter.filter.php',
            'desc' => 'Called when applying the filter',
        ),
    'php_user_filter::onClose' =>
        array (
            'file' => 'php-user-filter.onclose.php',
            'desc' => 'Called when closing the filter',
        ),
    'php_user_filter::onCreate' =>
        array (
            'file' => 'php-user-filter.oncreate.php',
            'desc' => 'Called when creating the filter',
        ),
    'pi' =>
        array (
            'file' => 'function.pi.php',
            'desc' => 'Get value of pi',
        ),
    'png2wbmp' =>
        array (
            'file' => 'function.png2wbmp.php',
            'desc' => 'Convert PNG image file to WBMP image file',
        ),
    'Pool::collect' =>
        array (
            'file' => 'pool.collect.php',
            'desc' => 'Collect references to completed tasks',
        ),
    'Pool::resize' =>
        array (
            'file' => 'pool.resize.php',
            'desc' => 'Resize the Pool',
        ),
    'Pool::shutdown' =>
        array (
            'file' => 'pool.shutdown.php',
            'desc' => 'Shutdown all Workers',
        ),
    'Pool::submit' =>
        array (
            'file' => 'pool.submit.php',
            'desc' => 'Submits an object for execution',
        ),
    'Pool::submitTo' =>
        array (
            'file' => 'pool.submitTo.php',
            'desc' => 'Submits an object for execution',
        ),
    'Pool::__construct' =>
        array (
            'file' => 'pool.construct.php',
            'desc' => 'Creates a new Pool of Workers',
        ),
    'popen' =>
        array (
            'file' => 'function.popen.php',
            'desc' => 'Opens process file pointer',
        ),
    'pos' =>
        array (
            'file' => 'function.pos.php',
            'desc' => 'Alias of current',
        ),
    'posix_access' =>
        array (
            'file' => 'function.posix-access.php',
            'desc' => 'Determine accessibility of a file',
        ),
    'posix_ctermid' =>
        array (
            'file' => 'function.posix-ctermid.php',
            'desc' => 'Get path name of controlling terminal',
        ),
    'posix_errno' =>
        array (
            'file' => 'function.posix-errno.php',
            'desc' => 'Alias of posix_get_last_error',
        ),
    'posix_getcwd' =>
        array (
            'file' => 'function.posix-getcwd.php',
            'desc' => 'Pathname of current directory',
        ),
    'posix_getegid' =>
        array (
            'file' => 'function.posix-getegid.php',
            'desc' => 'Return the effective group ID of the current process',
        ),
    'posix_geteuid' =>
        array (
            'file' => 'function.posix-geteuid.php',
            'desc' => 'Return the effective user ID of the current process',
        ),
    'posix_getgid' =>
        array (
            'file' => 'function.posix-getgid.php',
            'desc' => 'Return the real group ID of the current process',
        ),
    'posix_getgrgid' =>
        array (
            'file' => 'function.posix-getgrgid.php',
            'desc' => 'Return info about a group by group id',
        ),
    'posix_getgrnam' =>
        array (
            'file' => 'function.posix-getgrnam.php',
            'desc' => 'Return info about a group by name',
        ),
    'posix_getgroups' =>
        array (
            'file' => 'function.posix-getgroups.php',
            'desc' => 'Return the group set of the current process',
        ),
    'posix_getlogin' =>
        array (
            'file' => 'function.posix-getlogin.php',
            'desc' => 'Return login name',
        ),
    'posix_getpgid' =>
        array (
            'file' => 'function.posix-getpgid.php',
            'desc' => 'Get process group id for job control',
        ),
    'posix_getpgrp' =>
        array (
            'file' => 'function.posix-getpgrp.php',
            'desc' => 'Return the current process group identifier',
        ),
    'posix_getpid' =>
        array (
            'file' => 'function.posix-getpid.php',
            'desc' => 'Return the current process identifier',
        ),
    'posix_getppid' =>
        array (
            'file' => 'function.posix-getppid.php',
            'desc' => 'Return the parent process identifier',
        ),
    'posix_getpwnam' =>
        array (
            'file' => 'function.posix-getpwnam.php',
            'desc' => 'Return info about a user by username',
        ),
    'posix_getpwuid' =>
        array (
            'file' => 'function.posix-getpwuid.php',
            'desc' => 'Return info about a user by user id',
        ),
    'posix_getrlimit' =>
        array (
            'file' => 'function.posix-getrlimit.php',
            'desc' => 'Return info about system resource limits',
        ),
    'posix_getsid' =>
        array (
            'file' => 'function.posix-getsid.php',
            'desc' => 'Get the current sid of the process',
        ),
    'posix_getuid' =>
        array (
            'file' => 'function.posix-getuid.php',
            'desc' => 'Return the real user ID of the current process',
        ),
    'posix_get_last_error' =>
        array (
            'file' => 'function.posix-get-last-error.php',
            'desc' => 'Retrieve the error number set by the last posix function that failed',
        ),
    'posix_initgroups' =>
        array (
            'file' => 'function.posix-initgroups.php',
            'desc' => 'Calculate the group access list',
        ),
    'posix_isatty' =>
        array (
            'file' => 'function.posix-isatty.php',
            'desc' => 'Determine if a file descriptor is an interactive terminal',
        ),
    'posix_kill' =>
        array (
            'file' => 'function.posix-kill.php',
            'desc' => 'Send a signal to a process',
        ),
    'posix_mkfifo' =>
        array (
            'file' => 'function.posix-mkfifo.php',
            'desc' => 'Create a fifo special file (a named pipe)',
        ),
    'posix_mknod' =>
        array (
            'file' => 'function.posix-mknod.php',
            'desc' => 'Create a special or ordinary file (POSIX.1)',
        ),
    'posix_setegid' =>
        array (
            'file' => 'function.posix-setegid.php',
            'desc' => 'Set the effective GID of the current process',
        ),
    'posix_seteuid' =>
        array (
            'file' => 'function.posix-seteuid.php',
            'desc' => 'Set the effective UID of the current process',
        ),
    'posix_setgid' =>
        array (
            'file' => 'function.posix-setgid.php',
            'desc' => 'Set the GID of the current process',
        ),
    'posix_setpgid' =>
        array (
            'file' => 'function.posix-setpgid.php',
            'desc' => 'Set process group id for job control',
        ),
    'posix_setsid' =>
        array (
            'file' => 'function.posix-setsid.php',
            'desc' => 'Make the current process a session leader',
        ),
    'posix_setuid' =>
        array (
            'file' => 'function.posix-setuid.php',
            'desc' => 'Set the UID of the current process',
        ),
    'posix_strerror' =>
        array (
            'file' => 'function.posix-strerror.php',
            'desc' => 'Retrieve the system error message associated with the given errno',
        ),
    'posix_times' =>
        array (
            'file' => 'function.posix-times.php',
            'desc' => 'Get process times',
        ),
    'posix_ttyname' =>
        array (
            'file' => 'function.posix-ttyname.php',
            'desc' => 'Determine terminal device name',
        ),
    'posix_uname' =>
        array (
            'file' => 'function.posix-uname.php',
            'desc' => 'Get system name',
        ),
    'pow' =>
        array (
            'file' => 'function.pow.php',
            'desc' => 'Exponential expression',
        ),
    'preg_filter' =>
        array (
            'file' => 'function.preg-filter.php',
            'desc' => 'Perform a regular expression search and replace',
        ),
    'preg_grep' =>
        array (
            'file' => 'function.preg-grep.php',
            'desc' => 'Return array entries that match the pattern',
        ),
    'preg_last_error' =>
        array (
            'file' => 'function.preg-last-error.php',
            'desc' => 'Returns the error code of the last PCRE regex execution',
        ),
    'preg_match' =>
        array (
            'file' => 'function.preg-match.php',
            'desc' => 'Perform a regular expression match',
        ),
    'preg_match_all' =>
        array (
            'file' => 'function.preg-match-all.php',
            'desc' => 'Perform a global regular expression match',
        ),
    'preg_quote' =>
        array (
            'file' => 'function.preg-quote.php',
            'desc' => 'Quote regular expression characters',
        ),
    'preg_replace' =>
        array (
            'file' => 'function.preg-replace.php',
            'desc' => 'Perform a regular expression search and replace',
        ),
    'preg_replace_callback' =>
        array (
            'file' => 'function.preg-replace-callback.php',
            'desc' => 'Perform a regular expression search and replace using a callback',
        ),
    'preg_split' =>
        array (
            'file' => 'function.preg-split.php',
            'desc' => 'Split string by a regular expression',
        ),
    'prev' =>
        array (
            'file' => 'function.prev.php',
            'desc' => 'Rewind the internal array pointer',
        ),
    'print' =>
        array (
            'file' => 'function.print.php',
            'desc' => 'Output a string',
        ),
    'printf' =>
        array (
            'file' => 'function.printf.php',
            'desc' => 'Output a formatted string',
        ),
    'print_r' =>
        array (
            'file' => 'function.print-r.php',
            'desc' => 'Prints human-readable information about a variable',
        ),
    'proc_close' =>
        array (
            'file' => 'function.proc-close.php',
            'desc' => 'Close a process opened by proc_open and return the exit code of that process',
        ),
    'proc_get_status' =>
        array (
            'file' => 'function.proc-get-status.php',
            'desc' => 'Get information about a process opened by proc_open',
        ),
    'proc_nice' =>
        array (
            'file' => 'function.proc-nice.php',
            'desc' => 'Change the priority of the current process',
        ),
    'proc_open' =>
        array (
            'file' => 'function.proc-open.php',
            'desc' => 'Execute a command and open file pointers for input/output',
        ),
    'proc_terminate' =>
        array (
            'file' => 'function.proc-terminate.php',
            'desc' => 'Kills a process opened by proc_open',
        ),
    'property_exists' =>
        array (
            'file' => 'function.property-exists.php',
            'desc' => 'Checks if the object or class has a property',
        ),
    'pspell_add_to_personal' =>
        array (
            'file' => 'function.pspell-add-to-personal.php',
            'desc' => 'Add the word to a personal wordlist',
        ),
    'pspell_add_to_session' =>
        array (
            'file' => 'function.pspell-add-to-session.php',
            'desc' => 'Add the word to the wordlist in the current session',
        ),
    'pspell_check' =>
        array (
            'file' => 'function.pspell-check.php',
            'desc' => 'Check a word',
        ),
    'pspell_clear_session' =>
        array (
            'file' => 'function.pspell-clear-session.php',
            'desc' => 'Clear the current session',
        ),
    'pspell_config_create' =>
        array (
            'file' => 'function.pspell-config-create.php',
            'desc' => 'Create a config used to open a dictionary',
        ),
    'pspell_config_data_dir' =>
        array (
            'file' => 'function.pspell-config-data-dir.php',
            'desc' => 'location of language data files',
        ),
    'pspell_config_dict_dir' =>
        array (
            'file' => 'function.pspell-config-dict-dir.php',
            'desc' => 'Location of the main word list',
        ),
    'pspell_config_ignore' =>
        array (
            'file' => 'function.pspell-config-ignore.php',
            'desc' => 'Ignore words less than N characters long',
        ),
    'pspell_config_mode' =>
        array (
            'file' => 'function.pspell-config-mode.php',
            'desc' => 'Change the mode number of suggestions returned',
        ),
    'pspell_config_personal' =>
        array (
            'file' => 'function.pspell-config-personal.php',
            'desc' => 'Set a file that contains personal wordlist',
        ),
    'pspell_config_repl' =>
        array (
            'file' => 'function.pspell-config-repl.php',
            'desc' => 'Set a file that contains replacement pairs',
        ),
    'pspell_config_runtogether' =>
        array (
            'file' => 'function.pspell-config-runtogether.php',
            'desc' => 'Consider run-together words as valid compounds',
        ),
    'pspell_config_save_repl' =>
        array (
            'file' => 'function.pspell-config-save-repl.php',
            'desc' => 'Determine whether to save a replacement pairs list
  along with the wordlist',
        ),
    'pspell_new' =>
        array (
            'file' => 'function.pspell-new.php',
            'desc' => 'Load a new dictionary',
        ),
    'pspell_new_config' =>
        array (
            'file' => 'function.pspell-new-config.php',
            'desc' => 'Load a new dictionary with settings based on a given config',
        ),
    'pspell_new_personal' =>
        array (
            'file' => 'function.pspell-new-personal.php',
            'desc' => 'Load a new dictionary with personal wordlist',
        ),
    'pspell_save_wordlist' =>
        array (
            'file' => 'function.pspell-save-wordlist.php',
            'desc' => 'Save the personal wordlist to a file',
        ),
    'pspell_store_replacement' =>
        array (
            'file' => 'function.pspell-store-replacement.php',
            'desc' => 'Store a replacement pair for a word',
        ),
    'pspell_suggest' =>
        array (
            'file' => 'function.pspell-suggest.php',
            'desc' => 'Suggest spellings of a word',
        ),
    'ps_add_bookmark' =>
        array (
            'file' => 'function.ps-add-bookmark.php',
            'desc' => 'Add bookmark to current page',
        ),
    'ps_add_launchlink' =>
        array (
            'file' => 'function.ps-add-launchlink.php',
            'desc' => 'Adds link which launches file',
        ),
    'ps_add_locallink' =>
        array (
            'file' => 'function.ps-add-locallink.php',
            'desc' => 'Adds link to a page in the same document',
        ),
    'ps_add_note' =>
        array (
            'file' => 'function.ps-add-note.php',
            'desc' => 'Adds note to current page',
        ),
    'ps_add_pdflink' =>
        array (
            'file' => 'function.ps-add-pdflink.php',
            'desc' => 'Adds link to a page in a second pdf document',
        ),
    'ps_add_weblink' =>
        array (
            'file' => 'function.ps-add-weblink.php',
            'desc' => 'Adds link to a web location',
        ),
    'ps_arc' =>
        array (
            'file' => 'function.ps-arc.php',
            'desc' => 'Draws an arc counterclockwise',
        ),
    'ps_arcn' =>
        array (
            'file' => 'function.ps-arcn.php',
            'desc' => 'Draws an arc clockwise',
        ),
    'ps_begin_page' =>
        array (
            'file' => 'function.ps-begin-page.php',
            'desc' => 'Start a new page',
        ),
    'ps_begin_pattern' =>
        array (
            'file' => 'function.ps-begin-pattern.php',
            'desc' => 'Start a new pattern',
        ),
    'ps_begin_template' =>
        array (
            'file' => 'function.ps-begin-template.php',
            'desc' => 'Start a new template',
        ),
    'ps_circle' =>
        array (
            'file' => 'function.ps-circle.php',
            'desc' => 'Draws a circle',
        ),
    'ps_clip' =>
        array (
            'file' => 'function.ps-clip.php',
            'desc' => 'Clips drawing to current path',
        ),
    'ps_close' =>
        array (
            'file' => 'function.ps-close.php',
            'desc' => 'Closes a PostScript document',
        ),
    'ps_closepath' =>
        array (
            'file' => 'function.ps-closepath.php',
            'desc' => 'Closes path',
        ),
    'ps_closepath_stroke' =>
        array (
            'file' => 'function.ps-closepath-stroke.php',
            'desc' => 'Closes and strokes path',
        ),
    'ps_close_image' =>
        array (
            'file' => 'function.ps-close-image.php',
            'desc' => 'Closes image and frees memory',
        ),
    'ps_continue_text' =>
        array (
            'file' => 'function.ps-continue-text.php',
            'desc' => 'Continue text in next line',
        ),
    'ps_curveto' =>
        array (
            'file' => 'function.ps-curveto.php',
            'desc' => 'Draws a curve',
        ),
    'ps_delete' =>
        array (
            'file' => 'function.ps-delete.php',
            'desc' => 'Deletes all resources of a PostScript document',
        ),
    'ps_end_page' =>
        array (
            'file' => 'function.ps-end-page.php',
            'desc' => 'End a page',
        ),
    'ps_end_pattern' =>
        array (
            'file' => 'function.ps-end-pattern.php',
            'desc' => 'End a pattern',
        ),
    'ps_end_template' =>
        array (
            'file' => 'function.ps-end-template.php',
            'desc' => 'End a template',
        ),
    'ps_fill' =>
        array (
            'file' => 'function.ps-fill.php',
            'desc' => 'Fills the current path',
        ),
    'ps_fill_stroke' =>
        array (
            'file' => 'function.ps-fill-stroke.php',
            'desc' => 'Fills and strokes the current path',
        ),
    'ps_findfont' =>
        array (
            'file' => 'function.ps-findfont.php',
            'desc' => 'Loads a font',
        ),
    'ps_get_buffer' =>
        array (
            'file' => 'function.ps-get-buffer.php',
            'desc' => 'Fetches the full buffer containig the generated PS data',
        ),
    'ps_get_parameter' =>
        array (
            'file' => 'function.ps-get-parameter.php',
            'desc' => 'Gets certain parameters',
        ),
    'ps_get_value' =>
        array (
            'file' => 'function.ps-get-value.php',
            'desc' => 'Gets certain values',
        ),
    'ps_hyphenate' =>
        array (
            'file' => 'function.ps-hyphenate.php',
            'desc' => 'Hyphenates a word',
        ),
    'ps_include_file' =>
        array (
            'file' => 'function.ps-include-file.php',
            'desc' => 'Reads an external file with raw PostScript code',
        ),
    'ps_lineto' =>
        array (
            'file' => 'function.ps-lineto.php',
            'desc' => 'Draws a line',
        ),
    'ps_makespotcolor' =>
        array (
            'file' => 'function.ps-makespotcolor.php',
            'desc' => 'Create spot color',
        ),
    'ps_moveto' =>
        array (
            'file' => 'function.ps-moveto.php',
            'desc' => 'Sets current point',
        ),
    'ps_new' =>
        array (
            'file' => 'function.ps-new.php',
            'desc' => 'Creates a new PostScript document object',
        ),
    'ps_open_file' =>
        array (
            'file' => 'function.ps-open-file.php',
            'desc' => 'Opens a file for output',
        ),
    'ps_open_image' =>
        array (
            'file' => 'function.ps-open-image.php',
            'desc' => 'Reads an image for later placement',
        ),
    'ps_open_image_file' =>
        array (
            'file' => 'function.ps-open-image-file.php',
            'desc' => 'Opens image from file',
        ),
    'ps_open_memory_image' =>
        array (
            'file' => 'function.ps-open-memory-image.php',
            'desc' => 'Takes an GD image and returns an image for placement in a PS document',
        ),
    'ps_place_image' =>
        array (
            'file' => 'function.ps-place-image.php',
            'desc' => 'Places image on the page',
        ),
    'ps_rect' =>
        array (
            'file' => 'function.ps-rect.php',
            'desc' => 'Draws a rectangle',
        ),
    'ps_restore' =>
        array (
            'file' => 'function.ps-restore.php',
            'desc' => 'Restore previously save context',
        ),
    'ps_rotate' =>
        array (
            'file' => 'function.ps-rotate.php',
            'desc' => 'Sets rotation factor',
        ),
    'ps_save' =>
        array (
            'file' => 'function.ps-save.php',
            'desc' => 'Save current context',
        ),
    'ps_scale' =>
        array (
            'file' => 'function.ps-scale.php',
            'desc' => 'Sets scaling factor',
        ),
    'ps_setcolor' =>
        array (
            'file' => 'function.ps-setcolor.php',
            'desc' => 'Sets current color',
        ),
    'ps_setdash' =>
        array (
            'file' => 'function.ps-setdash.php',
            'desc' => 'Sets appearance of a dashed line',
        ),
    'ps_setflat' =>
        array (
            'file' => 'function.ps-setflat.php',
            'desc' => 'Sets flatness',
        ),
    'ps_setfont' =>
        array (
            'file' => 'function.ps-setfont.php',
            'desc' => 'Sets font to use for following output',
        ),
    'ps_setgray' =>
        array (
            'file' => 'function.ps-setgray.php',
            'desc' => 'Sets gray value',
        ),
    'ps_setlinecap' =>
        array (
            'file' => 'function.ps-setlinecap.php',
            'desc' => 'Sets appearance of line ends',
        ),
    'ps_setlinejoin' =>
        array (
            'file' => 'function.ps-setlinejoin.php',
            'desc' => 'Sets how contected lines are joined',
        ),
    'ps_setlinewidth' =>
        array (
            'file' => 'function.ps-setlinewidth.php',
            'desc' => 'Sets width of a line',
        ),
    'ps_setmiterlimit' =>
        array (
            'file' => 'function.ps-setmiterlimit.php',
            'desc' => 'Sets the miter limit',
        ),
    'ps_setoverprintmode' =>
        array (
            'file' => 'function.ps-setoverprintmode.php',
            'desc' => 'Sets overprint mode',
        ),
    'ps_setpolydash' =>
        array (
            'file' => 'function.ps-setpolydash.php',
            'desc' => 'Sets appearance of a dashed line',
        ),
    'ps_set_border_color' =>
        array (
            'file' => 'function.ps-set-border-color.php',
            'desc' => 'Sets color of border for annotations',
        ),
    'ps_set_border_dash' =>
        array (
            'file' => 'function.ps-set-border-dash.php',
            'desc' => 'Sets length of dashes for border of annotations',
        ),
    'ps_set_border_style' =>
        array (
            'file' => 'function.ps-set-border-style.php',
            'desc' => 'Sets border style of annotations',
        ),
    'ps_set_info' =>
        array (
            'file' => 'function.ps-set-info.php',
            'desc' => 'Sets information fields of document',
        ),
    'ps_set_parameter' =>
        array (
            'file' => 'function.ps-set-parameter.php',
            'desc' => 'Sets certain parameters',
        ),
    'ps_set_text_pos' =>
        array (
            'file' => 'function.ps-set-text-pos.php',
            'desc' => 'Sets position for text output',
        ),
    'ps_set_value' =>
        array (
            'file' => 'function.ps-set-value.php',
            'desc' => 'Sets certain values',
        ),
    'ps_shading' =>
        array (
            'file' => 'function.ps-shading.php',
            'desc' => 'Creates a shading for later use',
        ),
    'ps_shading_pattern' =>
        array (
            'file' => 'function.ps-shading-pattern.php',
            'desc' => 'Creates a pattern based on a shading',
        ),
    'ps_shfill' =>
        array (
            'file' => 'function.ps-shfill.php',
            'desc' => 'Fills an area with a shading',
        ),
    'ps_show' =>
        array (
            'file' => 'function.ps-show.php',
            'desc' => 'Output text',
        ),
    'ps_show2' =>
        array (
            'file' => 'function.ps-show2.php',
            'desc' => 'Output a text at current position',
        ),
    'ps_show_boxed' =>
        array (
            'file' => 'function.ps-show-boxed.php',
            'desc' => 'Output text in a box',
        ),
    'ps_show_xy' =>
        array (
            'file' => 'function.ps-show-xy.php',
            'desc' => 'Output text at given position',
        ),
    'ps_show_xy2' =>
        array (
            'file' => 'function.ps-show-xy2.php',
            'desc' => 'Output text at position',
        ),
    'ps_stringwidth' =>
        array (
            'file' => 'function.ps-stringwidth.php',
            'desc' => 'Gets width of a string',
        ),
    'ps_string_geometry' =>
        array (
            'file' => 'function.ps-string-geometry.php',
            'desc' => 'Gets geometry of a string',
        ),
    'ps_stroke' =>
        array (
            'file' => 'function.ps-stroke.php',
            'desc' => 'Draws the current path',
        ),
    'ps_symbol' =>
        array (
            'file' => 'function.ps-symbol.php',
            'desc' => 'Output a glyph',
        ),
    'ps_symbol_name' =>
        array (
            'file' => 'function.ps-symbol-name.php',
            'desc' => 'Gets name of a glyph',
        ),
    'ps_symbol_width' =>
        array (
            'file' => 'function.ps-symbol-width.php',
            'desc' => 'Gets width of a glyph',
        ),
    'ps_translate' =>
        array (
            'file' => 'function.ps-translate.php',
            'desc' => 'Sets translation',
        ),
    'putenv' =>
        array (
            'file' => 'function.putenv.php',
            'desc' => 'Sets the value of an environment variable',
        ),
    'px_close' =>
        array (
            'file' => 'function.px-close.php',
            'desc' => 'Closes a paradox database',
        ),
    'px_create_fp' =>
        array (
            'file' => 'function.px-create-fp.php',
            'desc' => 'Create a new paradox database',
        ),
    'px_date2string' =>
        array (
            'file' => 'function.px-date2string.php',
            'desc' => 'Converts a date into a string.',
        ),
    'px_delete' =>
        array (
            'file' => 'function.px-delete.php',
            'desc' => 'Deletes resource of paradox database',
        ),
    'px_delete_record' =>
        array (
            'file' => 'function.px-delete-record.php',
            'desc' => 'Deletes record from paradox database',
        ),
    'px_get_field' =>
        array (
            'file' => 'function.px-get-field.php',
            'desc' => 'Returns the specification of a single field',
        ),
    'px_get_info' =>
        array (
            'file' => 'function.px-get-info.php',
            'desc' => 'Return lots of information about a paradox file',
        ),
    'px_get_parameter' =>
        array (
            'file' => 'function.px-get-parameter.php',
            'desc' => 'Gets a parameter',
        ),
    'px_get_record' =>
        array (
            'file' => 'function.px-get-record.php',
            'desc' => 'Returns record of paradox database',
        ),
    'px_get_schema' =>
        array (
            'file' => 'function.px-get-schema.php',
            'desc' => 'Returns the database schema',
        ),
    'px_get_value' =>
        array (
            'file' => 'function.px-get-value.php',
            'desc' => 'Gets a value',
        ),
    'px_insert_record' =>
        array (
            'file' => 'function.px-insert-record.php',
            'desc' => 'Inserts record into paradox database',
        ),
    'px_new' =>
        array (
            'file' => 'function.px-new.php',
            'desc' => 'Create a new paradox object',
        ),
    'px_numfields' =>
        array (
            'file' => 'function.px-numfields.php',
            'desc' => 'Returns number of fields in a database',
        ),
    'px_numrecords' =>
        array (
            'file' => 'function.px-numrecords.php',
            'desc' => 'Returns number of records in a database',
        ),
    'px_open_fp' =>
        array (
            'file' => 'function.px-open-fp.php',
            'desc' => 'Open paradox database',
        ),
    'px_put_record' =>
        array (
            'file' => 'function.px-put-record.php',
            'desc' => 'Stores record into paradox database',
        ),
    'px_retrieve_record' =>
        array (
            'file' => 'function.px-retrieve-record.php',
            'desc' => 'Returns record of paradox database',
        ),
    'px_set_blob_file' =>
        array (
            'file' => 'function.px-set-blob-file.php',
            'desc' => 'Sets the file where blobs are read from',
        ),
    'px_set_parameter' =>
        array (
            'file' => 'function.px-set-parameter.php',
            'desc' => 'Sets a parameter',
        ),
    'px_set_tablename' =>
        array (
            'file' => 'function.px-set-tablename.php',
            'desc' => 'Sets the name of a table (deprecated)',
        ),
    'px_set_targetencoding' =>
        array (
            'file' => 'function.px-set-targetencoding.php',
            'desc' => 'Sets the encoding for character fields (deprecated)',
        ),
    'px_set_value' =>
        array (
            'file' => 'function.px-set-value.php',
            'desc' => 'Sets a value',
        ),
    'px_timestamp2string' =>
        array (
            'file' => 'function.px-timestamp2string.php',
            'desc' => 'Converts the timestamp into a string.',
        ),
    'px_update_record' =>
        array (
            'file' => 'function.px-update-record.php',
            'desc' => 'Updates record in paradox database',
        ),
    'QuickHashIntHash::add' =>
        array (
            'file' => 'quickhashinthash.add.php',
            'desc' => 'This method adds a new entry to the hash',
        ),
    'QuickHashIntHash::delete' =>
        array (
            'file' => 'quickhashinthash.delete.php',
            'desc' => 'This method deletes am entry from the hash',
        ),
    'QuickHashIntHash::exists' =>
        array (
            'file' => 'quickhashinthash.exists.php',
            'desc' => 'This method checks whether a key is part of the hash',
        ),
    'QuickHashIntHash::get' =>
        array (
            'file' => 'quickhashinthash.get.php',
            'desc' => 'This method retrieves a value from the hash by its key',
        ),
    'QuickHashIntHash::getSize' =>
        array (
            'file' => 'quickhashinthash.getsize.php',
            'desc' => 'Returns the number of elements in the hash',
        ),
    'QuickHashIntHash::loadFromFile' =>
        array (
            'file' => 'quickhashinthash.loadfromfile.php',
            'desc' => 'This factory method creates a hash from a file',
        ),
    'QuickHashIntHash::loadFromString' =>
        array (
            'file' => 'quickhashinthash.loadfromstring.php',
            'desc' => 'This factory method creates a hash from a string',
        ),
    'QuickHashIntHash::saveToFile' =>
        array (
            'file' => 'quickhashinthash.savetofile.php',
            'desc' => 'This method stores an in-memory hash to disk',
        ),
    'QuickHashIntHash::saveToString' =>
        array (
            'file' => 'quickhashinthash.savetostring.php',
            'desc' => 'This method returns a serialized version of the hash',
        ),
    'QuickHashIntHash::set' =>
        array (
            'file' => 'quickhashinthash.set.php',
            'desc' => 'This method updates an entry in the hash with a new value, or
  adds a new one if the entry doesn\'t exist',
        ),
    'QuickHashIntHash::update' =>
        array (
            'file' => 'quickhashinthash.update.php',
            'desc' => 'This method updates an entry in the hash with a new value',
        ),
    'QuickHashIntHash::__construct' =>
        array (
            'file' => 'quickhashinthash.construct.php',
            'desc' => 'Creates a new QuickHashIntHash object',
        ),
    'QuickHashIntSet::add' =>
        array (
            'file' => 'quickhashintset.add.php',
            'desc' => 'This method adds a new entry to the set',
        ),
    'QuickHashIntSet::delete' =>
        array (
            'file' => 'quickhashintset.delete.php',
            'desc' => 'This method deletes an entry from the set',
        ),
    'QuickHashIntSet::exists' =>
        array (
            'file' => 'quickhashintset.exists.php',
            'desc' => 'This method checks whether a key is part of the set',
        ),
    'QuickHashIntSet::getSize' =>
        array (
            'file' => 'quickhashintset.getsize.php',
            'desc' => 'Returns the number of elements in the set',
        ),
    'QuickHashIntSet::loadFromFile' =>
        array (
            'file' => 'quickhashintset.loadfromfile.php',
            'desc' => 'This factory method creates a set from a file',
        ),
    'QuickHashIntSet::loadFromString' =>
        array (
            'file' => 'quickhashintset.loadfromstring.php',
            'desc' => 'This factory method creates a set from a string',
        ),
    'QuickHashIntSet::saveToFile' =>
        array (
            'file' => 'quickhashintset.savetofile.php',
            'desc' => 'This method stores an in-memory set to disk',
        ),
    'QuickHashIntSet::saveToString' =>
        array (
            'file' => 'quickhashintset.savetostring.php',
            'desc' => 'This method returns a serialized version of the set',
        ),
    'QuickHashIntSet::__construct' =>
        array (
            'file' => 'quickhashintset.construct.php',
            'desc' => 'Creates a new QuickHashIntSet object',
        ),
    'QuickHashIntStringHash::add' =>
        array (
            'file' => 'quickhashintstringhash.add.php',
            'desc' => 'This method adds a new entry to the hash',
        ),
    'QuickHashIntStringHash::delete' =>
        array (
            'file' => 'quickhashintstringhash.delete.php',
            'desc' => 'This method deletes am entry from the hash',
        ),
    'QuickHashIntStringHash::exists' =>
        array (
            'file' => 'quickhashintstringhash.exists.php',
            'desc' => 'This method checks whether a key is part of the hash',
        ),
    'QuickHashIntStringHash::get' =>
        array (
            'file' => 'quickhashintstringhash.get.php',
            'desc' => 'This method retrieves a value from the hash by its key',
        ),
    'QuickHashIntStringHash::getSize' =>
        array (
            'file' => 'quickhashintstringhash.getsize.php',
            'desc' => 'Returns the number of elements in the hash',
        ),
    'QuickHashIntStringHash::loadFromFile' =>
        array (
            'file' => 'quickhashintstringhash.loadfromfile.php',
            'desc' => 'This factory method creates a hash from a file',
        ),
    'QuickHashIntStringHash::loadFromString' =>
        array (
            'file' => 'quickhashintstringhash.loadfromstring.php',
            'desc' => 'This factory method creates a hash from a string',
        ),
    'QuickHashIntStringHash::saveToFile' =>
        array (
            'file' => 'quickhashintstringhash.savetofile.php',
            'desc' => 'This method stores an in-memory hash to disk',
        ),
    'QuickHashIntStringHash::saveToString' =>
        array (
            'file' => 'quickhashintstringhash.savetostring.php',
            'desc' => 'This method returns a serialized version of the hash',
        ),
    'QuickHashIntStringHash::set' =>
        array (
            'file' => 'quickhashintstringhash.set.php',
            'desc' => 'This method updates an entry in the hash with a new value, or
  adds a new one if the entry doesn\'t exist',
        ),
    'QuickHashIntStringHash::update' =>
        array (
            'file' => 'quickhashintstringhash.update.php',
            'desc' => 'This method updates an entry in the hash with a new value',
        ),
    'QuickHashIntStringHash::__construct' =>
        array (
            'file' => 'quickhashintstringhash.construct.php',
            'desc' => 'Creates a new QuickHashIntStringHash object',
        ),
    'QuickHashStringIntHash::add' =>
        array (
            'file' => 'quickhashstringinthash.add.php',
            'desc' => 'This method adds a new entry to the hash',
        ),
    'QuickHashStringIntHash::delete' =>
        array (
            'file' => 'quickhashstringinthash.delete.php',
            'desc' => 'This method deletes am entry from the hash',
        ),
    'QuickHashStringIntHash::exists' =>
        array (
            'file' => 'quickhashstringinthash.exists.php',
            'desc' => 'This method checks whether a key is part of the hash',
        ),
    'QuickHashStringIntHash::get' =>
        array (
            'file' => 'quickhashstringinthash.get.php',
            'desc' => 'This method retrieves a value from the hash by its key',
        ),
    'QuickHashStringIntHash::getSize' =>
        array (
            'file' => 'quickhashstringinthash.getsize.php',
            'desc' => 'Returns the number of elements in the hash',
        ),
    'QuickHashStringIntHash::loadFromFile' =>
        array (
            'file' => 'quickhashstringinthash.loadfromfile.php',
            'desc' => 'This factory method creates a hash from a file',
        ),
    'QuickHashStringIntHash::loadFromString' =>
        array (
            'file' => 'quickhashstringinthash.loadfromstring.php',
            'desc' => 'This factory method creates a hash from a string',
        ),
    'QuickHashStringIntHash::saveToFile' =>
        array (
            'file' => 'quickhashstringinthash.savetofile.php',
            'desc' => 'This method stores an in-memory hash to disk',
        ),
    'QuickHashStringIntHash::saveToString' =>
        array (
            'file' => 'quickhashstringinthash.savetostring.php',
            'desc' => 'This method returns a serialized version of the hash',
        ),
    'QuickHashStringIntHash::set' =>
        array (
            'file' => 'quickhashstringinthash.set.php',
            'desc' => 'This method updates an entry in the hash with a new value, or
  adds a new one if the entry doesn\'t exist',
        ),
    'QuickHashStringIntHash::update' =>
        array (
            'file' => 'quickhashstringinthash.update.php',
            'desc' => 'This method updates an entry in the hash with a new value',
        ),
    'QuickHashStringIntHash::__construct' =>
        array (
            'file' => 'quickhashstringinthash.construct.php',
            'desc' => 'Creates a new QuickHashStringIntHash object',
        ),
    'quoted_printable_decode' =>
        array (
            'file' => 'function.quoted-printable-decode.php',
            'desc' => 'Convert a quoted-printable string to an 8 bit string',
        ),
    'quoted_printable_encode' =>
        array (
            'file' => 'function.quoted-printable-encode.php',
            'desc' => 'Convert a 8 bit string to a quoted-printable string',
        ),
    'quotemeta' =>
        array (
            'file' => 'function.quotemeta.php',
            'desc' => 'Quote meta characters',
        ),
    'rad2deg' =>
        array (
            'file' => 'function.rad2deg.php',
            'desc' => 'Converts the radian number to the equivalent number in degrees',
        ),
    'radius_acct_open' =>
        array (
            'file' => 'function.radius-acct-open.php',
            'desc' => 'Creates a Radius handle for accounting',
        ),
    'radius_add_server' =>
        array (
            'file' => 'function.radius-add-server.php',
            'desc' => 'Adds a server',
        ),
    'radius_auth_open' =>
        array (
            'file' => 'function.radius-auth-open.php',
            'desc' => 'Creates a Radius handle for authentication',
        ),
    'radius_close' =>
        array (
            'file' => 'function.radius-close.php',
            'desc' => 'Frees all ressources',
        ),
    'radius_config' =>
        array (
            'file' => 'function.radius-config.php',
            'desc' => 'Causes the library to read the given configuration file',
        ),
    'radius_create_request' =>
        array (
            'file' => 'function.radius-create-request.php',
            'desc' => 'Create accounting or authentication request',
        ),
    'radius_cvt_addr' =>
        array (
            'file' => 'function.radius-cvt-addr.php',
            'desc' => 'Converts raw data to IP-Address',
        ),
    'radius_cvt_int' =>
        array (
            'file' => 'function.radius-cvt-int.php',
            'desc' => 'Converts raw data to integer',
        ),
    'radius_cvt_string' =>
        array (
            'file' => 'function.radius-cvt-string.php',
            'desc' => 'Converts raw data to string',
        ),
    'radius_demangle' =>
        array (
            'file' => 'function.radius-demangle.php',
            'desc' => 'Demangles data',
        ),
    'radius_demangle_mppe_key' =>
        array (
            'file' => 'function.radius-demangle-mppe-key.php',
            'desc' => 'Derives mppe-keys from mangled data',
        ),
    'radius_get_attr' =>
        array (
            'file' => 'function.radius-get-attr.php',
            'desc' => 'Extracts an attribute',
        ),
    'radius_get_tagged_attr_data' =>
        array (
            'file' => 'function.radius-get-tagged-attr-data.php',
            'desc' => 'Extracts the data from a tagged attribute',
        ),
    'radius_get_tagged_attr_tag' =>
        array (
            'file' => 'function.radius-get-tagged-attr-tag.php',
            'desc' => 'Extracts the tag from a tagged attribute',
        ),
    'radius_get_vendor_attr' =>
        array (
            'file' => 'function.radius-get-vendor-attr.php',
            'desc' => 'Extracts a vendor specific attribute',
        ),
    'radius_put_addr' =>
        array (
            'file' => 'function.radius-put-addr.php',
            'desc' => 'Attaches an IP address attribute',
        ),
    'radius_put_attr' =>
        array (
            'file' => 'function.radius-put-attr.php',
            'desc' => 'Attaches a binary attribute',
        ),
    'radius_put_int' =>
        array (
            'file' => 'function.radius-put-int.php',
            'desc' => 'Attaches an integer attribute',
        ),
    'radius_put_string' =>
        array (
            'file' => 'function.radius-put-string.php',
            'desc' => 'Attaches a string attribute',
        ),
    'radius_put_vendor_addr' =>
        array (
            'file' => 'function.radius-put-vendor-addr.php',
            'desc' => 'Attaches a vendor specific IP address attribute',
        ),
    'radius_put_vendor_attr' =>
        array (
            'file' => 'function.radius-put-vendor-attr.php',
            'desc' => 'Attaches a vendor specific binary attribute',
        ),
    'radius_put_vendor_int' =>
        array (
            'file' => 'function.radius-put-vendor-int.php',
            'desc' => 'Attaches a vendor specific integer attribute',
        ),
    'radius_put_vendor_string' =>
        array (
            'file' => 'function.radius-put-vendor-string.php',
            'desc' => 'Attaches a vendor specific string attribute',
        ),
    'radius_request_authenticator' =>
        array (
            'file' => 'function.radius-request-authenticator.php',
            'desc' => 'Returns the request authenticator',
        ),
    'radius_salt_encrypt_attr' =>
        array (
            'file' => 'function.radius-salt-encrypt-attr.php',
            'desc' => 'Salt-encrypts a value',
        ),
    'radius_send_request' =>
        array (
            'file' => 'function.radius-send-request.php',
            'desc' => 'Sends the request and waites for a reply',
        ),
    'radius_server_secret' =>
        array (
            'file' => 'function.radius-server-secret.php',
            'desc' => 'Returns the shared secret',
        ),
    'radius_strerror' =>
        array (
            'file' => 'function.radius-strerror.php',
            'desc' => 'Returns an error message',
        ),
    'rand' =>
        array (
            'file' => 'function.rand.php',
            'desc' => 'Generate a random integer',
        ),
    'range' =>
        array (
            'file' => 'function.range.php',
            'desc' => 'Create an array containing a range of elements',
        ),
    'rar://' =>
        array (
            'file' => 'wrappers.rar.php',
            'desc' => 'RAR',
        ),
    'RarArchive::close' =>
        array (
            'file' => 'rararchive.close.php',
            'desc' => 'Close RAR archive and free all resources',
        ),
    'RarArchive::getComment' =>
        array (
            'file' => 'rararchive.getcomment.php',
            'desc' => 'Get comment text from the RAR archive',
        ),
    'RarArchive::getEntries' =>
        array (
            'file' => 'rararchive.getentries.php',
            'desc' => 'Get full list of entries from the RAR archive',
        ),
    'RarArchive::getEntry' =>
        array (
            'file' => 'rararchive.getentry.php',
            'desc' => 'Get entry object from the RAR archive',
        ),
    'RarArchive::isBroken' =>
        array (
            'file' => 'rararchive.isbroken.php',
            'desc' => 'Test whether an archive is broken (incomplete)',
        ),
    'RarArchive::isSolid' =>
        array (
            'file' => 'rararchive.issolid.php',
            'desc' => 'Check whether the RAR archive is solid',
        ),
    'RarArchive::open' =>
        array (
            'file' => 'rararchive.open.php',
            'desc' => 'Open RAR archive',
        ),
    'RarArchive::setAllowBroken' =>
        array (
            'file' => 'rararchive.setallowbroken.php',
            'desc' => 'Whether opening broken archives is allowed',
        ),
    'RarArchive::__toString' =>
        array (
            'file' => 'rararchive.tostring.php',
            'desc' => 'Get text representation',
        ),
    'RarEntry::extract' =>
        array (
            'file' => 'rarentry.extract.php',
            'desc' => 'Extract entry from the archive',
        ),
    'RarEntry::getAttr' =>
        array (
            'file' => 'rarentry.getattr.php',
            'desc' => 'Get attributes of the entry',
        ),
    'RarEntry::getCrc' =>
        array (
            'file' => 'rarentry.getcrc.php',
            'desc' => 'Get CRC of the entry',
        ),
    'RarEntry::getFileTime' =>
        array (
            'file' => 'rarentry.getfiletime.php',
            'desc' => 'Get entry last modification time',
        ),
    'RarEntry::getHostOs' =>
        array (
            'file' => 'rarentry.gethostos.php',
            'desc' => 'Get entry host OS',
        ),
    'RarEntry::getMethod' =>
        array (
            'file' => 'rarentry.getmethod.php',
            'desc' => 'Get pack method of the entry',
        ),
    'RarEntry::getName' =>
        array (
            'file' => 'rarentry.getname.php',
            'desc' => 'Get name of the entry',
        ),
    'RarEntry::getPackedSize' =>
        array (
            'file' => 'rarentry.getpackedsize.php',
            'desc' => 'Get packed size of the entry',
        ),
    'RarEntry::getStream' =>
        array (
            'file' => 'rarentry.getstream.php',
            'desc' => 'Get file handler for entry',
        ),
    'RarEntry::getUnpackedSize' =>
        array (
            'file' => 'rarentry.getunpackedsize.php',
            'desc' => 'Get unpacked size of the entry',
        ),
    'RarEntry::getVersion' =>
        array (
            'file' => 'rarentry.getversion.php',
            'desc' => 'Get minimum version of RAR program required to unpack the entry',
        ),
    'RarEntry::isDirectory' =>
        array (
            'file' => 'rarentry.isdirectory.php',
            'desc' => 'Test whether an entry represents a directory',
        ),
    'RarEntry::isEncrypted' =>
        array (
            'file' => 'rarentry.isencrypted.php',
            'desc' => 'Test whether an entry is encrypted',
        ),
    'RarEntry::__toString' =>
        array (
            'file' => 'rarentry.tostring.php',
            'desc' => 'Get text representation of entry',
        ),
    'RarException::isUsingExceptions' =>
        array (
            'file' => 'rarexception.isusingexceptions.php',
            'desc' => 'Check whether error handling with exceptions is in use',
        ),
    'RarException::setUsingExceptions' =>
        array (
            'file' => 'rarexception.setusingexceptions.php',
            'desc' => 'Activate and deactivate error handling with exceptions',
        ),
    'rar_wrapper_cache_stats' =>
        array (
            'file' => 'function.rar-wrapper-cache-stats.php',
            'desc' => 'Cache hits and misses for the URL wrapper',
        ),
    'rawurldecode' =>
        array (
            'file' => 'function.rawurldecode.php',
            'desc' => 'Decode URL-encoded strings',
        ),
    'rawurlencode' =>
        array (
            'file' => 'function.rawurlencode.php',
            'desc' => 'URL-encode according to RFC 3986',
        ),
    'readdir' =>
        array (
            'file' => 'function.readdir.php',
            'desc' => 'Read entry from directory handle',
        ),
    'readfile' =>
        array (
            'file' => 'function.readfile.php',
            'desc' => 'Outputs a file',
        ),
    'readgzfile' =>
        array (
            'file' => 'function.readgzfile.php',
            'desc' => 'Output a gz-file',
        ),
    'readline' =>
        array (
            'file' => 'function.readline.php',
            'desc' => 'Reads a line',
        ),
    'readline_add_history' =>
        array (
            'file' => 'function.readline-add-history.php',
            'desc' => 'Adds a line to the history',
        ),
    'readline_callback_handler_install' =>
        array (
            'file' => 'function.readline-callback-handler-install.php',
            'desc' => 'Initializes the readline callback interface and terminal, prints the prompt and returns immediately',
        ),
    'readline_callback_handler_remove' =>
        array (
            'file' => 'function.readline-callback-handler-remove.php',
            'desc' => 'Removes a previously installed callback handler and restores terminal settings',
        ),
    'readline_callback_read_char' =>
        array (
            'file' => 'function.readline-callback-read-char.php',
            'desc' => 'Reads a character and informs the readline callback interface when a line is received',
        ),
    'readline_clear_history' =>
        array (
            'file' => 'function.readline-clear-history.php',
            'desc' => 'Clears the history',
        ),
    'readline_completion_function' =>
        array (
            'file' => 'function.readline-completion-function.php',
            'desc' => 'Registers a completion function',
        ),
    'readline_info' =>
        array (
            'file' => 'function.readline-info.php',
            'desc' => 'Gets/sets various internal readline variables',
        ),
    'readline_list_history' =>
        array (
            'file' => 'function.readline-list-history.php',
            'desc' => 'Lists the history',
        ),
    'readline_on_new_line' =>
        array (
            'file' => 'function.readline-on-new-line.php',
            'desc' => 'Inform readline that the cursor has moved to a new line',
        ),
    'readline_read_history' =>
        array (
            'file' => 'function.readline-read-history.php',
            'desc' => 'Reads the history',
        ),
    'readline_redisplay' =>
        array (
            'file' => 'function.readline-redisplay.php',
            'desc' => 'Redraws the display',
        ),
    'readline_write_history' =>
        array (
            'file' => 'function.readline-write-history.php',
            'desc' => 'Writes the history',
        ),
    'readlink' =>
        array (
            'file' => 'function.readlink.php',
            'desc' => 'Returns the target of a symbolic link',
        ),
    'read_exif_data' =>
        array (
            'file' => 'function.read-exif-data.php',
            'desc' => 'Alias of exif_read_data',
        ),
    'realpath' =>
        array (
            'file' => 'function.realpath.php',
            'desc' => 'Returns canonicalized absolute pathname',
        ),
    'realpath_cache_get' =>
        array (
            'file' => 'function.realpath-cache-get.php',
            'desc' => 'Get realpath cache entries',
        ),
    'realpath_cache_size' =>
        array (
            'file' => 'function.realpath-cache-size.php',
            'desc' => 'Get realpath cache size',
        ),
    'recode' =>
        array (
            'file' => 'function.recode.php',
            'desc' => 'Alias of recode_string',
        ),
    'recode_file' =>
        array (
            'file' => 'function.recode-file.php',
            'desc' => 'Recode from file to file according to recode request',
        ),
    'recode_string' =>
        array (
            'file' => 'function.recode-string.php',
            'desc' => 'Recode a string according to a recode request',
        ),
    'RecursiveArrayIterator::getChildren' =>
        array (
            'file' => 'recursivearrayiterator.getchildren.php',
            'desc' => 'Returns an iterator for the current entry if it is an array or an object.',
        ),
    'RecursiveArrayIterator::hasChildren' =>
        array (
            'file' => 'recursivearrayiterator.haschildren.php',
            'desc' => 'Returns whether current entry is an array or an object.',
        ),
    'RecursiveCachingIterator::getChildren' =>
        array (
            'file' => 'recursivecachingiterator.getchildren.php',
            'desc' => 'Return the inner iterator\'s children as a RecursiveCachingIterator',
        ),
    'RecursiveCachingIterator::hasChildren' =>
        array (
            'file' => 'recursivecachingiterator.haschildren.php',
            'desc' => 'Check whether the current element of the inner iterator has children',
        ),
    'RecursiveCachingIterator::__construct' =>
        array (
            'file' => 'recursivecachingiterator.construct.php',
            'desc' => 'Construct',
        ),
    'RecursiveCallbackFilterIterator::getChildren' =>
        array (
            'file' => 'recursivecallbackfilteriterator.getchildren.php',
            'desc' => 'Return the inner iterator\'s children contained in a RecursiveCallbackFilterIterator',
        ),
    'RecursiveCallbackFilterIterator::hasChildren' =>
        array (
            'file' => 'recursivecallbackfilteriterator.haschildren.php',
            'desc' => 'Check whether the inner iterator\'s current element has children',
        ),
    'RecursiveCallbackFilterIterator::__construct' =>
        array (
            'file' => 'recursivecallbackfilteriterator.construct.php',
            'desc' => 'Create a RecursiveCallbackFilterIterator from a RecursiveIterator',
        ),
    'RecursiveDirectoryIterator::getChildren' =>
        array (
            'file' => 'recursivedirectoryiterator.getchildren.php',
            'desc' => 'Returns an iterator for the current entry if it is a directory',
        ),
    'RecursiveDirectoryIterator::getSubPath' =>
        array (
            'file' => 'recursivedirectoryiterator.getsubpath.php',
            'desc' => 'Get sub path',
        ),
    'RecursiveDirectoryIterator::getSubPathname' =>
        array (
            'file' => 'recursivedirectoryiterator.getsubpathname.php',
            'desc' => 'Get sub path and name',
        ),
    'RecursiveDirectoryIterator::hasChildren' =>
        array (
            'file' => 'recursivedirectoryiterator.haschildren.php',
            'desc' => 'Returns whether current entry is a directory and not \'.\' or \'..\'',
        ),
    'RecursiveDirectoryIterator::key' =>
        array (
            'file' => 'recursivedirectoryiterator.key.php',
            'desc' => 'Return path and filename of current dir entry',
        ),
    'RecursiveDirectoryIterator::next' =>
        array (
            'file' => 'recursivedirectoryiterator.next.php',
            'desc' => 'Move to next entry',
        ),
    'RecursiveDirectoryIterator::rewind' =>
        array (
            'file' => 'recursivedirectoryiterator.rewind.php',
            'desc' => 'Rewind dir back to the start',
        ),
    'RecursiveDirectoryIterator::__construct' =>
        array (
            'file' => 'recursivedirectoryiterator.construct.php',
            'desc' => 'Constructs a RecursiveDirectoryIterator',
        ),
    'RecursiveFilterIterator::getChildren' =>
        array (
            'file' => 'recursivefilteriterator.getchildren.php',
            'desc' => 'Return the inner iterator\'s children contained in a RecursiveFilterIterator',
        ),
    'RecursiveFilterIterator::hasChildren' =>
        array (
            'file' => 'recursivefilteriterator.haschildren.php',
            'desc' => 'Check whether the inner iterator\'s current element has children',
        ),
    'RecursiveFilterIterator::__construct' =>
        array (
            'file' => 'recursivefilteriterator.construct.php',
            'desc' => 'Create a RecursiveFilterIterator from a RecursiveIterator',
        ),
    'RecursiveIterator::getChildren' =>
        array (
            'file' => 'recursiveiterator.getchildren.php',
            'desc' => 'Returns an iterator for the current entry.',
        ),
    'RecursiveIterator::hasChildren' =>
        array (
            'file' => 'recursiveiterator.haschildren.php',
            'desc' => 'Returns if an iterator can be created fot the current entry.',
        ),
    'RecursiveIteratorIterator::beginChildren' =>
        array (
            'file' => 'recursiveiteratoriterator.beginchildren.php',
            'desc' => 'Begin children',
        ),
    'RecursiveIteratorIterator::beginIteration' =>
        array (
            'file' => 'recursiveiteratoriterator.beginiteration.php',
            'desc' => 'Begin Iteration',
        ),
    'RecursiveIteratorIterator::callGetChildren' =>
        array (
            'file' => 'recursiveiteratoriterator.callgetchildren.php',
            'desc' => 'Get children',
        ),
    'RecursiveIteratorIterator::callHasChildren' =>
        array (
            'file' => 'recursiveiteratoriterator.callhaschildren.php',
            'desc' => 'Has children',
        ),
    'RecursiveIteratorIterator::current' =>
        array (
            'file' => 'recursiveiteratoriterator.current.php',
            'desc' => 'Access the current element value',
        ),
    'RecursiveIteratorIterator::endChildren' =>
        array (
            'file' => 'recursiveiteratoriterator.endchildren.php',
            'desc' => 'End children',
        ),
    'RecursiveIteratorIterator::endIteration' =>
        array (
            'file' => 'recursiveiteratoriterator.enditeration.php',
            'desc' => 'End Iteration',
        ),
    'RecursiveIteratorIterator::getDepth' =>
        array (
            'file' => 'recursiveiteratoriterator.getdepth.php',
            'desc' => 'Get the current depth of the recursive iteration',
        ),
    'RecursiveIteratorIterator::getInnerIterator' =>
        array (
            'file' => 'recursiveiteratoriterator.getinneriterator.php',
            'desc' => 'Get inner iterator',
        ),
    'RecursiveIteratorIterator::getMaxDepth' =>
        array (
            'file' => 'recursiveiteratoriterator.getmaxdepth.php',
            'desc' => 'Get max depth',
        ),
    'RecursiveIteratorIterator::getSubIterator' =>
        array (
            'file' => 'recursiveiteratoriterator.getsubiterator.php',
            'desc' => 'The current active sub iterator',
        ),
    'RecursiveIteratorIterator::key' =>
        array (
            'file' => 'recursiveiteratoriterator.key.php',
            'desc' => 'Access the current key',
        ),
    'RecursiveIteratorIterator::next' =>
        array (
            'file' => 'recursiveiteratoriterator.next.php',
            'desc' => 'Move forward to the next element',
        ),
    'RecursiveIteratorIterator::nextElement' =>
        array (
            'file' => 'recursiveiteratoriterator.nextelement.php',
            'desc' => 'Next element',
        ),
    'RecursiveIteratorIterator::rewind' =>
        array (
            'file' => 'recursiveiteratoriterator.rewind.php',
            'desc' => 'Rewind the iterator to the first element of the top level inner iterator',
        ),
    'RecursiveIteratorIterator::setMaxDepth' =>
        array (
            'file' => 'recursiveiteratoriterator.setmaxdepth.php',
            'desc' => 'Set max depth',
        ),
    'RecursiveIteratorIterator::valid' =>
        array (
            'file' => 'recursiveiteratoriterator.valid.php',
            'desc' => 'Check whether the current position is valid',
        ),
    'RecursiveIteratorIterator::__construct' =>
        array (
            'file' => 'recursiveiteratoriterator.construct.php',
            'desc' => 'Construct a RecursiveIteratorIterator',
        ),
    'RecursiveRegexIterator::getChildren' =>
        array (
            'file' => 'recursiveregexiterator.getchildren.php',
            'desc' => 'Returns an iterator for the current entry.',
        ),
    'RecursiveRegexIterator::hasChildren' =>
        array (
            'file' => 'recursiveregexiterator.haschildren.php',
            'desc' => 'Returns whether an iterator can be obtained for the current entry.',
        ),
    'RecursiveRegexIterator::__construct' =>
        array (
            'file' => 'recursiveregexiterator.construct.php',
            'desc' => 'Creates a new RecursiveRegexIterator.',
        ),
    'RecursiveTreeIterator::beginChildren' =>
        array (
            'file' => 'recursivetreeiterator.beginchildren.php',
            'desc' => 'Begin children',
        ),
    'RecursiveTreeIterator::beginIteration' =>
        array (
            'file' => 'recursivetreeiterator.beginiteration.php',
            'desc' => 'Begin iteration',
        ),
    'RecursiveTreeIterator::callGetChildren' =>
        array (
            'file' => 'recursivetreeiterator.callgetchildren.php',
            'desc' => 'Get children',
        ),
    'RecursiveTreeIterator::callHasChildren' =>
        array (
            'file' => 'recursivetreeiterator.callhaschildren.php',
            'desc' => 'Has children',
        ),
    'RecursiveTreeIterator::current' =>
        array (
            'file' => 'recursivetreeiterator.current.php',
            'desc' => 'Get current element',
        ),
    'RecursiveTreeIterator::endChildren' =>
        array (
            'file' => 'recursivetreeiterator.endchildren.php',
            'desc' => 'End children',
        ),
    'RecursiveTreeIterator::endIteration' =>
        array (
            'file' => 'recursivetreeiterator.enditeration.php',
            'desc' => 'End iteration',
        ),
    'RecursiveTreeIterator::getEntry' =>
        array (
            'file' => 'recursivetreeiterator.getentry.php',
            'desc' => 'Get current entry',
        ),
    'RecursiveTreeIterator::getPostfix' =>
        array (
            'file' => 'recursivetreeiterator.getpostfix.php',
            'desc' => 'Get the postfix',
        ),
    'RecursiveTreeIterator::getPrefix' =>
        array (
            'file' => 'recursivetreeiterator.getprefix.php',
            'desc' => 'Get the prefix',
        ),
    'RecursiveTreeIterator::key' =>
        array (
            'file' => 'recursivetreeiterator.key.php',
            'desc' => 'Get the key of the current element',
        ),
    'RecursiveTreeIterator::next' =>
        array (
            'file' => 'recursivetreeiterator.next.php',
            'desc' => 'Move to next element',
        ),
    'RecursiveTreeIterator::nextElement' =>
        array (
            'file' => 'recursivetreeiterator.nextelement.php',
            'desc' => 'Next element',
        ),
    'RecursiveTreeIterator::rewind' =>
        array (
            'file' => 'recursivetreeiterator.rewind.php',
            'desc' => 'Rewind iterator',
        ),
    'RecursiveTreeIterator::setPrefixPart' =>
        array (
            'file' => 'recursivetreeiterator.setprefixpart.php',
            'desc' => 'Set a part of the prefix',
        ),
    'RecursiveTreeIterator::valid' =>
        array (
            'file' => 'recursivetreeiterator.valid.php',
            'desc' => 'Check validity',
        ),
    'RecursiveTreeIterator::__construct' =>
        array (
            'file' => 'recursivetreeiterator.construct.php',
            'desc' => 'Construct a RecursiveTreeIterator',
        ),
    'Reflection::export' =>
        array (
            'file' => 'reflection.export.php',
            'desc' => 'Exports',
        ),
    'Reflection::getModifierNames' =>
        array (
            'file' => 'reflection.getmodifiernames.php',
            'desc' => 'Gets modifier names',
        ),
    'ReflectionClass::export' =>
        array (
            'file' => 'reflectionclass.export.php',
            'desc' => 'Exports a class',
        ),
    'ReflectionClass::getConstant' =>
        array (
            'file' => 'reflectionclass.getconstant.php',
            'desc' => 'Gets defined constant',
        ),
    'ReflectionClass::getConstants' =>
        array (
            'file' => 'reflectionclass.getconstants.php',
            'desc' => 'Gets constants',
        ),
    'ReflectionClass::getConstructor' =>
        array (
            'file' => 'reflectionclass.getconstructor.php',
            'desc' => 'Gets the constructor of the class',
        ),
    'ReflectionClass::getDefaultProperties' =>
        array (
            'file' => 'reflectionclass.getdefaultproperties.php',
            'desc' => 'Gets default properties',
        ),
    'ReflectionClass::getDocComment' =>
        array (
            'file' => 'reflectionclass.getdoccomment.php',
            'desc' => 'Gets doc comments',
        ),
    'ReflectionClass::getEndLine' =>
        array (
            'file' => 'reflectionclass.getendline.php',
            'desc' => 'Gets end line',
        ),
    'ReflectionClass::getExtension' =>
        array (
            'file' => 'reflectionclass.getextension.php',
            'desc' => 'Gets a ReflectionExtension object for the extension which defined the class',
        ),
    'ReflectionClass::getExtensionName' =>
        array (
            'file' => 'reflectionclass.getextensionname.php',
            'desc' => 'Gets the name of the extension which defined the class',
        ),
    'ReflectionClass::getFileName' =>
        array (
            'file' => 'reflectionclass.getfilename.php',
            'desc' => 'Gets the filename of the file in which the class has been defined',
        ),
    'ReflectionClass::getInterfaceNames' =>
        array (
            'file' => 'reflectionclass.getinterfacenames.php',
            'desc' => 'Gets the interface names',
        ),
    'ReflectionClass::getInterfaces' =>
        array (
            'file' => 'reflectionclass.getinterfaces.php',
            'desc' => 'Gets the interfaces',
        ),
    'ReflectionClass::getMethod' =>
        array (
            'file' => 'reflectionclass.getmethod.php',
            'desc' => 'Gets a ReflectionMethod for a class method.',
        ),
    'ReflectionClass::getMethods' =>
        array (
            'file' => 'reflectionclass.getmethods.php',
            'desc' => 'Gets an array of methods',
        ),
    'ReflectionClass::getModifiers' =>
        array (
            'file' => 'reflectionclass.getmodifiers.php',
            'desc' => 'Gets modifiers',
        ),
    'ReflectionClass::getName' =>
        array (
            'file' => 'reflectionclass.getname.php',
            'desc' => 'Gets class name',
        ),
    'ReflectionClass::getNamespaceName' =>
        array (
            'file' => 'reflectionclass.getnamespacename.php',
            'desc' => 'Gets namespace name',
        ),
    'ReflectionClass::getParentClass' =>
        array (
            'file' => 'reflectionclass.getparentclass.php',
            'desc' => 'Gets parent class',
        ),
    'ReflectionClass::getProperties' =>
        array (
            'file' => 'reflectionclass.getproperties.php',
            'desc' => 'Gets properties',
        ),
    'ReflectionClass::getProperty' =>
        array (
            'file' => 'reflectionclass.getproperty.php',
            'desc' => 'Gets a ReflectionProperty for a class\'s property',
        ),
    'ReflectionClass::getShortName' =>
        array (
            'file' => 'reflectionclass.getshortname.php',
            'desc' => 'Gets short name',
        ),
    'ReflectionClass::getStartLine' =>
        array (
            'file' => 'reflectionclass.getstartline.php',
            'desc' => 'Gets starting line number',
        ),
    'ReflectionClass::getStaticProperties' =>
        array (
            'file' => 'reflectionclass.getstaticproperties.php',
            'desc' => 'Gets static properties',
        ),
    'ReflectionClass::getStaticPropertyValue' =>
        array (
            'file' => 'reflectionclass.getstaticpropertyvalue.php',
            'desc' => 'Gets static property value',
        ),
    'ReflectionClass::getTraitAliases' =>
        array (
            'file' => 'reflectionclass.gettraitaliases.php',
            'desc' => 'Returns an array of trait aliases',
        ),
    'ReflectionClass::getTraitNames' =>
        array (
            'file' => 'reflectionclass.gettraitnames.php',
            'desc' => 'Returns an array of names of traits used by this class',
        ),
    'ReflectionClass::getTraits' =>
        array (
            'file' => 'reflectionclass.gettraits.php',
            'desc' => 'Returns an array of traits used by this class',
        ),
    'ReflectionClass::hasConstant' =>
        array (
            'file' => 'reflectionclass.hasconstant.php',
            'desc' => 'Checks if constant is defined',
        ),
    'ReflectionClass::hasMethod' =>
        array (
            'file' => 'reflectionclass.hasmethod.php',
            'desc' => 'Checks if method is defined',
        ),
    'ReflectionClass::hasProperty' =>
        array (
            'file' => 'reflectionclass.hasproperty.php',
            'desc' => 'Checks if property is defined',
        ),
    'ReflectionClass::implementsInterface' =>
        array (
            'file' => 'reflectionclass.implementsinterface.php',
            'desc' => 'Implements interface',
        ),
    'ReflectionClass::inNamespace' =>
        array (
            'file' => 'reflectionclass.innamespace.php',
            'desc' => 'Checks if in namespace',
        ),
    'ReflectionClass::isAbstract' =>
        array (
            'file' => 'reflectionclass.isabstract.php',
            'desc' => 'Checks if class is abstract',
        ),
    'ReflectionClass::isCloneable' =>
        array (
            'file' => 'reflectionclass.iscloneable.php',
            'desc' => 'Returns whether this class is cloneable',
        ),
    'ReflectionClass::isFinal' =>
        array (
            'file' => 'reflectionclass.isfinal.php',
            'desc' => 'Checks if class is final',
        ),
    'ReflectionClass::isInstance' =>
        array (
            'file' => 'reflectionclass.isinstance.php',
            'desc' => 'Checks class for instance',
        ),
    'ReflectionClass::isInstantiable' =>
        array (
            'file' => 'reflectionclass.isinstantiable.php',
            'desc' => 'Checks if the class is instantiable',
        ),
    'ReflectionClass::isInterface' =>
        array (
            'file' => 'reflectionclass.isinterface.php',
            'desc' => 'Checks if the class is an interface',
        ),
    'ReflectionClass::isInternal' =>
        array (
            'file' => 'reflectionclass.isinternal.php',
            'desc' => 'Checks if class is defined internally by an extension, or the core',
        ),
    'ReflectionClass::isIterateable' =>
        array (
            'file' => 'reflectionclass.isiterateable.php',
            'desc' => 'Checks if iterateable',
        ),
    'ReflectionClass::isSubclassOf' =>
        array (
            'file' => 'reflectionclass.issubclassof.php',
            'desc' => 'Checks if a subclass',
        ),
    'ReflectionClass::isTrait' =>
        array (
            'file' => 'reflectionclass.istrait.php',
            'desc' => 'Returns whether this is a trait',
        ),
    'ReflectionClass::isUserDefined' =>
        array (
            'file' => 'reflectionclass.isuserdefined.php',
            'desc' => 'Checks if user defined',
        ),
    'ReflectionClass::newInstance' =>
        array (
            'file' => 'reflectionclass.newinstance.php',
            'desc' => 'Creates a new class instance from given arguments.',
        ),
    'ReflectionClass::newInstanceArgs' =>
        array (
            'file' => 'reflectionclass.newinstanceargs.php',
            'desc' => 'Creates a new class instance from given arguments.',
        ),
    'ReflectionClass::newInstanceWithoutConstructor' =>
        array (
            'file' => 'reflectionclass.newinstancewithoutconstructor.php',
            'desc' => 'Creates a new class instance without invoking the constructor.',
        ),
    'ReflectionClass::setStaticPropertyValue' =>
        array (
            'file' => 'reflectionclass.setstaticpropertyvalue.php',
            'desc' => 'Sets static property value',
        ),
    'ReflectionClass::__construct' =>
        array (
            'file' => 'reflectionclass.construct.php',
            'desc' => 'Constructs a ReflectionClass',
        ),
    'ReflectionClass::__toString' =>
        array (
            'file' => 'reflectionclass.tostring.php',
            'desc' => 'Returns the string representation of the ReflectionClass object.',
        ),
    'ReflectionExtension::export' =>
        array (
            'file' => 'reflectionextension.export.php',
            'desc' => 'Export',
        ),
    'ReflectionExtension::getClasses' =>
        array (
            'file' => 'reflectionextension.getclasses.php',
            'desc' => 'Gets classes',
        ),
    'ReflectionExtension::getClassNames' =>
        array (
            'file' => 'reflectionextension.getclassnames.php',
            'desc' => 'Gets class names',
        ),
    'ReflectionExtension::getConstants' =>
        array (
            'file' => 'reflectionextension.getconstants.php',
            'desc' => 'Gets constants',
        ),
    'ReflectionExtension::getDependencies' =>
        array (
            'file' => 'reflectionextension.getdependencies.php',
            'desc' => 'Gets dependencies',
        ),
    'ReflectionExtension::getFunctions' =>
        array (
            'file' => 'reflectionextension.getfunctions.php',
            'desc' => 'Gets extension functions',
        ),
    'ReflectionExtension::getINIEntries' =>
        array (
            'file' => 'reflectionextension.getinientries.php',
            'desc' => 'Gets extension ini entries',
        ),
    'ReflectionExtension::getName' =>
        array (
            'file' => 'reflectionextension.getname.php',
            'desc' => 'Gets extension name',
        ),
    'ReflectionExtension::getVersion' =>
        array (
            'file' => 'reflectionextension.getversion.php',
            'desc' => 'Gets extension version',
        ),
    'ReflectionExtension::info' =>
        array (
            'file' => 'reflectionextension.info.php',
            'desc' => 'Print extension info',
        ),
    'ReflectionExtension::isPersistent' =>
        array (
            'file' => 'reflectionextension.ispersistent.php',
            'desc' => 'Returns whether this extension is persistent',
        ),
    'ReflectionExtension::isTemporary' =>
        array (
            'file' => 'reflectionextension.istemporary.php',
            'desc' => 'Returns whether this extension is temporary',
        ),
    'ReflectionExtension::__clone' =>
        array (
            'file' => 'reflectionextension.clone.php',
            'desc' => 'Clones',
        ),
    'ReflectionExtension::__construct' =>
        array (
            'file' => 'reflectionextension.construct.php',
            'desc' => 'Constructs a ReflectionExtension',
        ),
    'ReflectionExtension::__toString' =>
        array (
            'file' => 'reflectionextension.tostring.php',
            'desc' => 'To string',
        ),
    'ReflectionFunction::export' =>
        array (
            'file' => 'reflectionfunction.export.php',
            'desc' => 'Exports function',
        ),
    'ReflectionFunction::getClosure' =>
        array (
            'file' => 'reflectionfunction.getclosure.php',
            'desc' => 'Returns a dynamically created closure for the function',
        ),
    'ReflectionFunction::invoke' =>
        array (
            'file' => 'reflectionfunction.invoke.php',
            'desc' => 'Invokes function',
        ),
    'ReflectionFunction::invokeArgs' =>
        array (
            'file' => 'reflectionfunction.invokeargs.php',
            'desc' => 'Invokes function args',
        ),
    'ReflectionFunction::isDisabled' =>
        array (
            'file' => 'reflectionfunction.isdisabled.php',
            'desc' => 'Checks if function is disabled',
        ),
    'ReflectionFunction::__construct' =>
        array (
            'file' => 'reflectionfunction.construct.php',
            'desc' => 'Constructs a ReflectionFunction object',
        ),
    'ReflectionFunction::__toString' =>
        array (
            'file' => 'reflectionfunction.tostring.php',
            'desc' => 'To string',
        ),
    'ReflectionFunctionAbstract::getClosureScopeClass' =>
        array (
            'file' => 'reflectionfunctionabstract.getclosurescopeclass.php',
            'desc' => 'Returns the scope associated to the closure',
        ),
    'ReflectionFunctionAbstract::getClosureThis' =>
        array (
            'file' => 'reflectionfunctionabstract.getclosurethis.php',
            'desc' => 'Returns this pointer bound to closure',
        ),
    'ReflectionFunctionAbstract::getDocComment' =>
        array (
            'file' => 'reflectionfunctionabstract.getdoccomment.php',
            'desc' => 'Gets doc comment',
        ),
    'ReflectionFunctionAbstract::getEndLine' =>
        array (
            'file' => 'reflectionfunctionabstract.getendline.php',
            'desc' => 'Gets end line number',
        ),
    'ReflectionFunctionAbstract::getExtension' =>
        array (
            'file' => 'reflectionfunctionabstract.getextension.php',
            'desc' => 'Gets extension info',
        ),
    'ReflectionFunctionAbstract::getExtensionName' =>
        array (
            'file' => 'reflectionfunctionabstract.getextensionname.php',
            'desc' => 'Gets extension name',
        ),
    'ReflectionFunctionAbstract::getFileName' =>
        array (
            'file' => 'reflectionfunctionabstract.getfilename.php',
            'desc' => 'Gets file name',
        ),
    'ReflectionFunctionAbstract::getName' =>
        array (
            'file' => 'reflectionfunctionabstract.getname.php',
            'desc' => 'Gets function name',
        ),
    'ReflectionFunctionAbstract::getNamespaceName' =>
        array (
            'file' => 'reflectionfunctionabstract.getnamespacename.php',
            'desc' => 'Gets namespace name',
        ),
    'ReflectionFunctionAbstract::getNumberOfParameters' =>
        array (
            'file' => 'reflectionfunctionabstract.getnumberofparameters.php',
            'desc' => 'Gets number of parameters',
        ),
    'ReflectionFunctionAbstract::getNumberOfRequiredParameters' =>
        array (
            'file' => 'reflectionfunctionabstract.getnumberofrequiredparameters.php',
            'desc' => 'Gets number of required parameters',
        ),
    'ReflectionFunctionAbstract::getParameters' =>
        array (
            'file' => 'reflectionfunctionabstract.getparameters.php',
            'desc' => 'Gets parameters',
        ),
    'ReflectionFunctionAbstract::getShortName' =>
        array (
            'file' => 'reflectionfunctionabstract.getshortname.php',
            'desc' => 'Gets function short name',
        ),
    'ReflectionFunctionAbstract::getStartLine' =>
        array (
            'file' => 'reflectionfunctionabstract.getstartline.php',
            'desc' => 'Gets starting line number',
        ),
    'ReflectionFunctionAbstract::getStaticVariables' =>
        array (
            'file' => 'reflectionfunctionabstract.getstaticvariables.php',
            'desc' => 'Gets static variables',
        ),
    'ReflectionFunctionAbstract::inNamespace' =>
        array (
            'file' => 'reflectionfunctionabstract.innamespace.php',
            'desc' => 'Checks if function in namespace',
        ),
    'ReflectionFunctionAbstract::isClosure' =>
        array (
            'file' => 'reflectionfunctionabstract.isclosure.php',
            'desc' => 'Checks if closure',
        ),
    'ReflectionFunctionAbstract::isDeprecated' =>
        array (
            'file' => 'reflectionfunctionabstract.isdeprecated.php',
            'desc' => 'Checks if deprecated',
        ),
    'ReflectionFunctionAbstract::isGenerator' =>
        array (
            'file' => 'reflectionfunctionabstract.isgenerator.php',
            'desc' => 'Returns whether this function is a generator',
        ),
    'ReflectionFunctionAbstract::isInternal' =>
        array (
            'file' => 'reflectionfunctionabstract.isinternal.php',
            'desc' => 'Checks if is internal',
        ),
    'ReflectionFunctionAbstract::isUserDefined' =>
        array (
            'file' => 'reflectionfunctionabstract.isuserdefined.php',
            'desc' => 'Checks if user defined',
        ),
    'ReflectionFunctionAbstract::isVariadic' =>
        array (
            'file' => 'reflectionfunctionabstract.isvariadic.php',
            'desc' => 'Checks if the function is variadic',
        ),
    'ReflectionFunctionAbstract::returnsReference' =>
        array (
            'file' => 'reflectionfunctionabstract.returnsreference.php',
            'desc' => 'Checks if returns reference',
        ),
    'ReflectionFunctionAbstract::__clone' =>
        array (
            'file' => 'reflectionfunctionabstract.clone.php',
            'desc' => 'Clones function',
        ),
    'ReflectionFunctionAbstract::__toString' =>
        array (
            'file' => 'reflectionfunctionabstract.tostring.php',
            'desc' => 'To string',
        ),
    'ReflectionMethod::export' =>
        array (
            'file' => 'reflectionmethod.export.php',
            'desc' => 'Export a reflection method.',
        ),
    'ReflectionMethod::getClosure' =>
        array (
            'file' => 'reflectionmethod.getclosure.php',
            'desc' => 'Returns a dynamically created closure for the method',
        ),
    'ReflectionMethod::getDeclaringClass' =>
        array (
            'file' => 'reflectionmethod.getdeclaringclass.php',
            'desc' => 'Gets declaring class for the reflected method.',
        ),
    'ReflectionMethod::getModifiers' =>
        array (
            'file' => 'reflectionmethod.getmodifiers.php',
            'desc' => 'Gets the method modifiers',
        ),
    'ReflectionMethod::getPrototype' =>
        array (
            'file' => 'reflectionmethod.getprototype.php',
            'desc' => 'Gets the method prototype (if there is one).',
        ),
    'ReflectionMethod::invoke' =>
        array (
            'file' => 'reflectionmethod.invoke.php',
            'desc' => 'Invoke',
        ),
    'ReflectionMethod::invokeArgs' =>
        array (
            'file' => 'reflectionmethod.invokeargs.php',
            'desc' => 'Invoke args',
        ),
    'ReflectionMethod::isAbstract' =>
        array (
            'file' => 'reflectionmethod.isabstract.php',
            'desc' => 'Checks if method is abstract',
        ),
    'ReflectionMethod::isConstructor' =>
        array (
            'file' => 'reflectionmethod.isconstructor.php',
            'desc' => 'Checks if method is a constructor',
        ),
    'ReflectionMethod::isDestructor' =>
        array (
            'file' => 'reflectionmethod.isdestructor.php',
            'desc' => 'Checks if method is a destructor',
        ),
    'ReflectionMethod::isFinal' =>
        array (
            'file' => 'reflectionmethod.isfinal.php',
            'desc' => 'Checks if method is final',
        ),
    'ReflectionMethod::isPrivate' =>
        array (
            'file' => 'reflectionmethod.isprivate.php',
            'desc' => 'Checks if method is private',
        ),
    'ReflectionMethod::isProtected' =>
        array (
            'file' => 'reflectionmethod.isprotected.php',
            'desc' => 'Checks if method is protected',
        ),
    'ReflectionMethod::isPublic' =>
        array (
            'file' => 'reflectionmethod.ispublic.php',
            'desc' => 'Checks if method is public',
        ),
    'ReflectionMethod::isStatic' =>
        array (
            'file' => 'reflectionmethod.isstatic.php',
            'desc' => 'Checks if method is static',
        ),
    'ReflectionMethod::setAccessible' =>
        array (
            'file' => 'reflectionmethod.setaccessible.php',
            'desc' => 'Set method accessibility',
        ),
    'ReflectionMethod::__construct' =>
        array (
            'file' => 'reflectionmethod.construct.php',
            'desc' => 'Constructs a ReflectionMethod',
        ),
    'ReflectionMethod::__toString' =>
        array (
            'file' => 'reflectionmethod.tostring.php',
            'desc' => 'Returns the string representation of the Reflection method object.',
        ),
    'ReflectionObject::export' =>
        array (
            'file' => 'reflectionobject.export.php',
            'desc' => 'Export',
        ),
    'ReflectionObject::__construct' =>
        array (
            'file' => 'reflectionobject.construct.php',
            'desc' => 'Constructs a ReflectionObject',
        ),
    'ReflectionParameter::allowsNull' =>
        array (
            'file' => 'reflectionparameter.allowsnull.php',
            'desc' => 'Checks if null is allowed',
        ),
    'ReflectionParameter::canBePassedByValue' =>
        array (
            'file' => 'reflectionparameter.canbepassedbyvalue.php',
            'desc' => 'Returns whether this parameter can be passed by value',
        ),
    'ReflectionParameter::export' =>
        array (
            'file' => 'reflectionparameter.export.php',
            'desc' => 'Exports',
        ),
    'ReflectionParameter::getClass' =>
        array (
            'file' => 'reflectionparameter.getclass.php',
            'desc' => 'Get the type hinted class',
        ),
    'ReflectionParameter::getDeclaringClass' =>
        array (
            'file' => 'reflectionparameter.getdeclaringclass.php',
            'desc' => 'Gets declaring class',
        ),
    'ReflectionParameter::getDeclaringFunction' =>
        array (
            'file' => 'reflectionparameter.getdeclaringfunction.php',
            'desc' => 'Gets declaring function',
        ),
    'ReflectionParameter::getDefaultValue' =>
        array (
            'file' => 'reflectionparameter.getdefaultvalue.php',
            'desc' => 'Gets default parameter value',
        ),
    'ReflectionParameter::getDefaultValueConstantName' =>
        array (
            'file' => 'reflectionparameter.getdefaultvalueconstantname.php',
            'desc' => 'Returns the default value\'s constant name if default value is constant or null',
        ),
    'ReflectionParameter::getName' =>
        array (
            'file' => 'reflectionparameter.getname.php',
            'desc' => 'Gets parameter name',
        ),
    'ReflectionParameter::getPosition' =>
        array (
            'file' => 'reflectionparameter.getposition.php',
            'desc' => 'Gets parameter position',
        ),
    'ReflectionParameter::isArray' =>
        array (
            'file' => 'reflectionparameter.isarray.php',
            'desc' => 'Checks if parameter expects an array',
        ),
    'ReflectionParameter::isCallable' =>
        array (
            'file' => 'reflectionparameter.iscallable.php',
            'desc' => 'Returns whether parameter MUST be callable',
        ),
    'ReflectionParameter::isDefaultValueAvailable' =>
        array (
            'file' => 'reflectionparameter.isdefaultvalueavailable.php',
            'desc' => 'Checks if a default value is available',
        ),
    'ReflectionParameter::isDefaultValueConstant' =>
        array (
            'file' => 'reflectionparameter.isdefaultvalueconstant.php',
            'desc' => 'Returns whether the default value of this parameter is constant',
        ),
    'ReflectionParameter::isOptional' =>
        array (
            'file' => 'reflectionparameter.isoptional.php',
            'desc' => 'Checks if optional',
        ),
    'ReflectionParameter::isPassedByReference' =>
        array (
            'file' => 'reflectionparameter.ispassedbyreference.php',
            'desc' => 'Checks if passed by reference',
        ),
    'ReflectionParameter::isVariadic' =>
        array (
            'file' => 'reflectionparameter.isvariadic.php',
            'desc' => 'Checks if the parameter is variadic',
        ),
    'ReflectionParameter::__clone' =>
        array (
            'file' => 'reflectionparameter.clone.php',
            'desc' => 'Clone',
        ),
    'ReflectionParameter::__construct' =>
        array (
            'file' => 'reflectionparameter.construct.php',
            'desc' => 'Construct',
        ),
    'ReflectionParameter::__toString' =>
        array (
            'file' => 'reflectionparameter.tostring.php',
            'desc' => 'To string',
        ),
    'ReflectionProperty::export' =>
        array (
            'file' => 'reflectionproperty.export.php',
            'desc' => 'Export',
        ),
    'ReflectionProperty::getDeclaringClass' =>
        array (
            'file' => 'reflectionproperty.getdeclaringclass.php',
            'desc' => 'Gets declaring class',
        ),
    'ReflectionProperty::getDocComment' =>
        array (
            'file' => 'reflectionproperty.getdoccomment.php',
            'desc' => 'Gets doc comment',
        ),
    'ReflectionProperty::getModifiers' =>
        array (
            'file' => 'reflectionproperty.getmodifiers.php',
            'desc' => 'Gets modifiers',
        ),
    'ReflectionProperty::getName' =>
        array (
            'file' => 'reflectionproperty.getname.php',
            'desc' => 'Gets property name',
        ),
    'ReflectionProperty::getValue' =>
        array (
            'file' => 'reflectionproperty.getvalue.php',
            'desc' => 'Gets value',
        ),
    'ReflectionProperty::isDefault' =>
        array (
            'file' => 'reflectionproperty.isdefault.php',
            'desc' => 'Checks if default value',
        ),
    'ReflectionProperty::isPrivate' =>
        array (
            'file' => 'reflectionproperty.isprivate.php',
            'desc' => 'Checks if property is private',
        ),
    'ReflectionProperty::isProtected' =>
        array (
            'file' => 'reflectionproperty.isprotected.php',
            'desc' => 'Checks if property is protected',
        ),
    'ReflectionProperty::isPublic' =>
        array (
            'file' => 'reflectionproperty.ispublic.php',
            'desc' => 'Checks if property is public',
        ),
    'ReflectionProperty::isStatic' =>
        array (
            'file' => 'reflectionproperty.isstatic.php',
            'desc' => 'Checks if property is static',
        ),
    'ReflectionProperty::setAccessible' =>
        array (
            'file' => 'reflectionproperty.setaccessible.php',
            'desc' => 'Set property accessibility',
        ),
    'ReflectionProperty::setValue' =>
        array (
            'file' => 'reflectionproperty.setvalue.php',
            'desc' => 'Set property value',
        ),
    'ReflectionProperty::__clone' =>
        array (
            'file' => 'reflectionproperty.clone.php',
            'desc' => 'Clone',
        ),
    'ReflectionProperty::__construct' =>
        array (
            'file' => 'reflectionproperty.construct.php',
            'desc' => 'Construct a ReflectionProperty object',
        ),
    'ReflectionProperty::__toString' =>
        array (
            'file' => 'reflectionproperty.tostring.php',
            'desc' => 'To string',
        ),
    'ReflectionZendExtension::export' =>
        array (
            'file' => 'reflectionzendextension.export.php',
            'desc' => 'Export',
        ),
    'ReflectionZendExtension::getAuthor' =>
        array (
            'file' => 'reflectionzendextension.getauthor.php',
            'desc' => 'Gets author',
        ),
    'ReflectionZendExtension::getCopyright' =>
        array (
            'file' => 'reflectionzendextension.getcopyright.php',
            'desc' => 'Gets copyright',
        ),
    'ReflectionZendExtension::getName' =>
        array (
            'file' => 'reflectionzendextension.getname.php',
            'desc' => 'Gets name',
        ),
    'ReflectionZendExtension::getURL' =>
        array (
            'file' => 'reflectionzendextension.geturl.php',
            'desc' => 'Gets URL',
        ),
    'ReflectionZendExtension::getVersion' =>
        array (
            'file' => 'reflectionzendextension.getversion.php',
            'desc' => 'Gets version',
        ),
    'ReflectionZendExtension::__clone' =>
        array (
            'file' => 'reflectionzendextension.clone.php',
            'desc' => 'Clone handler',
        ),
    'ReflectionZendExtension::__construct' =>
        array (
            'file' => 'reflectionzendextension.construct.php',
            'desc' => 'Constructor',
        ),
    'ReflectionZendExtension::__toString' =>
        array (
            'file' => 'reflectionzendextension.tostring.php',
            'desc' => 'To string handler',
        ),
    'Reflector::export' =>
        array (
            'file' => 'reflector.export.php',
            'desc' => 'Exports',
        ),
    'Reflector::__toString' =>
        array (
            'file' => 'reflector.tostring.php',
            'desc' => 'To string',
        ),
    'RegexIterator::accept' =>
        array (
            'file' => 'regexiterator.accept.php',
            'desc' => 'Get accept status',
        ),
    'RegexIterator::getFlags' =>
        array (
            'file' => 'regexiterator.getflags.php',
            'desc' => 'Get flags',
        ),
    'RegexIterator::getMode' =>
        array (
            'file' => 'regexiterator.getmode.php',
            'desc' => 'Returns operation mode.',
        ),
    'RegexIterator::getPregFlags' =>
        array (
            'file' => 'regexiterator.getpregflags.php',
            'desc' => 'Returns the regular expression flags.',
        ),
    'RegexIterator::getRegex' =>
        array (
            'file' => 'regexiterator.getregex.php',
            'desc' => 'Returns current regular expression',
        ),
    'RegexIterator::setFlags' =>
        array (
            'file' => 'regexiterator.setflags.php',
            'desc' => 'Sets the flags.',
        ),
    'RegexIterator::setMode' =>
        array (
            'file' => 'regexiterator.setmode.php',
            'desc' => 'Sets the operation mode.',
        ),
    'RegexIterator::setPregFlags' =>
        array (
            'file' => 'regexiterator.setpregflags.php',
            'desc' => 'Sets the regular expression flags.',
        ),
    'RegexIterator::__construct' =>
        array (
            'file' => 'regexiterator.construct.php',
            'desc' => 'Create a new RegexIterator',
        ),
    'register_shutdown_function' =>
        array (
            'file' => 'function.register-shutdown-function.php',
            'desc' => 'Register a function for execution on shutdown',
        ),
    'register_tick_function' =>
        array (
            'file' => 'function.register-tick-function.php',
            'desc' => 'Register a function for execution on each tick',
        ),
    'rename' =>
        array (
            'file' => 'function.rename.php',
            'desc' => 'Renames a file or directory',
        ),
    'rename_function' =>
        array (
            'file' => 'function.rename-function.php',
            'desc' => 'Renames orig_name to new_name in the global function table',
        ),
    'reset' =>
        array (
            'file' => 'function.reset.php',
            'desc' => 'Set the internal pointer of an array to its first element',
        ),
    'ResourceBundle::count' =>
        array (
            'file' => 'resourcebundle.count.php',
            'desc' => 'Get number of elements in the bundle',
        ),
    'ResourceBundle::create' =>
        array (
            'file' => 'resourcebundle.create.php',
            'desc' => 'Create a resource bundle',
        ),
    'ResourceBundle::get' =>
        array (
            'file' => 'resourcebundle.get.php',
            'desc' => 'Get data from the bundle',
        ),
    'ResourceBundle::getErrorCode' =>
        array (
            'file' => 'resourcebundle.geterrorcode.php',
            'desc' => 'Get bundle\'s last error code.',
        ),
    'ResourceBundle::getErrorMessage' =>
        array (
            'file' => 'resourcebundle.geterrormessage.php',
            'desc' => 'Get bundle\'s last error message.',
        ),
    'ResourceBundle::getLocales' =>
        array (
            'file' => 'resourcebundle.locales.php',
            'desc' => 'Get supported locales',
        ),
    'restore_error_handler' =>
        array (
            'file' => 'function.restore-error-handler.php',
            'desc' => 'Restores the previous error handler function',
        ),
    'restore_exception_handler' =>
        array (
            'file' => 'function.restore-exception-handler.php',
            'desc' => 'Restores the previously defined exception handler function',
        ),
    'restore_include_path' =>
        array (
            'file' => 'function.restore-include-path.php',
            'desc' => 'Restores the value of the include_path configuration option',
        ),
    'rewind' =>
        array (
            'file' => 'function.rewind.php',
            'desc' => 'Rewind the position of a file pointer',
        ),
    'rewinddir' =>
        array (
            'file' => 'function.rewinddir.php',
            'desc' => 'Rewind directory handle',
        ),
    'rmdir' =>
        array (
            'file' => 'function.rmdir.php',
            'desc' => 'Removes directory',
        ),
    'round' =>
        array (
            'file' => 'function.round.php',
            'desc' => 'Rounds a float',
        ),
    'rpm_close' =>
        array (
            'file' => 'function.rpm-close.php',
            'desc' => 'Closes an RPM file',
        ),
    'rpm_get_tag' =>
        array (
            'file' => 'function.rpm-get-tag.php',
            'desc' => 'Retrieves a header tag from an RPM file',
        ),
    'rpm_is_valid' =>
        array (
            'file' => 'function.rpm-is-valid.php',
            'desc' => 'Tests a filename for validity as an RPM file',
        ),
    'rpm_open' =>
        array (
            'file' => 'function.rpm-open.php',
            'desc' => 'Opens an RPM file',
        ),
    'rpm_version' =>
        array (
            'file' => 'function.rpm-version.php',
            'desc' => 'Returns a string representing the current version of the
   rpmreader extension',
        ),
    'RRDCreator::addArchive' =>
        array (
            'file' => 'rrdcreator.addarchive.php',
            'desc' => 'Adds RRA - archive of data values for each data source.',
        ),
    'RRDCreator::addDataSource' =>
        array (
            'file' => 'rrdcreator.adddatasource.php',
            'desc' => 'Adds data source definition for RRD database.',
        ),
    'RRDCreator::save' =>
        array (
            'file' => 'rrdcreator.save.php',
            'desc' => 'Saves the RRD database to a file',
        ),
    'RRDCreator::__construct' =>
        array (
            'file' => 'rrdcreator.construct.php',
            'desc' => 'Creates new RRDCreator instance',
        ),
    'rrdc_disconnect' =>
        array (
            'file' => 'function.rrdc-disconnect.php',
            'desc' => 'Close any outstanding connection to rrd caching daemon',
        ),
    'RRDGraph::save' =>
        array (
            'file' => 'rrdgraph.save.php',
            'desc' => 'Saves the result of query into image',
        ),
    'RRDGraph::saveVerbose' =>
        array (
            'file' => 'rrdgraph.saveverbose.php',
            'desc' => 'Saves the RRD database query into image and returns the verbose
   information about generated graph.',
        ),
    'RRDGraph::setOptions' =>
        array (
            'file' => 'rrdgraph.setoptions.php',
            'desc' => 'Sets the options for rrd graph export',
        ),
    'RRDGraph::__construct' =>
        array (
            'file' => 'rrdgraph.construct.php',
            'desc' => 'Creates new RRDGraph instance',
        ),
    'RRDUpdater::update' =>
        array (
            'file' => 'rrdupdater.update.php',
            'desc' => 'Update the RRD database file',
        ),
    'RRDUpdater::__construct' =>
        array (
            'file' => 'rrdupdater.construct.php',
            'desc' => 'Creates new RRDUpdater instance',
        ),
    'rrd_create' =>
        array (
            'file' => 'function.rrd-create.php',
            'desc' => 'Creates rrd database file',
        ),
    'rrd_error' =>
        array (
            'file' => 'function.rrd-error.php',
            'desc' => 'Gets latest error message.',
        ),
    'rrd_fetch' =>
        array (
            'file' => 'function.rrd-fetch.php',
            'desc' => 'Fetch the data for graph as array.',
        ),
    'rrd_first' =>
        array (
            'file' => 'function.rrd-first.php',
            'desc' => 'Gets the timestamp of the first sample from rrd file.',
        ),
    'rrd_graph' =>
        array (
            'file' => 'function.rrd-graph.php',
            'desc' => 'Creates image from a data.',
        ),
    'rrd_info' =>
        array (
            'file' => 'function.rrd-info.php',
            'desc' => 'Gets information about rrd file',
        ),
    'rrd_last' =>
        array (
            'file' => 'function.rrd-last.php',
            'desc' => 'Gets unix timestamp of the last sample.',
        ),
    'rrd_lastupdate' =>
        array (
            'file' => 'function.rrd-lastupdate.php',
            'desc' => 'Gets information about last updated data.',
        ),
    'rrd_restore' =>
        array (
            'file' => 'function.rrd-restore.php',
            'desc' => 'Restores the RRD file from XML dump.',
        ),
    'rrd_tune' =>
        array (
            'file' => 'function.rrd-tune.php',
            'desc' => 'Tunes some RRD database file header options.',
        ),
    'rrd_update' =>
        array (
            'file' => 'function.rrd-update.php',
            'desc' => 'Updates the RRD database.',
        ),
    'rrd_version' =>
        array (
            'file' => 'function.rrd-version.php',
            'desc' => 'Gets information about underlying rrdtool library',
        ),
    'rrd_xport' =>
        array (
            'file' => 'function.rrd-xport.php',
            'desc' => 'Exports the information about RRD database.',
        ),
    'rsort' =>
        array (
            'file' => 'function.rsort.php',
            'desc' => 'Sort an array in reverse order',
        ),
    'rtrim' =>
        array (
            'file' => 'function.rtrim.php',
            'desc' => 'Strip whitespace (or other characters) from the end of a string',
        ),
    'runkit_class_adopt' =>
        array (
            'file' => 'function.runkit-class-adopt.php',
            'desc' => 'Convert a base class to an inherited class, add ancestral methods when appropriate',
        ),
    'runkit_class_emancipate' =>
        array (
            'file' => 'function.runkit-class-emancipate.php',
            'desc' => 'Convert an inherited class to a base class, removes any method whose scope is ancestral',
        ),
    'runkit_constant_add' =>
        array (
            'file' => 'function.runkit-constant-add.php',
            'desc' => 'Similar to define(), but allows defining in class definitions as well',
        ),
    'runkit_constant_redefine' =>
        array (
            'file' => 'function.runkit-constant-redefine.php',
            'desc' => 'Redefine an already defined constant',
        ),
    'runkit_constant_remove' =>
        array (
            'file' => 'function.runkit-constant-remove.php',
            'desc' => 'Remove/Delete an already defined constant',
        ),
    'runkit_function_add' =>
        array (
            'file' => 'function.runkit-function-add.php',
            'desc' => 'Add a new function, similar to create_function',
        ),
    'runkit_function_copy' =>
        array (
            'file' => 'function.runkit-function-copy.php',
            'desc' => 'Copy a function to a new function name',
        ),
    'runkit_function_redefine' =>
        array (
            'file' => 'function.runkit-function-redefine.php',
            'desc' => 'Replace a function definition with a new implementation',
        ),
    'runkit_function_remove' =>
        array (
            'file' => 'function.runkit-function-remove.php',
            'desc' => 'Remove a function definition',
        ),
    'runkit_function_rename' =>
        array (
            'file' => 'function.runkit-function-rename.php',
            'desc' => 'Change a function\'s name',
        ),
    'runkit_import' =>
        array (
            'file' => 'function.runkit-import.php',
            'desc' => 'Process a PHP file importing function and class definitions, overwriting where appropriate',
        ),
    'runkit_lint' =>
        array (
            'file' => 'function.runkit-lint.php',
            'desc' => 'Check the PHP syntax of the specified php code',
        ),
    'runkit_lint_file' =>
        array (
            'file' => 'function.runkit-lint-file.php',
            'desc' => 'Check the PHP syntax of the specified file',
        ),
    'runkit_method_add' =>
        array (
            'file' => 'function.runkit-method-add.php',
            'desc' => 'Dynamically adds a new method to a given class',
        ),
    'runkit_method_copy' =>
        array (
            'file' => 'function.runkit-method-copy.php',
            'desc' => 'Copies a method from class to another',
        ),
    'runkit_method_redefine' =>
        array (
            'file' => 'function.runkit-method-redefine.php',
            'desc' => 'Dynamically changes the code of the given method',
        ),
    'runkit_method_remove' =>
        array (
            'file' => 'function.runkit-method-remove.php',
            'desc' => 'Dynamically removes the given method',
        ),
    'runkit_method_rename' =>
        array (
            'file' => 'function.runkit-method-rename.php',
            'desc' => 'Dynamically changes the name of the given method',
        ),
    'runkit_return_value_used' =>
        array (
            'file' => 'function.runkit-return-value-used.php',
            'desc' => 'Determines if the current functions return value will be used',
        ),
    'Runkit_Sandbox' =>
        array (
            'file' => 'runkit.sandbox.php',
            'desc' => 'Runkit Sandbox Class -- PHP Virtual Machine',
        ),
    'runkit_sandbox_output_handler' =>
        array (
            'file' => 'function.runkit-sandbox-output-handler.php',
            'desc' => 'Specify a function to capture and/or process output from a runkit sandbox',
        ),
    'Runkit_Sandbox_Parent' =>
        array (
            'file' => 'runkit.sandbox-parent.php',
            'desc' => 'Runkit Anti-Sandbox Class',
        ),
    'runkit_superglobals' =>
        array (
            'file' => 'function.runkit-superglobals.php',
            'desc' => 'Return numerically indexed array of registered superglobals',
        ),
    'SAMConnection::commit' =>
        array (
            'file' => 'samconnection.commit.php',
            'desc' => 'Commits (completes) the current unit of work.',
        ),
    'SAMConnection::connect' =>
        array (
            'file' => 'samconnection.connect.php',
            'desc' => 'Establishes a connection to a Messaging Server',
        ),
    'SAMConnection::disconnect' =>
        array (
            'file' => 'samconnection.disconnect.php',
            'desc' => 'Disconnects from a Messaging Server',
        ),
    'SAMConnection::errno' =>
        array (
            'file' => 'samconnection.errno.php',
            'desc' => 'Contains the unique numeric error code of the last executed SAM operation.',
        ),
    'SAMConnection::error' =>
        array (
            'file' => 'samconnection.error.php',
            'desc' => 'Contains the text description of the last failed SAM operation.',
        ),
    'SAMConnection::isConnected' =>
        array (
            'file' => 'samconnection.isconnected.php',
            'desc' => 'Queries whether a connection is established to a Messaging Server',
        ),
    'SAMConnection::peek' =>
        array (
            'file' => 'samconnection.peek.php',
            'desc' => 'Read a message from a queue without removing it from the queue.',
        ),
    'SAMConnection::peekAll' =>
        array (
            'file' => 'samconnection.peekall.php',
            'desc' => 'Read one or more messages from a queue without removing it from the queue.',
        ),
    'SAMConnection::receive' =>
        array (
            'file' => 'samconnection.receive.php',
            'desc' => 'Receive a message from a queue or subscription.',
        ),
    'SAMConnection::remove' =>
        array (
            'file' => 'samconnection.remove.php',
            'desc' => 'Remove a message from a queue.',
        ),
    'SAMConnection::rollback' =>
        array (
            'file' => 'samconnection.rollback.php',
            'desc' => 'Cancels (rolls back) an in-flight unit of work.',
        ),
    'SAMConnection::send' =>
        array (
            'file' => 'samconnection.send.php',
            'desc' => 'Send a message to a queue or publish an item to a topic.',
        ),
    'SAMConnection::setDebug' =>
        array (
            'file' => 'samconnection.setdebug.php',
            'desc' => 'Turn on or off additional debugging output.',
        ),
    'SAMConnection::subscribe' =>
        array (
            'file' => 'samconnection.subscribe.php',
            'desc' => 'Create a subscription to a specified topic.',
        ),
    'SAMConnection::unsubscribe' =>
        array (
            'file' => 'samconnection.unsubscribe.php',
            'desc' => 'Cancel a subscription to a specified topic.',
        ),
    'SAMConnection::__construct' =>
        array (
            'file' => 'samconnection.construct.php',
            'desc' => 'Creates a new connection to a Messaging Server',
        ),
    'SAMMessage::body' =>
        array (
            'file' => 'sammessage.body.php',
            'desc' => 'The body of the message.',
        ),
    'SAMMessage::header' =>
        array (
            'file' => 'sammessage.header.php',
            'desc' => 'The header properties of the message.',
        ),
    'SAMMessage::__construct' =>
        array (
            'file' => 'sammessage.construct.php',
            'desc' => 'Creates a new Message object',
        ),
    'SCA::createDataObject' =>
        array (
            'file' => 'sca.createdataobject.php',
            'desc' => 'create an SDO',
        ),
    'SCA::getService' =>
        array (
            'file' => 'sca.getservice.php',
            'desc' => 'Obtain a proxy for a service',
        ),
    'scandir' =>
        array (
            'file' => 'function.scandir.php',
            'desc' => 'List files and directories inside the specified path',
        ),
    'SCA_LocalProxy::createDataObject' =>
        array (
            'file' => 'sca-localproxy.createdataobject.php',
            'desc' => 'create an SDO',
        ),
    'SCA_SoapProxy::createDataObject' =>
        array (
            'file' => 'sca-soapproxy.createdataobject.php',
            'desc' => 'create an SDO',
        ),
    'SDO_DAS_ChangeSummary::beginLogging' =>
        array (
            'file' => 'sdo-das-changesummary.beginlogging.php',
            'desc' => 'Begin change logging',
        ),
    'SDO_DAS_ChangeSummary::endLogging' =>
        array (
            'file' => 'sdo-das-changesummary.endlogging.php',
            'desc' => 'End change logging',
        ),
    'SDO_DAS_ChangeSummary::getChangedDataObjects' =>
        array (
            'file' => 'sdo-das-changesummary.getchangeddataobjects.php',
            'desc' => 'Get the changed data objects from a change summary',
        ),
    'SDO_DAS_ChangeSummary::getChangeType' =>
        array (
            'file' => 'sdo-das-changesummary.getchangetype.php',
            'desc' => 'Get the type of change made to an SDO_DataObject',
        ),
    'SDO_DAS_ChangeSummary::getOldContainer' =>
        array (
            'file' => 'sdo-das-changesummary.getoldcontainer.php',
            'desc' => 'Get the old container for a deleted SDO_DataObject',
        ),
    'SDO_DAS_ChangeSummary::getOldValues' =>
        array (
            'file' => 'sdo-das-changesummary.getoldvalues.php',
            'desc' => 'Get the old values for a given changed SDO_DataObject',
        ),
    'SDO_DAS_ChangeSummary::isLogging' =>
        array (
            'file' => 'sdo-das-changesummary.islogging.php',
            'desc' => 'Test to see whether change logging is switched on',
        ),
    'SDO_DAS_DataFactory::addPropertyToType' =>
        array (
            'file' => 'sdo-das-datafactory.addpropertytotype.php',
            'desc' => 'Adds a property to a type',
        ),
    'SDO_DAS_DataFactory::addType' =>
        array (
            'file' => 'sdo-das-datafactory.addtype.php',
            'desc' => 'Add a new type to a model',
        ),
    'SDO_DAS_DataFactory::getDataFactory' =>
        array (
            'file' => 'sdo-das-datafactory.getdatafactory.php',
            'desc' => 'Get a data factory instance',
        ),
    'SDO_DAS_DataObject::getChangeSummary' =>
        array (
            'file' => 'sdo-das-dataobject.getchangesummary.php',
            'desc' => 'Get a data object\'s change summary',
        ),
    'SDO_DAS_Relational::applyChanges' =>
        array (
            'file' => 'sdo-das-relational.applychanges.php',
            'desc' => 'Applies the changes made to a data graph back to the database.',
        ),
    'SDO_DAS_Relational::createRootDataObject' =>
        array (
            'file' => 'sdo-das-relational.createrootdataobject.php',
            'desc' => 'Returns the special root object in an otherwise 
   empty data graph. Used when creating a data graph from scratch.',
        ),
    'SDO_DAS_Relational::executePreparedQuery' =>
        array (
            'file' => 'sdo-das-relational.executepreparedquery.php',
            'desc' => 'Executes an SQL query passed as a prepared statement, with a 
   list of values to substitute for placeholders, and return the 
   results as a normalised data graph.',
        ),
    'SDO_DAS_Relational::executeQuery' =>
        array (
            'file' => 'sdo-das-relational.executequery.php',
            'desc' => 'Executes a given SQL query against a relational database 
   and returns the results as a normalised data graph.',
        ),
    'SDO_DAS_Relational::__construct' =>
        array (
            'file' => 'sdo-das-relational.construct.php',
            'desc' => 'Creates an instance of a Relational Data Access Service',
        ),
    'SDO_DAS_Setting::getListIndex' =>
        array (
            'file' => 'sdo-das-setting.getlistindex.php',
            'desc' => 'Get the list index for a changed many-valued property',
        ),
    'SDO_DAS_Setting::getPropertyIndex' =>
        array (
            'file' => 'sdo-das-setting.getpropertyindex.php',
            'desc' => 'Get the property index for a changed property',
        ),
    'SDO_DAS_Setting::getPropertyName' =>
        array (
            'file' => 'sdo-das-setting.getpropertyname.php',
            'desc' => 'Get the property name for a changed property',
        ),
    'SDO_DAS_Setting::getValue' =>
        array (
            'file' => 'sdo-das-setting.getvalue.php',
            'desc' => 'Get the old value for the changed property',
        ),
    'SDO_DAS_Setting::isSet' =>
        array (
            'file' => 'sdo-das-setting.isset.php',
            'desc' => 'Test whether a property was set prior to being modified',
        ),
    'SDO_DAS_XML::addTypes' =>
        array (
            'file' => 'sdo-das-xml.addtypes.php',
            'desc' => 'To load a second or subsequent schema file to a SDO_DAS_XML object',
        ),
    'SDO_DAS_XML::create' =>
        array (
            'file' => 'sdo-das-xml.create.php',
            'desc' => 'To create SDO_DAS_XML object for a given schema file',
        ),
    'SDO_DAS_XML::createDataObject' =>
        array (
            'file' => 'sdo-das-xml.createdataobject.php',
            'desc' => 'Creates SDO_DataObject for a given namespace URI and type name',
        ),
    'SDO_DAS_XML::createDocument' =>
        array (
            'file' => 'sdo-das-xml.createdocument.php',
            'desc' => 'Creates an XML Document object from scratch, without the need to load a document from a file or string.',
        ),
    'SDO_DAS_XML::loadFile' =>
        array (
            'file' => 'sdo-das-xml.loadfile.php',
            'desc' => 'Returns SDO_DAS_XML_Document object for a given path to xml instance document',
        ),
    'SDO_DAS_XML::loadString' =>
        array (
            'file' => 'sdo-das-xml.loadstring.php',
            'desc' => 'Returns SDO_DAS_XML_Document for a given xml instance string',
        ),
    'SDO_DAS_XML::saveFile' =>
        array (
            'file' => 'sdo-das-xml.savefile.php',
            'desc' => 'Saves the SDO_DAS_XML_Document object to a file',
        ),
    'SDO_DAS_XML::saveString' =>
        array (
            'file' => 'sdo-das-xml.savestring.php',
            'desc' => 'Saves the SDO_DAS_XML_Document object to a string',
        ),
    'SDO_DAS_XML_Document::getRootDataObject' =>
        array (
            'file' => 'sdo-das-xml-document.getrootdataobject.php',
            'desc' => 'Returns the root SDO_DataObject',
        ),
    'SDO_DAS_XML_Document::getRootElementName' =>
        array (
            'file' => 'sdo-das-xml-document.getrootelementname.php',
            'desc' => 'Returns root element\'s name',
        ),
    'SDO_DAS_XML_Document::getRootElementURI' =>
        array (
            'file' => 'sdo-das-xml-document.getrootelementuri.php',
            'desc' => 'Returns root element\'s URI string',
        ),
    'SDO_DAS_XML_Document::setEncoding' =>
        array (
            'file' => 'sdo-das-xml-document.setencoding.php',
            'desc' => 'Sets the given string as encoding',
        ),
    'SDO_DAS_XML_Document::setXMLDeclaration' =>
        array (
            'file' => 'sdo-das-xml-document.setxmldeclaration.php',
            'desc' => 'Sets the xml declaration',
        ),
    'SDO_DAS_XML_Document::setXMLVersion' =>
        array (
            'file' => 'sdo-das-xml-document.setxmlversion.php',
            'desc' => 'Sets the given string as xml version',
        ),
    'SDO_DataFactory::create' =>
        array (
            'file' => 'sdo-datafactory.create.php',
            'desc' => 'Create an SDO_DataObject',
        ),
    'SDO_DataObject::clear' =>
        array (
            'file' => 'sdo-dataobject.clear.php',
            'desc' => 'Clear an SDO_DataObject\'s properties',
        ),
    'SDO_DataObject::createDataObject' =>
        array (
            'file' => 'sdo-dataobject.createdataobject.php',
            'desc' => 'Create a child SDO_DataObject',
        ),
    'SDO_DataObject::getContainer' =>
        array (
            'file' => 'sdo-dataobject.getcontainer.php',
            'desc' => 'Get a data object\'s container',
        ),
    'SDO_DataObject::getSequence' =>
        array (
            'file' => 'sdo-dataobject.getsequence.php',
            'desc' => 'Get the sequence for a data object',
        ),
    'SDO_DataObject::getTypeName' =>
        array (
            'file' => 'sdo-dataobject.gettypename.php',
            'desc' => 'Return the name of the type for a data object.',
        ),
    'SDO_DataObject::getTypeNamespaceURI' =>
        array (
            'file' => 'sdo-dataobject.gettypenamespaceuri.php',
            'desc' => 'Return the namespace URI of the type for a data object.',
        ),
    'SDO_Exception::getCause' =>
        array (
            'file' => 'sdo-exception.getcause.php',
            'desc' => 'Get the cause of the exception.',
        ),
    'SDO_List::insert' =>
        array (
            'file' => 'sdo-list.insert.php',
            'desc' => 'Insert into a list',
        ),
    'SDO_Model_Property::getContainingType' =>
        array (
            'file' => 'sdo-model-property.getcontainingtype.php',
            'desc' => 'Get the SDO_Model_Type which contains this property',
        ),
    'SDO_Model_Property::getDefault' =>
        array (
            'file' => 'sdo-model-property.getdefault.php',
            'desc' => 'Get the default value for the property',
        ),
    'SDO_Model_Property::getName' =>
        array (
            'file' => 'sdo-model-property.getname.php',
            'desc' => 'Get the name of the SDO_Model_Property',
        ),
    'SDO_Model_Property::getType' =>
        array (
            'file' => 'sdo-model-property.gettype.php',
            'desc' => 'Get the SDO_Model_Type of the property',
        ),
    'SDO_Model_Property::isContainment' =>
        array (
            'file' => 'sdo-model-property.iscontainment.php',
            'desc' => 'Test to see if the property defines a containment relationship',
        ),
    'SDO_Model_Property::isMany' =>
        array (
            'file' => 'sdo-model-property.ismany.php',
            'desc' => 'Test to see if the property is many-valued',
        ),
    'SDO_Model_ReflectionDataObject::export' =>
        array (
            'file' => 'sdo-model-reflectiondataobject.export.php',
            'desc' => 'Get a string describing the SDO_DataObject.',
        ),
    'SDO_Model_ReflectionDataObject::getContainmentProperty' =>
        array (
            'file' => 'sdo-model-reflectiondataobject.getcontainmentproperty.php',
            'desc' => 'Get the property which defines the containment relationship to the data object',
        ),
    'SDO_Model_ReflectionDataObject::getInstanceProperties' =>
        array (
            'file' => 'sdo-model-reflectiondataobject.getinstanceproperties.php',
            'desc' => 'Get the instance properties of the SDO_DataObject',
        ),
    'SDO_Model_ReflectionDataObject::getType' =>
        array (
            'file' => 'sdo-model-reflectiondataobject.gettype.php',
            'desc' => 'Get the SDO_Model_Type for the SDO_DataObject',
        ),
    'SDO_Model_ReflectionDataObject::__construct' =>
        array (
            'file' => 'sdo-model-reflectiondataobject.construct.php',
            'desc' => 'Construct an SDO_Model_ReflectionDataObject',
        ),
    'SDO_Model_Type::getBaseType' =>
        array (
            'file' => 'sdo-model-type.getbasetype.php',
            'desc' => 'Get the base type for this type',
        ),
    'SDO_Model_Type::getName' =>
        array (
            'file' => 'sdo-model-type.getname.php',
            'desc' => 'Get the name of the type',
        ),
    'SDO_Model_Type::getNamespaceURI' =>
        array (
            'file' => 'sdo-model-type.getnamespaceuri.php',
            'desc' => 'Get the namespace URI of the type',
        ),
    'SDO_Model_Type::getProperties' =>
        array (
            'file' => 'sdo-model-type.getproperties.php',
            'desc' => 'Get the SDO_Model_Property objects defined for the type',
        ),
    'SDO_Model_Type::getProperty' =>
        array (
            'file' => 'sdo-model-type.getproperty.php',
            'desc' => 'Get an SDO_Model_Property of the type',
        ),
    'SDO_Model_Type::isAbstractType' =>
        array (
            'file' => 'sdo-model-type.isabstracttype.php',
            'desc' => 'Test to see if this SDO_Model_Type is an abstract data type',
        ),
    'SDO_Model_Type::isDataType' =>
        array (
            'file' => 'sdo-model-type.isdatatype.php',
            'desc' => 'Test to see if this SDO_Model_Type is a primitive data type',
        ),
    'SDO_Model_Type::isInstance' =>
        array (
            'file' => 'sdo-model-type.isinstance.php',
            'desc' => 'Test for an SDO_DataObject being an instance of this SDO_Model_Type',
        ),
    'SDO_Model_Type::isOpenType' =>
        array (
            'file' => 'sdo-model-type.isopentype.php',
            'desc' => 'Test to see if this type is an open type',
        ),
    'SDO_Model_Type::isSequencedType' =>
        array (
            'file' => 'sdo-model-type.issequencedtype.php',
            'desc' => 'Test to see if this is a sequenced type',
        ),
    'SDO_Sequence::getProperty' =>
        array (
            'file' => 'sdo-sequence.getproperty.php',
            'desc' => 'Return the property for the specified sequence index.',
        ),
    'SDO_Sequence::insert' =>
        array (
            'file' => 'sdo-sequence.insert.php',
            'desc' => 'Insert into a sequence',
        ),
    'SDO_Sequence::move' =>
        array (
            'file' => 'sdo-sequence.move.php',
            'desc' => 'Move an item to another sequence position',
        ),
    'SeekableIterator::seek' =>
        array (
            'file' => 'seekableiterator.seek.php',
            'desc' => 'Seeks to a position',
        ),
    'sem_acquire' =>
        array (
            'file' => 'function.sem-acquire.php',
            'desc' => 'Acquire a semaphore',
        ),
    'sem_get' =>
        array (
            'file' => 'function.sem-get.php',
            'desc' => 'Get a semaphore id',
        ),
    'sem_release' =>
        array (
            'file' => 'function.sem-release.php',
            'desc' => 'Release a semaphore',
        ),
    'sem_remove' =>
        array (
            'file' => 'function.sem-remove.php',
            'desc' => 'Remove a semaphore',
        ),
    'Serializable::serialize' =>
        array (
            'file' => 'serializable.serialize.php',
            'desc' => 'String representation of object',
        ),
    'Serializable::unserialize' =>
        array (
            'file' => 'serializable.unserialize.php',
            'desc' => 'Constructs the object',
        ),
    'serialize' =>
        array (
            'file' => 'function.serialize.php',
            'desc' => 'Generates a storable representation of a value',
        ),
    'SessionHandler::close' =>
        array (
            'file' => 'sessionhandler.close.php',
            'desc' => 'Close the session',
        ),
    'SessionHandler::create_sid' =>
        array (
            'file' => 'sessionhandler.create-sid.php',
            'desc' => 'Return a new session ID',
        ),
    'SessionHandler::destroy' =>
        array (
            'file' => 'sessionhandler.destroy.php',
            'desc' => 'Destroy a session',
        ),
    'SessionHandler::gc' =>
        array (
            'file' => 'sessionhandler.gc.php',
            'desc' => 'Cleanup old sessions',
        ),
    'SessionHandler::open' =>
        array (
            'file' => 'sessionhandler.open.php',
            'desc' => 'Initialize session',
        ),
    'SessionHandler::read' =>
        array (
            'file' => 'sessionhandler.read.php',
            'desc' => 'Read session data',
        ),
    'SessionHandler::write' =>
        array (
            'file' => 'sessionhandler.write.php',
            'desc' => 'Write session data',
        ),
    'SessionHandlerInterface::close' =>
        array (
            'file' => 'sessionhandlerinterface.close.php',
            'desc' => 'Close the session',
        ),
    'SessionHandlerInterface::destroy' =>
        array (
            'file' => 'sessionhandlerinterface.destroy.php',
            'desc' => 'Destroy a session',
        ),
    'SessionHandlerInterface::gc' =>
        array (
            'file' => 'sessionhandlerinterface.gc.php',
            'desc' => 'Cleanup old sessions',
        ),
    'SessionHandlerInterface::open' =>
        array (
            'file' => 'sessionhandlerinterface.open.php',
            'desc' => 'Initialize session',
        ),
    'SessionHandlerInterface::read' =>
        array (
            'file' => 'sessionhandlerinterface.read.php',
            'desc' => 'Read session data',
        ),
    'SessionHandlerInterface::write' =>
        array (
            'file' => 'sessionhandlerinterface.write.php',
            'desc' => 'Write session data',
        ),
    'session_abort' =>
        array (
            'file' => 'function.session-abort.php',
            'desc' => 'Discard session array changes and finish session',
        ),
    'session_cache_expire' =>
        array (
            'file' => 'function.session-cache-expire.php',
            'desc' => 'Return current cache expire',
        ),
    'session_cache_limiter' =>
        array (
            'file' => 'function.session-cache-limiter.php',
            'desc' => 'Get and/or set the current cache limiter',
        ),
    'session_commit' =>
        array (
            'file' => 'function.session-commit.php',
            'desc' => 'Alias of session_write_close',
        ),
    'session_decode' =>
        array (
            'file' => 'function.session-decode.php',
            'desc' => 'Decodes session data from a session encoded string',
        ),
    'session_destroy' =>
        array (
            'file' => 'function.session-destroy.php',
            'desc' => 'Destroys all data registered to a session',
        ),
    'session_encode' =>
        array (
            'file' => 'function.session-encode.php',
            'desc' => 'Encodes the current session data as a session encoded string',
        ),
    'session_get_cookie_params' =>
        array (
            'file' => 'function.session-get-cookie-params.php',
            'desc' => 'Get the session cookie parameters',
        ),
    'session_id' =>
        array (
            'file' => 'function.session-id.php',
            'desc' => 'Get and/or set the current session id',
        ),
    'session_is_registered' =>
        array (
            'file' => 'function.session-is-registered.php',
            'desc' => 'Find out whether a global variable is registered in a session',
        ),
    'session_module_name' =>
        array (
            'file' => 'function.session-module-name.php',
            'desc' => 'Get and/or set the current session module',
        ),
    'session_name' =>
        array (
            'file' => 'function.session-name.php',
            'desc' => 'Get and/or set the current session name',
        ),
    'session_pgsql_add_error' =>
        array (
            'file' => 'function.session-pgsql-add-error.php',
            'desc' => 'Increments error counts and sets last error message',
        ),
    'session_pgsql_get_error' =>
        array (
            'file' => 'function.session-pgsql-get-error.php',
            'desc' => 'Returns number of errors and last error message',
        ),
    'session_pgsql_get_field' =>
        array (
            'file' => 'function.session-pgsql-get-field.php',
            'desc' => 'Get custom field value',
        ),
    'session_pgsql_reset' =>
        array (
            'file' => 'function.session-pgsql-reset.php',
            'desc' => 'Reset connection to session database servers',
        ),
    'session_pgsql_set_field' =>
        array (
            'file' => 'function.session-pgsql-set-field.php',
            'desc' => 'Set custom field value',
        ),
    'session_pgsql_status' =>
        array (
            'file' => 'function.session-pgsql-status.php',
            'desc' => 'Get current save handler status',
        ),
    'session_regenerate_id' =>
        array (
            'file' => 'function.session-regenerate-id.php',
            'desc' => 'Update the current session id with a newly generated one',
        ),
    'session_register' =>
        array (
            'file' => 'function.session-register.php',
            'desc' => 'Register one or more global variables with the current session',
        ),
    'session_register_shutdown' =>
        array (
            'file' => 'function.session-register-shutdown.php',
            'desc' => 'Session shutdown function',
        ),
    'session_reset' =>
        array (
            'file' => 'function.session-reset.php',
            'desc' => 'Re-initialize session array with original values',
        ),
    'session_save_path' =>
        array (
            'file' => 'function.session-save-path.php',
            'desc' => 'Get and/or set the current session save path',
        ),
    'session_set_cookie_params' =>
        array (
            'file' => 'function.session-set-cookie-params.php',
            'desc' => 'Set the session cookie parameters',
        ),
    'session_set_save_handler' =>
        array (
            'file' => 'function.session-set-save-handler.php',
            'desc' => 'Sets user-level session storage functions',
        ),
    'session_start' =>
        array (
            'file' => 'function.session-start.php',
            'desc' => 'Start new or resume existing session',
        ),
    'session_status' =>
        array (
            'file' => 'function.session-status.php',
            'desc' => 'Returns the current session status',
        ),
    'session_unregister' =>
        array (
            'file' => 'function.session-unregister.php',
            'desc' => 'Unregister a global variable from the current session',
        ),
    'session_unset' =>
        array (
            'file' => 'function.session-unset.php',
            'desc' => 'Free all session variables',
        ),
    'session_write_close' =>
        array (
            'file' => 'function.session-write-close.php',
            'desc' => 'Write session data and end session',
        ),
    'setcookie' =>
        array (
            'file' => 'function.setcookie.php',
            'desc' => 'Send a cookie',
        ),
    'setlocale' =>
        array (
            'file' => 'function.setlocale.php',
            'desc' => 'Set locale information',
        ),
    'setproctitle' =>
        array (
            'file' => 'function.setproctitle.php',
            'desc' => 'Set the process title',
        ),
    'setrawcookie' =>
        array (
            'file' => 'function.setrawcookie.php',
            'desc' => 'Send a cookie without urlencoding the cookie value',
        ),
    'setthreadtitle' =>
        array (
            'file' => 'function.setthreadtitle.php',
            'desc' => 'Set the thread title',
        ),
    'settype' =>
        array (
            'file' => 'function.settype.php',
            'desc' => 'Set the type of a variable',
        ),
    'set_error_handler' =>
        array (
            'file' => 'function.set-error-handler.php',
            'desc' => 'Sets a user-defined error handler function',
        ),
    'set_exception_handler' =>
        array (
            'file' => 'function.set-exception-handler.php',
            'desc' => 'Sets a user-defined exception handler function',
        ),
    'set_file_buffer' =>
        array (
            'file' => 'function.set-file-buffer.php',
            'desc' => 'Alias of stream_set_write_buffer',
        ),
    'set_include_path' =>
        array (
            'file' => 'function.set-include-path.php',
            'desc' => 'Sets the include_path configuration option',
        ),
    'set_magic_quotes_runtime' =>
        array (
            'file' => 'function.set-magic-quotes-runtime.php',
            'desc' => 'Sets the current active configuration setting of magic_quotes_runtime',
        ),
    'set_socket_blocking' =>
        array (
            'file' => 'function.set-socket-blocking.php',
            'desc' => 'Alias of stream_set_blocking',
        ),
    'set_time_limit' =>
        array (
            'file' => 'function.set-time-limit.php',
            'desc' => 'Limits the maximum execution time',
        ),
    'sha1' =>
        array (
            'file' => 'function.sha1.php',
            'desc' => 'Calculate the sha1 hash of a string',
        ),
    'sha1_file' =>
        array (
            'file' => 'function.sha1-file.php',
            'desc' => 'Calculate the sha1 hash of a file',
        ),
    'shell_exec' =>
        array (
            'file' => 'function.shell-exec.php',
            'desc' => 'Execute command via shell and return the complete output as a string',
        ),
    'shmop_close' =>
        array (
            'file' => 'function.shmop-close.php',
            'desc' => 'Close shared memory block',
        ),
    'shmop_delete' =>
        array (
            'file' => 'function.shmop-delete.php',
            'desc' => 'Delete shared memory block',
        ),
    'shmop_open' =>
        array (
            'file' => 'function.shmop-open.php',
            'desc' => 'Create or open shared memory block',
        ),
    'shmop_read' =>
        array (
            'file' => 'function.shmop-read.php',
            'desc' => 'Read data from shared memory block',
        ),
    'shmop_size' =>
        array (
            'file' => 'function.shmop-size.php',
            'desc' => 'Get size of shared memory block',
        ),
    'shmop_write' =>
        array (
            'file' => 'function.shmop-write.php',
            'desc' => 'Write data into shared memory block',
        ),
    'shm_attach' =>
        array (
            'file' => 'function.shm-attach.php',
            'desc' => 'Creates or open a shared memory segment',
        ),
    'shm_detach' =>
        array (
            'file' => 'function.shm-detach.php',
            'desc' => 'Disconnects from shared memory segment',
        ),
    'shm_get_var' =>
        array (
            'file' => 'function.shm-get-var.php',
            'desc' => 'Returns a variable from shared memory',
        ),
    'shm_has_var' =>
        array (
            'file' => 'function.shm-has-var.php',
            'desc' => 'Check whether a specific entry exists',
        ),
    'shm_put_var' =>
        array (
            'file' => 'function.shm-put-var.php',
            'desc' => 'Inserts or updates a variable in shared memory',
        ),
    'shm_remove' =>
        array (
            'file' => 'function.shm-remove.php',
            'desc' => 'Removes shared memory from Unix systems',
        ),
    'shm_remove_var' =>
        array (
            'file' => 'function.shm-remove-var.php',
            'desc' => 'Removes a variable from shared memory',
        ),
    'show_source' =>
        array (
            'file' => 'function.show-source.php',
            'desc' => 'Alias of highlight_file',
        ),
    'shuffle' =>
        array (
            'file' => 'function.shuffle.php',
            'desc' => 'Shuffle an array',
        ),
    'signeurlpaiement' =>
        array (
            'file' => 'function.signeurlpaiement.php',
            'desc' => 'Obtain the payment url (needs 2 arguments)',
        ),
    'similar_text' =>
        array (
            'file' => 'function.similar-text.php',
            'desc' => 'Calculate the similarity between two strings',
        ),
    'SimpleXMLElement::addAttribute' =>
        array (
            'file' => 'simplexmlelement.addattribute.php',
            'desc' => 'Adds an attribute to the SimpleXML element',
        ),
    'SimpleXMLElement::addChild' =>
        array (
            'file' => 'simplexmlelement.addchild.php',
            'desc' => 'Adds a child element to the XML node',
        ),
    'SimpleXMLElement::asXML' =>
        array (
            'file' => 'simplexmlelement.asxml.php',
            'desc' => 'Return a well-formed XML string based on SimpleXML element',
        ),
    'SimpleXMLElement::attributes' =>
        array (
            'file' => 'simplexmlelement.attributes.php',
            'desc' => 'Identifies an element\'s attributes',
        ),
    'SimpleXMLElement::children' =>
        array (
            'file' => 'simplexmlelement.children.php',
            'desc' => 'Finds children of given node',
        ),
    'SimpleXMLElement::count' =>
        array (
            'file' => 'simplexmlelement.count.php',
            'desc' => 'Counts the children of an element',
        ),
    'SimpleXMLElement::getDocNamespaces' =>
        array (
            'file' => 'simplexmlelement.getdocnamespaces.php',
            'desc' => 'Returns namespaces declared in document',
        ),
    'SimpleXMLElement::getName' =>
        array (
            'file' => 'simplexmlelement.getname.php',
            'desc' => 'Gets the name of the XML element',
        ),
    'SimpleXMLElement::getNamespaces' =>
        array (
            'file' => 'simplexmlelement.getnamespaces.php',
            'desc' => 'Returns namespaces used in document',
        ),
    'SimpleXMLElement::registerXPathNamespace' =>
        array (
            'file' => 'simplexmlelement.registerxpathnamespace.php',
            'desc' => 'Creates a prefix/ns context for the next XPath query',
        ),
    'SimpleXMLElement::saveXML' =>
        array (
            'file' => 'simplexmlelement.savexml.php',
            'desc' => 'Alias of SimpleXMLElement::asXML',
        ),
    'SimpleXMLElement::xpath' =>
        array (
            'file' => 'simplexmlelement.xpath.php',
            'desc' => 'Runs XPath query on XML data',
        ),
    'SimpleXMLElement::__construct' =>
        array (
            'file' => 'simplexmlelement.construct.php',
            'desc' => 'Creates a new SimpleXMLElement object',
        ),
    'SimpleXMLElement::__toString' =>
        array (
            'file' => 'simplexmlelement.tostring.php',
            'desc' => 'Returns the string content',
        ),
    'SimpleXMLIterator::current' =>
        array (
            'file' => 'simplexmliterator.current.php',
            'desc' => 'Returns the current element',
        ),
    'SimpleXMLIterator::getChildren' =>
        array (
            'file' => 'simplexmliterator.getchildren.php',
            'desc' => 'Returns the sub-elements of the current element',
        ),
    'SimpleXMLIterator::hasChildren' =>
        array (
            'file' => 'simplexmliterator.haschildren.php',
            'desc' => 'Checks whether the current element has sub elements.',
        ),
    'SimpleXMLIterator::key' =>
        array (
            'file' => 'simplexmliterator.key.php',
            'desc' => 'Return current key',
        ),
    'SimpleXMLIterator::next' =>
        array (
            'file' => 'simplexmliterator.next.php',
            'desc' => 'Move to next element',
        ),
    'SimpleXMLIterator::rewind' =>
        array (
            'file' => 'simplexmliterator.rewind.php',
            'desc' => 'Rewind to the first element',
        ),
    'SimpleXMLIterator::valid' =>
        array (
            'file' => 'simplexmliterator.valid.php',
            'desc' => 'Check whether the current element is valid',
        ),
    'simplexml_import_dom' =>
        array (
            'file' => 'function.simplexml-import-dom.php',
            'desc' => 'Get a SimpleXMLElement object from a DOM node.',
        ),
    'simplexml_load_file' =>
        array (
            'file' => 'function.simplexml-load-file.php',
            'desc' => 'Interprets an XML file into an object',
        ),
    'simplexml_load_string' =>
        array (
            'file' => 'function.simplexml-load-string.php',
            'desc' => 'Interprets a string of XML into an object',
        ),
    'sin' =>
        array (
            'file' => 'function.sin.php',
            'desc' => 'Sine',
        ),
    'sinh' =>
        array (
            'file' => 'function.sinh.php',
            'desc' => 'Hyperbolic sine',
        ),
    'sizeof' =>
        array (
            'file' => 'function.sizeof.php',
            'desc' => 'Alias of count',
        ),
    'sleep' =>
        array (
            'file' => 'function.sleep.php',
            'desc' => 'Delay execution',
        ),
    'snmp2_get' =>
        array (
            'file' => 'function.snmp2-get.php',
            'desc' => 'Fetch an SNMP object',
        ),
    'snmp2_getnext' =>
        array (
            'file' => 'function.snmp2-getnext.php',
            'desc' => 'Fetch the SNMP object which follows the given object id',
        ),
    'snmp2_real_walk' =>
        array (
            'file' => 'function.snmp2-real-walk.php',
            'desc' => 'Return all objects including their respective object ID within the specified one',
        ),
    'snmp2_set' =>
        array (
            'file' => 'function.snmp2-set.php',
            'desc' => 'Set the value of an SNMP object',
        ),
    'snmp2_walk' =>
        array (
            'file' => 'function.snmp2-walk.php',
            'desc' => 'Fetch all the SNMP objects from an agent',
        ),
    'snmp3_get' =>
        array (
            'file' => 'function.snmp3-get.php',
            'desc' => 'Fetch an SNMP object',
        ),
    'snmp3_getnext' =>
        array (
            'file' => 'function.snmp3-getnext.php',
            'desc' => 'Fetch the SNMP object which follows the given object id',
        ),
    'snmp3_real_walk' =>
        array (
            'file' => 'function.snmp3-real-walk.php',
            'desc' => 'Return all objects including their respective object ID within the specified one',
        ),
    'snmp3_set' =>
        array (
            'file' => 'function.snmp3-set.php',
            'desc' => 'Set the value of an SNMP object',
        ),
    'snmp3_walk' =>
        array (
            'file' => 'function.snmp3-walk.php',
            'desc' => 'Fetch all the SNMP objects from an agent',
        ),
    'SNMP::close' =>
        array (
            'file' => 'snmp.close.php',
            'desc' => 'Close SNMP session',
        ),
    'SNMP::get' =>
        array (
            'file' => 'snmp.get.php',
            'desc' => 'Fetch an SNMP object',
        ),
    'SNMP::getErrno' =>
        array (
            'file' => 'snmp.geterrno.php',
            'desc' => 'Get last error code',
        ),
    'SNMP::getError' =>
        array (
            'file' => 'snmp.geterror.php',
            'desc' => 'Get last error message',
        ),
    'SNMP::getnext' =>
        array (
            'file' => 'snmp.getnext.php',
            'desc' => 'Fetch an SNMP object which
  follows the given object id',
        ),
    'SNMP::set' =>
        array (
            'file' => 'snmp.set.php',
            'desc' => 'Set the value of an SNMP object',
        ),
    'SNMP::setSecurity' =>
        array (
            'file' => 'snmp.setsecurity.php',
            'desc' => 'Configures security-related SNMPv3 session parameters',
        ),
    'SNMP::walk' =>
        array (
            'file' => 'snmp.walk.php',
            'desc' => 'Fetch SNMP object subtree',
        ),
    'SNMP::__construct' =>
        array (
            'file' => 'snmp.construct.php',
            'desc' => 'Creates SNMP instance representing session to remote SNMP agent',
        ),
    'snmpget' =>
        array (
            'file' => 'function.snmpget.php',
            'desc' => 'Fetch an SNMP object',
        ),
    'snmpgetnext' =>
        array (
            'file' => 'function.snmpgetnext.php',
            'desc' => 'Fetch the SNMP object which follows the given object id',
        ),
    'snmprealwalk' =>
        array (
            'file' => 'function.snmprealwalk.php',
            'desc' => 'Return all objects including their respective object ID within the specified one',
        ),
    'snmpset' =>
        array (
            'file' => 'function.snmpset.php',
            'desc' => 'Set the value of an SNMP object',
        ),
    'snmpwalk' =>
        array (
            'file' => 'function.snmpwalk.php',
            'desc' => 'Fetch all the SNMP objects from an agent',
        ),
    'snmpwalkoid' =>
        array (
            'file' => 'function.snmpwalkoid.php',
            'desc' => 'Query for a tree of information about a network entity',
        ),
    'snmp_get_quick_print' =>
        array (
            'file' => 'function.snmp-get-quick-print.php',
            'desc' => 'Fetches the current value of the UCD library\'s quick_print setting',
        ),
    'snmp_get_valueretrieval' =>
        array (
            'file' => 'function.snmp-get-valueretrieval.php',
            'desc' => 'Return the method how the SNMP values will be returned',
        ),
    'snmp_read_mib' =>
        array (
            'file' => 'function.snmp-read-mib.php',
            'desc' => 'Reads and parses a MIB file into the active MIB tree',
        ),
    'snmp_set_enum_print' =>
        array (
            'file' => 'function.snmp-set-enum-print.php',
            'desc' => 'Return all values that are enums with their enum value instead of the raw integer',
        ),
    'snmp_set_oid_numeric_print' =>
        array (
            'file' => 'function.snmp-set-oid-numeric-print.php',
            'desc' => 'Set the OID output format',
        ),
    'snmp_set_oid_output_format' =>
        array (
            'file' => 'function.snmp-set-oid-output-format.php',
            'desc' => 'Set the OID output format',
        ),
    'snmp_set_quick_print' =>
        array (
            'file' => 'function.snmp-set-quick-print.php',
            'desc' => 'Set the value of quick_print within the UCD SNMP library',
        ),
    'snmp_set_valueretrieval' =>
        array (
            'file' => 'function.snmp-set-valueretrieval.php',
            'desc' => 'Specify the method how the SNMP values will be returned',
        ),
    'SoapClient::SoapClient' =>
        array (
            'file' => 'soapclient.soapclient.php',
            'desc' => 'SoapClient constructor',
        ),
    'SoapClient::__call' =>
        array (
            'file' => 'soapclient.call.php',
            'desc' => 'Calls a SOAP function (deprecated)',
        ),
    'SoapClient::__construct' =>
        array (
            'file' => 'soapclient.construct.php',
            'desc' => 'SoapClient constructor',
        ),
    'SoapClient::__doRequest' =>
        array (
            'file' => 'soapclient.dorequest.php',
            'desc' => 'Performs a SOAP request',
        ),
    'SoapClient::__getFunctions' =>
        array (
            'file' => 'soapclient.getfunctions.php',
            'desc' => 'Returns list of available SOAP functions',
        ),
    'SoapClient::__getLastRequest' =>
        array (
            'file' => 'soapclient.getlastrequest.php',
            'desc' => 'Returns last SOAP request',
        ),
    'SoapClient::__getLastRequestHeaders' =>
        array (
            'file' => 'soapclient.getlastrequestheaders.php',
            'desc' => 'Returns the SOAP headers from the last request',
        ),
    'SoapClient::__getLastResponse' =>
        array (
            'file' => 'soapclient.getlastresponse.php',
            'desc' => 'Returns last SOAP response',
        ),
    'SoapClient::__getLastResponseHeaders' =>
        array (
            'file' => 'soapclient.getlastresponseheaders.php',
            'desc' => 'Returns the SOAP headers from the last response',
        ),
    'SoapClient::__getTypes' =>
        array (
            'file' => 'soapclient.gettypes.php',
            'desc' => 'Returns a list of SOAP types',
        ),
    'SoapClient::__setCookie' =>
        array (
            'file' => 'soapclient.setcookie.php',
        ),
    'SoapClient::__setLocation' =>
        array (
            'file' => 'soapclient.setlocation.php',
            'desc' => 'Sets the location of the Web service to use',
        ),
    'SoapClient::__setSoapHeaders' =>
        array (
            'file' => 'soapclient.setsoapheaders.php',
            'desc' => 'Sets SOAP headers for subsequent calls',
        ),
    'SoapClient::__soapCall' =>
        array (
            'file' => 'soapclient.soapcall.php',
            'desc' => 'Calls a SOAP function',
        ),
    'SoapFault::SoapFault' =>
        array (
            'file' => 'soapfault.soapfault.php',
            'desc' => 'SoapFault constructor',
        ),
    'SoapFault::__construct' =>
        array (
            'file' => 'soapfault.construct.php',
            'desc' => 'SoapFault constructor',
        ),
    'SoapFault::__toString' =>
        array (
            'file' => 'soapfault.tostring.php',
            'desc' => 'Obtain a string representation of a SoapFault',
        ),
    'SoapHeader::SoapHeader' =>
        array (
            'file' => 'soapheader.soapheader.php',
            'desc' => 'SoapHeader constructor',
        ),
    'SoapHeader::__construct' =>
        array (
            'file' => 'soapheader.construct.php',
            'desc' => 'SoapHeader constructor',
        ),
    'SoapParam::SoapParam' =>
        array (
            'file' => 'soapparam.soapparam.php',
            'desc' => 'SoapParam constructor',
        ),
    'SoapParam::__construct' =>
        array (
            'file' => 'soapparam.construct.php',
            'desc' => 'SoapParam constructor',
        ),
    'SoapServer::addFunction' =>
        array (
            'file' => 'soapserver.addfunction.php',
            'desc' => 'Adds one or more functions to handle SOAP requests',
        ),
    'SoapServer::addSoapHeader' =>
        array (
            'file' => 'soapserver.addsoapheader.php',
            'desc' => 'Add a SOAP header to the response',
        ),
    'SoapServer::fault' =>
        array (
            'file' => 'soapserver.fault.php',
            'desc' => 'Issue SoapServer fault indicating an error',
        ),
    'SoapServer::getFunctions' =>
        array (
            'file' => 'soapserver.getfunctions.php',
            'desc' => 'Returns list of defined functions',
        ),
    'SoapServer::handle' =>
        array (
            'file' => 'soapserver.handle.php',
            'desc' => 'Handles a SOAP request',
        ),
    'SoapServer::setClass' =>
        array (
            'file' => 'soapserver.setclass.php',
            'desc' => 'Sets the class which handles SOAP requests',
        ),
    'SoapServer::setObject' =>
        array (
            'file' => 'soapserver.setobject.php',
            'desc' => 'Sets the object which will be used to handle SOAP requests',
        ),
    'SoapServer::setPersistence' =>
        array (
            'file' => 'soapserver.setpersistence.php',
            'desc' => 'Sets SoapServer persistence mode',
        ),
    'SoapServer::SoapServer' =>
        array (
            'file' => 'soapserver.soapserver.php',
            'desc' => 'SoapServer constructor',
        ),
    'SoapServer::__construct' =>
        array (
            'file' => 'soapserver.construct.php',
            'desc' => 'SoapServer constructor',
        ),
    'SoapVar::SoapVar' =>
        array (
            'file' => 'soapvar.soapvar.php',
            'desc' => 'SoapVar constructor',
        ),
    'SoapVar::__construct' =>
        array (
            'file' => 'soapvar.construct.php',
            'desc' => 'SoapVar constructor',
        ),
    'Socket context options' =>
        array (
            'file' => 'context.socket.php',
            'desc' => 'Socket context option listing',
        ),
    'socket_accept' =>
        array (
            'file' => 'function.socket-accept.php',
            'desc' => 'Accepts a connection on a socket',
        ),
    'socket_bind' =>
        array (
            'file' => 'function.socket-bind.php',
            'desc' => 'Binds a name to a socket',
        ),
    'socket_clear_error' =>
        array (
            'file' => 'function.socket-clear-error.php',
            'desc' => 'Clears the error on the socket or the last error code',
        ),
    'socket_close' =>
        array (
            'file' => 'function.socket-close.php',
            'desc' => 'Closes a socket resource',
        ),
    'socket_cmsg_space' =>
        array (
            'file' => 'function.socket-cmsg-space.php',
            'desc' => 'Calculate message buffer size',
        ),
    'socket_connect' =>
        array (
            'file' => 'function.socket-connect.php',
            'desc' => 'Initiates a connection on a socket',
        ),
    'socket_create' =>
        array (
            'file' => 'function.socket-create.php',
            'desc' => 'Create a socket (endpoint for communication)',
        ),
    'socket_create_listen' =>
        array (
            'file' => 'function.socket-create-listen.php',
            'desc' => 'Opens a socket on port to accept connections',
        ),
    'socket_create_pair' =>
        array (
            'file' => 'function.socket-create-pair.php',
            'desc' => 'Creates a pair of indistinguishable sockets and stores them in an array',
        ),
    'socket_getpeername' =>
        array (
            'file' => 'function.socket-getpeername.php',
            'desc' => 'Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type',
        ),
    'socket_getsockname' =>
        array (
            'file' => 'function.socket-getsockname.php',
            'desc' => 'Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type',
        ),
    'socket_get_option' =>
        array (
            'file' => 'function.socket-get-option.php',
            'desc' => 'Gets socket options for the socket',
        ),
    'socket_get_status' =>
        array (
            'file' => 'function.socket-get-status.php',
            'desc' => 'Alias of stream_get_meta_data',
        ),
    'socket_import_stream' =>
        array (
            'file' => 'function.socket-import-stream.php',
            'desc' => 'Import a stream',
        ),
    'socket_last_error' =>
        array (
            'file' => 'function.socket-last-error.php',
            'desc' => 'Returns the last error on the socket',
        ),
    'socket_listen' =>
        array (
            'file' => 'function.socket-listen.php',
            'desc' => 'Listens for a connection on a socket',
        ),
    'socket_read' =>
        array (
            'file' => 'function.socket-read.php',
            'desc' => 'Reads a maximum of length bytes from a socket',
        ),
    'socket_recv' =>
        array (
            'file' => 'function.socket-recv.php',
            'desc' => 'Receives data from a connected socket',
        ),
    'socket_recvfrom' =>
        array (
            'file' => 'function.socket-recvfrom.php',
            'desc' => 'Receives data from a socket whether or not it is connection-oriented',
        ),
    'socket_recvmsg' =>
        array (
            'file' => 'function.socket-recvmsg.php',
            'desc' => 'Read a message',
        ),
    'socket_select' =>
        array (
            'file' => 'function.socket-select.php',
            'desc' => 'Runs the select() system call on the given arrays of sockets with a specified timeout',
        ),
    'socket_send' =>
        array (
            'file' => 'function.socket-send.php',
            'desc' => 'Sends data to a connected socket',
        ),
    'socket_sendmsg' =>
        array (
            'file' => 'function.socket-sendmsg.php',
            'desc' => 'Send a message',
        ),
    'socket_sendto' =>
        array (
            'file' => 'function.socket-sendto.php',
            'desc' => 'Sends a message to a socket, whether it is connected or not',
        ),
    'socket_set_block' =>
        array (
            'file' => 'function.socket-set-block.php',
            'desc' => 'Sets blocking mode on a socket resource',
        ),
    'socket_set_blocking' =>
        array (
            'file' => 'function.socket-set-blocking.php',
            'desc' => 'Alias of stream_set_blocking',
        ),
    'socket_set_nonblock' =>
        array (
            'file' => 'function.socket-set-nonblock.php',
            'desc' => 'Sets nonblocking mode for file descriptor fd',
        ),
    'socket_set_option' =>
        array (
            'file' => 'function.socket-set-option.php',
            'desc' => 'Sets socket options for the socket',
        ),
    'socket_set_timeout' =>
        array (
            'file' => 'function.socket-set-timeout.php',
            'desc' => 'Alias of stream_set_timeout',
        ),
    'socket_shutdown' =>
        array (
            'file' => 'function.socket-shutdown.php',
            'desc' => 'Shuts down a socket for receiving, sending, or both',
        ),
    'socket_strerror' =>
        array (
            'file' => 'function.socket-strerror.php',
            'desc' => 'Return a string describing a socket error',
        ),
    'socket_write' =>
        array (
            'file' => 'function.socket-write.php',
            'desc' => 'Write to a socket',
        ),
    'SolrClient::addDocument' =>
        array (
            'file' => 'solrclient.adddocument.php',
            'desc' => 'Adds a document to the index',
        ),
    'SolrClient::addDocuments' =>
        array (
            'file' => 'solrclient.adddocuments.php',
            'desc' => 'Adds a collection of SolrInputDocument instances to the index',
        ),
    'SolrClient::commit' =>
        array (
            'file' => 'solrclient.commit.php',
            'desc' => 'Finalizes all add/deletes made to the index',
        ),
    'SolrClient::deleteById' =>
        array (
            'file' => 'solrclient.deletebyid.php',
            'desc' => 'Delete by Id',
        ),
    'SolrClient::deleteByIds' =>
        array (
            'file' => 'solrclient.deletebyids.php',
            'desc' => 'Deletes by Ids',
        ),
    'SolrClient::deleteByQueries' =>
        array (
            'file' => 'solrclient.deletebyqueries.php',
            'desc' => 'Removes all documents matching any of the queries',
        ),
    'SolrClient::deleteByQuery' =>
        array (
            'file' => 'solrclient.deletebyquery.php',
            'desc' => 'Deletes all documents matching the given query',
        ),
    'SolrClient::getDebug' =>
        array (
            'file' => 'solrclient.getdebug.php',
            'desc' => 'Returns the debug data for the last connection attempt',
        ),
    'SolrClient::getOptions' =>
        array (
            'file' => 'solrclient.getoptions.php',
            'desc' => 'Returns the client options set internally',
        ),
    'SolrClient::optimize' =>
        array (
            'file' => 'solrclient.optimize.php',
            'desc' => 'Defragments the index',
        ),
    'SolrClient::ping' =>
        array (
            'file' => 'solrclient.ping.php',
            'desc' => 'Checks if Solr server is still up',
        ),
    'SolrClient::query' =>
        array (
            'file' => 'solrclient.query.php',
            'desc' => 'Sends a query to the server',
        ),
    'SolrClient::request' =>
        array (
            'file' => 'solrclient.request.php',
            'desc' => 'Sends a raw update request',
        ),
    'SolrClient::rollback' =>
        array (
            'file' => 'solrclient.rollback.php',
            'desc' => 'Rollbacks all add/deletes made to the index since the last commit',
        ),
    'SolrClient::setResponseWriter' =>
        array (
            'file' => 'solrclient.setresponsewriter.php',
            'desc' => 'Sets the response writer used to prepare the response from Solr',
        ),
    'SolrClient::setServlet' =>
        array (
            'file' => 'solrclient.setservlet.php',
            'desc' => 'Changes the specified servlet type to a new value',
        ),
    'SolrClient::threads' =>
        array (
            'file' => 'solrclient.threads.php',
            'desc' => 'Checks the threads status',
        ),
    'SolrClient::__construct' =>
        array (
            'file' => 'solrclient.construct.php',
            'desc' => 'Constructor for the SolrClient object',
        ),
    'SolrClient::__destruct' =>
        array (
            'file' => 'solrclient.destruct.php',
            'desc' => 'Destructor for SolrClient',
        ),
    'SolrClientException::getInternalInfo' =>
        array (
            'file' => 'solrclientexception.getinternalinfo.php',
            'desc' => 'Returns internal information where the Exception was thrown',
        ),
    'SolrDocument::addField' =>
        array (
            'file' => 'solrdocument.addfield.php',
            'desc' => 'Adds a field to the document',
        ),
    'SolrDocument::clear' =>
        array (
            'file' => 'solrdocument.clear.php',
            'desc' => 'Drops all the fields in the document',
        ),
    'SolrDocument::current' =>
        array (
            'file' => 'solrdocument.current.php',
            'desc' => 'Retrieves the current field',
        ),
    'SolrDocument::deleteField' =>
        array (
            'file' => 'solrdocument.deletefield.php',
            'desc' => 'Removes a field from the document',
        ),
    'SolrDocument::fieldExists' =>
        array (
            'file' => 'solrdocument.fieldexists.php',
            'desc' => 'Checks if a field exists in the document',
        ),
    'SolrDocument::getField' =>
        array (
            'file' => 'solrdocument.getfield.php',
            'desc' => 'Retrieves a field by name',
        ),
    'SolrDocument::getFieldCount' =>
        array (
            'file' => 'solrdocument.getfieldcount.php',
            'desc' => 'Returns the number of fields in this document',
        ),
    'SolrDocument::getFieldNames' =>
        array (
            'file' => 'solrdocument.getfieldnames.php',
            'desc' => 'Returns an array of fields names in the document',
        ),
    'SolrDocument::getInputDocument' =>
        array (
            'file' => 'solrdocument.getinputdocument.php',
            'desc' => 'Returns a SolrInputDocument equivalent of the object',
        ),
    'SolrDocument::key' =>
        array (
            'file' => 'solrdocument.key.php',
            'desc' => 'Retrieves the current key',
        ),
    'SolrDocument::merge' =>
        array (
            'file' => 'solrdocument.merge.php',
            'desc' => 'Merges source to the current SolrDocument',
        ),
    'SolrDocument::next' =>
        array (
            'file' => 'solrdocument.next.php',
            'desc' => 'Moves the internal pointer to the next field',
        ),
    'SolrDocument::offsetExists' =>
        array (
            'file' => 'solrdocument.offsetexists.php',
            'desc' => 'Checks if a particular field exists',
        ),
    'SolrDocument::offsetGet' =>
        array (
            'file' => 'solrdocument.offsetget.php',
            'desc' => 'Retrieves a field',
        ),
    'SolrDocument::offsetSet' =>
        array (
            'file' => 'solrdocument.offsetset.php',
            'desc' => 'Adds a field to the document',
        ),
    'SolrDocument::offsetUnset' =>
        array (
            'file' => 'solrdocument.offsetunset.php',
            'desc' => 'Removes a field',
        ),
    'SolrDocument::reset' =>
        array (
            'file' => 'solrdocument.reset.php',
            'desc' => 'This is an alias to SolrDocument::clear()',
        ),
    'SolrDocument::rewind' =>
        array (
            'file' => 'solrdocument.rewind.php',
            'desc' => 'Resets the internal pointer to the beginning',
        ),
    'SolrDocument::serialize' =>
        array (
            'file' => 'solrdocument.serialize.php',
            'desc' => 'Used for custom serialization',
        ),
    'SolrDocument::sort' =>
        array (
            'file' => 'solrdocument.sort.php',
            'desc' => 'Sorts the fields in the document',
        ),
    'SolrDocument::toArray' =>
        array (
            'file' => 'solrdocument.toarray.php',
            'desc' => 'Returns an array representation of the document',
        ),
    'SolrDocument::unserialize' =>
        array (
            'file' => 'solrdocument.unserialize.php',
            'desc' => 'Custom serialization of SolrDocument objects',
        ),
    'SolrDocument::valid' =>
        array (
            'file' => 'solrdocument.valid.php',
            'desc' => 'Checks if the current position internally is still valid',
        ),
    'SolrDocument::__clone' =>
        array (
            'file' => 'solrdocument.clone.php',
            'desc' => 'Creates a copy of a SolrDocument object',
        ),
    'SolrDocument::__construct' =>
        array (
            'file' => 'solrdocument.construct.php',
            'desc' => 'Constructor',
        ),
    'SolrDocument::__destruct' =>
        array (
            'file' => 'solrdocument.destruct.php',
            'desc' => 'Destructor',
        ),
    'SolrDocument::__get' =>
        array (
            'file' => 'solrdocument.get.php',
            'desc' => 'Access the field as a property',
        ),
    'SolrDocument::__isset' =>
        array (
            'file' => 'solrdocument.isset.php',
            'desc' => 'Checks if a field exists',
        ),
    'SolrDocument::__set' =>
        array (
            'file' => 'solrdocument.set.php',
            'desc' => 'Adds another field to the document',
        ),
    'SolrDocument::__unset' =>
        array (
            'file' => 'solrdocument.unset.php',
            'desc' => 'Removes a field from the document',
        ),
    'SolrDocumentField::__construct' =>
        array (
            'file' => 'solrdocumentfield.construct.php',
            'desc' => 'Constructor',
        ),
    'SolrDocumentField::__destruct' =>
        array (
            'file' => 'solrdocumentfield.destruct.php',
            'desc' => 'Destructor',
        ),
    'SolrException::getInternalInfo' =>
        array (
            'file' => 'solrexception.getinternalinfo.php',
            'desc' => 'Returns internal information where the Exception was thrown',
        ),
    'SolrGenericResponse::__construct' =>
        array (
            'file' => 'solrgenericresponse.construct.php',
            'desc' => 'Constructor',
        ),
    'SolrGenericResponse::__destruct' =>
        array (
            'file' => 'solrgenericresponse.destruct.php',
            'desc' => 'Destructor',
        ),
    'SolrIllegalArgumentException::getInternalInfo' =>
        array (
            'file' => 'solrillegalargumentexception.getinternalinfo.php',
            'desc' => 'Returns internal information where the Exception was thrown',
        ),
    'SolrIllegalOperationException::getInternalInfo' =>
        array (
            'file' => 'solrillegaloperationexception.getinternalinfo.php',
            'desc' => 'Returns internal information where the Exception was thrown',
        ),
    'SolrInputDocument::addField' =>
        array (
            'file' => 'solrinputdocument.addfield.php',
            'desc' => 'Adds a field to the document',
        ),
    'SolrInputDocument::clear' =>
        array (
            'file' => 'solrinputdocument.clear.php',
            'desc' => 'Resets the input document',
        ),
    'SolrInputDocument::deleteField' =>
        array (
            'file' => 'solrinputdocument.deletefield.php',
            'desc' => 'Removes a field from the document',
        ),
    'SolrInputDocument::fieldExists' =>
        array (
            'file' => 'solrinputdocument.fieldexists.php',
            'desc' => 'Checks if a field exists',
        ),
    'SolrInputDocument::getBoost' =>
        array (
            'file' => 'solrinputdocument.getboost.php',
            'desc' => 'Retrieves the current boost value for the document',
        ),
    'SolrInputDocument::getField' =>
        array (
            'file' => 'solrinputdocument.getfield.php',
            'desc' => 'Retrieves a field by name',
        ),
    'SolrInputDocument::getFieldBoost' =>
        array (
            'file' => 'solrinputdocument.getfieldboost.php',
            'desc' => 'Retrieves the boost value for a particular field',
        ),
    'SolrInputDocument::getFieldCount' =>
        array (
            'file' => 'solrinputdocument.getfieldcount.php',
            'desc' => 'Returns the number of fields in the document',
        ),
    'SolrInputDocument::getFieldNames' =>
        array (
            'file' => 'solrinputdocument.getfieldnames.php',
            'desc' => 'Returns an array containing all the fields in the document',
        ),
    'SolrInputDocument::merge' =>
        array (
            'file' => 'solrinputdocument.merge.php',
            'desc' => 'Merges one input document into another',
        ),
    'SolrInputDocument::reset' =>
        array (
            'file' => 'solrinputdocument.reset.php',
            'desc' => 'This is an alias of SolrInputDocument::clear',
        ),
    'SolrInputDocument::setBoost' =>
        array (
            'file' => 'solrinputdocument.setboost.php',
            'desc' => 'Sets the boost value for this document',
        ),
    'SolrInputDocument::setFieldBoost' =>
        array (
            'file' => 'solrinputdocument.setfieldboost.php',
            'desc' => 'Sets the index-time boost value for a field',
        ),
    'SolrInputDocument::sort' =>
        array (
            'file' => 'solrinputdocument.sort.php',
            'desc' => 'Sorts the fields within the document',
        ),
    'SolrInputDocument::toArray' =>
        array (
            'file' => 'solrinputdocument.toarray.php',
            'desc' => 'Returns an array representation of the input document',
        ),
    'SolrInputDocument::__clone' =>
        array (
            'file' => 'solrinputdocument.clone.php',
            'desc' => 'Creates a copy of a SolrDocument',
        ),
    'SolrInputDocument::__construct' =>
        array (
            'file' => 'solrinputdocument.construct.php',
            'desc' => 'Constructor',
        ),
    'SolrInputDocument::__destruct' =>
        array (
            'file' => 'solrinputdocument.destruct.php',
            'desc' => 'Destructor',
        ),
    'SolrModifiableParams::__construct' =>
        array (
            'file' => 'solrmodifiableparams.construct.php',
            'desc' => 'Constructor',
        ),
    'SolrModifiableParams::__destruct' =>
        array (
            'file' => 'solrmodifiableparams.destruct.php',
            'desc' => 'Destructor',
        ),
    'SolrObject::getPropertyNames' =>
        array (
            'file' => 'solrobject.getpropertynames.php',
            'desc' => 'Returns an array of all the names of the properties',
        ),
    'SolrObject::offsetExists' =>
        array (
            'file' => 'solrobject.offsetexists.php',
            'desc' => 'Checks if the property exists',
        ),
    'SolrObject::offsetGet' =>
        array (
            'file' => 'solrobject.offsetget.php',
            'desc' => 'Used to retrieve a property',
        ),
    'SolrObject::offsetSet' =>
        array (
            'file' => 'solrobject.offsetset.php',
            'desc' => 'Sets the value for a property',
        ),
    'SolrObject::offsetUnset' =>
        array (
            'file' => 'solrobject.offsetunset.php',
            'desc' => 'Unsets the value for the property',
        ),
    'SolrObject::__construct' =>
        array (
            'file' => 'solrobject.construct.php',
            'desc' => 'Creates Solr object',
        ),
    'SolrObject::__destruct' =>
        array (
            'file' => 'solrobject.destruct.php',
            'desc' => 'Destructor',
        ),
    'SolrParams::add' =>
        array (
            'file' => 'solrparams.add.php',
            'desc' => 'This is an alias for SolrParams::addParam',
        ),
    'SolrParams::addParam' =>
        array (
            'file' => 'solrparams.addparam.php',
            'desc' => 'Adds a parameter to the object',
        ),
    'SolrParams::get' =>
        array (
            'file' => 'solrparams.get.php',
            'desc' => 'This is an alias for SolrParams::getParam',
        ),
    'SolrParams::getParam' =>
        array (
            'file' => 'solrparams.getparam.php',
            'desc' => 'Returns a parameter value',
        ),
    'SolrParams::getParams' =>
        array (
            'file' => 'solrparams.getparams.php',
            'desc' => 'Returns an array of non URL-encoded parameters',
        ),
    'SolrParams::getPreparedParams' =>
        array (
            'file' => 'solrparams.getpreparedparams.php',
            'desc' => 'Returns an array of URL-encoded parameters',
        ),
    'SolrParams::serialize' =>
        array (
            'file' => 'solrparams.serialize.php',
            'desc' => 'Used for custom serialization',
        ),
    'SolrParams::set' =>
        array (
            'file' => 'solrparams.set.php',
            'desc' => 'An alias of SolrParams::setParam',
        ),
    'SolrParams::setParam' =>
        array (
            'file' => 'solrparams.setparam.php',
            'desc' => 'Sets the parameter to the specified value',
        ),
    'SolrParams::toString' =>
        array (
            'file' => 'solrparams.tostring.php',
            'desc' => 'Returns all the name-value pair parameters in the object',
        ),
    'SolrParams::unserialize' =>
        array (
            'file' => 'solrparams.unserialize.php',
            'desc' => 'Used for custom serialization',
        ),
    'SolrPingResponse::getResponse' =>
        array (
            'file' => 'solrpingresponse.getresponse.php',
            'desc' => 'Returns the response from the server',
        ),
    'SolrPingResponse::__construct' =>
        array (
            'file' => 'solrpingresponse.construct.php',
            'desc' => 'Constructor',
        ),
    'SolrPingResponse::__destruct' =>
        array (
            'file' => 'solrpingresponse.destruct.php',
            'desc' => 'Destructor',
        ),
    'SolrQuery::addFacetDateField' =>
        array (
            'file' => 'solrquery.addfacetdatefield.php',
            'desc' => 'Maps to facet.date',
        ),
    'SolrQuery::addFacetDateOther' =>
        array (
            'file' => 'solrquery.addfacetdateother.php',
            'desc' => 'Adds another facet.date.other parameter',
        ),
    'SolrQuery::addFacetField' =>
        array (
            'file' => 'solrquery.addfacetfield.php',
            'desc' => 'Adds another field to the facet',
        ),
    'SolrQuery::addFacetQuery' =>
        array (
            'file' => 'solrquery.addfacetquery.php',
            'desc' => 'Adds a facet query',
        ),
    'SolrQuery::addField' =>
        array (
            'file' => 'solrquery.addfield.php',
            'desc' => 'Specifies which fields to return in the result',
        ),
    'SolrQuery::addFilterQuery' =>
        array (
            'file' => 'solrquery.addfilterquery.php',
            'desc' => 'Specifies a filter query',
        ),
    'SolrQuery::addHighlightField' =>
        array (
            'file' => 'solrquery.addhighlightfield.php',
            'desc' => 'Maps to hl.fl',
        ),
    'SolrQuery::addMltField' =>
        array (
            'file' => 'solrquery.addmltfield.php',
            'desc' => 'Sets a field to use for similarity',
        ),
    'SolrQuery::addMltQueryField' =>
        array (
            'file' => 'solrquery.addmltqueryfield.php',
            'desc' => 'Maps to mlt.qf',
        ),
    'SolrQuery::addSortField' =>
        array (
            'file' => 'solrquery.addsortfield.php',
            'desc' => 'Used to control how the results should be sorted',
        ),
    'SolrQuery::addStatsFacet' =>
        array (
            'file' => 'solrquery.addstatsfacet.php',
            'desc' => 'Requests a return of sub results for values within the given facet',
        ),
    'SolrQuery::addStatsField' =>
        array (
            'file' => 'solrquery.addstatsfield.php',
            'desc' => 'Maps to stats.field parameter',
        ),
    'SolrQuery::getFacet' =>
        array (
            'file' => 'solrquery.getfacet.php',
            'desc' => 'Returns the value of the facet parameter',
        ),
    'SolrQuery::getFacetDateEnd' =>
        array (
            'file' => 'solrquery.getfacetdateend.php',
            'desc' => 'Returns the value for the facet.date.end parameter',
        ),
    'SolrQuery::getFacetDateFields' =>
        array (
            'file' => 'solrquery.getfacetdatefields.php',
            'desc' => 'Returns all the facet.date fields',
        ),
    'SolrQuery::getFacetDateGap' =>
        array (
            'file' => 'solrquery.getfacetdategap.php',
            'desc' => 'Returns the value of the facet.date.gap parameter',
        ),
    'SolrQuery::getFacetDateHardEnd' =>
        array (
            'file' => 'solrquery.getfacetdatehardend.php',
            'desc' => 'Returns the value of the facet.date.hardend parameter',
        ),
    'SolrQuery::getFacetDateOther' =>
        array (
            'file' => 'solrquery.getfacetdateother.php',
            'desc' => 'Returns the value for the facet.date.other parameter',
        ),
    'SolrQuery::getFacetDateStart' =>
        array (
            'file' => 'solrquery.getfacetdatestart.php',
            'desc' => 'Returns the  lower bound for the first date range for all date faceting on this field',
        ),
    'SolrQuery::getFacetFields' =>
        array (
            'file' => 'solrquery.getfacetfields.php',
            'desc' => 'Returns all the facet fields',
        ),
    'SolrQuery::getFacetLimit' =>
        array (
            'file' => 'solrquery.getfacetlimit.php',
            'desc' => 'Returns the maximum number of constraint counts that should be returned for the facet fields',
        ),
    'SolrQuery::getFacetMethod' =>
        array (
            'file' => 'solrquery.getfacetmethod.php',
            'desc' => 'Returns the value of the facet.method parameter',
        ),
    'SolrQuery::getFacetMinCount' =>
        array (
            'file' => 'solrquery.getfacetmincount.php',
            'desc' => 'Returns the minimum counts for facet fields should be included in the response',
        ),
    'SolrQuery::getFacetMissing' =>
        array (
            'file' => 'solrquery.getfacetmissing.php',
            'desc' => 'Returns the current state of the facet.missing parameter',
        ),
    'SolrQuery::getFacetOffset' =>
        array (
            'file' => 'solrquery.getfacetoffset.php',
            'desc' => 'Returns an offset into the list of constraints to be used for pagination',
        ),
    'SolrQuery::getFacetPrefix' =>
        array (
            'file' => 'solrquery.getfacetprefix.php',
            'desc' => 'Returns the facet prefix',
        ),
    'SolrQuery::getFacetQueries' =>
        array (
            'file' => 'solrquery.getfacetqueries.php',
            'desc' => 'Returns all the facet queries',
        ),
    'SolrQuery::getFacetSort' =>
        array (
            'file' => 'solrquery.getfacetsort.php',
            'desc' => 'Returns the facet sort type',
        ),
    'SolrQuery::getFields' =>
        array (
            'file' => 'solrquery.getfields.php',
            'desc' => 'Returns the list of fields that will be returned in the response',
        ),
    'SolrQuery::getFilterQueries' =>
        array (
            'file' => 'solrquery.getfilterqueries.php',
            'desc' => 'Returns an array of filter queries',
        ),
    'SolrQuery::getHighlight' =>
        array (
            'file' => 'solrquery.gethighlight.php',
            'desc' => 'Returns the state of the hl parameter',
        ),
    'SolrQuery::getHighlightAlternateField' =>
        array (
            'file' => 'solrquery.gethighlightalternatefield.php',
            'desc' => 'Returns the highlight field to use as backup or default',
        ),
    'SolrQuery::getHighlightFields' =>
        array (
            'file' => 'solrquery.gethighlightfields.php',
            'desc' => 'Returns all the fields that Solr should generate highlighted snippets for',
        ),
    'SolrQuery::getHighlightFormatter' =>
        array (
            'file' => 'solrquery.gethighlightformatter.php',
            'desc' => 'Returns the formatter for the highlighted output',
        ),
    'SolrQuery::getHighlightFragmenter' =>
        array (
            'file' => 'solrquery.gethighlightfragmenter.php',
            'desc' => 'Returns the text snippet generator for highlighted text',
        ),
    'SolrQuery::getHighlightFragsize' =>
        array (
            'file' => 'solrquery.gethighlightfragsize.php',
            'desc' => 'Returns the number of characters of fragments to consider for highlighting',
        ),
    'SolrQuery::getHighlightHighlightMultiTerm' =>
        array (
            'file' => 'solrquery.gethighlighthighlightmultiterm.php',
            'desc' => 'Returns whether or not to enable highlighting for range/wildcard/fuzzy/prefix queries',
        ),
    'SolrQuery::getHighlightMaxAlternateFieldLength' =>
        array (
            'file' => 'solrquery.gethighlightmaxalternatefieldlength.php',
            'desc' => 'Returns the maximum number of characters of the field to return',
        ),
    'SolrQuery::getHighlightMaxAnalyzedChars' =>
        array (
            'file' => 'solrquery.gethighlightmaxanalyzedchars.php',
            'desc' => 'Returns the maximum number of characters into a document to look for suitable snippets',
        ),
    'SolrQuery::getHighlightMergeContiguous' =>
        array (
            'file' => 'solrquery.gethighlightmergecontiguous.php',
            'desc' => 'Returns whether or not the collapse contiguous fragments into a single fragment',
        ),
    'SolrQuery::getHighlightRegexMaxAnalyzedChars' =>
        array (
            'file' => 'solrquery.gethighlightregexmaxanalyzedchars.php',
            'desc' => 'Returns the maximum number of characters from a field when using the regex fragmenter',
        ),
    'SolrQuery::getHighlightRegexPattern' =>
        array (
            'file' => 'solrquery.gethighlightregexpattern.php',
            'desc' => 'Returns the regular expression for fragmenting',
        ),
    'SolrQuery::getHighlightRegexSlop' =>
        array (
            'file' => 'solrquery.gethighlightregexslop.php',
            'desc' => 'Returns the deviation factor from the ideal fragment size',
        ),
    'SolrQuery::getHighlightRequireFieldMatch' =>
        array (
            'file' => 'solrquery.gethighlightrequirefieldmatch.php',
            'desc' => 'Returns if a field will only be highlighted if the query matched in this particular field',
        ),
    'SolrQuery::getHighlightSimplePost' =>
        array (
            'file' => 'solrquery.gethighlightsimplepost.php',
            'desc' => 'Returns the text which appears after a highlighted term',
        ),
    'SolrQuery::getHighlightSimplePre' =>
        array (
            'file' => 'solrquery.gethighlightsimplepre.php',
            'desc' => 'Returns the text which appears before a highlighted term',
        ),
    'SolrQuery::getHighlightSnippets' =>
        array (
            'file' => 'solrquery.gethighlightsnippets.php',
            'desc' => 'Returns the maximum number of highlighted snippets to generate per field',
        ),
    'SolrQuery::getHighlightUsePhraseHighlighter' =>
        array (
            'file' => 'solrquery.gethighlightusephrasehighlighter.php',
            'desc' => 'Returns the state of the hl.usePhraseHighlighter parameter',
        ),
    'SolrQuery::getMlt' =>
        array (
            'file' => 'solrquery.getmlt.php',
            'desc' => 'Returns whether or not MoreLikeThis results should be enabled',
        ),
    'SolrQuery::getMltBoost' =>
        array (
            'file' => 'solrquery.getmltboost.php',
            'desc' => 'Returns whether or not the query will be boosted by the interesting term relevance',
        ),
    'SolrQuery::getMltCount' =>
        array (
            'file' => 'solrquery.getmltcount.php',
            'desc' => 'Returns the number of similar documents to return for each result',
        ),
    'SolrQuery::getMltFields' =>
        array (
            'file' => 'solrquery.getmltfields.php',
            'desc' => 'Returns all the fields to use for similarity',
        ),
    'SolrQuery::getMltMaxNumQueryTerms' =>
        array (
            'file' => 'solrquery.getmltmaxnumqueryterms.php',
            'desc' => 'Returns the maximum number of query terms that will be included in any generated query',
        ),
    'SolrQuery::getMltMaxNumTokens' =>
        array (
            'file' => 'solrquery.getmltmaxnumtokens.php',
            'desc' => 'Returns the maximum number of tokens to parse in each document field that is not stored with TermVector support',
        ),
    'SolrQuery::getMltMaxWordLength' =>
        array (
            'file' => 'solrquery.getmltmaxwordlength.php',
            'desc' => 'Returns the maximum word length above which words will be ignored',
        ),
    'SolrQuery::getMltMinDocFrequency' =>
        array (
            'file' => 'solrquery.getmltmindocfrequency.php',
            'desc' => 'Returns the treshold frequency at which words will be ignored which do not occur in at least this many docs',
        ),
    'SolrQuery::getMltMinTermFrequency' =>
        array (
            'file' => 'solrquery.getmltmintermfrequency.php',
            'desc' => 'Returns the frequency below which terms will be ignored in the source document',
        ),
    'SolrQuery::getMltMinWordLength' =>
        array (
            'file' => 'solrquery.getmltminwordlength.php',
            'desc' => 'Returns the minimum word length below which words will be ignored',
        ),
    'SolrQuery::getMltQueryFields' =>
        array (
            'file' => 'solrquery.getmltqueryfields.php',
            'desc' => 'Returns the query fields and their boosts',
        ),
    'SolrQuery::getQuery' =>
        array (
            'file' => 'solrquery.getquery.php',
            'desc' => 'Returns the main query',
        ),
    'SolrQuery::getRows' =>
        array (
            'file' => 'solrquery.getrows.php',
            'desc' => 'Returns the maximum number of documents',
        ),
    'SolrQuery::getSortFields' =>
        array (
            'file' => 'solrquery.getsortfields.php',
            'desc' => 'Returns all the sort fields',
        ),
    'SolrQuery::getStart' =>
        array (
            'file' => 'solrquery.getstart.php',
            'desc' => 'Returns the offset in the complete result set',
        ),
    'SolrQuery::getStats' =>
        array (
            'file' => 'solrquery.getstats.php',
            'desc' => 'Returns whether or not stats is enabled',
        ),
    'SolrQuery::getStatsFacets' =>
        array (
            'file' => 'solrquery.getstatsfacets.php',
            'desc' => 'Returns all the stats facets that were set',
        ),
    'SolrQuery::getStatsFields' =>
        array (
            'file' => 'solrquery.getstatsfields.php',
            'desc' => 'Returns all the statistics fields',
        ),
    'SolrQuery::getTerms' =>
        array (
            'file' => 'solrquery.getterms.php',
            'desc' => 'Returns whether or not the TermsComponent is enabled',
        ),
    'SolrQuery::getTermsField' =>
        array (
            'file' => 'solrquery.gettermsfield.php',
            'desc' => 'Returns the field from which the terms are retrieved',
        ),
    'SolrQuery::getTermsIncludeLowerBound' =>
        array (
            'file' => 'solrquery.gettermsincludelowerbound.php',
            'desc' => 'Returns whether or not to include the lower bound in the result set',
        ),
    'SolrQuery::getTermsIncludeUpperBound' =>
        array (
            'file' => 'solrquery.gettermsincludeupperbound.php',
            'desc' => 'Returns whether or not to include the upper bound term in the result set',
        ),
    'SolrQuery::getTermsLimit' =>
        array (
            'file' => 'solrquery.gettermslimit.php',
            'desc' => 'Returns the maximum number of terms Solr should return',
        ),
    'SolrQuery::getTermsLowerBound' =>
        array (
            'file' => 'solrquery.gettermslowerbound.php',
            'desc' => 'Returns the term to start at',
        ),
    'SolrQuery::getTermsMaxCount' =>
        array (
            'file' => 'solrquery.gettermsmaxcount.php',
            'desc' => 'Returns the maximum document frequency',
        ),
    'SolrQuery::getTermsMinCount' =>
        array (
            'file' => 'solrquery.gettermsmincount.php',
            'desc' => 'Returns the minimum document frequency to return in order to be included',
        ),
    'SolrQuery::getTermsPrefix' =>
        array (
            'file' => 'solrquery.gettermsprefix.php',
            'desc' => 'Returns the term prefix',
        ),
    'SolrQuery::getTermsReturnRaw' =>
        array (
            'file' => 'solrquery.gettermsreturnraw.php',
            'desc' => 'Whether or not to return raw characters',
        ),
    'SolrQuery::getTermsSort' =>
        array (
            'file' => 'solrquery.gettermssort.php',
            'desc' => 'Returns an integer indicating how terms are sorted',
        ),
    'SolrQuery::getTermsUpperBound' =>
        array (
            'file' => 'solrquery.gettermsupperbound.php',
            'desc' => 'Returns the term to stop at',
        ),
    'SolrQuery::getTimeAllowed' =>
        array (
            'file' => 'solrquery.gettimeallowed.php',
            'desc' => 'Returns the time in milliseconds allowed for the query to finish',
        ),
    'SolrQuery::removeFacetDateField' =>
        array (
            'file' => 'solrquery.removefacetdatefield.php',
            'desc' => 'Removes one of the facet date fields',
        ),
    'SolrQuery::removeFacetDateOther' =>
        array (
            'file' => 'solrquery.removefacetdateother.php',
            'desc' => 'Removes one of the facet.date.other parameters',
        ),
    'SolrQuery::removeFacetField' =>
        array (
            'file' => 'solrquery.removefacetfield.php',
            'desc' => 'Removes one of the facet.date parameters',
        ),
    'SolrQuery::removeFacetQuery' =>
        array (
            'file' => 'solrquery.removefacetquery.php',
            'desc' => 'Removes one of the facet.query parameters',
        ),
    'SolrQuery::removeField' =>
        array (
            'file' => 'solrquery.removefield.php',
            'desc' => 'Removes a field from the list of fields',
        ),
    'SolrQuery::removeFilterQuery' =>
        array (
            'file' => 'solrquery.removefilterquery.php',
            'desc' => 'Removes a filter query',
        ),
    'SolrQuery::removeHighlightField' =>
        array (
            'file' => 'solrquery.removehighlightfield.php',
            'desc' => 'Removes one of the fields used for highlighting',
        ),
    'SolrQuery::removeMltField' =>
        array (
            'file' => 'solrquery.removemltfield.php',
            'desc' => 'Removes one of the moreLikeThis fields',
        ),
    'SolrQuery::removeMltQueryField' =>
        array (
            'file' => 'solrquery.removemltqueryfield.php',
            'desc' => 'Removes one of the moreLikeThis query fields',
        ),
    'SolrQuery::removeSortField' =>
        array (
            'file' => 'solrquery.removesortfield.php',
            'desc' => 'Removes one of the sort fields',
        ),
    'SolrQuery::removeStatsFacet' =>
        array (
            'file' => 'solrquery.removestatsfacet.php',
            'desc' => 'Removes one of the stats.facet parameters',
        ),
    'SolrQuery::removeStatsField' =>
        array (
            'file' => 'solrquery.removestatsfield.php',
            'desc' => 'Removes one of the stats.field parameters',
        ),
    'SolrQuery::setEchoHandler' =>
        array (
            'file' => 'solrquery.setechohandler.php',
            'desc' => 'Toggles the echoHandler parameter',
        ),
    'SolrQuery::setEchoParams' =>
        array (
            'file' => 'solrquery.setechoparams.php',
            'desc' => 'Determines what kind of parameters to include in the response',
        ),
    'SolrQuery::setExplainOther' =>
        array (
            'file' => 'solrquery.setexplainother.php',
            'desc' => 'Sets the explainOther common query parameter',
        ),
    'SolrQuery::setFacet' =>
        array (
            'file' => 'solrquery.setfacet.php',
            'desc' => 'Maps to the facet parameter. Enables or disables facetting',
        ),
    'SolrQuery::setFacetDateEnd' =>
        array (
            'file' => 'solrquery.setfacetdateend.php',
            'desc' => 'Maps to facet.date.end',
        ),
    'SolrQuery::setFacetDateGap' =>
        array (
            'file' => 'solrquery.setfacetdategap.php',
            'desc' => 'Maps to facet.date.gap',
        ),
    'SolrQuery::setFacetDateHardEnd' =>
        array (
            'file' => 'solrquery.setfacetdatehardend.php',
            'desc' => 'Maps to facet.date.hardend',
        ),
    'SolrQuery::setFacetDateStart' =>
        array (
            'file' => 'solrquery.setfacetdatestart.php',
            'desc' => 'Maps to facet.date.start',
        ),
    'SolrQuery::setFacetEnumCacheMinDefaultFrequency' =>
        array (
            'file' => 'solrquery.setfacetenumcachemindefaultfrequency.php',
            'desc' => 'Sets the minimum document frequency used for determining term count',
        ),
    'SolrQuery::setFacetLimit' =>
        array (
            'file' => 'solrquery.setfacetlimit.php',
            'desc' => 'Maps to facet.limit',
        ),
    'SolrQuery::setFacetMethod' =>
        array (
            'file' => 'solrquery.setfacetmethod.php',
            'desc' => 'Specifies the type of algorithm to use when faceting a field',
        ),
    'SolrQuery::setFacetMinCount' =>
        array (
            'file' => 'solrquery.setfacetmincount.php',
            'desc' => 'Maps to facet.mincount',
        ),
    'SolrQuery::setFacetMissing' =>
        array (
            'file' => 'solrquery.setfacetmissing.php',
            'desc' => 'Maps to facet.missing',
        ),
    'SolrQuery::setFacetOffset' =>
        array (
            'file' => 'solrquery.setfacetoffset.php',
            'desc' => 'Sets the offset into the list of constraints to allow for pagination',
        ),
    'SolrQuery::setFacetPrefix' =>
        array (
            'file' => 'solrquery.setfacetprefix.php',
            'desc' => 'Specifies a string prefix with which to limits the terms on which to facet',
        ),
    'SolrQuery::setFacetSort' =>
        array (
            'file' => 'solrquery.setfacetsort.php',
            'desc' => 'Determines the ordering of the facet field constraints',
        ),
    'SolrQuery::setHighlight' =>
        array (
            'file' => 'solrquery.sethighlight.php',
            'desc' => 'Enables or disables highlighting',
        ),
    'SolrQuery::setHighlightAlternateField' =>
        array (
            'file' => 'solrquery.sethighlightalternatefield.php',
            'desc' => 'Specifies the backup field to use',
        ),
    'SolrQuery::setHighlightFormatter' =>
        array (
            'file' => 'solrquery.sethighlightformatter.php',
            'desc' => 'Specify a formatter for the highlight output',
        ),
    'SolrQuery::setHighlightFragmenter' =>
        array (
            'file' => 'solrquery.sethighlightfragmenter.php',
            'desc' => 'Sets a text snippet generator for highlighted text',
        ),
    'SolrQuery::setHighlightFragsize' =>
        array (
            'file' => 'solrquery.sethighlightfragsize.php',
            'desc' => 'The size of fragments to consider for highlighting',
        ),
    'SolrQuery::setHighlightHighlightMultiTerm' =>
        array (
            'file' => 'solrquery.sethighlighthighlightmultiterm.php',
            'desc' => 'Use SpanScorer to highlight phrase terms',
        ),
    'SolrQuery::setHighlightMaxAlternateFieldLength' =>
        array (
            'file' => 'solrquery.sethighlightmaxalternatefieldlength.php',
            'desc' => 'Sets the maximum number of characters of the field to return',
        ),
    'SolrQuery::setHighlightMaxAnalyzedChars' =>
        array (
            'file' => 'solrquery.sethighlightmaxanalyzedchars.php',
            'desc' => 'Specifies the number of characters into a document to look for suitable snippets',
        ),
    'SolrQuery::setHighlightMergeContiguous' =>
        array (
            'file' => 'solrquery.sethighlightmergecontiguous.php',
            'desc' => 'Whether or not to collapse contiguous fragments into a single fragment',
        ),
    'SolrQuery::setHighlightRegexMaxAnalyzedChars' =>
        array (
            'file' => 'solrquery.sethighlightregexmaxanalyzedchars.php',
            'desc' => 'Specify the maximum number of characters to analyze',
        ),
    'SolrQuery::setHighlightRegexPattern' =>
        array (
            'file' => 'solrquery.sethighlightregexpattern.php',
            'desc' => 'Specify the regular expression for fragmenting',
        ),
    'SolrQuery::setHighlightRegexSlop' =>
        array (
            'file' => 'solrquery.sethighlightregexslop.php',
            'desc' => 'Sets the factor by which the regex fragmenter can stray from the ideal fragment size',
        ),
    'SolrQuery::setHighlightRequireFieldMatch' =>
        array (
            'file' => 'solrquery.sethighlightrequirefieldmatch.php',
            'desc' => 'Require field matching during highlighting',
        ),
    'SolrQuery::setHighlightSimplePost' =>
        array (
            'file' => 'solrquery.sethighlightsimplepost.php',
            'desc' => 'Sets the text which appears after a highlighted term',
        ),
    'SolrQuery::setHighlightSimplePre' =>
        array (
            'file' => 'solrquery.sethighlightsimplepre.php',
            'desc' => 'Sets the text which appears before a highlighted term',
        ),
    'SolrQuery::setHighlightSnippets' =>
        array (
            'file' => 'solrquery.sethighlightsnippets.php',
            'desc' => 'Sets the maximum number of highlighted snippets to generate per field',
        ),
    'SolrQuery::setHighlightUsePhraseHighlighter' =>
        array (
            'file' => 'solrquery.sethighlightusephrasehighlighter.php',
            'desc' => 'Whether to highlight phrase terms only when they appear within the query phrase',
        ),
    'SolrQuery::setMlt' =>
        array (
            'file' => 'solrquery.setmlt.php',
            'desc' => 'Enables or disables moreLikeThis',
        ),
    'SolrQuery::setMltBoost' =>
        array (
            'file' => 'solrquery.setmltboost.php',
            'desc' => 'Set if the query will be boosted by the interesting term relevance',
        ),
    'SolrQuery::setMltCount' =>
        array (
            'file' => 'solrquery.setmltcount.php',
            'desc' => 'Set the number of similar documents to return for each result',
        ),
    'SolrQuery::setMltMaxNumQueryTerms' =>
        array (
            'file' => 'solrquery.setmltmaxnumqueryterms.php',
            'desc' => 'Sets the maximum number of query terms included',
        ),
    'SolrQuery::setMltMaxNumTokens' =>
        array (
            'file' => 'solrquery.setmltmaxnumtokens.php',
            'desc' => 'Specifies the maximum number of tokens to parse',
        ),
    'SolrQuery::setMltMaxWordLength' =>
        array (
            'file' => 'solrquery.setmltmaxwordlength.php',
            'desc' => 'Sets the maximum word length',
        ),
    'SolrQuery::setMltMinDocFrequency' =>
        array (
            'file' => 'solrquery.setmltmindocfrequency.php',
            'desc' => 'Sets the mltMinDoc frequency',
        ),
    'SolrQuery::setMltMinTermFrequency' =>
        array (
            'file' => 'solrquery.setmltmintermfrequency.php',
            'desc' => 'Sets the frequency below which terms will be ignored in the source docs',
        ),
    'SolrQuery::setMltMinWordLength' =>
        array (
            'file' => 'solrquery.setmltminwordlength.php',
            'desc' => 'Sets the minimum word length',
        ),
    'SolrQuery::setOmitHeader' =>
        array (
            'file' => 'solrquery.setomitheader.php',
            'desc' => 'Exclude the header from the returned results',
        ),
    'SolrQuery::setQuery' =>
        array (
            'file' => 'solrquery.setquery.php',
            'desc' => 'Sets the search query',
        ),
    'SolrQuery::setRows' =>
        array (
            'file' => 'solrquery.setrows.php',
            'desc' => 'Specifies the maximum number of rows to return in the result',
        ),
    'SolrQuery::setShowDebugInfo' =>
        array (
            'file' => 'solrquery.setshowdebuginfo.php',
            'desc' => 'Flag to show debug information',
        ),
    'SolrQuery::setStart' =>
        array (
            'file' => 'solrquery.setstart.php',
            'desc' => 'Specifies the number of rows to skip',
        ),
    'SolrQuery::setStats' =>
        array (
            'file' => 'solrquery.setstats.php',
            'desc' => 'Enables or disables the Stats component',
        ),
    'SolrQuery::setTerms' =>
        array (
            'file' => 'solrquery.setterms.php',
            'desc' => 'Enables or disables the TermsComponent',
        ),
    'SolrQuery::setTermsField' =>
        array (
            'file' => 'solrquery.settermsfield.php',
            'desc' => 'Sets the name of the field to get the Terms from',
        ),
    'SolrQuery::setTermsIncludeLowerBound' =>
        array (
            'file' => 'solrquery.settermsincludelowerbound.php',
            'desc' => 'Include the lower bound term in the result set',
        ),
    'SolrQuery::setTermsIncludeUpperBound' =>
        array (
            'file' => 'solrquery.settermsincludeupperbound.php',
            'desc' => 'Include the upper bound term in the result set',
        ),
    'SolrQuery::setTermsLimit' =>
        array (
            'file' => 'solrquery.settermslimit.php',
            'desc' => 'Sets the maximum number of terms to return',
        ),
    'SolrQuery::setTermsLowerBound' =>
        array (
            'file' => 'solrquery.settermslowerbound.php',
            'desc' => 'Specifies the Term to start from',
        ),
    'SolrQuery::setTermsMaxCount' =>
        array (
            'file' => 'solrquery.settermsmaxcount.php',
            'desc' => 'Sets the maximum document frequency',
        ),
    'SolrQuery::setTermsMinCount' =>
        array (
            'file' => 'solrquery.settermsmincount.php',
            'desc' => 'Sets the minimum document frequency',
        ),
    'SolrQuery::setTermsPrefix' =>
        array (
            'file' => 'solrquery.settermsprefix.php',
            'desc' => 'Restrict matches to terms that start with the prefix',
        ),
    'SolrQuery::setTermsReturnRaw' =>
        array (
            'file' => 'solrquery.settermsreturnraw.php',
            'desc' => 'Return the raw characters of the indexed term',
        ),
    'SolrQuery::setTermsSort' =>
        array (
            'file' => 'solrquery.settermssort.php',
            'desc' => 'Specifies how to sort the returned terms',
        ),
    'SolrQuery::setTermsUpperBound' =>
        array (
            'file' => 'solrquery.settermsupperbound.php',
            'desc' => 'Sets the term to stop at',
        ),
    'SolrQuery::setTimeAllowed' =>
        array (
            'file' => 'solrquery.settimeallowed.php',
            'desc' => 'The time allowed for search to finish',
        ),
    'SolrQuery::__construct' =>
        array (
            'file' => 'solrquery.construct.php',
            'desc' => 'Constructor',
        ),
    'SolrQuery::__destruct' =>
        array (
            'file' => 'solrquery.destruct.php',
            'desc' => 'Destructor',
        ),
    'SolrQueryResponse::__construct' =>
        array (
            'file' => 'solrqueryresponse.construct.php',
            'desc' => 'Constructor',
        ),
    'SolrQueryResponse::__destruct' =>
        array (
            'file' => 'solrqueryresponse.destruct.php',
            'desc' => 'Destructor',
        ),
    'SolrResponse::getDigestedResponse' =>
        array (
            'file' => 'solrresponse.getdigestedresponse.php',
            'desc' => 'Returns the XML response as serialized PHP data',
        ),
    'SolrResponse::getHttpStatus' =>
        array (
            'file' => 'solrresponse.gethttpstatus.php',
            'desc' => 'Returns the HTTP status of the response',
        ),
    'SolrResponse::getHttpStatusMessage' =>
        array (
            'file' => 'solrresponse.gethttpstatusmessage.php',
            'desc' => 'Returns more details on the HTTP status',
        ),
    'SolrResponse::getRawRequest' =>
        array (
            'file' => 'solrresponse.getrawrequest.php',
            'desc' => 'Returns the raw request sent to the Solr server',
        ),
    'SolrResponse::getRawRequestHeaders' =>
        array (
            'file' => 'solrresponse.getrawrequestheaders.php',
            'desc' => 'Returns the raw request headers sent to the Solr server',
        ),
    'SolrResponse::getRawResponse' =>
        array (
            'file' => 'solrresponse.getrawresponse.php',
            'desc' => 'Returns the raw response from the server',
        ),
    'SolrResponse::getRawResponseHeaders' =>
        array (
            'file' => 'solrresponse.getrawresponseheaders.php',
            'desc' => 'Returns the raw response headers from the server',
        ),
    'SolrResponse::getRequestUrl' =>
        array (
            'file' => 'solrresponse.getrequesturl.php',
            'desc' => 'Returns the full URL the request was sent to',
        ),
    'SolrResponse::getResponse' =>
        array (
            'file' => 'solrresponse.getresponse.php',
            'desc' => 'Returns a SolrObject representing the XML response from the server',
        ),
    'SolrResponse::setParseMode' =>
        array (
            'file' => 'solrresponse.setparsemode.php',
            'desc' => 'Sets the parse mode',
        ),
    'SolrResponse::success' =>
        array (
            'file' => 'solrresponse.success.php',
            'desc' => 'Was the request a success',
        ),
    'SolrServerException::getInternalInfo' =>
        array (
            'file' => 'solrserverexception.getinternalinfo.php',
            'desc' => 'Returns internal information where the Exception was thrown',
        ),
    'SolrUpdateResponse::__construct' =>
        array (
            'file' => 'solrupdateresponse.construct.php',
            'desc' => 'Constructor',
        ),
    'SolrUpdateResponse::__destruct' =>
        array (
            'file' => 'solrupdateresponse.destruct.php',
            'desc' => 'Destructor',
        ),
    'SolrUtils::digestXmlResponse' =>
        array (
            'file' => 'solrutils.digestxmlresponse.php',
            'desc' => 'Parses an response XML string into a SolrObject',
        ),
    'SolrUtils::escapeQueryChars' =>
        array (
            'file' => 'solrutils.escapequerychars.php',
            'desc' => 'Escapes a lucene query string',
        ),
    'SolrUtils::getSolrVersion' =>
        array (
            'file' => 'solrutils.getsolrversion.php',
            'desc' => 'Returns the current version of the Solr extension',
        ),
    'SolrUtils::queryPhrase' =>
        array (
            'file' => 'solrutils.queryphrase.php',
            'desc' => 'Prepares a phrase from an unescaped lucene string',
        ),
    'solr_get_version' =>
        array (
            'file' => 'function.solr-get-version.php',
            'desc' => 'Returns the current version of the Apache Solr extension',
        ),
    'sort' =>
        array (
            'file' => 'function.sort.php',
            'desc' => 'Sort an array',
        ),
    'soundex' =>
        array (
            'file' => 'function.soundex.php',
            'desc' => 'Calculate the soundex key of a string',
        ),
    'SphinxClient::addQuery' =>
        array (
            'file' => 'sphinxclient.addquery.php',
            'desc' => 'Add query to multi-query batch',
        ),
    'SphinxClient::buildExcerpts' =>
        array (
            'file' => 'sphinxclient.buildexcerpts.php',
            'desc' => 'Build text snippets',
        ),
    'SphinxClient::buildKeywords' =>
        array (
            'file' => 'sphinxclient.buildkeywords.php',
            'desc' => 'Extract keywords from query',
        ),
    'SphinxClient::close' =>
        array (
            'file' => 'sphinxclient.close.php',
            'desc' => 'Closes previously opened persistent connection',
        ),
    'SphinxClient::escapeString' =>
        array (
            'file' => 'sphinxclient.escapestring.php',
            'desc' => 'Escape special characters',
        ),
    'SphinxClient::getLastError' =>
        array (
            'file' => 'sphinxclient.getlasterror.php',
            'desc' => 'Get the last error message',
        ),
    'SphinxClient::getLastWarning' =>
        array (
            'file' => 'sphinxclient.getlastwarning.php',
            'desc' => 'Get the last warning',
        ),
    'SphinxClient::open' =>
        array (
            'file' => 'sphinxclient.open.php',
            'desc' => 'Opens persistent connection to the server',
        ),
    'SphinxClient::query' =>
        array (
            'file' => 'sphinxclient.query.php',
            'desc' => 'Execute search query',
        ),
    'SphinxClient::resetFilters' =>
        array (
            'file' => 'sphinxclient.resetfilters.php',
            'desc' => 'Clear all filters',
        ),
    'SphinxClient::resetGroupBy' =>
        array (
            'file' => 'sphinxclient.resetgroupby.php',
            'desc' => 'Clear all group-by settings',
        ),
    'SphinxClient::runQueries' =>
        array (
            'file' => 'sphinxclient.runqueries.php',
            'desc' => 'Run a batch of search queries',
        ),
    'SphinxClient::setArrayResult' =>
        array (
            'file' => 'sphinxclient.setarrayresult.php',
            'desc' => 'Change the format of result set array',
        ),
    'SphinxClient::setConnectTimeout' =>
        array (
            'file' => 'sphinxclient.setconnecttimeout.php',
            'desc' => 'Set connection timeout',
        ),
    'SphinxClient::setFieldWeights' =>
        array (
            'file' => 'sphinxclient.setfieldweights.php',
            'desc' => 'Set field weights',
        ),
    'SphinxClient::setFilter' =>
        array (
            'file' => 'sphinxclient.setfilter.php',
            'desc' => 'Add new integer values set filter',
        ),
    'SphinxClient::setFilterFloatRange' =>
        array (
            'file' => 'sphinxclient.setfilterfloatrange.php',
            'desc' => 'Add new float range filter',
        ),
    'SphinxClient::setFilterRange' =>
        array (
            'file' => 'sphinxclient.setfilterrange.php',
            'desc' => 'Add new integer range filter',
        ),
    'SphinxClient::setGeoAnchor' =>
        array (
            'file' => 'sphinxclient.setgeoanchor.php',
            'desc' => 'Set anchor point for a geosphere distance calculations',
        ),
    'SphinxClient::setGroupBy' =>
        array (
            'file' => 'sphinxclient.setgroupby.php',
            'desc' => 'Set grouping attribute',
        ),
    'SphinxClient::setGroupDistinct' =>
        array (
            'file' => 'sphinxclient.setgroupdistinct.php',
            'desc' => 'Set attribute name for per-group distinct values count calculations',
        ),
    'SphinxClient::setIDRange' =>
        array (
            'file' => 'sphinxclient.setidrange.php',
            'desc' => 'Set a range of accepted document IDs',
        ),
    'SphinxClient::setIndexWeights' =>
        array (
            'file' => 'sphinxclient.setindexweights.php',
            'desc' => 'Set per-index weights',
        ),
    'SphinxClient::setLimits' =>
        array (
            'file' => 'sphinxclient.setlimits.php',
            'desc' => 'Set offset and limit of the result set',
        ),
    'SphinxClient::setMatchMode' =>
        array (
            'file' => 'sphinxclient.setmatchmode.php',
            'desc' => 'Set full-text query matching mode',
        ),
    'SphinxClient::setMaxQueryTime' =>
        array (
            'file' => 'sphinxclient.setmaxquerytime.php',
            'desc' => 'Set maximum query time',
        ),
    'SphinxClient::setOverride' =>
        array (
            'file' => 'sphinxclient.setoverride.php',
            'desc' => 'Sets temporary per-document attribute value
   overrides',
        ),
    'SphinxClient::setRankingMode' =>
        array (
            'file' => 'sphinxclient.setrankingmode.php',
            'desc' => 'Set ranking mode',
        ),
    'SphinxClient::setRetries' =>
        array (
            'file' => 'sphinxclient.setretries.php',
            'desc' => 'Set retry count and delay',
        ),
    'SphinxClient::setSelect' =>
        array (
            'file' => 'sphinxclient.setselect.php',
            'desc' => 'Set select clause',
        ),
    'SphinxClient::setServer' =>
        array (
            'file' => 'sphinxclient.setserver.php',
            'desc' => 'Set searchd host and port',
        ),
    'SphinxClient::setSortMode' =>
        array (
            'file' => 'sphinxclient.setsortmode.php',
            'desc' => 'Set matches sorting mode',
        ),
    'SphinxClient::status' =>
        array (
            'file' => 'sphinxclient.status.php',
            'desc' => 'Queries searchd status',
        ),
    'SphinxClient::updateAttributes' =>
        array (
            'file' => 'sphinxclient.updateattributes.php',
            'desc' => 'Update document attributes',
        ),
    'SphinxClient::__construct' =>
        array (
            'file' => 'sphinxclient.construct.php',
            'desc' => 'Create a new SphinxClient object',
        ),
    'SplDoublyLinkedList::add' =>
        array (
            'file' => 'spldoublylinkedlist.add.php',
            'desc' => 'Add/insert a new value at the specified index',
        ),
    'SplDoublyLinkedList::bottom' =>
        array (
            'file' => 'spldoublylinkedlist.bottom.php',
            'desc' => 'Peeks at the node from the beginning of the doubly linked list',
        ),
    'SplDoublyLinkedList::count' =>
        array (
            'file' => 'spldoublylinkedlist.count.php',
            'desc' => 'Counts the number of elements in the doubly linked list.',
        ),
    'SplDoublyLinkedList::current' =>
        array (
            'file' => 'spldoublylinkedlist.current.php',
            'desc' => 'Return current array entry',
        ),
    'SplDoublyLinkedList::getIteratorMode' =>
        array (
            'file' => 'spldoublylinkedlist.getiteratormode.php',
            'desc' => 'Returns the mode of iteration',
        ),
    'SplDoublyLinkedList::isEmpty' =>
        array (
            'file' => 'spldoublylinkedlist.isempty.php',
            'desc' => 'Checks whether the doubly linked list is empty.',
        ),
    'SplDoublyLinkedList::key' =>
        array (
            'file' => 'spldoublylinkedlist.key.php',
            'desc' => 'Return current node index',
        ),
    'SplDoublyLinkedList::next' =>
        array (
            'file' => 'spldoublylinkedlist.next.php',
            'desc' => 'Move to next entry',
        ),
    'SplDoublyLinkedList::offsetExists' =>
        array (
            'file' => 'spldoublylinkedlist.offsetexists.php',
            'desc' => 'Returns whether the requested $index exists',
        ),
    'SplDoublyLinkedList::offsetGet' =>
        array (
            'file' => 'spldoublylinkedlist.offsetget.php',
            'desc' => 'Returns the value at the specified $index',
        ),
    'SplDoublyLinkedList::offsetSet' =>
        array (
            'file' => 'spldoublylinkedlist.offsetset.php',
            'desc' => 'Sets the value at the specified $index to $newval',
        ),
    'SplDoublyLinkedList::offsetUnset' =>
        array (
            'file' => 'spldoublylinkedlist.offsetunset.php',
            'desc' => 'Unsets the value at the specified $index',
        ),
    'SplDoublyLinkedList::pop' =>
        array (
            'file' => 'spldoublylinkedlist.pop.php',
            'desc' => 'Pops a node from the end of the doubly linked list',
        ),
    'SplDoublyLinkedList::prev' =>
        array (
            'file' => 'spldoublylinkedlist.prev.php',
            'desc' => 'Move to previous entry',
        ),
    'SplDoublyLinkedList::push' =>
        array (
            'file' => 'spldoublylinkedlist.push.php',
            'desc' => 'Pushes an element at the end of the doubly linked list',
        ),
    'SplDoublyLinkedList::rewind' =>
        array (
            'file' => 'spldoublylinkedlist.rewind.php',
            'desc' => 'Rewind iterator back to the start',
        ),
    'SplDoublyLinkedList::serialize' =>
        array (
            'file' => 'spldoublylinkedlist.serialize.php',
            'desc' => 'Serializes the storage',
        ),
    'SplDoublyLinkedList::setIteratorMode' =>
        array (
            'file' => 'spldoublylinkedlist.setiteratormode.php',
            'desc' => 'Sets the mode of iteration',
        ),
    'SplDoublyLinkedList::shift' =>
        array (
            'file' => 'spldoublylinkedlist.shift.php',
            'desc' => 'Shifts a node from the beginning of the doubly linked list',
        ),
    'SplDoublyLinkedList::top' =>
        array (
            'file' => 'spldoublylinkedlist.top.php',
            'desc' => 'Peeks at the node from the end of the doubly linked list',
        ),
    'SplDoublyLinkedList::unserialize' =>
        array (
            'file' => 'spldoublylinkedlist.unserialize.php',
            'desc' => 'Unserializes the storage',
        ),
    'SplDoublyLinkedList::unshift' =>
        array (
            'file' => 'spldoublylinkedlist.unshift.php',
            'desc' => 'Prepends the doubly linked list with an element',
        ),
    'SplDoublyLinkedList::valid' =>
        array (
            'file' => 'spldoublylinkedlist.valid.php',
            'desc' => 'Check whether the doubly linked list contains more nodes',
        ),
    'SplDoublyLinkedList::__construct' =>
        array (
            'file' => 'spldoublylinkedlist.construct.php',
            'desc' => 'Constructs a new doubly linked list',
        ),
    'SplEnum::getConstList' =>
        array (
            'file' => 'splenum.getconstlist.php',
            'desc' => 'Returns all consts (possible values) as an array.',
        ),
    'SplFileInfo::getATime' =>
        array (
            'file' => 'splfileinfo.getatime.php',
            'desc' => 'Gets last access time of the file',
        ),
    'SplFileInfo::getBasename' =>
        array (
            'file' => 'splfileinfo.getbasename.php',
            'desc' => 'Gets the base name of the file',
        ),
    'SplFileInfo::getCTime' =>
        array (
            'file' => 'splfileinfo.getctime.php',
            'desc' => 'Gets the inode change time',
        ),
    'SplFileInfo::getExtension' =>
        array (
            'file' => 'splfileinfo.getextension.php',
            'desc' => 'Gets the file extension',
        ),
    'SplFileInfo::getFileInfo' =>
        array (
            'file' => 'splfileinfo.getfileinfo.php',
            'desc' => 'Gets an SplFileInfo object for the file',
        ),
    'SplFileInfo::getFilename' =>
        array (
            'file' => 'splfileinfo.getfilename.php',
            'desc' => 'Gets the filename',
        ),
    'SplFileInfo::getGroup' =>
        array (
            'file' => 'splfileinfo.getgroup.php',
            'desc' => 'Gets the file group',
        ),
    'SplFileInfo::getInode' =>
        array (
            'file' => 'splfileinfo.getinode.php',
            'desc' => 'Gets the inode for the file',
        ),
    'SplFileInfo::getLinkTarget' =>
        array (
            'file' => 'splfileinfo.getlinktarget.php',
            'desc' => 'Gets the target of a link',
        ),
    'SplFileInfo::getMTime' =>
        array (
            'file' => 'splfileinfo.getmtime.php',
            'desc' => 'Gets the last modified time',
        ),
    'SplFileInfo::getOwner' =>
        array (
            'file' => 'splfileinfo.getowner.php',
            'desc' => 'Gets the owner of the file',
        ),
    'SplFileInfo::getPath' =>
        array (
            'file' => 'splfileinfo.getpath.php',
            'desc' => 'Gets the path without filename',
        ),
    'SplFileInfo::getPathInfo' =>
        array (
            'file' => 'splfileinfo.getpathinfo.php',
            'desc' => 'Gets an SplFileInfo object for the path',
        ),
    'SplFileInfo::getPathname' =>
        array (
            'file' => 'splfileinfo.getpathname.php',
            'desc' => 'Gets the path to the file',
        ),
    'SplFileInfo::getPerms' =>
        array (
            'file' => 'splfileinfo.getperms.php',
            'desc' => 'Gets file permissions',
        ),
    'SplFileInfo::getRealPath' =>
        array (
            'file' => 'splfileinfo.getrealpath.php',
            'desc' => 'Gets absolute path to file',
        ),
    'SplFileInfo::getSize' =>
        array (
            'file' => 'splfileinfo.getsize.php',
            'desc' => 'Gets file size',
        ),
    'SplFileInfo::getType' =>
        array (
            'file' => 'splfileinfo.gettype.php',
            'desc' => 'Gets file type',
        ),
    'SplFileInfo::isDir' =>
        array (
            'file' => 'splfileinfo.isdir.php',
            'desc' => 'Tells if the file is a directory',
        ),
    'SplFileInfo::isExecutable' =>
        array (
            'file' => 'splfileinfo.isexecutable.php',
            'desc' => 'Tells if the file is executable',
        ),
    'SplFileInfo::isFile' =>
        array (
            'file' => 'splfileinfo.isfile.php',
            'desc' => 'Tells if the object references a regular file',
        ),
    'SplFileInfo::isLink' =>
        array (
            'file' => 'splfileinfo.islink.php',
            'desc' => 'Tells if the file is a link',
        ),
    'SplFileInfo::isReadable' =>
        array (
            'file' => 'splfileinfo.isreadable.php',
            'desc' => 'Tells if file is readable',
        ),
    'SplFileInfo::isWritable' =>
        array (
            'file' => 'splfileinfo.iswritable.php',
            'desc' => 'Tells if the entry is writable',
        ),
    'SplFileInfo::openFile' =>
        array (
            'file' => 'splfileinfo.openfile.php',
            'desc' => 'Gets an SplFileObject object for the file',
        ),
    'SplFileInfo::setFileClass' =>
        array (
            'file' => 'splfileinfo.setfileclass.php',
            'desc' => 'Sets the class name used with SplFileInfo::openFile',
        ),
    'SplFileInfo::setInfoClass' =>
        array (
            'file' => 'splfileinfo.setinfoclass.php',
            'desc' => 'Sets the class used with getFileInfo and getPathInfo',
        ),
    'SplFileInfo::__construct' =>
        array (
            'file' => 'splfileinfo.construct.php',
            'desc' => 'Construct a new SplFileInfo object',
        ),
    'SplFileInfo::__toString' =>
        array (
            'file' => 'splfileinfo.tostring.php',
            'desc' => 'Returns the path to the file as a string',
        ),
    'SplFileObject::current' =>
        array (
            'file' => 'splfileobject.current.php',
            'desc' => 'Retrieve current line of file',
        ),
    'SplFileObject::eof' =>
        array (
            'file' => 'splfileobject.eof.php',
            'desc' => 'Reached end of file',
        ),
    'SplFileObject::fflush' =>
        array (
            'file' => 'splfileobject.fflush.php',
            'desc' => 'Flushes the output to the file',
        ),
    'SplFileObject::fgetc' =>
        array (
            'file' => 'splfileobject.fgetc.php',
            'desc' => 'Gets character from file',
        ),
    'SplFileObject::fgetcsv' =>
        array (
            'file' => 'splfileobject.fgetcsv.php',
            'desc' => 'Gets line from file and parse as CSV fields',
        ),
    'SplFileObject::fgets' =>
        array (
            'file' => 'splfileobject.fgets.php',
            'desc' => 'Gets line from file',
        ),
    'SplFileObject::fgetss' =>
        array (
            'file' => 'splfileobject.fgetss.php',
            'desc' => 'Gets line from file and strip HTML tags',
        ),
    'SplFileObject::flock' =>
        array (
            'file' => 'splfileobject.flock.php',
            'desc' => 'Portable file locking',
        ),
    'SplFileObject::fpassthru' =>
        array (
            'file' => 'splfileobject.fpassthru.php',
            'desc' => 'Output all remaining data on a file pointer',
        ),
    'SplFileObject::fputcsv' =>
        array (
            'file' => 'splfileobject.fputcsv.php',
            'desc' => 'Write a field array as a CSV line',
        ),
    'SplFileObject::fread' =>
        array (
            'file' => 'splfileobject.fread.php',
            'desc' => 'Read from file',
        ),
    'SplFileObject::fscanf' =>
        array (
            'file' => 'splfileobject.fscanf.php',
            'desc' => 'Parses input from file according to a format',
        ),
    'SplFileObject::fseek' =>
        array (
            'file' => 'splfileobject.fseek.php',
            'desc' => 'Seek to a position',
        ),
    'SplFileObject::fstat' =>
        array (
            'file' => 'splfileobject.fstat.php',
            'desc' => 'Gets information about the file',
        ),
    'SplFileObject::ftell' =>
        array (
            'file' => 'splfileobject.ftell.php',
            'desc' => 'Return current file position',
        ),
    'SplFileObject::ftruncate' =>
        array (
            'file' => 'splfileobject.ftruncate.php',
            'desc' => 'Truncates the file to a given length',
        ),
    'SplFileObject::fwrite' =>
        array (
            'file' => 'splfileobject.fwrite.php',
            'desc' => 'Write to file',
        ),
    'SplFileObject::getChildren' =>
        array (
            'file' => 'splfileobject.getchildren.php',
        ),
    'SplFileObject::getCsvControl' =>
        array (
            'file' => 'splfileobject.getcsvcontrol.php',
            'desc' => 'Get the delimiter and enclosure character for CSV',
        ),
    'SplFileObject::getCurrentLine' =>
        array (
            'file' => 'splfileobject.getcurrentline.php',
            'desc' => 'Alias of SplFileObject::fgets',
        ),
    'SplFileObject::getFlags' =>
        array (
            'file' => 'splfileobject.getflags.php',
            'desc' => 'Gets flags for the SplFileObject',
        ),
    'SplFileObject::getMaxLineLen' =>
        array (
            'file' => 'splfileobject.getmaxlinelen.php',
            'desc' => 'Get maximum line length',
        ),
    'SplFileObject::hasChildren' =>
        array (
            'file' => 'splfileobject.haschildren.php',
            'desc' => 'SplFileObject does not have children',
        ),
    'SplFileObject::key' =>
        array (
            'file' => 'splfileobject.key.php',
            'desc' => 'Get line number',
        ),
    'SplFileObject::next' =>
        array (
            'file' => 'splfileobject.next.php',
            'desc' => 'Read next line',
        ),
    'SplFileObject::rewind' =>
        array (
            'file' => 'splfileobject.rewind.php',
            'desc' => 'Rewind the file to the first line',
        ),
    'SplFileObject::seek' =>
        array (
            'file' => 'splfileobject.seek.php',
            'desc' => 'Seek to specified line',
        ),
    'SplFileObject::setCsvControl' =>
        array (
            'file' => 'splfileobject.setcsvcontrol.php',
            'desc' => 'Set the delimiter and enclosure character for CSV',
        ),
    'SplFileObject::setFlags' =>
        array (
            'file' => 'splfileobject.setflags.php',
            'desc' => 'Sets flags for the SplFileObject',
        ),
    'SplFileObject::setMaxLineLen' =>
        array (
            'file' => 'splfileobject.setmaxlinelen.php',
            'desc' => 'Set maximum line length',
        ),
    'SplFileObject::valid' =>
        array (
            'file' => 'splfileobject.valid.php',
            'desc' => 'Not at EOF',
        ),
    'SplFileObject::__construct' =>
        array (
            'file' => 'splfileobject.construct.php',
            'desc' => 'Construct a new file object.',
        ),
    'SplFileObject::__toString' =>
        array (
            'file' => 'splfileobject.tostring.php',
            'desc' => 'Alias of SplFileObject::current',
        ),
    'SplFixedArray::count' =>
        array (
            'file' => 'splfixedarray.count.php',
            'desc' => 'Returns the size of the array',
        ),
    'SplFixedArray::current' =>
        array (
            'file' => 'splfixedarray.current.php',
            'desc' => 'Return current array entry',
        ),
    'SplFixedArray::fromArray' =>
        array (
            'file' => 'splfixedarray.fromarray.php',
            'desc' => 'Import a PHP array in a SplFixedArray instance',
        ),
    'SplFixedArray::getSize' =>
        array (
            'file' => 'splfixedarray.getsize.php',
            'desc' => 'Gets the size of the array',
        ),
    'SplFixedArray::key' =>
        array (
            'file' => 'splfixedarray.key.php',
            'desc' => 'Return current array index',
        ),
    'SplFixedArray::next' =>
        array (
            'file' => 'splfixedarray.next.php',
            'desc' => 'Move to next entry',
        ),
    'SplFixedArray::offsetExists' =>
        array (
            'file' => 'splfixedarray.offsetexists.php',
            'desc' => 'Returns whether the requested index exists',
        ),
    'SplFixedArray::offsetGet' =>
        array (
            'file' => 'splfixedarray.offsetget.php',
            'desc' => 'Returns the value at the specified index',
        ),
    'SplFixedArray::offsetSet' =>
        array (
            'file' => 'splfixedarray.offsetset.php',
            'desc' => 'Sets a new value at a specified index',
        ),
    'SplFixedArray::offsetUnset' =>
        array (
            'file' => 'splfixedarray.offsetunset.php',
            'desc' => 'Unsets the value at the specified $index',
        ),
    'SplFixedArray::rewind' =>
        array (
            'file' => 'splfixedarray.rewind.php',
            'desc' => 'Rewind iterator back to the start',
        ),
    'SplFixedArray::setSize' =>
        array (
            'file' => 'splfixedarray.setsize.php',
            'desc' => 'Change the size of an array',
        ),
    'SplFixedArray::toArray' =>
        array (
            'file' => 'splfixedarray.toarray.php',
            'desc' => 'Returns a PHP array from the fixed array',
        ),
    'SplFixedArray::valid' =>
        array (
            'file' => 'splfixedarray.valid.php',
            'desc' => 'Check whether the array contains more elements',
        ),
    'SplFixedArray::__construct' =>
        array (
            'file' => 'splfixedarray.construct.php',
            'desc' => 'Constructs a new fixed array',
        ),
    'SplFixedArray::__wakeup' =>
        array (
            'file' => 'splfixedarray.wakeup.php',
            'desc' => 'Reinitialises the array after being unserialised',
        ),
    'SplHeap::compare' =>
        array (
            'file' => 'splheap.compare.php',
            'desc' => 'Compare elements in order to place them correctly in the heap while sifting up.',
        ),
    'SplHeap::count' =>
        array (
            'file' => 'splheap.count.php',
            'desc' => 'Counts the number of elements in the heap.',
        ),
    'SplHeap::current' =>
        array (
            'file' => 'splheap.current.php',
            'desc' => 'Return current node pointed by the iterator',
        ),
    'SplHeap::extract' =>
        array (
            'file' => 'splheap.extract.php',
            'desc' => 'Extracts a node from top of the heap and sift up.',
        ),
    'SplHeap::insert' =>
        array (
            'file' => 'splheap.insert.php',
            'desc' => 'Inserts an element in the heap by sifting it up.',
        ),
    'SplHeap::isEmpty' =>
        array (
            'file' => 'splheap.isempty.php',
            'desc' => 'Checks whether the heap is empty.',
        ),
    'SplHeap::key' =>
        array (
            'file' => 'splheap.key.php',
            'desc' => 'Return current node index',
        ),
    'SplHeap::next' =>
        array (
            'file' => 'splheap.next.php',
            'desc' => 'Move to the next node',
        ),
    'SplHeap::recoverFromCorruption' =>
        array (
            'file' => 'splheap.recoverfromcorruption.php',
            'desc' => 'Recover from the corrupted state and allow further actions on the heap.',
        ),
    'SplHeap::rewind' =>
        array (
            'file' => 'splheap.rewind.php',
            'desc' => 'Rewind iterator back to the start (no-op)',
        ),
    'SplHeap::top' =>
        array (
            'file' => 'splheap.top.php',
            'desc' => 'Peeks at the node from the top of the heap',
        ),
    'SplHeap::valid' =>
        array (
            'file' => 'splheap.valid.php',
            'desc' => 'Check whether the heap contains more nodes',
        ),
    'SplHeap::__construct' =>
        array (
            'file' => 'splheap.construct.php',
            'desc' => 'Constructs a new empty heap',
        ),
    'split' =>
        array (
            'file' => 'function.split.php',
            'desc' => 'Split string into array by regular expression',
        ),
    'spliti' =>
        array (
            'file' => 'function.spliti.php',
            'desc' => 'Split string into array by regular expression case insensitive',
        ),
    'SplMaxHeap::compare' =>
        array (
            'file' => 'splmaxheap.compare.php',
            'desc' => 'Compare elements in order to place them correctly in the heap while sifting up.',
        ),
    'SplMinHeap::compare' =>
        array (
            'file' => 'splminheap.compare.php',
            'desc' => 'Compare elements in order to place them correctly in the heap while sifting up.',
        ),
    'SplObjectStorage::addAll' =>
        array (
            'file' => 'splobjectstorage.addall.php',
            'desc' => 'Adds all objects from another storage',
        ),
    'SplObjectStorage::attach' =>
        array (
            'file' => 'splobjectstorage.attach.php',
            'desc' => 'Adds an object in the storage',
        ),
    'SplObjectStorage::contains' =>
        array (
            'file' => 'splobjectstorage.contains.php',
            'desc' => 'Checks if the storage contains a specific object',
        ),
    'SplObjectStorage::count' =>
        array (
            'file' => 'splobjectstorage.count.php',
            'desc' => 'Returns the number of objects in the storage',
        ),
    'SplObjectStorage::current' =>
        array (
            'file' => 'splobjectstorage.current.php',
            'desc' => 'Returns the current storage entry',
        ),
    'SplObjectStorage::detach' =>
        array (
            'file' => 'splobjectstorage.detach.php',
            'desc' => 'Removes an object from the storage',
        ),
    'SplObjectStorage::getHash' =>
        array (
            'file' => 'splobjectstorage.gethash.php',
            'desc' => 'Calculate a unique identifier for the contained objects',
        ),
    'SplObjectStorage::getInfo' =>
        array (
            'file' => 'splobjectstorage.getinfo.php',
            'desc' => 'Returns the data associated with the current iterator entry',
        ),
    'SplObjectStorage::key' =>
        array (
            'file' => 'splobjectstorage.key.php',
            'desc' => 'Returns the index at which the iterator currently is',
        ),
    'SplObjectStorage::next' =>
        array (
            'file' => 'splobjectstorage.next.php',
            'desc' => 'Move to the next entry',
        ),
    'SplObjectStorage::offsetExists' =>
        array (
            'file' => 'splobjectstorage.offsetexists.php',
            'desc' => 'Checks whether an object exists in the storage',
        ),
    'SplObjectStorage::offsetGet' =>
        array (
            'file' => 'splobjectstorage.offsetget.php',
            'desc' => 'Returns the data associated with an object',
        ),
    'SplObjectStorage::offsetSet' =>
        array (
            'file' => 'splobjectstorage.offsetset.php',
            'desc' => 'Associates data to an object in the storage',
        ),
    'SplObjectStorage::offsetUnset' =>
        array (
            'file' => 'splobjectstorage.offsetunset.php',
            'desc' => 'Removes an object from the storage',
        ),
    'SplObjectStorage::removeAll' =>
        array (
            'file' => 'splobjectstorage.removeall.php',
            'desc' => 'Removes objects contained in another storage from the current storage',
        ),
    'SplObjectStorage::removeAllExcept' =>
        array (
            'file' => 'splobjectstorage.removeallexcept.php',
            'desc' => 'Removes all objects except for those contained in another storage from the current storage',
        ),
    'SplObjectStorage::rewind' =>
        array (
            'file' => 'splobjectstorage.rewind.php',
            'desc' => 'Rewind the iterator to the first storage element',
        ),
    'SplObjectStorage::serialize' =>
        array (
            'file' => 'splobjectstorage.serialize.php',
            'desc' => 'Serializes the storage',
        ),
    'SplObjectStorage::setInfo' =>
        array (
            'file' => 'splobjectstorage.setinfo.php',
            'desc' => 'Sets the data associated with the current iterator entry',
        ),
    'SplObjectStorage::unserialize' =>
        array (
            'file' => 'splobjectstorage.unserialize.php',
            'desc' => 'Unserializes a storage from its string representation',
        ),
    'SplObjectStorage::valid' =>
        array (
            'file' => 'splobjectstorage.valid.php',
            'desc' => 'Returns if the current iterator entry is valid',
        ),
    'SplObserver::update' =>
        array (
            'file' => 'splobserver.update.php',
            'desc' => 'Receive update from subject',
        ),
    'SplPriorityQueue::compare' =>
        array (
            'file' => 'splpriorityqueue.compare.php',
            'desc' => 'Compare priorities in order to place elements correctly in the heap while sifting up.',
        ),
    'SplPriorityQueue::count' =>
        array (
            'file' => 'splpriorityqueue.count.php',
            'desc' => 'Counts the number of elements in the queue.',
        ),
    'SplPriorityQueue::current' =>
        array (
            'file' => 'splpriorityqueue.current.php',
            'desc' => 'Return current node pointed by the iterator',
        ),
    'SplPriorityQueue::extract' =>
        array (
            'file' => 'splpriorityqueue.extract.php',
            'desc' => 'Extracts a node from top of the heap and sift up.',
        ),
    'SplPriorityQueue::insert' =>
        array (
            'file' => 'splpriorityqueue.insert.php',
            'desc' => 'Inserts an element in the queue by sifting it up.',
        ),
    'SplPriorityQueue::isEmpty' =>
        array (
            'file' => 'splpriorityqueue.isempty.php',
            'desc' => 'Checks whether the queue is empty.',
        ),
    'SplPriorityQueue::key' =>
        array (
            'file' => 'splpriorityqueue.key.php',
            'desc' => 'Return current node index',
        ),
    'SplPriorityQueue::next' =>
        array (
            'file' => 'splpriorityqueue.next.php',
            'desc' => 'Move to the next node',
        ),
    'SplPriorityQueue::recoverFromCorruption' =>
        array (
            'file' => 'splpriorityqueue.recoverfromcorruption.php',
            'desc' => 'Recover from the corrupted state and allow further actions on the queue.',
        ),
    'SplPriorityQueue::rewind' =>
        array (
            'file' => 'splpriorityqueue.rewind.php',
            'desc' => 'Rewind iterator back to the start (no-op)',
        ),
    'SplPriorityQueue::setExtractFlags' =>
        array (
            'file' => 'splpriorityqueue.setextractflags.php',
            'desc' => 'Sets the mode of extraction',
        ),
    'SplPriorityQueue::top' =>
        array (
            'file' => 'splpriorityqueue.top.php',
            'desc' => 'Peeks at the node from the top of the queue',
        ),
    'SplPriorityQueue::valid' =>
        array (
            'file' => 'splpriorityqueue.valid.php',
            'desc' => 'Check whether the queue contains more nodes',
        ),
    'SplPriorityQueue::__construct' =>
        array (
            'file' => 'splpriorityqueue.construct.php',
            'desc' => 'Constructs a new empty queue',
        ),
    'SplQueue::dequeue' =>
        array (
            'file' => 'splqueue.dequeue.php',
            'desc' => 'Dequeues a node from the queue',
        ),
    'SplQueue::enqueue' =>
        array (
            'file' => 'splqueue.enqueue.php',
            'desc' => 'Adds an element to the queue.',
        ),
    'SplQueue::setIteratorMode' =>
        array (
            'file' => 'splqueue.setiteratormode.php',
            'desc' => 'Sets the mode of iteration',
        ),
    'SplQueue::__construct' =>
        array (
            'file' => 'splqueue.construct.php',
            'desc' => 'Constructs a new queue implemented using a doubly linked list',
        ),
    'SplStack::setIteratorMode' =>
        array (
            'file' => 'splstack.setiteratormode.php',
            'desc' => 'Sets the mode of iteration',
        ),
    'SplStack::__construct' =>
        array (
            'file' => 'splstack.construct.php',
            'desc' => 'Constructs a new stack implemented using a doubly linked list',
        ),
    'SplSubject::attach' =>
        array (
            'file' => 'splsubject.attach.php',
            'desc' => 'Attach an SplObserver',
        ),
    'SplSubject::detach' =>
        array (
            'file' => 'splsubject.detach.php',
            'desc' => 'Detach an observer',
        ),
    'SplSubject::notify' =>
        array (
            'file' => 'splsubject.notify.php',
            'desc' => 'Notify an observer',
        ),
    'SplTempFileObject::__construct' =>
        array (
            'file' => 'spltempfileobject.construct.php',
            'desc' => 'Construct a new temporary file object',
        ),
    'SplType::__construct' =>
        array (
            'file' => 'spltype.construct.php',
            'desc' => 'Creates a new value of some type',
        ),
    'spl_autoload' =>
        array (
            'file' => 'function.spl-autoload.php',
            'desc' => 'Default implementation for __autoload()',
        ),
    'spl_autoload_call' =>
        array (
            'file' => 'function.spl-autoload-call.php',
            'desc' => 'Try all registered __autoload() function to load the requested class',
        ),
    'spl_autoload_extensions' =>
        array (
            'file' => 'function.spl-autoload-extensions.php',
            'desc' => 'Register and return default file extensions for spl_autoload',
        ),
    'spl_autoload_functions' =>
        array (
            'file' => 'function.spl-autoload-functions.php',
            'desc' => 'Return all registered __autoload() functions',
        ),
    'spl_autoload_register' =>
        array (
            'file' => 'function.spl-autoload-register.php',
            'desc' => 'Register given function as __autoload() implementation',
        ),
    'spl_autoload_unregister' =>
        array (
            'file' => 'function.spl-autoload-unregister.php',
            'desc' => 'Unregister given function as __autoload() implementation',
        ),
    'spl_classes' =>
        array (
            'file' => 'function.spl-classes.php',
            'desc' => 'Return available SPL classes',
        ),
    'spl_object_hash' =>
        array (
            'file' => 'function.spl-object-hash.php',
            'desc' => 'Return hash id for given object',
        ),
    'Spoofchecker::areConfusable' =>
        array (
            'file' => 'spoofchecker.areconfusable.php',
            'desc' => 'Checks if a given text contains any confusable characters',
        ),
    'Spoofchecker::isSuspicious' =>
        array (
            'file' => 'spoofchecker.issuspicious.php',
            'desc' => 'Checks if a given text contains any suspicious characters',
        ),
    'Spoofchecker::setAllowedLocales' =>
        array (
            'file' => 'spoofchecker.setallowedlocales.php',
            'desc' => 'Locales to use when running checks',
        ),
    'Spoofchecker::setChecks' =>
        array (
            'file' => 'spoofchecker.setchecks.php',
            'desc' => 'Set the checks to run',
        ),
    'Spoofchecker::__construct' =>
        array (
            'file' => 'spoofchecker.construct.php',
            'desc' => 'Constructor',
        ),
    'sprintf' =>
        array (
            'file' => 'function.sprintf.php',
            'desc' => 'Return a formatted string',
        ),
    'SQL acceptable by 4D' =>
        array (
            'file' => 'ref.pdo-4d.sql4d.php',
            'desc' => 'PDO and SQL 4D',
        ),
    'SQLite3::busyTimeout' =>
        array (
            'file' => 'sqlite3.busytimeout.php',
            'desc' => 'Sets the busy connection handler',
        ),
    'SQLite3::changes' =>
        array (
            'file' => 'sqlite3.changes.php',
            'desc' => 'Returns the number of database rows that were changed (or inserted or
   deleted) by the most recent SQL statement',
        ),
    'SQLite3::close' =>
        array (
            'file' => 'sqlite3.close.php',
            'desc' => 'Closes the database connection',
        ),
    'SQLite3::createAggregate' =>
        array (
            'file' => 'sqlite3.createaggregate.php',
            'desc' => 'Registers a PHP function for use as an SQL aggregate function',
        ),
    'SQLite3::createCollation' =>
        array (
            'file' => 'sqlite3.createcollation.php',
            'desc' => 'Registers a PHP function for use as an SQL collating function',
        ),
    'SQLite3::createFunction' =>
        array (
            'file' => 'sqlite3.createfunction.php',
            'desc' => 'Registers a PHP function for use as an SQL scalar function',
        ),
    'SQLite3::escapeString' =>
        array (
            'file' => 'sqlite3.escapestring.php',
            'desc' => 'Returns a string that has been properly escaped',
        ),
    'SQLite3::exec' =>
        array (
            'file' => 'sqlite3.exec.php',
            'desc' => 'Executes a result-less query against a given database',
        ),
    'SQLite3::lastErrorCode' =>
        array (
            'file' => 'sqlite3.lasterrorcode.php',
            'desc' => 'Returns the numeric result code of the most recent failed SQLite request',
        ),
    'SQLite3::lastErrorMsg' =>
        array (
            'file' => 'sqlite3.lasterrormsg.php',
            'desc' => 'Returns English text describing the most recent failed SQLite request',
        ),
    'SQLite3::lastInsertRowID' =>
        array (
            'file' => 'sqlite3.lastinsertrowid.php',
            'desc' => 'Returns the row ID of the most recent INSERT into the database',
        ),
    'SQLite3::loadExtension' =>
        array (
            'file' => 'sqlite3.loadextension.php',
            'desc' => 'Attempts to load an SQLite extension library',
        ),
    'SQLite3::open' =>
        array (
            'file' => 'sqlite3.open.php',
            'desc' => 'Opens an SQLite database',
        ),
    'SQLite3::prepare' =>
        array (
            'file' => 'sqlite3.prepare.php',
            'desc' => 'Prepares an SQL statement for execution',
        ),
    'SQLite3::query' =>
        array (
            'file' => 'sqlite3.query.php',
            'desc' => 'Executes an SQL query',
        ),
    'SQLite3::querySingle' =>
        array (
            'file' => 'sqlite3.querysingle.php',
            'desc' => 'Executes a query and returns a single result',
        ),
    'SQLite3::version' =>
        array (
            'file' => 'sqlite3.version.php',
            'desc' => 'Returns the SQLite3 library version as a string constant and as a number',
        ),
    'SQLite3::__construct' =>
        array (
            'file' => 'sqlite3.construct.php',
            'desc' => 'Instantiates an SQLite3 object and opens an SQLite 3 database',
        ),
    'SQLite3Result::columnName' =>
        array (
            'file' => 'sqlite3result.columnname.php',
            'desc' => 'Returns the name of the nth column',
        ),
    'SQLite3Result::columnType' =>
        array (
            'file' => 'sqlite3result.columntype.php',
            'desc' => 'Returns the type of the nth column',
        ),
    'SQLite3Result::fetchArray' =>
        array (
            'file' => 'sqlite3result.fetcharray.php',
            'desc' => 'Fetches a result row as an associative or numerically indexed array or both',
        ),
    'SQLite3Result::finalize' =>
        array (
            'file' => 'sqlite3result.finalize.php',
            'desc' => 'Closes the result set',
        ),
    'SQLite3Result::numColumns' =>
        array (
            'file' => 'sqlite3result.numcolumns.php',
            'desc' => 'Returns the number of columns in the result set',
        ),
    'SQLite3Result::reset' =>
        array (
            'file' => 'sqlite3result.reset.php',
            'desc' => 'Resets the result set back to the first row',
        ),
    'SQLite3Stmt::bindParam' =>
        array (
            'file' => 'sqlite3stmt.bindparam.php',
            'desc' => 'Binds a parameter to a statement variable',
        ),
    'SQLite3Stmt::bindValue' =>
        array (
            'file' => 'sqlite3stmt.bindvalue.php',
            'desc' => 'Binds the value of a parameter to a statement variable',
        ),
    'SQLite3Stmt::clear' =>
        array (
            'file' => 'sqlite3stmt.clear.php',
            'desc' => 'Clears all current bound parameters',
        ),
    'SQLite3Stmt::close' =>
        array (
            'file' => 'sqlite3stmt.close.php',
            'desc' => 'Closes the prepared statement',
        ),
    'SQLite3Stmt::execute' =>
        array (
            'file' => 'sqlite3stmt.execute.php',
            'desc' => 'Executes a prepared statement and returns a result set object',
        ),
    'SQLite3Stmt::paramCount' =>
        array (
            'file' => 'sqlite3stmt.paramcount.php',
            'desc' => 'Returns the number of parameters within the prepared statement',
        ),
    'SQLite3Stmt::reset' =>
        array (
            'file' => 'sqlite3stmt.reset.php',
            'desc' => 'Resets the prepared statement',
        ),
    'sqlite_array_query' =>
        array (
            'file' => 'function.sqlite-array-query.php',
            'desc' => 'Execute a query against a given database and returns an array',
        ),
    'sqlite_busy_timeout' =>
        array (
            'file' => 'function.sqlite-busy-timeout.php',
            'desc' => 'Set busy timeout duration, or disable busy handlers',
        ),
    'sqlite_changes' =>
        array (
            'file' => 'function.sqlite-changes.php',
            'desc' => 'Returns the number of rows that were changed by the most
   recent SQL statement',
        ),
    'sqlite_close' =>
        array (
            'file' => 'function.sqlite-close.php',
            'desc' => 'Closes an open SQLite database',
        ),
    'sqlite_column' =>
        array (
            'file' => 'function.sqlite-column.php',
            'desc' => 'Fetches a column from the current row of a result set',
        ),
    'sqlite_create_aggregate' =>
        array (
            'file' => 'function.sqlite-create-aggregate.php',
            'desc' => 'Register an aggregating UDF for use in SQL statements',
        ),
    'sqlite_create_function' =>
        array (
            'file' => 'function.sqlite-create-function.php',
            'desc' => 'Registers a &quot;regular&quot; User Defined Function for use in SQL statements',
        ),
    'sqlite_current' =>
        array (
            'file' => 'function.sqlite-current.php',
            'desc' => 'Fetches the current row from a result set as an array',
        ),
    'sqlite_error_string' =>
        array (
            'file' => 'function.sqlite-error-string.php',
            'desc' => 'Returns the textual description of an error code',
        ),
    'sqlite_escape_string' =>
        array (
            'file' => 'function.sqlite-escape-string.php',
            'desc' => 'Escapes a string for use as a query parameter',
        ),
    'sqlite_exec' =>
        array (
            'file' => 'function.sqlite-exec.php',
            'desc' => 'Executes a result-less query against a given database',
        ),
    'sqlite_factory' =>
        array (
            'file' => 'function.sqlite-factory.php',
            'desc' => 'Opens an SQLite database and returns an SQLiteDatabase object',
        ),
    'sqlite_fetch_all' =>
        array (
            'file' => 'function.sqlite-fetch-all.php',
            'desc' => 'Fetches all rows from a result set as an array of arrays',
        ),
    'sqlite_fetch_array' =>
        array (
            'file' => 'function.sqlite-fetch-array.php',
            'desc' => 'Fetches the next row from a result set as an array',
        ),
    'sqlite_fetch_column_types' =>
        array (
            'file' => 'function.sqlite-fetch-column-types.php',
            'desc' => 'Return an array of column types from a particular table',
        ),
    'sqlite_fetch_object' =>
        array (
            'file' => 'function.sqlite-fetch-object.php',
            'desc' => 'Fetches the next row from a result set as an object',
        ),
    'sqlite_fetch_single' =>
        array (
            'file' => 'function.sqlite-fetch-single.php',
            'desc' => 'Fetches the first column of a result set as a string',
        ),
    'sqlite_fetch_string' =>
        array (
            'file' => 'function.sqlite-fetch-string.php',
            'desc' => 'Alias of sqlite_fetch_single',
        ),
    'sqlite_field_name' =>
        array (
            'file' => 'function.sqlite-field-name.php',
            'desc' => 'Returns the name of a particular field',
        ),
    'sqlite_has_more' =>
        array (
            'file' => 'function.sqlite-has-more.php',
            'desc' => 'Finds whether or not more rows are available',
        ),
    'sqlite_has_prev' =>
        array (
            'file' => 'function.sqlite-has-prev.php',
            'desc' => 'Returns whether or not a previous row is available',
        ),
    'sqlite_key' =>
        array (
            'file' => 'function.sqlite-key.php',
            'desc' => 'Returns the current row index',
        ),
    'sqlite_last_error' =>
        array (
            'file' => 'function.sqlite-last-error.php',
            'desc' => 'Returns the error code of the last error for a database',
        ),
    'sqlite_last_insert_rowid' =>
        array (
            'file' => 'function.sqlite-last-insert-rowid.php',
            'desc' => 'Returns the rowid of the most recently inserted row',
        ),
    'sqlite_libencoding' =>
        array (
            'file' => 'function.sqlite-libencoding.php',
            'desc' => 'Returns the encoding of the linked SQLite library',
        ),
    'sqlite_libversion' =>
        array (
            'file' => 'function.sqlite-libversion.php',
            'desc' => 'Returns the version of the linked SQLite library',
        ),
    'sqlite_next' =>
        array (
            'file' => 'function.sqlite-next.php',
            'desc' => 'Seek to the next row number',
        ),
    'sqlite_num_fields' =>
        array (
            'file' => 'function.sqlite-num-fields.php',
            'desc' => 'Returns the number of fields in a result set',
        ),
    'sqlite_num_rows' =>
        array (
            'file' => 'function.sqlite-num-rows.php',
            'desc' => 'Returns the number of rows in a buffered result set',
        ),
    'sqlite_open' =>
        array (
            'file' => 'function.sqlite-open.php',
            'desc' => 'Opens an SQLite database and create the database if it does not exist',
        ),
    'sqlite_popen' =>
        array (
            'file' => 'function.sqlite-popen.php',
            'desc' => 'Opens a persistent handle to an SQLite database and create the database if it does not exist',
        ),
    'sqlite_prev' =>
        array (
            'file' => 'function.sqlite-prev.php',
            'desc' => 'Seek to the previous row number of a result set',
        ),
    'sqlite_query' =>
        array (
            'file' => 'function.sqlite-query.php',
            'desc' => 'Executes a query against a given database and returns a result handle',
        ),
    'sqlite_rewind' =>
        array (
            'file' => 'function.sqlite-rewind.php',
            'desc' => 'Seek to the first row number',
        ),
    'sqlite_seek' =>
        array (
            'file' => 'function.sqlite-seek.php',
            'desc' => 'Seek to a particular row number of a buffered result set',
        ),
    'sqlite_single_query' =>
        array (
            'file' => 'function.sqlite-single-query.php',
            'desc' => 'Executes a query and returns either an array for one single column or the value of the first row',
        ),
    'sqlite_udf_decode_binary' =>
        array (
            'file' => 'function.sqlite-udf-decode-binary.php',
            'desc' => 'Decode binary data passed as parameters to an UDF',
        ),
    'sqlite_udf_encode_binary' =>
        array (
            'file' => 'function.sqlite-udf-encode-binary.php',
            'desc' => 'Encode binary data before returning it from an UDF',
        ),
    'sqlite_unbuffered_query' =>
        array (
            'file' => 'function.sqlite-unbuffered-query.php',
            'desc' => 'Execute a query that does not prefetch and buffer all data',
        ),
    'sqlite_valid' =>
        array (
            'file' => 'function.sqlite-valid.php',
            'desc' => 'Returns whether more rows are available',
        ),
    'sqlsrv_begin_transaction' =>
        array (
            'file' => 'function.sqlsrv-begin-transaction.php',
            'desc' => 'Begins a database transaction',
        ),
    'sqlsrv_cancel' =>
        array (
            'file' => 'function.sqlsrv-cancel.php',
            'desc' => 'Cancels a statement',
        ),
    'sqlsrv_client_info' =>
        array (
            'file' => 'function.sqlsrv-client-info.php',
            'desc' => 'Returns information about the client and specified connection',
        ),
    'sqlsrv_close' =>
        array (
            'file' => 'function.sqlsrv-close.php',
            'desc' => 'Closes an open connection and releases resourses associated with the connection',
        ),
    'sqlsrv_commit' =>
        array (
            'file' => 'function.sqlsrv-commit.php',
            'desc' => 'Commits a transaction that was begun with sqlsrv_begin_transaction',
        ),
    'sqlsrv_configure' =>
        array (
            'file' => 'function.sqlsrv-configure.php',
            'desc' => 'Changes the driver error handling and logging configurations',
        ),
    'sqlsrv_connect' =>
        array (
            'file' => 'function.sqlsrv-connect.php',
            'desc' => 'Opens a connection to a Microsoft SQL Server database',
        ),
    'sqlsrv_errors' =>
        array (
            'file' => 'function.sqlsrv-errors.php',
            'desc' => 'Returns error and warning information about the last SQLSRV operation performed',
        ),
    'sqlsrv_execute' =>
        array (
            'file' => 'function.sqlsrv-execute.php',
            'desc' => 'Executes a statement prepared with sqlsrv_prepare',
        ),
    'sqlsrv_fetch' =>
        array (
            'file' => 'function.sqlsrv-fetch.php',
            'desc' => 'Makes the next row in a result set available for reading',
        ),
    'sqlsrv_fetch_array' =>
        array (
            'file' => 'function.sqlsrv-fetch-array.php',
            'desc' => 'Returns a row as an array',
        ),
    'sqlsrv_fetch_object' =>
        array (
            'file' => 'function.sqlsrv-fetch-object.php',
            'desc' => 'Retrieves the next row of data in a result set as an object',
        ),
    'sqlsrv_field_metadata' =>
        array (
            'file' => 'function.sqlsrv-field-metadata.php',
            'desc' => 'Retrieves metadata for the fields of a statement prepared by 
  sqlsrv_prepare or sqlsrv_query',
        ),
    'sqlsrv_free_stmt' =>
        array (
            'file' => 'function.sqlsrv-free-stmt.php',
            'desc' => 'Frees all resources for the specified statement',
        ),
    'sqlsrv_get_config' =>
        array (
            'file' => 'function.sqlsrv-get-config.php',
            'desc' => 'Returns the value of the specified configuration setting',
        ),
    'sqlsrv_get_field' =>
        array (
            'file' => 'function.sqlsrv-get-field.php',
            'desc' => 'Gets field data from the currently selected row',
        ),
    'sqlsrv_has_rows' =>
        array (
            'file' => 'function.sqlsrv-has-rows.php',
            'desc' => 'Indicates whether the specified statement has rows',
        ),
    'sqlsrv_next_result' =>
        array (
            'file' => 'function.sqlsrv-next-result.php',
            'desc' => 'Makes the next result of the specified statement active',
        ),
    'sqlsrv_num_fields' =>
        array (
            'file' => 'function.sqlsrv-num-fields.php',
            'desc' => 'Retrieves the number of fields (columns) on a statement',
        ),
    'sqlsrv_num_rows' =>
        array (
            'file' => 'function.sqlsrv-num-rows.php',
            'desc' => 'Retrieves the number of rows in a result set',
        ),
    'sqlsrv_prepare' =>
        array (
            'file' => 'function.sqlsrv-prepare.php',
            'desc' => 'Prepares a query for execution',
        ),
    'sqlsrv_query' =>
        array (
            'file' => 'function.sqlsrv-query.php',
            'desc' => 'Prepares and executes a query.',
        ),
    'sqlsrv_rollback' =>
        array (
            'file' => 'function.sqlsrv-rollback.php',
            'desc' => 'Rolls back a transaction that was begun with 
  sqlsrv_begin_transaction',
        ),
    'sqlsrv_rows_affected' =>
        array (
            'file' => 'function.sqlsrv-rows-affected.php',
            'desc' => 'Returns the number of rows modified by the last INSERT, UPDATE, or 
  DELETE query executed',
        ),
    'sqlsrv_send_stream_data' =>
        array (
            'file' => 'function.sqlsrv-send-stream-data.php',
            'desc' => 'Sends data from parameter streams to the server',
        ),
    'sqlsrv_server_info' =>
        array (
            'file' => 'function.sqlsrv-server-info.php',
            'desc' => 'Returns information about the server',
        ),
    'SQL types with PDO_4D and PHP' =>
        array (
            'file' => 'pdo-4d.sqltypes.php',
            'desc' => 'SQL types with PDO_4D and PHP',
        ),
    'sql_regcase' =>
        array (
            'file' => 'function.sql-regcase.php',
            'desc' => 'Make regular expression for case insensitive match',
        ),
    'sqrt' =>
        array (
            'file' => 'function.sqrt.php',
            'desc' => 'Square root',
        ),
    'srand' =>
        array (
            'file' => 'function.srand.php',
            'desc' => 'Seed the random number generator',
        ),
    'sscanf' =>
        array (
            'file' => 'function.sscanf.php',
            'desc' => 'Parses input from a string according to a format',
        ),
    'ssdeep_fuzzy_compare' =>
        array (
            'file' => 'function.ssdeep-fuzzy-compare.php',
            'desc' => 'Calculates the match score between two fuzzy hash signatures',
        ),
    'ssdeep_fuzzy_hash' =>
        array (
            'file' => 'function.ssdeep-fuzzy-hash.php',
            'desc' => 'Create a fuzzy hash from a string',
        ),
    'ssdeep_fuzzy_hash_filename' =>
        array (
            'file' => 'function.ssdeep-fuzzy-hash-filename.php',
            'desc' => 'Create a fuzzy hash from a file',
        ),
    'ssh2://' =>
        array (
            'file' => 'wrappers.ssh2.php',
            'desc' => 'Secure Shell 2',
        ),
    'ssh2_auth_agent' =>
        array (
            'file' => 'function.ssh2-auth-agent.php',
            'desc' => 'Authenticate over SSH using the ssh agent',
        ),
    'ssh2_auth_hostbased_file' =>
        array (
            'file' => 'function.ssh2-auth-hostbased-file.php',
            'desc' => 'Authenticate using a public hostkey',
        ),
    'ssh2_auth_none' =>
        array (
            'file' => 'function.ssh2-auth-none.php',
            'desc' => 'Authenticate as &quot;none&quot;',
        ),
    'ssh2_auth_password' =>
        array (
            'file' => 'function.ssh2-auth-password.php',
            'desc' => 'Authenticate over SSH using a plain password',
        ),
    'ssh2_auth_pubkey_file' =>
        array (
            'file' => 'function.ssh2-auth-pubkey-file.php',
            'desc' => 'Authenticate using a public key',
        ),
    'ssh2_connect' =>
        array (
            'file' => 'function.ssh2-connect.php',
            'desc' => 'Connect to an SSH server',
        ),
    'ssh2_exec' =>
        array (
            'file' => 'function.ssh2-exec.php',
            'desc' => 'Execute a command on a remote server',
        ),
    'ssh2_fetch_stream' =>
        array (
            'file' => 'function.ssh2-fetch-stream.php',
            'desc' => 'Fetch an extended data stream',
        ),
    'ssh2_fingerprint' =>
        array (
            'file' => 'function.ssh2-fingerprint.php',
            'desc' => 'Retrieve fingerprint of remote server',
        ),
    'ssh2_methods_negotiated' =>
        array (
            'file' => 'function.ssh2-methods-negotiated.php',
            'desc' => 'Return list of negotiated methods',
        ),
    'ssh2_publickey_add' =>
        array (
            'file' => 'function.ssh2-publickey-add.php',
            'desc' => 'Add an authorized publickey',
        ),
    'ssh2_publickey_init' =>
        array (
            'file' => 'function.ssh2-publickey-init.php',
            'desc' => 'Initialize Publickey subsystem',
        ),
    'ssh2_publickey_list' =>
        array (
            'file' => 'function.ssh2-publickey-list.php',
            'desc' => 'List currently authorized publickeys',
        ),
    'ssh2_publickey_remove' =>
        array (
            'file' => 'function.ssh2-publickey-remove.php',
            'desc' => 'Remove an authorized publickey',
        ),
    'ssh2_scp_recv' =>
        array (
            'file' => 'function.ssh2-scp-recv.php',
            'desc' => 'Request a file via SCP',
        ),
    'ssh2_scp_send' =>
        array (
            'file' => 'function.ssh2-scp-send.php',
            'desc' => 'Send a file via SCP',
        ),
    'ssh2_sftp' =>
        array (
            'file' => 'function.ssh2-sftp.php',
            'desc' => 'Initialize SFTP subsystem',
        ),
    'ssh2_sftp_chmod' =>
        array (
            'file' => 'function.ssh2-sftp-chmod.php',
            'desc' => 'Changes file mode',
        ),
    'ssh2_sftp_lstat' =>
        array (
            'file' => 'function.ssh2-sftp-lstat.php',
            'desc' => 'Stat a symbolic link',
        ),
    'ssh2_sftp_mkdir' =>
        array (
            'file' => 'function.ssh2-sftp-mkdir.php',
            'desc' => 'Create a directory',
        ),
    'ssh2_sftp_readlink' =>
        array (
            'file' => 'function.ssh2-sftp-readlink.php',
            'desc' => 'Return the target of a symbolic link',
        ),
    'ssh2_sftp_realpath' =>
        array (
            'file' => 'function.ssh2-sftp-realpath.php',
            'desc' => 'Resolve the realpath of a provided path string',
        ),
    'ssh2_sftp_rename' =>
        array (
            'file' => 'function.ssh2-sftp-rename.php',
            'desc' => 'Rename a remote file',
        ),
    'ssh2_sftp_rmdir' =>
        array (
            'file' => 'function.ssh2-sftp-rmdir.php',
            'desc' => 'Remove a directory',
        ),
    'ssh2_sftp_stat' =>
        array (
            'file' => 'function.ssh2-sftp-stat.php',
            'desc' => 'Stat a file on a remote filesystem',
        ),
    'ssh2_sftp_symlink' =>
        array (
            'file' => 'function.ssh2-sftp-symlink.php',
            'desc' => 'Create a symlink',
        ),
    'ssh2_sftp_unlink' =>
        array (
            'file' => 'function.ssh2-sftp-unlink.php',
            'desc' => 'Delete a file',
        ),
    'ssh2_shell' =>
        array (
            'file' => 'function.ssh2-shell.php',
            'desc' => 'Request an interactive shell',
        ),
    'ssh2_tunnel' =>
        array (
            'file' => 'function.ssh2-tunnel.php',
            'desc' => 'Open a tunnel through a remote server',
        ),
    'SSL context options' =>
        array (
            'file' => 'context.ssl.php',
            'desc' => 'SSL context option listing',
        ),
    'stat' =>
        array (
            'file' => 'function.stat.php',
            'desc' => 'Gives information about a file',
        ),
    'stats_absolute_deviation' =>
        array (
            'file' => 'function.stats-absolute-deviation.php',
            'desc' => 'Returns the absolute deviation of an array of values',
        ),
    'stats_cdf_beta' =>
        array (
            'file' => 'function.stats-cdf-beta.php',
            'desc' => 'CDF function for BETA Distribution. Calculates any one parameter of the beta distribution given values for the others.',
        ),
    'stats_cdf_binomial' =>
        array (
            'file' => 'function.stats-cdf-binomial.php',
            'desc' => 'Calculates any one parameter of the binomial distribution given values for the others.',
        ),
    'stats_cdf_cauchy' =>
        array (
            'file' => 'function.stats-cdf-cauchy.php',
            'desc' => 'Not documented',
        ),
    'stats_cdf_chisquare' =>
        array (
            'file' => 'function.stats-cdf-chisquare.php',
            'desc' => 'Calculates any one parameter of the chi-square distribution given values for the others.',
        ),
    'stats_cdf_exponential' =>
        array (
            'file' => 'function.stats-cdf-exponential.php',
            'desc' => 'Not documented',
        ),
    'stats_cdf_f' =>
        array (
            'file' => 'function.stats-cdf-f.php',
            'desc' => 'Calculates any one parameter of the F distribution given values for the others.',
        ),
    'stats_cdf_gamma' =>
        array (
            'file' => 'function.stats-cdf-gamma.php',
            'desc' => 'Calculates any one parameter of the gamma distribution given values for the others.',
        ),
    'stats_cdf_laplace' =>
        array (
            'file' => 'function.stats-cdf-laplace.php',
            'desc' => 'Not documented',
        ),
    'stats_cdf_logistic' =>
        array (
            'file' => 'function.stats-cdf-logistic.php',
            'desc' => 'Not documented',
        ),
    'stats_cdf_negative_binomial' =>
        array (
            'file' => 'function.stats-cdf-negative-binomial.php',
            'desc' => 'Calculates any one parameter of the negative binomial distribution given values for the others.',
        ),
    'stats_cdf_noncentral_chisquare' =>
        array (
            'file' => 'function.stats-cdf-noncentral-chisquare.php',
            'desc' => 'Calculates any one parameter of the non-central chi-square distribution given values for the others.',
        ),
    'stats_cdf_noncentral_f' =>
        array (
            'file' => 'function.stats-cdf-noncentral-f.php',
            'desc' => 'Calculates any one parameter of the Non-central F distribution given values for the others.',
        ),
    'stats_cdf_poisson' =>
        array (
            'file' => 'function.stats-cdf-poisson.php',
            'desc' => 'Calculates any one parameter of the Poisson distribution given values for the others.',
        ),
    'stats_cdf_t' =>
        array (
            'file' => 'function.stats-cdf-t.php',
            'desc' => 'Calculates any one parameter of the T distribution given values for the others.',
        ),
    'stats_cdf_uniform' =>
        array (
            'file' => 'function.stats-cdf-uniform.php',
            'desc' => 'Not documented',
        ),
    'stats_cdf_weibull' =>
        array (
            'file' => 'function.stats-cdf-weibull.php',
            'desc' => 'Not documented',
        ),
    'stats_covariance' =>
        array (
            'file' => 'function.stats-covariance.php',
            'desc' => 'Computes the covariance of two data sets',
        ),
    'stats_dens_beta' =>
        array (
            'file' => 'function.stats-dens-beta.php',
            'desc' => 'Not documented',
        ),
    'stats_dens_cauchy' =>
        array (
            'file' => 'function.stats-dens-cauchy.php',
            'desc' => 'Not documented',
        ),
    'stats_dens_chisquare' =>
        array (
            'file' => 'function.stats-dens-chisquare.php',
            'desc' => 'Not documented',
        ),
    'stats_dens_exponential' =>
        array (
            'file' => 'function.stats-dens-exponential.php',
            'desc' => 'Not documented',
        ),
    'stats_dens_f' =>
        array (
            'file' => 'function.stats-dens-f.php',
        ),
    'stats_dens_gamma' =>
        array (
            'file' => 'function.stats-dens-gamma.php',
            'desc' => 'Not documented',
        ),
    'stats_dens_laplace' =>
        array (
            'file' => 'function.stats-dens-laplace.php',
            'desc' => 'Not documented',
        ),
    'stats_dens_logistic' =>
        array (
            'file' => 'function.stats-dens-logistic.php',
            'desc' => 'Not documented',
        ),
    'stats_dens_negative_binomial' =>
        array (
            'file' => 'function.stats-dens-negative-binomial.php',
            'desc' => 'Not documented',
        ),
    'stats_dens_normal' =>
        array (
            'file' => 'function.stats-dens-normal.php',
            'desc' => 'Not documented',
        ),
    'stats_dens_pmf_binomial' =>
        array (
            'file' => 'function.stats-dens-pmf-binomial.php',
            'desc' => 'Not documented',
        ),
    'stats_dens_pmf_hypergeometric' =>
        array (
            'file' => 'function.stats-dens-pmf-hypergeometric.php',
        ),
    'stats_dens_pmf_poisson' =>
        array (
            'file' => 'function.stats-dens-pmf-poisson.php',
            'desc' => 'Not documented',
        ),
    'stats_dens_t' =>
        array (
            'file' => 'function.stats-dens-t.php',
            'desc' => 'Not documented',
        ),
    'stats_dens_weibull' =>
        array (
            'file' => 'function.stats-dens-weibull.php',
            'desc' => 'Not documented',
        ),
    'stats_den_uniform' =>
        array (
            'file' => 'function.stats-den-uniform.php',
            'desc' => 'Not documented',
        ),
    'stats_harmonic_mean' =>
        array (
            'file' => 'function.stats-harmonic-mean.php',
            'desc' => 'Returns the harmonic mean of an array of values',
        ),
    'stats_kurtosis' =>
        array (
            'file' => 'function.stats-kurtosis.php',
            'desc' => 'Computes the kurtosis of the data in the array',
        ),
    'stats_rand_gen_beta' =>
        array (
            'file' => 'function.stats-rand-gen-beta.php',
            'desc' => 'Generates beta random deviate',
        ),
    'stats_rand_gen_chisquare' =>
        array (
            'file' => 'function.stats-rand-gen-chisquare.php',
            'desc' => 'Generates random deviate from the distribution of a chisquare with &quot;df&quot; degrees of freedom random variable.',
        ),
    'stats_rand_gen_exponential' =>
        array (
            'file' => 'function.stats-rand-gen-exponential.php',
            'desc' => 'Generates a single random deviate from an exponential distribution with mean &quot;av&quot;',
        ),
    'stats_rand_gen_f' =>
        array (
            'file' => 'function.stats-rand-gen-f.php',
            'desc' => 'Generates a random deviate',
        ),
    'stats_rand_gen_funiform' =>
        array (
            'file' => 'function.stats-rand-gen-funiform.php',
            'desc' => 'Generates uniform float between low (exclusive) and high (exclusive)',
        ),
    'stats_rand_gen_gamma' =>
        array (
            'file' => 'function.stats-rand-gen-gamma.php',
            'desc' => 'Generates random deviates from a gamma distribution',
        ),
    'stats_rand_gen_ibinomial' =>
        array (
            'file' => 'function.stats-rand-gen-ibinomial.php',
            'desc' => 'Generates a single random deviate from a binomial distribution whose number of trials is &quot;n&quot; (n &gt;= 0) and whose probability of an event in each trial is &quot;pp&quot; ([0;1]). Method : algorithm BTPE',
        ),
    'stats_rand_gen_ibinomial_negative' =>
        array (
            'file' => 'function.stats-rand-gen-ibinomial-negative.php',
            'desc' => 'Generates a single random deviate from a negative binomial distribution. Arguments : n - the number of trials in the negative binomial distribution from which a random deviate is to be generated (n &gt; 0), p - the probability of an event (0 &lt; p &lt; 1)).',
        ),
    'stats_rand_gen_int' =>
        array (
            'file' => 'function.stats-rand-gen-int.php',
            'desc' => 'Generates random integer between 1 and 2147483562',
        ),
    'stats_rand_gen_ipoisson' =>
        array (
            'file' => 'function.stats-rand-gen-ipoisson.php',
            'desc' => 'Generates a single random deviate from a Poisson distribution with mean &quot;mu&quot; (mu &gt;= 0.0).',
        ),
    'stats_rand_gen_iuniform' =>
        array (
            'file' => 'function.stats-rand-gen-iuniform.php',
            'desc' => 'Generates integer uniformly distributed between LOW (inclusive) and HIGH (inclusive)',
        ),
    'stats_rand_gen_noncenral_chisquare' =>
        array (
            'file' => 'function.stats-rand-gen-noncenral-chisquare.php',
            'desc' => 'Generates random deviate from the distribution of a noncentral chisquare with &quot;df&quot; degrees of freedom and noncentrality parameter &quot;xnonc&quot;. d must be &gt;= 1.0, xnonc must &gt;= 0.0',
        ),
    'stats_rand_gen_noncentral_f' =>
        array (
            'file' => 'function.stats-rand-gen-noncentral-f.php',
            'desc' => 'Generates a random deviate from the noncentral F (variance ratio) distribution with &quot;dfn&quot; degrees of freedom in the numerator, and &quot;dfd&quot; degrees of freedom in the denominator, and noncentrality parameter &quot;xnonc&quot;. Method : directly generates ratio of noncentral numerator chisquare variate to central denominator chisquare variate.',
        ),
    'stats_rand_gen_noncentral_t' =>
        array (
            'file' => 'function.stats-rand-gen-noncentral-t.php',
            'desc' => 'Generates a single random deviate from a noncentral T distribution',
        ),
    'stats_rand_gen_normal' =>
        array (
            'file' => 'function.stats-rand-gen-normal.php',
            'desc' => 'Generates a single random deviate from a normal distribution with mean, av, and standard deviation, sd (sd &gt;= 0). Method : Renames SNORM from TOMS as slightly modified by BWB to use RANF instead of SUNIF.',
        ),
    'stats_rand_gen_t' =>
        array (
            'file' => 'function.stats-rand-gen-t.php',
            'desc' => 'Generates a single random deviate from a T distribution',
        ),
    'stats_rand_get_seeds' =>
        array (
            'file' => 'function.stats-rand-get-seeds.php',
            'desc' => 'Not documented',
        ),
    'stats_rand_phrase_to_seeds' =>
        array (
            'file' => 'function.stats-rand-phrase-to-seeds.php',
            'desc' => 'generate two seeds for the RGN random number generator',
        ),
    'stats_rand_ranf' =>
        array (
            'file' => 'function.stats-rand-ranf.php',
            'desc' => 'Returns a random floating point number from a uniform distribution over 0 - 1 (endpoints of this interval are not returned) using the current generator',
        ),
    'stats_rand_setall' =>
        array (
            'file' => 'function.stats-rand-setall.php',
            'desc' => 'Not documented',
        ),
    'stats_skew' =>
        array (
            'file' => 'function.stats-skew.php',
            'desc' => 'Computes the skewness of the data in the array',
        ),
    'stats_standard_deviation' =>
        array (
            'file' => 'function.stats-standard-deviation.php',
            'desc' => 'Returns the standard deviation',
        ),
    'stats_stat_binomial_coef' =>
        array (
            'file' => 'function.stats-stat-binomial-coef.php',
            'desc' => 'Not documented',
        ),
    'stats_stat_correlation' =>
        array (
            'file' => 'function.stats-stat-correlation.php',
            'desc' => 'Not documented',
        ),
    'stats_stat_gennch' =>
        array (
            'file' => 'function.stats-stat-gennch.php',
            'desc' => 'Not documented',
        ),
    'stats_stat_independent_t' =>
        array (
            'file' => 'function.stats-stat-independent-t.php',
            'desc' => 'Not documented',
        ),
    'stats_stat_innerproduct' =>
        array (
            'file' => 'function.stats-stat-innerproduct.php',
        ),
    'stats_stat_noncentral_t' =>
        array (
            'file' => 'function.stats-stat-noncentral-t.php',
            'desc' => 'Calculates any one parameter of the noncentral t distribution give values for the others.',
        ),
    'stats_stat_paired_t' =>
        array (
            'file' => 'function.stats-stat-paired-t.php',
            'desc' => 'Not documented',
        ),
    'stats_stat_percentile' =>
        array (
            'file' => 'function.stats-stat-percentile.php',
            'desc' => 'Not documented',
        ),
    'stats_stat_powersum' =>
        array (
            'file' => 'function.stats-stat-powersum.php',
            'desc' => 'Not documented',
        ),
    'stats_variance' =>
        array (
            'file' => 'function.stats-variance.php',
            'desc' => 'Returns the population variance',
        ),
    'Stomp::abort' =>
        array (
            'file' => 'stomp.abort.php',
            'desc' => 'Rolls back a transaction in progress',
        ),
    'Stomp::ack' =>
        array (
            'file' => 'stomp.ack.php',
            'desc' => 'Acknowledges consumption of a message',
        ),
    'Stomp::begin' =>
        array (
            'file' => 'stomp.begin.php',
            'desc' => 'Starts a transaction',
        ),
    'Stomp::commit' =>
        array (
            'file' => 'stomp.commit.php',
            'desc' => 'Commits a transaction in progress',
        ),
    'Stomp::error' =>
        array (
            'file' => 'stomp.error.php',
            'desc' => 'Gets the last stomp error',
        ),
    'Stomp::getReadTimeout' =>
        array (
            'file' => 'stomp.getreadtimeout.php',
            'desc' => 'Gets read timeout',
        ),
    'Stomp::getSessionId' =>
        array (
            'file' => 'stomp.getsessionid.php',
            'desc' => 'Gets the current stomp session ID',
        ),
    'Stomp::hasFrame' =>
        array (
            'file' => 'stomp.hasframe.php',
            'desc' => 'Indicates whether or not there is a frame ready to read',
        ),
    'Stomp::readFrame' =>
        array (
            'file' => 'stomp.readframe.php',
            'desc' => 'Reads the next frame',
        ),
    'Stomp::send' =>
        array (
            'file' => 'stomp.send.php',
            'desc' => 'Sends a message',
        ),
    'Stomp::setReadTimeout' =>
        array (
            'file' => 'stomp.setreadtimeout.php',
            'desc' => 'Sets read timeout',
        ),
    'Stomp::subscribe' =>
        array (
            'file' => 'stomp.subscribe.php',
            'desc' => 'Registers to listen to a given destination',
        ),
    'Stomp::unsubscribe' =>
        array (
            'file' => 'stomp.unsubscribe.php',
            'desc' => 'Removes an existing subscription',
        ),
    'Stomp::__construct' =>
        array (
            'file' => 'stomp.construct.php',
            'desc' => 'Opens a connection',
        ),
    'Stomp::__destruct' =>
        array (
            'file' => 'stomp.destruct.php',
            'desc' => 'Closes stomp connection',
        ),
    'StompException::getDetails' =>
        array (
            'file' => 'stomp.getdetails.php',
            'desc' => 'Get exception details',
        ),
    'StompFrame::__construct' =>
        array (
            'file' => 'stompframe.construct.php',
            'desc' => 'Constructor',
        ),
    'stomp_connect_error' =>
        array (
            'file' => 'function.stomp-connect-error.php',
            'desc' => 'Returns a string description of the last connect error',
        ),
    'stomp_version' =>
        array (
            'file' => 'function.stomp-version.php',
            'desc' => 'Gets the current stomp extension version',
        ),
    'strcasecmp' =>
        array (
            'file' => 'function.strcasecmp.php',
            'desc' => 'Binary safe case-insensitive string comparison',
        ),
    'strchr' =>
        array (
            'file' => 'function.strchr.php',
            'desc' => 'Alias of strstr',
        ),
    'strcmp' =>
        array (
            'file' => 'function.strcmp.php',
            'desc' => 'Binary safe string comparison',
        ),
    'strcoll' =>
        array (
            'file' => 'function.strcoll.php',
            'desc' => 'Locale based string comparison',
        ),
    'strcspn' =>
        array (
            'file' => 'function.strcspn.php',
            'desc' => 'Find length of initial segment not matching mask',
        ),
    'streamWrapper::dir_closedir' =>
        array (
            'file' => 'streamwrapper.dir-closedir.php',
            'desc' => 'Close directory handle',
        ),
    'streamWrapper::dir_opendir' =>
        array (
            'file' => 'streamwrapper.dir-opendir.php',
            'desc' => 'Open directory handle',
        ),
    'streamWrapper::dir_readdir' =>
        array (
            'file' => 'streamwrapper.dir-readdir.php',
            'desc' => 'Read entry from directory handle',
        ),
    'streamWrapper::dir_rewinddir' =>
        array (
            'file' => 'streamwrapper.dir-rewinddir.php',
            'desc' => 'Rewind directory handle',
        ),
    'streamWrapper::mkdir' =>
        array (
            'file' => 'streamwrapper.mkdir.php',
            'desc' => 'Create a directory',
        ),
    'streamWrapper::rename' =>
        array (
            'file' => 'streamwrapper.rename.php',
            'desc' => 'Renames a file or directory',
        ),
    'streamWrapper::rmdir' =>
        array (
            'file' => 'streamwrapper.rmdir.php',
            'desc' => 'Removes a directory',
        ),
    'streamWrapper::stream_cast' =>
        array (
            'file' => 'streamwrapper.stream-cast.php',
            'desc' => 'Retrieve the underlaying resource',
        ),
    'streamWrapper::stream_close' =>
        array (
            'file' => 'streamwrapper.stream-close.php',
            'desc' => 'Close an resource',
        ),
    'streamWrapper::stream_eof' =>
        array (
            'file' => 'streamwrapper.stream-eof.php',
            'desc' => 'Tests for end-of-file on a file pointer',
        ),
    'streamWrapper::stream_flush' =>
        array (
            'file' => 'streamwrapper.stream-flush.php',
            'desc' => 'Flushes the output',
        ),
    'streamWrapper::stream_lock' =>
        array (
            'file' => 'streamwrapper.stream-lock.php',
            'desc' => 'Advisory file locking',
        ),
    'streamWrapper::stream_metadata' =>
        array (
            'file' => 'streamwrapper.stream-metadata.php',
            'desc' => 'Change stream options',
        ),
    'streamWrapper::stream_open' =>
        array (
            'file' => 'streamwrapper.stream-open.php',
            'desc' => 'Opens file or URL',
        ),
    'streamWrapper::stream_read' =>
        array (
            'file' => 'streamwrapper.stream-read.php',
            'desc' => 'Read from stream',
        ),
    'streamWrapper::stream_seek' =>
        array (
            'file' => 'streamwrapper.stream-seek.php',
            'desc' => 'Seeks to specific location in a stream',
        ),
    'streamWrapper::stream_set_option' =>
        array (
            'file' => 'streamwrapper.stream-set-option.php',
            'desc' => 'Change stream options',
        ),
    'streamWrapper::stream_stat' =>
        array (
            'file' => 'streamwrapper.stream-stat.php',
            'desc' => 'Retrieve information about a file resource',
        ),
    'streamWrapper::stream_tell' =>
        array (
            'file' => 'streamwrapper.stream-tell.php',
            'desc' => 'Retrieve the current position of a stream',
        ),
    'streamWrapper::stream_truncate' =>
        array (
            'file' => 'streamwrapper.stream-truncate.php',
            'desc' => 'Truncate stream',
        ),
    'streamWrapper::stream_write' =>
        array (
            'file' => 'streamwrapper.stream-write.php',
            'desc' => 'Write to stream',
        ),
    'streamWrapper::unlink' =>
        array (
            'file' => 'streamwrapper.unlink.php',
            'desc' => 'Delete a file',
        ),
    'streamWrapper::url_stat' =>
        array (
            'file' => 'streamwrapper.url-stat.php',
            'desc' => 'Retrieve information about a file',
        ),
    'streamWrapper::__construct' =>
        array (
            'file' => 'streamwrapper.construct.php',
            'desc' => 'Constructs a new stream wrapper',
        ),
    'streamWrapper::__destruct' =>
        array (
            'file' => 'streamwrapper.destruct.php',
            'desc' => 'Destructs an existing stream wrapper',
        ),
    'stream_bucket_append' =>
        array (
            'file' => 'function.stream-bucket-append.php',
            'desc' => 'Append bucket to brigade',
        ),
    'stream_bucket_make_writeable' =>
        array (
            'file' => 'function.stream-bucket-make-writeable.php',
            'desc' => 'Return a bucket object from the brigade for operating on',
        ),
    'stream_bucket_new' =>
        array (
            'file' => 'function.stream-bucket-new.php',
            'desc' => 'Create a new bucket for use on the current stream',
        ),
    'stream_bucket_prepend' =>
        array (
            'file' => 'function.stream-bucket-prepend.php',
            'desc' => 'Prepend bucket to brigade',
        ),
    'stream_context_create' =>
        array (
            'file' => 'function.stream-context-create.php',
            'desc' => 'Creates a stream context',
        ),
    'stream_context_get_default' =>
        array (
            'file' => 'function.stream-context-get-default.php',
            'desc' => 'Retrieve the default stream context',
        ),
    'stream_context_get_options' =>
        array (
            'file' => 'function.stream-context-get-options.php',
            'desc' => 'Retrieve options for a stream/wrapper/context',
        ),
    'stream_context_get_params' =>
        array (
            'file' => 'function.stream-context-get-params.php',
            'desc' => 'Retrieves parameters from a context',
        ),
    'stream_context_set_default' =>
        array (
            'file' => 'function.stream-context-set-default.php',
            'desc' => 'Set the default stream context',
        ),
    'stream_context_set_option' =>
        array (
            'file' => 'function.stream-context-set-option.php',
            'desc' => 'Sets an option for a stream/wrapper/context',
        ),
    'stream_context_set_params' =>
        array (
            'file' => 'function.stream-context-set-params.php',
            'desc' => 'Set parameters for a stream/wrapper/context',
        ),
    'stream_copy_to_stream' =>
        array (
            'file' => 'function.stream-copy-to-stream.php',
            'desc' => 'Copies data from one stream to another',
        ),
    'stream_encoding' =>
        array (
            'file' => 'function.stream-encoding.php',
            'desc' => 'Set character set for stream encoding',
        ),
    'stream_filter_append' =>
        array (
            'file' => 'function.stream-filter-append.php',
            'desc' => 'Attach a filter to a stream',
        ),
    'stream_filter_prepend' =>
        array (
            'file' => 'function.stream-filter-prepend.php',
            'desc' => 'Attach a filter to a stream',
        ),
    'stream_filter_register' =>
        array (
            'file' => 'function.stream-filter-register.php',
            'desc' => 'Register a user defined stream filter',
        ),
    'stream_filter_remove' =>
        array (
            'file' => 'function.stream-filter-remove.php',
            'desc' => 'Remove a filter from a stream',
        ),
    'stream_get_contents' =>
        array (
            'file' => 'function.stream-get-contents.php',
            'desc' => 'Reads remainder of a stream into a string',
        ),
    'stream_get_filters' =>
        array (
            'file' => 'function.stream-get-filters.php',
            'desc' => 'Retrieve list of registered filters',
        ),
    'stream_get_line' =>
        array (
            'file' => 'function.stream-get-line.php',
            'desc' => 'Gets line from stream resource up to a given delimiter',
        ),
    'stream_get_meta_data' =>
        array (
            'file' => 'function.stream-get-meta-data.php',
            'desc' => 'Retrieves header/meta data from streams/file pointers',
        ),
    'stream_get_transports' =>
        array (
            'file' => 'function.stream-get-transports.php',
            'desc' => 'Retrieve list of registered socket transports',
        ),
    'stream_get_wrappers' =>
        array (
            'file' => 'function.stream-get-wrappers.php',
            'desc' => 'Retrieve list of registered streams',
        ),
    'stream_is_local' =>
        array (
            'file' => 'function.stream-is-local.php',
            'desc' => 'Checks if a stream is a local stream',
        ),
    'stream_notification_callback' =>
        array (
            'file' => 'function.stream-notification-callback.php',
            'desc' => 'A callback function for the notification context parameter',
        ),
    'stream_register_wrapper' =>
        array (
            'file' => 'function.stream-register-wrapper.php',
            'desc' => 'Alias of stream_wrapper_register',
        ),
    'stream_resolve_include_path' =>
        array (
            'file' => 'function.stream-resolve-include-path.php',
            'desc' => 'Resolve filename against the include path',
        ),
    'stream_select' =>
        array (
            'file' => 'function.stream-select.php',
            'desc' => 'Runs the equivalent of the select() system call on the given
   arrays of streams with a timeout specified by tv_sec and tv_usec',
        ),
    'stream_set_blocking' =>
        array (
            'file' => 'function.stream-set-blocking.php',
            'desc' => 'Set blocking/non-blocking mode on a stream',
        ),
    'stream_set_chunk_size' =>
        array (
            'file' => 'function.stream-set-chunk-size.php',
            'desc' => 'Set the stream chunk size',
        ),
    'stream_set_read_buffer' =>
        array (
            'file' => 'function.stream-set-read-buffer.php',
            'desc' => 'Set read file buffering on the given stream',
        ),
    'stream_set_timeout' =>
        array (
            'file' => 'function.stream-set-timeout.php',
            'desc' => 'Set timeout period on a stream',
        ),
    'stream_set_write_buffer' =>
        array (
            'file' => 'function.stream-set-write-buffer.php',
            'desc' => 'Sets write file buffering on the given stream',
        ),
    'stream_socket_accept' =>
        array (
            'file' => 'function.stream-socket-accept.php',
            'desc' => 'Accept a connection on a socket created by stream_socket_server',
        ),
    'stream_socket_client' =>
        array (
            'file' => 'function.stream-socket-client.php',
            'desc' => 'Open Internet or Unix domain socket connection',
        ),
    'stream_socket_enable_crypto' =>
        array (
            'file' => 'function.stream-socket-enable-crypto.php',
            'desc' => 'Turns encryption on/off on an already connected socket',
        ),
    'stream_socket_get_name' =>
        array (
            'file' => 'function.stream-socket-get-name.php',
            'desc' => 'Retrieve the name of the local or remote sockets',
        ),
    'stream_socket_pair' =>
        array (
            'file' => 'function.stream-socket-pair.php',
            'desc' => 'Creates a pair of connected, indistinguishable socket streams',
        ),
    'stream_socket_recvfrom' =>
        array (
            'file' => 'function.stream-socket-recvfrom.php',
            'desc' => 'Receives data from a socket, connected or not',
        ),
    'stream_socket_sendto' =>
        array (
            'file' => 'function.stream-socket-sendto.php',
            'desc' => 'Sends a message to a socket, whether it is connected or not',
        ),
    'stream_socket_server' =>
        array (
            'file' => 'function.stream-socket-server.php',
            'desc' => 'Create an Internet or Unix domain server socket',
        ),
    'stream_socket_shutdown' =>
        array (
            'file' => 'function.stream-socket-shutdown.php',
            'desc' => 'Shutdown a full-duplex connection',
        ),
    'stream_supports_lock' =>
        array (
            'file' => 'function.stream-supports-lock.php',
            'desc' => 'Tells whether the stream supports locking.',
        ),
    'stream_wrapper_register' =>
        array (
            'file' => 'function.stream-wrapper-register.php',
            'desc' => 'Register a URL wrapper implemented as a PHP class',
        ),
    'stream_wrapper_restore' =>
        array (
            'file' => 'function.stream-wrapper-restore.php',
            'desc' => 'Restores a previously unregistered built-in wrapper',
        ),
    'stream_wrapper_unregister' =>
        array (
            'file' => 'function.stream-wrapper-unregister.php',
            'desc' => 'Unregister a URL wrapper',
        ),
    'strftime' =>
        array (
            'file' => 'function.strftime.php',
            'desc' => 'Format a local time/date according to locale settings',
        ),
    'stripcslashes' =>
        array (
            'file' => 'function.stripcslashes.php',
            'desc' => 'Un-quote string quoted with addcslashes',
        ),
    'stripos' =>
        array (
            'file' => 'function.stripos.php',
            'desc' => 'Find the position of the first occurrence of a case-insensitive substring in a string',
        ),
    'stripslashes' =>
        array (
            'file' => 'function.stripslashes.php',
            'desc' => 'Un-quotes a quoted string',
        ),
    'strip_tags' =>
        array (
            'file' => 'function.strip-tags.php',
            'desc' => 'Strip HTML and PHP tags from a string',
        ),
    'stristr' =>
        array (
            'file' => 'function.stristr.php',
            'desc' => 'Case-insensitive strstr',
        ),
    'strlen' =>
        array (
            'file' => 'function.strlen.php',
            'desc' => 'Get string length',
        ),
    'strnatcasecmp' =>
        array (
            'file' => 'function.strnatcasecmp.php',
            'desc' => 'Case insensitive string comparisons using a &quot;natural order&quot; algorithm',
        ),
    'strnatcmp' =>
        array (
            'file' => 'function.strnatcmp.php',
            'desc' => 'String comparisons using a &quot;natural order&quot; algorithm',
        ),
    'strncasecmp' =>
        array (
            'file' => 'function.strncasecmp.php',
            'desc' => 'Binary safe case-insensitive string comparison of the first n characters',
        ),
    'strncmp' =>
        array (
            'file' => 'function.strncmp.php',
            'desc' => 'Binary safe string comparison of the first n characters',
        ),
    'strpbrk' =>
        array (
            'file' => 'function.strpbrk.php',
            'desc' => 'Search a string for any of a set of characters',
        ),
    'strpos' =>
        array (
            'file' => 'function.strpos.php',
            'desc' => 'Find the position of the first occurrence of a substring in a string',
        ),
    'strptime' =>
        array (
            'file' => 'function.strptime.php',
            'desc' => 'Parse a time/date generated with strftime',
        ),
    'strrchr' =>
        array (
            'file' => 'function.strrchr.php',
            'desc' => 'Find the last occurrence of a character in a string',
        ),
    'strrev' =>
        array (
            'file' => 'function.strrev.php',
            'desc' => 'Reverse a string',
        ),
    'strripos' =>
        array (
            'file' => 'function.strripos.php',
            'desc' => 'Find the position of the last occurrence of a case-insensitive substring in a string',
        ),
    'strrpos' =>
        array (
            'file' => 'function.strrpos.php',
            'desc' => 'Find the position of the last occurrence of a substring in a string',
        ),
    'strspn' =>
        array (
            'file' => 'function.strspn.php',
            'desc' => 'Finds the length of the initial segment of a string consisting
   entirely of characters contained within a given mask.',
        ),
    'strstr' =>
        array (
            'file' => 'function.strstr.php',
            'desc' => 'Find the first occurrence of a string',
        ),
    'strtok' =>
        array (
            'file' => 'function.strtok.php',
            'desc' => 'Tokenize string',
        ),
    'strtolower' =>
        array (
            'file' => 'function.strtolower.php',
            'desc' => 'Make a string lowercase',
        ),
    'strtotime' =>
        array (
            'file' => 'function.strtotime.php',
            'desc' => 'Parse about any English textual datetime description into a Unix timestamp',
        ),
    'strtoupper' =>
        array (
            'file' => 'function.strtoupper.php',
            'desc' => 'Make a string uppercase',
        ),
    'strtr' =>
        array (
            'file' => 'function.strtr.php',
            'desc' => 'Translate characters or replace substrings',
        ),
    'strval' =>
        array (
            'file' => 'function.strval.php',
            'desc' => 'Get string value of a variable',
        ),
    'str_getcsv' =>
        array (
            'file' => 'function.str-getcsv.php',
            'desc' => 'Parse a CSV string into an array',
        ),
    'str_ireplace' =>
        array (
            'file' => 'function.str-ireplace.php',
            'desc' => 'Case-insensitive version of str_replace.',
        ),
    'str_pad' =>
        array (
            'file' => 'function.str-pad.php',
            'desc' => 'Pad a string to a certain length with another string',
        ),
    'str_repeat' =>
        array (
            'file' => 'function.str-repeat.php',
            'desc' => 'Repeat a string',
        ),
    'str_replace' =>
        array (
            'file' => 'function.str-replace.php',
            'desc' => 'Replace all occurrences of the search string with the replacement string',
        ),
    'str_rot13' =>
        array (
            'file' => 'function.str-rot13.php',
            'desc' => 'Perform the rot13 transform on a string',
        ),
    'str_shuffle' =>
        array (
            'file' => 'function.str-shuffle.php',
            'desc' => 'Randomly shuffles a string',
        ),
    'str_split' =>
        array (
            'file' => 'function.str-split.php',
            'desc' => 'Convert a string to an array',
        ),
    'str_word_count' =>
        array (
            'file' => 'function.str-word-count.php',
            'desc' => 'Return information about words used in a string',
        ),
    'substr' =>
        array (
            'file' => 'function.substr.php',
            'desc' => 'Return part of a string',
        ),
    'substr_compare' =>
        array (
            'file' => 'function.substr-compare.php',
            'desc' => 'Binary safe comparison of two strings from an offset, up to length characters',
        ),
    'substr_count' =>
        array (
            'file' => 'function.substr-count.php',
            'desc' => 'Count the number of substring occurrences',
        ),
    'substr_replace' =>
        array (
            'file' => 'function.substr-replace.php',
            'desc' => 'Replace text within a portion of a string',
        ),
    'SVM::crossvalidate' =>
        array (
            'file' => 'svm.crossvalidate.php',
            'desc' => 'Test training params on subsets of the training data.',
        ),
    'SVM::getOptions' =>
        array (
            'file' => 'svm.getoptions.php',
            'desc' => 'Return the current training parameters',
        ),
    'SVM::setOptions' =>
        array (
            'file' => 'svm.setoptions.php',
            'desc' => 'Set training parameters',
        ),
    'SVM::train' =>
        array (
            'file' => 'svm.train.php',
            'desc' => 'Create a SVMModel based on training data',
        ),
    'SVM::__construct' =>
        array (
            'file' => 'svm.construct.php',
            'desc' => 'Construct a new SVM object',
        ),
    'SVMModel::checkProbabilityModel' =>
        array (
            'file' => 'svmmodel.checkprobabilitymodel.php',
            'desc' => 'Returns true if the model has probability information',
        ),
    'SVMModel::getLabels' =>
        array (
            'file' => 'svmmodel.getlabels.php',
            'desc' => 'Get the labels the model was trained on',
        ),
    'SVMModel::getNrClass' =>
        array (
            'file' => 'svmmodel.getnrclass.php',
            'desc' => 'Returns the number of classes the model was trained with',
        ),
    'SVMModel::getSvmType' =>
        array (
            'file' => 'svmmodel.getsvmtype.php',
            'desc' => 'Get the SVM type the model was trained with',
        ),
    'SVMModel::getSvrProbability' =>
        array (
            'file' => 'svmmodel.getsvrprobability.php',
            'desc' => 'Get the sigma value for regression types',
        ),
    'SVMModel::load' =>
        array (
            'file' => 'svmmodel.load.php',
            'desc' => 'Load a saved SVM Model',
        ),
    'SVMModel::predict' =>
        array (
            'file' => 'svmmodel.predict.php',
            'desc' => 'Predict a value for previously unseen data',
        ),
    'SVMModel::predict_probability' =>
        array (
            'file' => 'svmmodel.predict-probability.php',
            'desc' => 'Return class probabilities for previous unseen data',
        ),
    'SVMModel::save' =>
        array (
            'file' => 'svmmodel.save.php',
            'desc' => 'Save a model to a file',
        ),
    'SVMModel::__construct' =>
        array (
            'file' => 'svmmodel.construct.php',
            'desc' => 'Construct a new SVMModel',
        ),
    'svn_add' =>
        array (
            'file' => 'function.svn-add.php',
            'desc' => 'Schedules the addition of an item in a working directory',
        ),
    'svn_auth_get_parameter' =>
        array (
            'file' => 'function.svn-auth-get-parameter.php',
            'desc' => 'Retrieves authentication parameter',
        ),
    'svn_auth_set_parameter' =>
        array (
            'file' => 'function.svn-auth-set-parameter.php',
            'desc' => 'Sets an authentication parameter',
        ),
    'svn_blame' =>
        array (
            'file' => 'function.svn-blame.php',
            'desc' => 'Get the SVN blame for a file',
        ),
    'svn_cat' =>
        array (
            'file' => 'function.svn-cat.php',
            'desc' => 'Returns the contents of a file in a repository',
        ),
    'svn_checkout' =>
        array (
            'file' => 'function.svn-checkout.php',
            'desc' => 'Checks out a working copy from the repository',
        ),
    'svn_cleanup' =>
        array (
            'file' => 'function.svn-cleanup.php',
            'desc' => 'Recursively cleanup a working copy directory, finishing incomplete operations and removing locks',
        ),
    'svn_client_version' =>
        array (
            'file' => 'function.svn-client-version.php',
            'desc' => 'Returns the version of the SVN client libraries',
        ),
    'svn_commit' =>
        array (
            'file' => 'function.svn-commit.php',
            'desc' => 'Sends changes from the local working copy to the repository',
        ),
    'svn_delete' =>
        array (
            'file' => 'function.svn-delete.php',
            'desc' => 'Delete items from a working copy or repository.',
        ),
    'svn_diff' =>
        array (
            'file' => 'function.svn-diff.php',
            'desc' => 'Recursively diffs two paths',
        ),
    'svn_export' =>
        array (
            'file' => 'function.svn-export.php',
            'desc' => 'Export the contents of a SVN directory',
        ),
    'svn_fs_abort_txn' =>
        array (
            'file' => 'function.svn-fs-abort-txn.php',
            'desc' => 'Abort a transaction, returns true if everything is okay, false otherwise',
        ),
    'svn_fs_apply_text' =>
        array (
            'file' => 'function.svn-fs-apply-text.php',
            'desc' => 'Creates and returns a stream that will be used to replace',
        ),
    'svn_fs_begin_txn2' =>
        array (
            'file' => 'function.svn-fs-begin-txn2.php',
            'desc' => 'Create a new transaction',
        ),
    'svn_fs_change_node_prop' =>
        array (
            'file' => 'function.svn-fs-change-node-prop.php',
            'desc' => 'Return true if everything is ok, false otherwise',
        ),
    'svn_fs_check_path' =>
        array (
            'file' => 'function.svn-fs-check-path.php',
            'desc' => 'Determines what kind of item lives at path in a given repository fsroot',
        ),
    'svn_fs_contents_changed' =>
        array (
            'file' => 'function.svn-fs-contents-changed.php',
            'desc' => 'Return true if content is different, false otherwise',
        ),
    'svn_fs_copy' =>
        array (
            'file' => 'function.svn-fs-copy.php',
            'desc' => 'Copies a file or a directory, returns true if all is ok, false otherwise',
        ),
    'svn_fs_delete' =>
        array (
            'file' => 'function.svn-fs-delete.php',
            'desc' => 'Deletes a file or a directory, return true if all is ok, false otherwise',
        ),
    'svn_fs_dir_entries' =>
        array (
            'file' => 'function.svn-fs-dir-entries.php',
            'desc' => 'Enumerates the directory entries under path; returns a hash of dir names to file type',
        ),
    'svn_fs_file_contents' =>
        array (
            'file' => 'function.svn-fs-file-contents.php',
            'desc' => 'Returns a stream to access the contents of a file from a given version of the fs',
        ),
    'svn_fs_file_length' =>
        array (
            'file' => 'function.svn-fs-file-length.php',
            'desc' => 'Returns the length of a file from a given version of the fs',
        ),
    'svn_fs_is_dir' =>
        array (
            'file' => 'function.svn-fs-is-dir.php',
            'desc' => 'Return true if the path points to a directory, false otherwise',
        ),
    'svn_fs_is_file' =>
        array (
            'file' => 'function.svn-fs-is-file.php',
            'desc' => 'Return true if the path points to a file, false otherwise',
        ),
    'svn_fs_make_dir' =>
        array (
            'file' => 'function.svn-fs-make-dir.php',
            'desc' => 'Creates a new empty directory, returns true if all is ok, false otherwise',
        ),
    'svn_fs_make_file' =>
        array (
            'file' => 'function.svn-fs-make-file.php',
            'desc' => 'Creates a new empty file, returns true if all is ok, false otherwise',
        ),
    'svn_fs_node_created_rev' =>
        array (
            'file' => 'function.svn-fs-node-created-rev.php',
            'desc' => 'Returns the revision in which path under fsroot was created',
        ),
    'svn_fs_node_prop' =>
        array (
            'file' => 'function.svn-fs-node-prop.php',
            'desc' => 'Returns the value of a property for a node',
        ),
    'svn_fs_props_changed' =>
        array (
            'file' => 'function.svn-fs-props-changed.php',
            'desc' => 'Return true if props are different, false otherwise',
        ),
    'svn_fs_revision_prop' =>
        array (
            'file' => 'function.svn-fs-revision-prop.php',
            'desc' => 'Fetches the value of a named property',
        ),
    'svn_fs_revision_root' =>
        array (
            'file' => 'function.svn-fs-revision-root.php',
            'desc' => 'Get a handle on a specific version of the repository root',
        ),
    'svn_fs_txn_root' =>
        array (
            'file' => 'function.svn-fs-txn-root.php',
            'desc' => 'Creates and returns a transaction root',
        ),
    'svn_fs_youngest_rev' =>
        array (
            'file' => 'function.svn-fs-youngest-rev.php',
            'desc' => 'Returns the number of the youngest revision in the filesystem',
        ),
    'svn_import' =>
        array (
            'file' => 'function.svn-import.php',
            'desc' => 'Imports an unversioned path into a repository',
        ),
    'svn_log' =>
        array (
            'file' => 'function.svn-log.php',
            'desc' => 'Returns the commit log messages of a repository URL',
        ),
    'svn_ls' =>
        array (
            'file' => 'function.svn-ls.php',
            'desc' => 'Returns list of directory contents in repository URL, optionally at revision number',
        ),
    'svn_mkdir' =>
        array (
            'file' => 'function.svn-mkdir.php',
            'desc' => 'Creates a directory in a working copy or repository',
        ),
    'svn_repos_create' =>
        array (
            'file' => 'function.svn-repos-create.php',
            'desc' => 'Create a new subversion repository at path',
        ),
    'svn_repos_fs' =>
        array (
            'file' => 'function.svn-repos-fs.php',
            'desc' => 'Gets a handle on the filesystem for a repository',
        ),
    'svn_repos_fs_begin_txn_for_commit' =>
        array (
            'file' => 'function.svn-repos-fs-begin-txn-for-commit.php',
            'desc' => 'Create a new transaction',
        ),
    'svn_repos_fs_commit_txn' =>
        array (
            'file' => 'function.svn-repos-fs-commit-txn.php',
            'desc' => 'Commits a transaction and returns the new revision',
        ),
    'svn_repos_hotcopy' =>
        array (
            'file' => 'function.svn-repos-hotcopy.php',
            'desc' => 'Make a hot-copy of the repos at repospath; copy it to destpath',
        ),
    'svn_repos_open' =>
        array (
            'file' => 'function.svn-repos-open.php',
            'desc' => 'Open a shared lock on a repository.',
        ),
    'svn_repos_recover' =>
        array (
            'file' => 'function.svn-repos-recover.php',
            'desc' => 'Run recovery procedures on the repository located at path.',
        ),
    'svn_revert' =>
        array (
            'file' => 'function.svn-revert.php',
            'desc' => 'Revert changes to the working copy',
        ),
    'svn_status' =>
        array (
            'file' => 'function.svn-status.php',
            'desc' => 'Returns the status of working copy files and directories',
        ),
    'svn_update' =>
        array (
            'file' => 'function.svn-update.php',
            'desc' => 'Update working copy',
        ),
    'SWFAction::__construct' =>
        array (
            'file' => 'swfaction.construct.php',
            'desc' => 'Creates a new SWFAction',
        ),
    'SWFBitmap::getHeight' =>
        array (
            'file' => 'swfbitmap.getheight.php',
            'desc' => 'Returns the bitmap\'s height',
        ),
    'SWFBitmap::getWidth' =>
        array (
            'file' => 'swfbitmap.getwidth.php',
            'desc' => 'Returns the bitmap\'s width',
        ),
    'SWFBitmap::__construct' =>
        array (
            'file' => 'swfbitmap.construct.php',
            'desc' => 'Loads Bitmap object',
        ),
    'SWFButton::addAction' =>
        array (
            'file' => 'swfbutton.addaction.php',
            'desc' => 'Adds an action',
        ),
    'SWFButton::addASound' =>
        array (
            'file' => 'swfbutton.addasound.php',
            'desc' => 'Associates a sound with a button transition',
        ),
    'SWFButton::addShape' =>
        array (
            'file' => 'swfbutton.addshape.php',
            'desc' => 'Adds a shape to a button',
        ),
    'SWFButton::setAction' =>
        array (
            'file' => 'swfbutton.setaction.php',
            'desc' => 'Sets the action',
        ),
    'SWFButton::setDown' =>
        array (
            'file' => 'swfbutton.setdown.php',
            'desc' => 'Alias for addShape(shape, SWFBUTTON_DOWN)',
        ),
    'SWFButton::setHit' =>
        array (
            'file' => 'swfbutton.sethit.php',
            'desc' => 'Alias for addShape(shape, SWFBUTTON_HIT)',
        ),
    'SWFButton::setMenu' =>
        array (
            'file' => 'swfbutton.setmenu.php',
            'desc' => 'enable track as menu button behaviour',
        ),
    'SWFButton::setOver' =>
        array (
            'file' => 'swfbutton.setover.php',
            'desc' => 'Alias for addShape(shape, SWFBUTTON_OVER)',
        ),
    'SWFButton::setUp' =>
        array (
            'file' => 'swfbutton.setup.php',
            'desc' => 'Alias for addShape(shape, SWFBUTTON_UP)',
        ),
    'SWFButton::__construct' =>
        array (
            'file' => 'swfbutton.construct.php',
            'desc' => 'Creates a new Button',
        ),
    'SWFDisplayItem::addAction' =>
        array (
            'file' => 'swfdisplayitem.addaction.php',
            'desc' => 'Adds this SWFAction to the given SWFSprite instance',
        ),
    'SWFDisplayItem::addColor' =>
        array (
            'file' => 'swfdisplayitem.addcolor.php',
            'desc' => 'Adds the given color to this item\'s color transform',
        ),
    'SWFDisplayItem::endMask' =>
        array (
            'file' => 'swfdisplayitem.endmask.php',
            'desc' => 'Another way of defining a MASK layer',
        ),
    'SWFDisplayItem::getRot' =>
        array (
            'file' => 'swfdisplayitem.getrot.php',
        ),
    'SWFDisplayItem::getX' =>
        array (
            'file' => 'swfdisplayitem.getx.php',
        ),
    'SWFDisplayItem::getXScale' =>
        array (
            'file' => 'swfdisplayitem.getxscale.php',
        ),
    'SWFDisplayItem::getXSkew' =>
        array (
            'file' => 'swfdisplayitem.getxskew.php',
        ),
    'SWFDisplayItem::getY' =>
        array (
            'file' => 'swfdisplayitem.gety.php',
        ),
    'SWFDisplayItem::getYScale' =>
        array (
            'file' => 'swfdisplayitem.getyscale.php',
        ),
    'SWFDisplayItem::getYSkew' =>
        array (
            'file' => 'swfdisplayitem.getyskew.php',
        ),
    'SWFDisplayItem::move' =>
        array (
            'file' => 'swfdisplayitem.move.php',
            'desc' => 'Moves object in relative coordinates',
        ),
    'SWFDisplayItem::moveTo' =>
        array (
            'file' => 'swfdisplayitem.moveto.php',
            'desc' => 'Moves object in global coordinates',
        ),
    'SWFDisplayItem::multColor' =>
        array (
            'file' => 'swfdisplayitem.multcolor.php',
            'desc' => 'Multiplies the item\'s color transform',
        ),
    'SWFDisplayItem::remove' =>
        array (
            'file' => 'swfdisplayitem.remove.php',
            'desc' => 'Removes the object from the movie',
        ),
    'SWFDisplayItem::rotate' =>
        array (
            'file' => 'swfdisplayitem.rotate.php',
            'desc' => 'Rotates in relative coordinates',
        ),
    'SWFDisplayItem::rotateTo' =>
        array (
            'file' => 'swfdisplayitem.rotateto.php',
            'desc' => 'Rotates the object in global coordinates',
        ),
    'SWFDisplayItem::scale' =>
        array (
            'file' => 'swfdisplayitem.scale.php',
            'desc' => 'Scales the object in relative coordinates',
        ),
    'SWFDisplayItem::scaleTo' =>
        array (
            'file' => 'swfdisplayitem.scaleto.php',
            'desc' => 'Scales the object in global coordinates',
        ),
    'SWFDisplayItem::setDepth' =>
        array (
            'file' => 'swfdisplayitem.setdepth.php',
            'desc' => 'Sets z-order',
        ),
    'SWFDisplayItem::setMaskLevel' =>
        array (
            'file' => 'swfdisplayitem.setmasklevel.php',
            'desc' => 'Defines a MASK layer at level',
        ),
    'SWFDisplayItem::setMatrix' =>
        array (
            'file' => 'swfdisplayitem.setmatrix.php',
            'desc' => 'Sets the item\'s transform matrix',
        ),
    'SWFDisplayItem::setName' =>
        array (
            'file' => 'swfdisplayitem.setname.php',
            'desc' => 'Sets the object\'s name',
        ),
    'SWFDisplayItem::setRatio' =>
        array (
            'file' => 'swfdisplayitem.setratio.php',
            'desc' => 'Sets the object\'s ratio',
        ),
    'SWFDisplayItem::skewX' =>
        array (
            'file' => 'swfdisplayitem.skewx.php',
            'desc' => 'Sets the X-skew',
        ),
    'SWFDisplayItem::skewXTo' =>
        array (
            'file' => 'swfdisplayitem.skewxto.php',
            'desc' => 'Sets the X-skew',
        ),
    'SWFDisplayItem::skewY' =>
        array (
            'file' => 'swfdisplayitem.skewy.php',
            'desc' => 'Sets the Y-skew',
        ),
    'SWFDisplayItem::skewYTo' =>
        array (
            'file' => 'swfdisplayitem.skewyto.php',
            'desc' => 'Sets the Y-skew',
        ),
    'SWFFill::moveTo' =>
        array (
            'file' => 'swffill.moveto.php',
            'desc' => 'Moves fill origin',
        ),
    'SWFFill::rotateTo' =>
        array (
            'file' => 'swffill.rotateto.php',
            'desc' => 'Sets fill\'s rotation',
        ),
    'SWFFill::scaleTo' =>
        array (
            'file' => 'swffill.scaleto.php',
            'desc' => 'Sets fill\'s scale',
        ),
    'SWFFill::skewXTo' =>
        array (
            'file' => 'swffill.skewxto.php',
            'desc' => 'Sets fill x-skew',
        ),
    'SWFFill::skewYTo' =>
        array (
            'file' => 'swffill.skewyto.php',
            'desc' => 'Sets fill y-skew',
        ),
    'SWFFont::getAscent' =>
        array (
            'file' => 'swffont.getascent.php',
            'desc' => 'Returns the ascent of the font, or 0 if not available',
        ),
    'SWFFont::getDescent' =>
        array (
            'file' => 'swffont.getdescent.php',
            'desc' => 'Returns the descent of the font, or 0 if not available',
        ),
    'SWFFont::getLeading' =>
        array (
            'file' => 'swffont.getleading.php',
            'desc' => 'Returns the leading of the font, or 0 if not available',
        ),
    'SWFFont::getShape' =>
        array (
            'file' => 'swffont.getshape.php',
            'desc' => 'Returns the glyph shape of a char as a text string',
        ),
    'SWFFont::getUTF8Width' =>
        array (
            'file' => 'swffont.getutf8width.php',
            'desc' => 'Calculates the width of the given string in this font at full height',
        ),
    'SWFFont::getWidth' =>
        array (
            'file' => 'swffont.getwidth.php',
            'desc' => 'Returns the string\'s width',
        ),
    'SWFFont::__construct' =>
        array (
            'file' => 'swffont.construct.php',
            'desc' => 'Loads a font definition',
        ),
    'SWFFontChar::addChars' =>
        array (
            'file' => 'swffontchar.addchars.php',
            'desc' => 'Adds characters to a font for exporting font',
        ),
    'SWFFontChar::addUTF8Chars' =>
        array (
            'file' => 'swffontchar.addutf8chars.php',
            'desc' => 'Adds characters to a font for exporting font',
        ),
    'SWFGradient::addEntry' =>
        array (
            'file' => 'swfgradient.addentry.php',
            'desc' => 'Adds an entry to the gradient list',
        ),
    'SWFGradient::__construct' =>
        array (
            'file' => 'swfgradient.construct.php',
            'desc' => 'Creates a gradient object',
        ),
    'SWFMorph::getShape1' =>
        array (
            'file' => 'swfmorph.getshape1.php',
            'desc' => 'Gets a handle to the starting shape',
        ),
    'SWFMorph::getShape2' =>
        array (
            'file' => 'swfmorph.getshape2.php',
            'desc' => 'Gets a handle to the ending shape',
        ),
    'SWFMorph::__construct' =>
        array (
            'file' => 'swfmorph.construct.php',
            'desc' => 'Creates a new SWFMorph object',
        ),
    'SWFMovie::add' =>
        array (
            'file' => 'swfmovie.add.php',
            'desc' => 'Adds any type of data to a movie',
        ),
    'SWFMovie::addExport' =>
        array (
            'file' => 'swfmovie.addexport.php',
        ),
    'SWFMovie::addFont' =>
        array (
            'file' => 'swfmovie.addfont.php',
        ),
    'SWFMovie::importChar' =>
        array (
            'file' => 'swfmovie.importchar.php',
        ),
    'SWFMovie::importFont' =>
        array (
            'file' => 'swfmovie.importfont.php',
        ),
    'SWFMovie::labelFrame' =>
        array (
            'file' => 'swfmovie.labelframe.php',
            'desc' => 'Labels a frame',
        ),
    'SWFMovie::nextFrame' =>
        array (
            'file' => 'swfmovie.nextframe.php',
            'desc' => 'Moves to the next frame of the animation',
        ),
    'SWFMovie::output' =>
        array (
            'file' => 'swfmovie.output.php',
            'desc' => 'Dumps your lovingly prepared movie out',
        ),
    'SWFMovie::remove' =>
        array (
            'file' => 'swfmovie.remove.php',
            'desc' => 'Removes the object instance from the display list',
        ),
    'SWFMovie::save' =>
        array (
            'file' => 'swfmovie.save.php',
            'desc' => 'Saves the SWF movie in a file',
        ),
    'SWFMovie::saveToFile' =>
        array (
            'file' => 'swfmovie.savetofile.php',
        ),
    'SWFMovie::setbackground' =>
        array (
            'file' => 'swfmovie.setbackground.php',
            'desc' => 'Sets the background color',
        ),
    'SWFMovie::setDimension' =>
        array (
            'file' => 'swfmovie.setdimension.php',
            'desc' => 'Sets the movie\'s width and height',
        ),
    'SWFMovie::setFrames' =>
        array (
            'file' => 'swfmovie.setframes.php',
            'desc' => 'Sets the total number of frames in the animation',
        ),
    'SWFMovie::setRate' =>
        array (
            'file' => 'swfmovie.setrate.php',
            'desc' => 'Sets the animation\'s frame rate',
        ),
    'SWFMovie::startSound' =>
        array (
            'file' => 'swfmovie.startsound.php',
        ),
    'SWFMovie::stopSound' =>
        array (
            'file' => 'swfmovie.stopsound.php',
        ),
    'SWFMovie::streamMP3' =>
        array (
            'file' => 'swfmovie.streammp3.php',
            'desc' => 'Streams a MP3 file',
        ),
    'SWFMovie::writeExports' =>
        array (
            'file' => 'swfmovie.writeexports.php',
        ),
    'SWFMovie::__construct' =>
        array (
            'file' => 'swfmovie.construct.php',
            'desc' => 'Creates a new movie object, representing an SWF version 4 movie',
        ),
    'SWFPrebuiltClip::__construct' =>
        array (
            'file' => 'swfprebuiltclip.construct.php',
            'desc' => 'Returns a SWFPrebuiltClip object',
        ),
    'SWFShape::addFill' =>
        array (
            'file' => 'swfshape.addfill.php',
            'desc' => 'Adds a solid fill to the shape',
        ),
    'SWFShape::drawArc' =>
        array (
            'file' => 'swfshape.drawarc.php',
            'desc' => 'Draws an arc of radius r centered at the current location, from angle startAngle to angle endAngle measured clockwise from 12 o\'clock',
        ),
    'SWFShape::drawCircle' =>
        array (
            'file' => 'swfshape.drawcircle.php',
            'desc' => 'Draws a circle of radius r centered at the current location, in a counter-clockwise fashion',
        ),
    'SWFShape::drawCubic' =>
        array (
            'file' => 'swfshape.drawcubic.php',
            'desc' => 'Draws a cubic bezier curve using the current position and the three given points as control points',
        ),
    'SWFShape::drawCubicTo' =>
        array (
            'file' => 'swfshape.drawcubicto.php',
            'desc' => 'Draws a cubic bezier curve using the current position and the three given points as control points',
        ),
    'SWFShape::drawCurve' =>
        array (
            'file' => 'swfshape.drawcurve.php',
            'desc' => 'Draws a curve (relative)',
        ),
    'SWFShape::drawCurveTo' =>
        array (
            'file' => 'swfshape.drawcurveto.php',
            'desc' => 'Draws a curve',
        ),
    'SWFShape::drawGlyph' =>
        array (
            'file' => 'swfshape.drawglyph.php',
            'desc' => 'Draws the first character in the given string into the shape using the glyph definition from the given font',
        ),
    'SWFShape::drawLine' =>
        array (
            'file' => 'swfshape.drawline.php',
            'desc' => 'Draws a line (relative)',
        ),
    'SWFShape::drawLineTo' =>
        array (
            'file' => 'swfshape.drawlineto.php',
            'desc' => 'Draws a line',
        ),
    'SWFShape::movePen' =>
        array (
            'file' => 'swfshape.movepen.php',
            'desc' => 'Moves the shape\'s pen (relative)',
        ),
    'SWFShape::movePenTo' =>
        array (
            'file' => 'swfshape.movepento.php',
            'desc' => 'Moves the shape\'s pen',
        ),
    'SWFShape::setLeftFill' =>
        array (
            'file' => 'swfshape.setleftfill.php',
            'desc' => 'Sets left rasterizing color',
        ),
    'SWFShape::setLine' =>
        array (
            'file' => 'swfshape.setline.php',
            'desc' => 'Sets the shape\'s line style',
        ),
    'SWFShape::setRightFill' =>
        array (
            'file' => 'swfshape.setrightfill.php',
            'desc' => 'Sets right rasterizing color',
        ),
    'SWFShape::__construct' =>
        array (
            'file' => 'swfshape.construct.php',
            'desc' => 'Creates a new shape object',
        ),
    'SWFSound::__construct' =>
        array (
            'file' => 'swfsound.construct.php',
            'desc' => 'Returns a new SWFSound object from given file',
        ),
    'SWFSoundInstance::loopCount' =>
        array (
            'file' => 'swfsoundinstance.loopcount.php',
        ),
    'SWFSoundInstance::loopInPoint' =>
        array (
            'file' => 'swfsoundinstance.loopinpoint.php',
        ),
    'SWFSoundInstance::loopOutPoint' =>
        array (
            'file' => 'swfsoundinstance.loopoutpoint.php',
        ),
    'SWFSoundInstance::noMultiple' =>
        array (
            'file' => 'swfsoundinstance.nomultiple.php',
        ),
    'SWFSprite::add' =>
        array (
            'file' => 'swfsprite.add.php',
            'desc' => 'Adds an object to a sprite',
        ),
    'SWFSprite::labelFrame' =>
        array (
            'file' => 'swfsprite.labelframe.php',
            'desc' => 'Labels frame',
        ),
    'SWFSprite::nextFrame' =>
        array (
            'file' => 'swfsprite.nextframe.php',
            'desc' => 'Moves to the next frame of the animation',
        ),
    'SWFSprite::remove' =>
        array (
            'file' => 'swfsprite.remove.php',
            'desc' => 'Removes an object to a sprite',
        ),
    'SWFSprite::setFrames' =>
        array (
            'file' => 'swfsprite.setframes.php',
            'desc' => 'Sets the total number of frames in the animation',
        ),
    'SWFSprite::startSound' =>
        array (
            'file' => 'swfsprite.startsound.php',
        ),
    'SWFSprite::stopSound' =>
        array (
            'file' => 'swfsprite.stopsound.php',
        ),
    'SWFSprite::__construct' =>
        array (
            'file' => 'swfsprite.construct.php',
            'desc' => 'Creates a movie clip (a sprite)',
        ),
    'SWFText::addString' =>
        array (
            'file' => 'swftext.addstring.php',
            'desc' => 'Draws a string',
        ),
    'SWFText::addUTF8String' =>
        array (
            'file' => 'swftext.addutf8string.php',
            'desc' => 'Writes the given text into this SWFText object at the current pen position,
 using the current font, height, spacing, and color',
        ),
    'SWFText::getAscent' =>
        array (
            'file' => 'swftext.getascent.php',
            'desc' => 'Returns the ascent of the current font at its current size, or 0 if not available',
        ),
    'SWFText::getDescent' =>
        array (
            'file' => 'swftext.getdescent.php',
            'desc' => 'Returns the descent of the current font at its current size, or 0 if not available',
        ),
    'SWFText::getLeading' =>
        array (
            'file' => 'swftext.getleading.php',
            'desc' => 'Returns the leading of the current font at its current size, or 0 if not available',
        ),
    'SWFText::getUTF8Width' =>
        array (
            'file' => 'swftext.getutf8width.php',
            'desc' => 'calculates the width of the given string in this text objects current font and size',
        ),
    'SWFText::getWidth' =>
        array (
            'file' => 'swftext.getwidth.php',
            'desc' => 'Computes string\'s width',
        ),
    'SWFText::moveTo' =>
        array (
            'file' => 'swftext.moveto.php',
            'desc' => 'Moves the pen',
        ),
    'SWFText::setColor' =>
        array (
            'file' => 'swftext.setcolor.php',
            'desc' => 'Sets the current text color',
        ),
    'SWFText::setFont' =>
        array (
            'file' => 'swftext.setfont.php',
            'desc' => 'Sets the current font',
        ),
    'SWFText::setHeight' =>
        array (
            'file' => 'swftext.setheight.php',
            'desc' => 'Sets the current font height',
        ),
    'SWFText::setSpacing' =>
        array (
            'file' => 'swftext.setspacing.php',
            'desc' => 'Sets the current font spacing',
        ),
    'SWFText::__construct' =>
        array (
            'file' => 'swftext.construct.php',
            'desc' => 'Creates a new SWFText object',
        ),
    'SWFTextField::addChars' =>
        array (
            'file' => 'swftextfield.addchars.php',
            'desc' => 'adds characters to a font that will be available within a textfield',
        ),
    'SWFTextField::addString' =>
        array (
            'file' => 'swftextfield.addstring.php',
            'desc' => 'Concatenates the given string to the text field',
        ),
    'SWFTextField::align' =>
        array (
            'file' => 'swftextfield.align.php',
            'desc' => 'Sets the text field alignment',
        ),
    'SWFTextField::setBounds' =>
        array (
            'file' => 'swftextfield.setbounds.php',
            'desc' => 'Sets the text field width and height',
        ),
    'SWFTextField::setColor' =>
        array (
            'file' => 'swftextfield.setcolor.php',
            'desc' => 'Sets the color of the text field',
        ),
    'SWFTextField::setFont' =>
        array (
            'file' => 'swftextfield.setfont.php',
            'desc' => 'Sets the text field font',
        ),
    'SWFTextField::setHeight' =>
        array (
            'file' => 'swftextfield.setheight.php',
            'desc' => 'Sets the font height of this text field font',
        ),
    'SWFTextField::setIndentation' =>
        array (
            'file' => 'swftextfield.setindentation.php',
            'desc' => 'Sets the indentation of the first line',
        ),
    'SWFTextField::setLeftMargin' =>
        array (
            'file' => 'swftextfield.setleftmargin.php',
            'desc' => 'Sets the left margin width of the text field',
        ),
    'SWFTextField::setLineSpacing' =>
        array (
            'file' => 'swftextfield.setlinespacing.php',
            'desc' => 'Sets the line spacing of the text field',
        ),
    'SWFTextField::setMargins' =>
        array (
            'file' => 'swftextfield.setmargins.php',
            'desc' => 'Sets the margins width of the text field',
        ),
    'SWFTextField::setName' =>
        array (
            'file' => 'swftextfield.setname.php',
            'desc' => 'Sets the variable name',
        ),
    'SWFTextField::setPadding' =>
        array (
            'file' => 'swftextfield.setpadding.php',
            'desc' => 'Sets the padding of this textfield',
        ),
    'SWFTextField::setRightMargin' =>
        array (
            'file' => 'swftextfield.setrightmargin.php',
            'desc' => 'Sets the right margin width of the text field',
        ),
    'SWFTextField::__construct' =>
        array (
            'file' => 'swftextfield.construct.php',
            'desc' => 'Creates a text field object',
        ),
    'SWFVideoStream::getNumFrames' =>
        array (
            'file' => 'swfvideostream.getnumframes.php',
            'desc' => 'Returns the number of frames in the video',
        ),
    'SWFVideoStream::setDimension' =>
        array (
            'file' => 'swfvideostream.setdimension.php',
            'desc' => 'Sets video dimension',
        ),
    'SWFVideoStream::__construct' =>
        array (
            'file' => 'swfvideostream.construct.php',
            'desc' => 'Returns a SWFVideoStream object',
        ),
    'Swish::getMetaList' =>
        array (
            'file' => 'swish.getmetalist.php',
            'desc' => 'Get the list of meta entries for the index',
        ),
    'Swish::getPropertyList' =>
        array (
            'file' => 'swish.getpropertylist.php',
            'desc' => 'Get the list of properties for the index',
        ),
    'Swish::prepare' =>
        array (
            'file' => 'swish.prepare.php',
            'desc' => 'Prepare a search query',
        ),
    'Swish::query' =>
        array (
            'file' => 'swish.query.php',
            'desc' => 'Execute a query and return results object',
        ),
    'Swish::__construct' =>
        array (
            'file' => 'swish.construct.php',
            'desc' => 'Construct a Swish object',
        ),
    'SwishResult::getMetaList' =>
        array (
            'file' => 'swishresult.getmetalist.php',
            'desc' => 'Get a list of meta entries',
        ),
    'SwishResult::stem' =>
        array (
            'file' => 'swishresult.stem.php',
            'desc' => 'Stems the given word',
        ),
    'SwishResults::getParsedWords' =>
        array (
            'file' => 'swishresults.getparsedwords.php',
            'desc' => 'Get an array of parsed words',
        ),
    'SwishResults::getRemovedStopwords' =>
        array (
            'file' => 'swishresults.getremovedstopwords.php',
            'desc' => 'Get an array of stopwords removed from the query',
        ),
    'SwishResults::nextResult' =>
        array (
            'file' => 'swishresults.nextresult.php',
            'desc' => 'Get the next search result',
        ),
    'SwishResults::seekResult' =>
        array (
            'file' => 'swishresults.seekresult.php',
            'desc' => 'Set current seek pointer to the given position',
        ),
    'SwishSearch::execute' =>
        array (
            'file' => 'swishsearch.execute.php',
            'desc' => 'Execute the search and get the results',
        ),
    'SwishSearch::resetLimit' =>
        array (
            'file' => 'swishsearch.resetlimit.php',
            'desc' => 'Reset the search limits',
        ),
    'SwishSearch::setLimit' =>
        array (
            'file' => 'swishsearch.setlimit.php',
            'desc' => 'Set the search limits',
        ),
    'SwishSearch::setPhraseDelimiter' =>
        array (
            'file' => 'swishsearch.setphrasedelimiter.php',
            'desc' => 'Set the phrase delimiter',
        ),
    'SwishSearch::setSort' =>
        array (
            'file' => 'swishsearch.setsort.php',
            'desc' => 'Set the sort order',
        ),
    'SwishSearch::setStructure' =>
        array (
            'file' => 'swishsearch.setstructure.php',
            'desc' => 'Set the structure flag in the search object',
        ),
    'sybase_affected_rows' =>
        array (
            'file' => 'function.sybase-affected-rows.php',
            'desc' => 'Gets number of affected rows in last query',
        ),
    'sybase_close' =>
        array (
            'file' => 'function.sybase-close.php',
            'desc' => 'Closes a Sybase connection',
        ),
    'sybase_connect' =>
        array (
            'file' => 'function.sybase-connect.php',
            'desc' => 'Opens a Sybase server connection',
        ),
    'sybase_data_seek' =>
        array (
            'file' => 'function.sybase-data-seek.php',
            'desc' => 'Moves internal row pointer',
        ),
    'sybase_deadlock_retry_count' =>
        array (
            'file' => 'function.sybase-deadlock-retry-count.php',
            'desc' => 'Sets the deadlock retry count',
        ),
    'sybase_fetch_array' =>
        array (
            'file' => 'function.sybase-fetch-array.php',
            'desc' => 'Fetch row as array',
        ),
    'sybase_fetch_assoc' =>
        array (
            'file' => 'function.sybase-fetch-assoc.php',
            'desc' => 'Fetch a result row as an associative array',
        ),
    'sybase_fetch_field' =>
        array (
            'file' => 'function.sybase-fetch-field.php',
            'desc' => 'Get field information from a result',
        ),
    'sybase_fetch_object' =>
        array (
            'file' => 'function.sybase-fetch-object.php',
            'desc' => 'Fetch a row as an object',
        ),
    'sybase_fetch_row' =>
        array (
            'file' => 'function.sybase-fetch-row.php',
            'desc' => 'Get a result row as an enumerated array',
        ),
    'sybase_field_seek' =>
        array (
            'file' => 'function.sybase-field-seek.php',
            'desc' => 'Sets field offset',
        ),
    'sybase_free_result' =>
        array (
            'file' => 'function.sybase-free-result.php',
            'desc' => 'Frees result memory',
        ),
    'sybase_get_last_message' =>
        array (
            'file' => 'function.sybase-get-last-message.php',
            'desc' => 'Returns the last message from the server',
        ),
    'sybase_min_client_severity' =>
        array (
            'file' => 'function.sybase-min-client-severity.php',
            'desc' => 'Sets minimum client severity',
        ),
    'sybase_min_error_severity' =>
        array (
            'file' => 'function.sybase-min-error-severity.php',
            'desc' => 'Sets minimum error severity',
        ),
    'sybase_min_message_severity' =>
        array (
            'file' => 'function.sybase-min-message-severity.php',
            'desc' => 'Sets minimum message severity',
        ),
    'sybase_min_server_severity' =>
        array (
            'file' => 'function.sybase-min-server-severity.php',
            'desc' => 'Sets minimum server severity',
        ),
    'sybase_num_fields' =>
        array (
            'file' => 'function.sybase-num-fields.php',
            'desc' => 'Gets the number of fields in a result set',
        ),
    'sybase_num_rows' =>
        array (
            'file' => 'function.sybase-num-rows.php',
            'desc' => 'Get number of rows in a result set',
        ),
    'sybase_pconnect' =>
        array (
            'file' => 'function.sybase-pconnect.php',
            'desc' => 'Open persistent Sybase connection',
        ),
    'sybase_query' =>
        array (
            'file' => 'function.sybase-query.php',
            'desc' => 'Sends a Sybase query',
        ),
    'sybase_result' =>
        array (
            'file' => 'function.sybase-result.php',
            'desc' => 'Get result data',
        ),
    'sybase_select_db' =>
        array (
            'file' => 'function.sybase-select-db.php',
            'desc' => 'Selects a Sybase database',
        ),
    'sybase_set_message_handler' =>
        array (
            'file' => 'function.sybase-set-message-handler.php',
            'desc' => 'Sets the handler called when a server message is raised',
        ),
    'sybase_unbuffered_query' =>
        array (
            'file' => 'function.sybase-unbuffered-query.php',
            'desc' => 'Send a Sybase query and do not block',
        ),
    'symlink' =>
        array (
            'file' => 'function.symlink.php',
            'desc' => 'Creates a symbolic link',
        ),
    'SyncEvent::fire' =>
        array (
            'file' => 'syncevent.fire.php',
            'desc' => 'Fires/sets the event',
        ),
    'SyncEvent::reset' =>
        array (
            'file' => 'syncevent.reset.php',
            'desc' => 'Resets a manual event',
        ),
    'SyncEvent::wait' =>
        array (
            'file' => 'syncevent.wait.php',
            'desc' => 'Waits for the event to be fired/set',
        ),
    'SyncEvent::__construct' =>
        array (
            'file' => 'syncevent.construct.php',
            'desc' => 'Constructs a new SyncEvent object',
        ),
    'SyncMutex::lock' =>
        array (
            'file' => 'syncmutex.lock.php',
            'desc' => 'Waits for an exclusive lock',
        ),
    'SyncMutex::unlock' =>
        array (
            'file' => 'syncmutex.unlock.php',
            'desc' => 'Unlocks the mutex',
        ),
    'SyncMutex::__construct' =>
        array (
            'file' => 'syncmutex.construct.php',
            'desc' => 'Constructs a new SyncMutex object',
        ),
    'SyncReaderWriter::readlock' =>
        array (
            'file' => 'syncreaderwriter.readlock.php',
            'desc' => 'Waits for a read lock',
        ),
    'SyncReaderWriter::readunlock' =>
        array (
            'file' => 'syncreaderwriter.readunlock.php',
            'desc' => 'Releases a read lock',
        ),
    'SyncReaderWriter::writelock' =>
        array (
            'file' => 'syncreaderwriter.writelock.php',
            'desc' => 'Waits for an exclusive write lock',
        ),
    'SyncReaderWriter::writeunlock' =>
        array (
            'file' => 'syncreaderwriter.writeunlock.php',
            'desc' => 'Releases a write lock',
        ),
    'SyncReaderWriter::__construct' =>
        array (
            'file' => 'syncreaderwriter.construct.php',
            'desc' => 'Constructs a new SyncReaderWriter object',
        ),
    'SyncSemaphore::lock' =>
        array (
            'file' => 'syncsemaphore.lock.php',
            'desc' => 'Decreases the count of the semaphore or waits',
        ),
    'SyncSemaphore::unlock' =>
        array (
            'file' => 'syncsemaphore.unlock.php',
            'desc' => 'Increases the count of the semaphore',
        ),
    'SyncSemaphore::__construct' =>
        array (
            'file' => 'syncsemaphore.construct.php',
            'desc' => 'Constructs a new SyncSemaphore object',
        ),
    'syslog' =>
        array (
            'file' => 'function.syslog.php',
            'desc' => 'Generate a system log message',
        ),
    'system' =>
        array (
            'file' => 'function.system.php',
            'desc' => 'Execute an external program and display the output',
        ),
    'sys_getloadavg' =>
        array (
            'file' => 'function.sys-getloadavg.php',
            'desc' => 'Gets system load average',
        ),
    'sys_get_temp_dir' =>
        array (
            'file' => 'function.sys-get-temp-dir.php',
            'desc' => 'Returns directory path used for temporary files',
        ),
    'taint' =>
        array (
            'file' => 'function.taint.php',
            'desc' => 'Taint a string',
        ),
    'tan' =>
        array (
            'file' => 'function.tan.php',
            'desc' => 'Tangent',
        ),
    'tanh' =>
        array (
            'file' => 'function.tanh.php',
            'desc' => 'Hyperbolic tangent',
        ),
    'tcpwrap_check' =>
        array (
            'file' => 'function.tcpwrap-check.php',
            'desc' => 'Performs a tcpwrap check',
        ),
    'tempnam' =>
        array (
            'file' => 'function.tempnam.php',
            'desc' => 'Create file with unique file name',
        ),
    'textdomain' =>
        array (
            'file' => 'function.textdomain.php',
            'desc' => 'Sets the default domain',
        ),
    'Thread::detach' =>
        array (
            'file' => 'thread.detach.php',
            'desc' => 'Execution',
        ),
    'Thread::getCreatorId' =>
        array (
            'file' => 'thread.getcreatorid.php',
            'desc' => 'Identification',
        ),
    'Thread::getCurrentThread' =>
        array (
            'file' => 'thread.getcurrentthread.php',
            'desc' => 'Identification',
        ),
    'Thread::getCurrentThreadId' =>
        array (
            'file' => 'thread.getcurrentthreadid.php',
            'desc' => 'Identification',
        ),
    'Thread::getThreadId' =>
        array (
            'file' => 'thread.getthreadid.php',
            'desc' => 'Identification',
        ),
    'Thread::globally' =>
        array (
            'file' => 'thread.globally.php',
            'desc' => 'Execution',
        ),
    'Thread::isJoined' =>
        array (
            'file' => 'thread.isjoined.php',
            'desc' => 'State Detection',
        ),
    'Thread::isStarted' =>
        array (
            'file' => 'thread.isstarted.php',
            'desc' => 'State Detection',
        ),
    'Thread::join' =>
        array (
            'file' => 'thread.join.php',
            'desc' => 'Synchronization',
        ),
    'Thread::kill' =>
        array (
            'file' => 'thread.kill.php',
            'desc' => 'Execution',
        ),
    'Thread::start' =>
        array (
            'file' => 'thread.start.php',
            'desc' => 'Execution',
        ),
    'Threaded::chunk' =>
        array (
            'file' => 'threaded.chunk.php',
            'desc' => 'Manipulation',
        ),
    'Threaded::count' =>
        array (
            'file' => 'threaded.count.php',
            'desc' => 'Manipulation',
        ),
    'Threaded::extend' =>
        array (
            'file' => 'threaded.extend.php',
            'desc' => 'Runtime Manipulation',
        ),
    'Threaded::from' =>
        array (
            'file' => 'threaded.from.php',
            'desc' => 'Creation',
        ),
    'Threaded::getTerminationInfo' =>
        array (
            'file' => 'threaded.getterminationinfo.php',
            'desc' => 'Error Detection',
        ),
    'Threaded::isRunning' =>
        array (
            'file' => 'thread.isrunning.php',
            'desc' => 'State Detection',
        ),
    'Threaded::isTerminated' =>
        array (
            'file' => 'threaded.isterminated.php',
            'desc' => 'State Detection',
        ),
    'Threaded::isWaiting' =>
        array (
            'file' => 'threaded.iswaiting.php',
            'desc' => 'State Detection',
        ),
    'Threaded::lock' =>
        array (
            'file' => 'threaded.lock.php',
            'desc' => 'Synchronization',
        ),
    'Threaded::merge' =>
        array (
            'file' => 'threaded.merge.php',
            'desc' => 'Manipulation',
        ),
    'Threaded::notify' =>
        array (
            'file' => 'threaded.notify.php',
            'desc' => 'Synchronization',
        ),
    'Threaded::pop' =>
        array (
            'file' => 'threaded.pop.php',
            'desc' => 'Manipulation',
        ),
    'Threaded::run' =>
        array (
            'file' => 'threaded.run.php',
            'desc' => 'Execution',
        ),
    'Threaded::shift' =>
        array (
            'file' => 'threaded.shift.php',
            'desc' => 'Manipulation',
        ),
    'Threaded::synchronized' =>
        array (
            'file' => 'threaded.synchronized.php',
            'desc' => 'Synchronization',
        ),
    'Threaded::unlock' =>
        array (
            'file' => 'threaded.unlock.php',
            'desc' => 'Synchronization',
        ),
    'Threaded::wait' =>
        array (
            'file' => 'threaded.wait.php',
            'desc' => 'Synchronization',
        ),
    'tidy::$errorBuffer' =>
        array (
            'file' => 'tidy.props.errorbuffer.php',
            'desc' => 'Return warnings and errors which occurred parsing the specified document',
        ),
    'tidy::body' =>
        array (
            'file' => 'tidy.body.php',
            'desc' => 'Returns a tidyNode object starting from the &lt;body&gt; tag of the tidy parse tree',
        ),
    'tidy::cleanRepair' =>
        array (
            'file' => 'tidy.cleanrepair.php',
            'desc' => 'Execute configured cleanup and repair operations on parsed markup',
        ),
    'tidy::diagnose' =>
        array (
            'file' => 'tidy.diagnose.php',
            'desc' => 'Run configured diagnostics on parsed and repaired markup',
        ),
    'tidy::getConfig' =>
        array (
            'file' => 'tidy.getconfig.php',
            'desc' => 'Get current Tidy configuration',
        ),
    'tidy::getHtmlVer' =>
        array (
            'file' => 'tidy.gethtmlver.php',
            'desc' => 'Get the Detected HTML version for the specified document',
        ),
    'tidy::getOpt' =>
        array (
            'file' => 'tidy.getopt.php',
            'desc' => 'Returns the value of the specified configuration option for the tidy document',
        ),
    'tidy::getOptDoc' =>
        array (
            'file' => 'tidy.getoptdoc.php',
            'desc' => 'Returns the documentation for the given option name',
        ),
    'tidy::getRelease' =>
        array (
            'file' => 'tidy.getrelease.php',
            'desc' => 'Get release date (version) for Tidy library',
        ),
    'tidy::getStatus' =>
        array (
            'file' => 'tidy.getstatus.php',
            'desc' => 'Get status of specified document',
        ),
    'tidy::head' =>
        array (
            'file' => 'tidy.head.php',
            'desc' => 'Returns a tidyNode object starting from the &lt;head&gt; tag of the tidy parse tree',
        ),
    'tidy::html' =>
        array (
            'file' => 'tidy.html.php',
            'desc' => 'Returns a tidyNode object starting from the &lt;html&gt; tag of the tidy parse tree',
        ),
    'tidy::isXhtml' =>
        array (
            'file' => 'tidy.isxhtml.php',
            'desc' => 'Indicates if the document is a XHTML document',
        ),
    'tidy::isXml' =>
        array (
            'file' => 'tidy.isxml.php',
            'desc' => 'Indicates if the document is a generic (non HTML/XHTML) XML document',
        ),
    'tidy::parseFile' =>
        array (
            'file' => 'tidy.parsefile.php',
            'desc' => 'Parse markup in file or URI',
        ),
    'tidy::parseString' =>
        array (
            'file' => 'tidy.parsestring.php',
            'desc' => 'Parse a document stored in a string',
        ),
    'tidy::repairFile' =>
        array (
            'file' => 'tidy.repairfile.php',
            'desc' => 'Repair a file and return it as a string',
        ),
    'tidy::repairString' =>
        array (
            'file' => 'tidy.repairstring.php',
            'desc' => 'Repair a string using an optionally provided configuration file',
        ),
    'tidy::root' =>
        array (
            'file' => 'tidy.root.php',
            'desc' => 'Returns a tidyNode object representing the root of the tidy parse tree',
        ),
    'tidy::__construct' =>
        array (
            'file' => 'tidy.construct.php',
            'desc' => 'Constructs a new tidy object',
        ),
    'tidyNode::getParent' =>
        array (
            'file' => 'tidynode.getparent.php',
            'desc' => 'Returns the parent node of the current node',
        ),
    'tidyNode::hasChildren' =>
        array (
            'file' => 'tidynode.haschildren.php',
            'desc' => 'Checks if a node has children',
        ),
    'tidyNode::hasSiblings' =>
        array (
            'file' => 'tidynode.hassiblings.php',
            'desc' => 'Checks if a node has siblings',
        ),
    'tidyNode::isAsp' =>
        array (
            'file' => 'tidynode.isasp.php',
            'desc' => 'Checks if this node is ASP',
        ),
    'tidyNode::isComment' =>
        array (
            'file' => 'tidynode.iscomment.php',
            'desc' => 'Checks if a node represents a comment',
        ),
    'tidyNode::isHtml' =>
        array (
            'file' => 'tidynode.ishtml.php',
            'desc' => 'Checks if a node is part of a HTML document',
        ),
    'tidyNode::isJste' =>
        array (
            'file' => 'tidynode.isjste.php',
            'desc' => 'Checks if this node is JSTE',
        ),
    'tidyNode::isPhp' =>
        array (
            'file' => 'tidynode.isphp.php',
            'desc' => 'Checks if a node is PHP',
        ),
    'tidyNode::isText' =>
        array (
            'file' => 'tidynode.istext.php',
            'desc' => 'Checks if a node represents text (no markup)',
        ),
    'tidy_access_count' =>
        array (
            'file' => 'function.tidy-access-count.php',
            'desc' => 'Returns the Number of Tidy accessibility warnings encountered for specified document',
        ),
    'tidy_config_count' =>
        array (
            'file' => 'function.tidy-config-count.php',
            'desc' => 'Returns the Number of Tidy configuration errors encountered for specified document',
        ),
    'tidy_error_count' =>
        array (
            'file' => 'function.tidy-error-count.php',
            'desc' => 'Returns the Number of Tidy errors encountered for specified document',
        ),
    'tidy_get_output' =>
        array (
            'file' => 'function.tidy-get-output.php',
            'desc' => 'Return a string representing the parsed tidy markup',
        ),
    'tidy_load_config' =>
        array (
            'file' => 'function.tidy-load-config.php',
            'desc' => 'Load an ASCII Tidy configuration file with the specified encoding',
        ),
    'tidy_reset_config' =>
        array (
            'file' => 'function.tidy-reset-config.php',
            'desc' => 'Restore Tidy configuration to default values',
        ),
    'tidy_save_config' =>
        array (
            'file' => 'function.tidy-save-config.php',
            'desc' => 'Save current settings to named file',
        ),
    'tidy_setopt' =>
        array (
            'file' => 'function.tidy-setopt.php',
            'desc' => 'Updates the configuration settings for the specified tidy document',
        ),
    'tidy_set_encoding' =>
        array (
            'file' => 'function.tidy-set-encoding.php',
            'desc' => 'Set the input/output character encoding for parsing markup',
        ),
    'tidy_warning_count' =>
        array (
            'file' => 'function.tidy-warning-count.php',
            'desc' => 'Returns the Number of Tidy warnings encountered for specified document',
        ),
    'time' =>
        array (
            'file' => 'function.time.php',
            'desc' => 'Return current Unix timestamp',
        ),
    'timezone_abbreviations_list' =>
        array (
            'file' => 'function.timezone-abbreviations-list.php',
            'desc' => 'Alias of DateTimeZone::listAbbreviations',
        ),
    'timezone_identifiers_list' =>
        array (
            'file' => 'function.timezone-identifiers-list.php',
            'desc' => 'Alias of DateTimeZone::listIdentifiers',
        ),
    'timezone_location_get' =>
        array (
            'file' => 'function.timezone-location-get.php',
            'desc' => 'Alias of DateTimeZone::getLocation',
        ),
    'timezone_name_from_abbr' =>
        array (
            'file' => 'function.timezone-name-from-abbr.php',
            'desc' => 'Returns the timezone name from abbreviation',
        ),
    'timezone_name_get' =>
        array (
            'file' => 'function.timezone-name-get.php',
            'desc' => 'Alias of DateTimeZone::getName',
        ),
    'timezone_offset_get' =>
        array (
            'file' => 'function.timezone-offset-get.php',
            'desc' => 'Alias of DateTimeZone::getOffset',
        ),
    'timezone_open' =>
        array (
            'file' => 'function.timezone-open.php',
            'desc' => 'Alias of DateTimeZone::__construct',
        ),
    'timezone_transitions_get' =>
        array (
            'file' => 'function.timezone-transitions-get.php',
            'desc' => 'Alias of DateTimeZone::getTransitions',
        ),
    'timezone_version_get' =>
        array (
            'file' => 'function.timezone-version-get.php',
            'desc' => 'Gets the version of the timezonedb',
        ),
    'time_nanosleep' =>
        array (
            'file' => 'function.time-nanosleep.php',
            'desc' => 'Delay for a number of seconds and nanoseconds',
        ),
    'time_sleep_until' =>
        array (
            'file' => 'function.time-sleep-until.php',
            'desc' => 'Make the script sleep until the specified time',
        ),
    'tmpfile' =>
        array (
            'file' => 'function.tmpfile.php',
            'desc' => 'Creates a temporary file',
        ),
    'token_get_all' =>
        array (
            'file' => 'function.token-get-all.php',
            'desc' => 'Split given source into PHP tokens',
        ),
    'token_name' =>
        array (
            'file' => 'function.token-name.php',
            'desc' => 'Get the symbolic name of a given PHP token',
        ),
    'TokyoTyrant::add' =>
        array (
            'file' => 'tokyotyrant.add.php',
            'desc' => 'Adds to a numeric key',
        ),
    'TokyoTyrant::connect' =>
        array (
            'file' => 'tokyotyrant.connect.php',
            'desc' => 'Connect to a database',
        ),
    'TokyoTyrant::connectUri' =>
        array (
            'file' => 'tokyotyrant.connecturi.php',
            'desc' => 'Connects to a database',
        ),
    'TokyoTyrant::copy' =>
        array (
            'file' => 'tokyotyrant.copy.php',
            'desc' => 'Copies the database',
        ),
    'TokyoTyrant::ext' =>
        array (
            'file' => 'tokyotyrant.ext.php',
            'desc' => 'Execute a remote script',
        ),
    'TokyoTyrant::fwmKeys' =>
        array (
            'file' => 'tokyotyrant.fwmkeys.php',
            'desc' => 'Returns the forward matching keys',
        ),
    'TokyoTyrant::get' =>
        array (
            'file' => 'tokyotyrant.get.php',
        ),
    'TokyoTyrant::getIterator' =>
        array (
            'file' => 'tokyotyrant.getiterator.php',
            'desc' => 'Get an iterator',
        ),
    'TokyoTyrant::num' =>
        array (
            'file' => 'tokyotyrant.num.php',
            'desc' => 'Number of records in the database',
        ),
    'TokyoTyrant::out' =>
        array (
            'file' => 'tokyotyrant.out.php',
            'desc' => 'Removes records',
        ),
    'TokyoTyrant::put' =>
        array (
            'file' => 'tokyotyrant.put.php',
            'desc' => 'Puts values',
        ),
    'TokyoTyrant::putCat' =>
        array (
            'file' => 'tokyotyrant.putcat.php',
            'desc' => 'Concatenates to a record',
        ),
    'TokyoTyrant::putKeep' =>
        array (
            'file' => 'tokyotyrant.putkeep.php',
            'desc' => 'Puts a record',
        ),
    'TokyoTyrant::putNr' =>
        array (
            'file' => 'tokyotyrant.putnr.php',
            'desc' => 'Puts value',
        ),
    'TokyoTyrant::putShl' =>
        array (
            'file' => 'tokyotyrant.putshl.php',
            'desc' => 'Concatenates to a record',
        ),
    'TokyoTyrant::restore' =>
        array (
            'file' => 'tokyotyrant.restore.php',
            'desc' => 'Restore the database',
        ),
    'TokyoTyrant::setMaster' =>
        array (
            'file' => 'tokyotyrant.setmaster.php',
            'desc' => 'Set the replication master',
        ),
    'TokyoTyrant::size' =>
        array (
            'file' => 'tokyotyrant.size.php',
            'desc' => 'Returns the size of the value',
        ),
    'TokyoTyrant::stat' =>
        array (
            'file' => 'tokyotyrant.stat.php',
            'desc' => 'Get statistics',
        ),
    'TokyoTyrant::sync' =>
        array (
            'file' => 'tokyotyrant.sync.php',
            'desc' => 'Synchronize the database',
        ),
    'TokyoTyrant::tune' =>
        array (
            'file' => 'tokyotyrant.tune.php',
            'desc' => 'Tunes connection values',
        ),
    'TokyoTyrant::vanish' =>
        array (
            'file' => 'tokyotyrant.vanish.php',
            'desc' => 'Empties the database',
        ),
    'TokyoTyrant::__construct' =>
        array (
            'file' => 'tokyotyrant.construct.php',
            'desc' => 'Construct a new TokyoTyrant object',
        ),
    'TokyoTyrantIterator::current' =>
        array (
            'file' => 'tokyotyrantiterator.current.php',
            'desc' => 'Get the current value',
        ),
    'TokyoTyrantIterator::key' =>
        array (
            'file' => 'tokyotyrantiterator.key.php',
            'desc' => 'Returns the current key',
        ),
    'TokyoTyrantIterator::next' =>
        array (
            'file' => 'tokyotyrantiterator.next.php',
            'desc' => 'Move to next key',
        ),
    'TokyoTyrantIterator::rewind' =>
        array (
            'file' => 'tokyotyrantiterator.rewind.php',
            'desc' => 'Rewinds the iterator',
        ),
    'TokyoTyrantIterator::valid' =>
        array (
            'file' => 'tokyotyrantiterator.valid.php',
            'desc' => 'Rewinds the iterator',
        ),
    'TokyoTyrantIterator::__construct' =>
        array (
            'file' => 'tokyotyrantiterator.construct.php',
            'desc' => 'Construct an iterator',
        ),
    'TokyoTyrantQuery::addCond' =>
        array (
            'file' => 'tokyotyrantquery.addcond.php',
            'desc' => 'Adds a condition to the query',
        ),
    'TokyoTyrantQuery::count' =>
        array (
            'file' => 'tokyotyrantquery.count.php',
            'desc' => 'Counts records',
        ),
    'TokyoTyrantQuery::current' =>
        array (
            'file' => 'tokyotyrantquery.current.php',
            'desc' => 'Returns the current element',
        ),
    'TokyoTyrantQuery::hint' =>
        array (
            'file' => 'tokyotyrantquery.hint.php',
            'desc' => 'Get the hint string of the query',
        ),
    'TokyoTyrantQuery::key' =>
        array (
            'file' => 'tokyotyrantquery.key.php',
            'desc' => 'Returns the current key',
        ),
    'TokyoTyrantQuery::metaSearch' =>
        array (
            'file' => 'tokyotyrantquery.metasearch.php',
            'desc' => 'Retrieve records with multiple queries',
        ),
    'TokyoTyrantQuery::next' =>
        array (
            'file' => 'tokyotyrantquery.next.php',
            'desc' => 'Moves the iterator to next entry',
        ),
    'TokyoTyrantQuery::out' =>
        array (
            'file' => 'tokyotyrantquery.out.php',
            'desc' => 'Removes records based on query',
        ),
    'TokyoTyrantQuery::rewind' =>
        array (
            'file' => 'tokyotyrantquery.rewind.php',
            'desc' => 'Rewinds the iterator',
        ),
    'TokyoTyrantQuery::search' =>
        array (
            'file' => 'tokyotyrantquery.search.php',
            'desc' => 'Searches records',
        ),
    'TokyoTyrantQuery::setLimit' =>
        array (
            'file' => 'tokyotyrantquery.setlimit.php',
            'desc' => 'Limit results',
        ),
    'TokyoTyrantQuery::setOrder' =>
        array (
            'file' => 'tokyotyrantquery.setorder.php',
            'desc' => 'Orders results',
        ),
    'TokyoTyrantQuery::valid' =>
        array (
            'file' => 'tokyotyrantquery.valid.php',
            'desc' => 'Checks the validity of current item',
        ),
    'TokyoTyrantQuery::__construct' =>
        array (
            'file' => 'tokyotyrantquery.construct.php',
            'desc' => 'Construct a new query',
        ),
    'TokyoTyrantTable::add' =>
        array (
            'file' => 'tokyotyranttable.add.php',
            'desc' => 'Adds a record',
        ),
    'TokyoTyrantTable::genUid' =>
        array (
            'file' => 'tokyotyranttable.genuid.php',
            'desc' => 'Generate unique id',
        ),
    'TokyoTyrantTable::get' =>
        array (
            'file' => 'tokyotyranttable.get.php',
            'desc' => 'Get a row',
        ),
    'TokyoTyrantTable::getIterator' =>
        array (
            'file' => 'tokyotyranttable.getiterator.php',
            'desc' => 'Get an iterator',
        ),
    'TokyoTyrantTable::getQuery' =>
        array (
            'file' => 'tokyotyranttable.getquery.php',
            'desc' => 'Get a query object',
        ),
    'TokyoTyrantTable::out' =>
        array (
            'file' => 'tokyotyranttable.out.php',
            'desc' => 'Remove records',
        ),
    'TokyoTyrantTable::put' =>
        array (
            'file' => 'tokyotyranttable.put.php',
            'desc' => 'Store a row',
        ),
    'TokyoTyrantTable::putCat' =>
        array (
            'file' => 'tokyotyranttable.putcat.php',
            'desc' => 'Concatenates to a row',
        ),
    'TokyoTyrantTable::putKeep' =>
        array (
            'file' => 'tokyotyranttable.putkeep.php',
            'desc' => 'Put a new record',
        ),
    'TokyoTyrantTable::putNr' =>
        array (
            'file' => 'tokyotyranttable.putnr.php',
            'desc' => 'Puts value',
        ),
    'TokyoTyrantTable::putShl' =>
        array (
            'file' => 'tokyotyranttable.putshl.php',
            'desc' => 'Concatenates to a record',
        ),
    'TokyoTyrantTable::setIndex' =>
        array (
            'file' => 'tokyotyranttable.setindex.php',
            'desc' => 'Sets index',
        ),
    'touch' =>
        array (
            'file' => 'function.touch.php',
            'desc' => 'Sets access and modification time of file',
        ),
    'trader_acos' =>
        array (
            'file' => 'function.trader-acos.php',
            'desc' => 'Vector Trigonometric ACos',
        ),
    'trader_ad' =>
        array (
            'file' => 'function.trader-ad.php',
            'desc' => 'Chaikin A/D Line',
        ),
    'trader_add' =>
        array (
            'file' => 'function.trader-add.php',
            'desc' => 'Vector Arithmetic Add',
        ),
    'trader_adosc' =>
        array (
            'file' => 'function.trader-adosc.php',
            'desc' => 'Chaikin A/D Oscillator',
        ),
    'trader_adx' =>
        array (
            'file' => 'function.trader-adx.php',
            'desc' => 'Average Directional Movement Index',
        ),
    'trader_adxr' =>
        array (
            'file' => 'function.trader-adxr.php',
            'desc' => 'Average Directional Movement Index Rating',
        ),
    'trader_apo' =>
        array (
            'file' => 'function.trader-apo.php',
            'desc' => 'Absolute Price Oscillator',
        ),
    'trader_aroon' =>
        array (
            'file' => 'function.trader-aroon.php',
            'desc' => 'Aroon',
        ),
    'trader_aroonosc' =>
        array (
            'file' => 'function.trader-aroonosc.php',
            'desc' => 'Aroon Oscillator',
        ),
    'trader_asin' =>
        array (
            'file' => 'function.trader-asin.php',
            'desc' => 'Vector Trigonometric ASin',
        ),
    'trader_atan' =>
        array (
            'file' => 'function.trader-atan.php',
            'desc' => 'Vector Trigonometric ATan',
        ),
    'trader_atr' =>
        array (
            'file' => 'function.trader-atr.php',
            'desc' => 'Average True Range',
        ),
    'trader_avgprice' =>
        array (
            'file' => 'function.trader-avgprice.php',
            'desc' => 'Average Price',
        ),
    'trader_bbands' =>
        array (
            'file' => 'function.trader-bbands.php',
            'desc' => 'Bollinger Bands',
        ),
    'trader_beta' =>
        array (
            'file' => 'function.trader-beta.php',
            'desc' => 'Beta',
        ),
    'trader_bop' =>
        array (
            'file' => 'function.trader-bop.php',
            'desc' => 'Balance Of Power',
        ),
    'trader_cci' =>
        array (
            'file' => 'function.trader-cci.php',
            'desc' => 'Commodity Channel Index',
        ),
    'trader_cdl2crows' =>
        array (
            'file' => 'function.trader-cdl2crows.php',
            'desc' => 'Two Crows',
        ),
    'trader_cdl3blackcrows' =>
        array (
            'file' => 'function.trader-cdl3blackcrows.php',
            'desc' => 'Three Black Crows',
        ),
    'trader_cdl3inside' =>
        array (
            'file' => 'function.trader-cdl3inside.php',
            'desc' => 'Three Inside Up/Down',
        ),
    'trader_cdl3linestrike' =>
        array (
            'file' => 'function.trader-cdl3linestrike.php',
            'desc' => 'Three-Line Strike',
        ),
    'trader_cdl3outside' =>
        array (
            'file' => 'function.trader-cdl3outside.php',
            'desc' => 'Three Outside Up/Down',
        ),
    'trader_cdl3starsinsouth' =>
        array (
            'file' => 'function.trader-cdl3starsinsouth.php',
            'desc' => 'Three Stars In The South',
        ),
    'trader_cdl3whitesoldiers' =>
        array (
            'file' => 'function.trader-cdl3whitesoldiers.php',
            'desc' => 'Three Advancing White Soldiers',
        ),
    'trader_cdlabandonedbaby' =>
        array (
            'file' => 'function.trader-cdlabandonedbaby.php',
            'desc' => 'Abandoned Baby',
        ),
    'trader_cdladvanceblock' =>
        array (
            'file' => 'function.trader-cdladvanceblock.php',
            'desc' => 'Advance Block',
        ),
    'trader_cdlbelthold' =>
        array (
            'file' => 'function.trader-cdlbelthold.php',
            'desc' => 'Belt-hold',
        ),
    'trader_cdlbreakaway' =>
        array (
            'file' => 'function.trader-cdlbreakaway.php',
            'desc' => 'Breakaway',
        ),
    'trader_cdlclosingmarubozu' =>
        array (
            'file' => 'function.trader-cdlclosingmarubozu.php',
            'desc' => 'Closing Marubozu',
        ),
    'trader_cdlconcealbabyswall' =>
        array (
            'file' => 'function.trader-cdlconcealbabyswall.php',
            'desc' => 'Concealing Baby Swallow',
        ),
    'trader_cdlcounterattack' =>
        array (
            'file' => 'function.trader-cdlcounterattack.php',
            'desc' => 'Counterattack',
        ),
    'trader_cdldarkcloudcover' =>
        array (
            'file' => 'function.trader-cdldarkcloudcover.php',
            'desc' => 'Dark Cloud Cover',
        ),
    'trader_cdldoji' =>
        array (
            'file' => 'function.trader-cdldoji.php',
            'desc' => 'Doji',
        ),
    'trader_cdldojistar' =>
        array (
            'file' => 'function.trader-cdldojistar.php',
            'desc' => 'Doji Star',
        ),
    'trader_cdldragonflydoji' =>
        array (
            'file' => 'function.trader-cdldragonflydoji.php',
            'desc' => 'Dragonfly Doji',
        ),
    'trader_cdlengulfing' =>
        array (
            'file' => 'function.trader-cdlengulfing.php',
            'desc' => 'Engulfing Pattern',
        ),
    'trader_cdleveningdojistar' =>
        array (
            'file' => 'function.trader-cdleveningdojistar.php',
            'desc' => 'Evening Doji Star',
        ),
    'trader_cdleveningstar' =>
        array (
            'file' => 'function.trader-cdleveningstar.php',
            'desc' => 'Evening Star',
        ),
    'trader_cdlgapsidesidewhite' =>
        array (
            'file' => 'function.trader-cdlgapsidesidewhite.php',
            'desc' => 'Up/Down-gap side-by-side white lines',
        ),
    'trader_cdlgravestonedoji' =>
        array (
            'file' => 'function.trader-cdlgravestonedoji.php',
            'desc' => 'Gravestone Doji',
        ),
    'trader_cdlhammer' =>
        array (
            'file' => 'function.trader-cdlhammer.php',
            'desc' => 'Hammer',
        ),
    'trader_cdlhangingman' =>
        array (
            'file' => 'function.trader-cdlhangingman.php',
            'desc' => 'Hanging Man',
        ),
    'trader_cdlharami' =>
        array (
            'file' => 'function.trader-cdlharami.php',
            'desc' => 'Harami Pattern',
        ),
    'trader_cdlharamicross' =>
        array (
            'file' => 'function.trader-cdlharamicross.php',
            'desc' => 'Harami Cross Pattern',
        ),
    'trader_cdlhighwave' =>
        array (
            'file' => 'function.trader-cdlhighwave.php',
            'desc' => 'High-Wave Candle',
        ),
    'trader_cdlhikkake' =>
        array (
            'file' => 'function.trader-cdlhikkake.php',
            'desc' => 'Hikkake Pattern',
        ),
    'trader_cdlhikkakemod' =>
        array (
            'file' => 'function.trader-cdlhikkakemod.php',
            'desc' => 'Modified Hikkake Pattern',
        ),
    'trader_cdlhomingpigeon' =>
        array (
            'file' => 'function.trader-cdlhomingpigeon.php',
            'desc' => 'Homing Pigeon',
        ),
    'trader_cdlidentical3crows' =>
        array (
            'file' => 'function.trader-cdlidentical3crows.php',
            'desc' => 'Identical Three Crows',
        ),
    'trader_cdlinneck' =>
        array (
            'file' => 'function.trader-cdlinneck.php',
            'desc' => 'In-Neck Pattern',
        ),
    'trader_cdlinvertedhammer' =>
        array (
            'file' => 'function.trader-cdlinvertedhammer.php',
            'desc' => 'Inverted Hammer',
        ),
    'trader_cdlkicking' =>
        array (
            'file' => 'function.trader-cdlkicking.php',
            'desc' => 'Kicking',
        ),
    'trader_cdlkickingbylength' =>
        array (
            'file' => 'function.trader-cdlkickingbylength.php',
            'desc' => 'Kicking - bull/bear determined by the longer marubozu',
        ),
    'trader_cdlladderbottom' =>
        array (
            'file' => 'function.trader-cdlladderbottom.php',
            'desc' => 'Ladder Bottom',
        ),
    'trader_cdllongleggeddoji' =>
        array (
            'file' => 'function.trader-cdllongleggeddoji.php',
            'desc' => 'Long Legged Doji',
        ),
    'trader_cdllongline' =>
        array (
            'file' => 'function.trader-cdllongline.php',
            'desc' => 'Long Line Candle',
        ),
    'trader_cdlmarubozu' =>
        array (
            'file' => 'function.trader-cdlmarubozu.php',
            'desc' => 'Marubozu',
        ),
    'trader_cdlmatchinglow' =>
        array (
            'file' => 'function.trader-cdlmatchinglow.php',
            'desc' => 'Matching Low',
        ),
    'trader_cdlmathold' =>
        array (
            'file' => 'function.trader-cdlmathold.php',
            'desc' => 'Mat Hold',
        ),
    'trader_cdlmorningdojistar' =>
        array (
            'file' => 'function.trader-cdlmorningdojistar.php',
            'desc' => 'Morning Doji Star',
        ),
    'trader_cdlmorningstar' =>
        array (
            'file' => 'function.trader-cdlmorningstar.php',
            'desc' => 'Morning Star',
        ),
    'trader_cdlonneck' =>
        array (
            'file' => 'function.trader-cdlonneck.php',
            'desc' => 'On-Neck Pattern',
        ),
    'trader_cdlpiercing' =>
        array (
            'file' => 'function.trader-cdlpiercing.php',
            'desc' => 'Piercing Pattern',
        ),
    'trader_cdlrickshawman' =>
        array (
            'file' => 'function.trader-cdlrickshawman.php',
            'desc' => 'Rickshaw Man',
        ),
    'trader_cdlrisefall3methods' =>
        array (
            'file' => 'function.trader-cdlrisefall3methods.php',
            'desc' => 'Rising/Falling Three Methods',
        ),
    'trader_cdlseparatinglines' =>
        array (
            'file' => 'function.trader-cdlseparatinglines.php',
            'desc' => 'Separating Lines',
        ),
    'trader_cdlshootingstar' =>
        array (
            'file' => 'function.trader-cdlshootingstar.php',
            'desc' => 'Shooting Star',
        ),
    'trader_cdlshortline' =>
        array (
            'file' => 'function.trader-cdlshortline.php',
            'desc' => 'Short Line Candle',
        ),
    'trader_cdlspinningtop' =>
        array (
            'file' => 'function.trader-cdlspinningtop.php',
            'desc' => 'Spinning Top',
        ),
    'trader_cdlstalledpattern' =>
        array (
            'file' => 'function.trader-cdlstalledpattern.php',
            'desc' => 'Stalled Pattern',
        ),
    'trader_cdlsticksandwich' =>
        array (
            'file' => 'function.trader-cdlsticksandwich.php',
            'desc' => 'Stick Sandwich',
        ),
    'trader_cdltakuri' =>
        array (
            'file' => 'function.trader-cdltakuri.php',
            'desc' => 'Takuri (Dragonfly Doji with very long lower shadow)',
        ),
    'trader_cdltasukigap' =>
        array (
            'file' => 'function.trader-cdltasukigap.php',
            'desc' => 'Tasuki Gap',
        ),
    'trader_cdlthrusting' =>
        array (
            'file' => 'function.trader-cdlthrusting.php',
            'desc' => 'Thrusting Pattern',
        ),
    'trader_cdltristar' =>
        array (
            'file' => 'function.trader-cdltristar.php',
            'desc' => 'Tristar Pattern',
        ),
    'trader_cdlunique3river' =>
        array (
            'file' => 'function.trader-cdlunique3river.php',
            'desc' => 'Unique 3 River',
        ),
    'trader_cdlupsidegap2crows' =>
        array (
            'file' => 'function.trader-cdlupsidegap2crows.php',
            'desc' => 'Upside Gap Two Crows',
        ),
    'trader_cdlxsidegap3methods' =>
        array (
            'file' => 'function.trader-cdlxsidegap3methods.php',
            'desc' => 'Upside/Downside Gap Three Methods',
        ),
    'trader_ceil' =>
        array (
            'file' => 'function.trader-ceil.php',
            'desc' => 'Vector Ceil',
        ),
    'trader_cmo' =>
        array (
            'file' => 'function.trader-cmo.php',
            'desc' => 'Chande Momentum Oscillator',
        ),
    'trader_correl' =>
        array (
            'file' => 'function.trader-correl.php',
            'desc' => 'Pearson\'s Correlation Coefficient (r)',
        ),
    'trader_cos' =>
        array (
            'file' => 'function.trader-cos.php',
            'desc' => 'Vector Trigonometric Cos',
        ),
    'trader_cosh' =>
        array (
            'file' => 'function.trader-cosh.php',
            'desc' => 'Vector Trigonometric Cosh',
        ),
    'trader_dema' =>
        array (
            'file' => 'function.trader-dema.php',
            'desc' => 'Double Exponential Moving Average',
        ),
    'trader_div' =>
        array (
            'file' => 'function.trader-div.php',
            'desc' => 'Vector Arithmetic Div',
        ),
    'trader_dx' =>
        array (
            'file' => 'function.trader-dx.php',
            'desc' => 'Directional Movement Index',
        ),
    'trader_ema' =>
        array (
            'file' => 'function.trader-ema.php',
            'desc' => 'Exponential Moving Average',
        ),
    'trader_errno' =>
        array (
            'file' => 'function.trader-errno.php',
            'desc' => 'Get error code',
        ),
    'trader_exp' =>
        array (
            'file' => 'function.trader-exp.php',
            'desc' => 'Vector Arithmetic Exp',
        ),
    'trader_floor' =>
        array (
            'file' => 'function.trader-floor.php',
            'desc' => 'Vector Floor',
        ),
    'trader_get_compat' =>
        array (
            'file' => 'function.trader-get-compat.php',
            'desc' => 'Get compatibility mode',
        ),
    'trader_get_unstable_period' =>
        array (
            'file' => 'function.trader-get-unstable-period.php',
            'desc' => 'Get unstable period',
        ),
    'trader_ht_dcperiod' =>
        array (
            'file' => 'function.trader-ht-dcperiod.php',
            'desc' => 'Hilbert Transform - Dominant Cycle Period',
        ),
    'trader_ht_dcphase' =>
        array (
            'file' => 'function.trader-ht-dcphase.php',
            'desc' => 'Hilbert Transform - Dominant Cycle Phase',
        ),
    'trader_ht_phasor' =>
        array (
            'file' => 'function.trader-ht-phasor.php',
            'desc' => 'Hilbert Transform - Phasor Components',
        ),
    'trader_ht_sine' =>
        array (
            'file' => 'function.trader-ht-sine.php',
            'desc' => 'Hilbert Transform - SineWave',
        ),
    'trader_ht_trendline' =>
        array (
            'file' => 'function.trader-ht-trendline.php',
            'desc' => 'Hilbert Transform - Instantaneous Trendline',
        ),
    'trader_ht_trendmode' =>
        array (
            'file' => 'function.trader-ht-trendmode.php',
            'desc' => 'Hilbert Transform - Trend vs Cycle Mode',
        ),
    'trader_kama' =>
        array (
            'file' => 'function.trader-kama.php',
            'desc' => 'Kaufman Adaptive Moving Average',
        ),
    'trader_linearreg' =>
        array (
            'file' => 'function.trader-linearreg.php',
            'desc' => 'Linear Regression',
        ),
    'trader_linearreg_angle' =>
        array (
            'file' => 'function.trader-linearreg-angle.php',
            'desc' => 'Linear Regression Angle',
        ),
    'trader_linearreg_intercept' =>
        array (
            'file' => 'function.trader-linearreg-intercept.php',
            'desc' => 'Linear Regression Intercept',
        ),
    'trader_linearreg_slope' =>
        array (
            'file' => 'function.trader-linearreg-slope.php',
            'desc' => 'Linear Regression Slope',
        ),
    'trader_ln' =>
        array (
            'file' => 'function.trader-ln.php',
            'desc' => 'Vector Log Natural',
        ),
    'trader_log10' =>
        array (
            'file' => 'function.trader-log10.php',
            'desc' => 'Vector Log10',
        ),
    'trader_ma' =>
        array (
            'file' => 'function.trader-ma.php',
            'desc' => 'Moving average',
        ),
    'trader_macd' =>
        array (
            'file' => 'function.trader-macd.php',
            'desc' => 'Moving Average Convergence/Divergence',
        ),
    'trader_macdext' =>
        array (
            'file' => 'function.trader-macdext.php',
            'desc' => 'MACD with controllable MA type',
        ),
    'trader_macdfix' =>
        array (
            'file' => 'function.trader-macdfix.php',
            'desc' => 'Moving Average Convergence/Divergence Fix 12/26',
        ),
    'trader_mama' =>
        array (
            'file' => 'function.trader-mama.php',
            'desc' => 'MESA Adaptive Moving Average',
        ),
    'trader_mavp' =>
        array (
            'file' => 'function.trader-mavp.php',
            'desc' => 'Moving average with variable period',
        ),
    'trader_max' =>
        array (
            'file' => 'function.trader-max.php',
            'desc' => 'Highest value over a specified period',
        ),
    'trader_maxindex' =>
        array (
            'file' => 'function.trader-maxindex.php',
            'desc' => 'Index of highest value over a specified period',
        ),
    'trader_medprice' =>
        array (
            'file' => 'function.trader-medprice.php',
            'desc' => 'Median Price',
        ),
    'trader_mfi' =>
        array (
            'file' => 'function.trader-mfi.php',
            'desc' => 'Money Flow Index',
        ),
    'trader_midpoint' =>
        array (
            'file' => 'function.trader-midpoint.php',
            'desc' => 'MidPoint over period',
        ),
    'trader_midprice' =>
        array (
            'file' => 'function.trader-midprice.php',
            'desc' => 'Midpoint Price over period',
        ),
    'trader_min' =>
        array (
            'file' => 'function.trader-min.php',
            'desc' => 'Lowest value over a specified period',
        ),
    'trader_minindex' =>
        array (
            'file' => 'function.trader-minindex.php',
            'desc' => 'Index of lowest value over a specified period',
        ),
    'trader_minmax' =>
        array (
            'file' => 'function.trader-minmax.php',
            'desc' => 'Lowest and highest values over a specified period',
        ),
    'trader_minmaxindex' =>
        array (
            'file' => 'function.trader-minmaxindex.php',
            'desc' => 'Indexes of lowest and highest values over a specified period',
        ),
    'trader_minus_di' =>
        array (
            'file' => 'function.trader-minus-di.php',
            'desc' => 'Minus Directional Indicator',
        ),
    'trader_minus_dm' =>
        array (
            'file' => 'function.trader-minus-dm.php',
            'desc' => 'Minus Directional Movement',
        ),
    'trader_mom' =>
        array (
            'file' => 'function.trader-mom.php',
            'desc' => 'Momentum',
        ),
    'trader_mult' =>
        array (
            'file' => 'function.trader-mult.php',
            'desc' => 'Vector Arithmetic Mult',
        ),
    'trader_natr' =>
        array (
            'file' => 'function.trader-natr.php',
            'desc' => 'Normalized Average True Range',
        ),
    'trader_obv' =>
        array (
            'file' => 'function.trader-obv.php',
            'desc' => 'On Balance Volume',
        ),
    'trader_plus_di' =>
        array (
            'file' => 'function.trader-plus-di.php',
            'desc' => 'Plus Directional Indicator',
        ),
    'trader_plus_dm' =>
        array (
            'file' => 'function.trader-plus-dm.php',
            'desc' => 'Plus Directional Movement',
        ),
    'trader_ppo' =>
        array (
            'file' => 'function.trader-ppo.php',
            'desc' => 'Percentage Price Oscillator',
        ),
    'trader_roc' =>
        array (
            'file' => 'function.trader-roc.php',
            'desc' => 'Rate of change : ((price/prevPrice)-1)*100',
        ),
    'trader_rocp' =>
        array (
            'file' => 'function.trader-rocp.php',
            'desc' => 'Rate of change Percentage: (price-prevPrice)/prevPrice',
        ),
    'trader_rocr' =>
        array (
            'file' => 'function.trader-rocr.php',
            'desc' => 'Rate of change ratio: (price/prevPrice)',
        ),
    'trader_rocr100' =>
        array (
            'file' => 'function.trader-rocr100.php',
            'desc' => 'Rate of change ratio 100 scale: (price/prevPrice)*100',
        ),
    'trader_rsi' =>
        array (
            'file' => 'function.trader-rsi.php',
            'desc' => 'Relative Strength Index',
        ),
    'trader_sar' =>
        array (
            'file' => 'function.trader-sar.php',
            'desc' => 'Parabolic SAR',
        ),
    'trader_sarext' =>
        array (
            'file' => 'function.trader-sarext.php',
            'desc' => 'Parabolic SAR - Extended',
        ),
    'trader_set_compat' =>
        array (
            'file' => 'function.trader-set-compat.php',
            'desc' => 'Set compatibility mode',
        ),
    'trader_set_unstable_period' =>
        array (
            'file' => 'function.trader-set-unstable-period.php',
            'desc' => 'Set unstable period',
        ),
    'trader_sin' =>
        array (
            'file' => 'function.trader-sin.php',
            'desc' => 'Vector Trigonometric Sin',
        ),
    'trader_sinh' =>
        array (
            'file' => 'function.trader-sinh.php',
            'desc' => 'Vector Trigonometric Sinh',
        ),
    'trader_sma' =>
        array (
            'file' => 'function.trader-sma.php',
            'desc' => 'Simple Moving Average',
        ),
    'trader_sqrt' =>
        array (
            'file' => 'function.trader-sqrt.php',
            'desc' => 'Vector Square Root',
        ),
    'trader_stddev' =>
        array (
            'file' => 'function.trader-stddev.php',
            'desc' => 'Standard Deviation',
        ),
    'trader_stoch' =>
        array (
            'file' => 'function.trader-stoch.php',
            'desc' => 'Stochastic',
        ),
    'trader_stochf' =>
        array (
            'file' => 'function.trader-stochf.php',
            'desc' => 'Stochastic Fast',
        ),
    'trader_stochrsi' =>
        array (
            'file' => 'function.trader-stochrsi.php',
            'desc' => 'Stochastic Relative Strength Index',
        ),
    'trader_sub' =>
        array (
            'file' => 'function.trader-sub.php',
            'desc' => 'Vector Arithmetic Subtraction',
        ),
    'trader_sum' =>
        array (
            'file' => 'function.trader-sum.php',
            'desc' => 'Summation',
        ),
    'trader_t3' =>
        array (
            'file' => 'function.trader-t3.php',
            'desc' => 'Triple Exponential Moving Average (T3)',
        ),
    'trader_tan' =>
        array (
            'file' => 'function.trader-tan.php',
            'desc' => 'Vector Trigonometric Tan',
        ),
    'trader_tanh' =>
        array (
            'file' => 'function.trader-tanh.php',
            'desc' => 'Vector Trigonometric Tanh',
        ),
    'trader_tema' =>
        array (
            'file' => 'function.trader-tema.php',
            'desc' => 'Triple Exponential Moving Average',
        ),
    'trader_trange' =>
        array (
            'file' => 'function.trader-trange.php',
            'desc' => 'True Range',
        ),
    'trader_trima' =>
        array (
            'file' => 'function.trader-trima.php',
            'desc' => 'Triangular Moving Average',
        ),
    'trader_trix' =>
        array (
            'file' => 'function.trader-trix.php',
            'desc' => '1-day Rate-Of-Change (ROC) of a Triple Smooth EMA',
        ),
    'trader_tsf' =>
        array (
            'file' => 'function.trader-tsf.php',
            'desc' => 'Time Series Forecast',
        ),
    'trader_typprice' =>
        array (
            'file' => 'function.trader-typprice.php',
            'desc' => 'Typical Price',
        ),
    'trader_ultosc' =>
        array (
            'file' => 'function.trader-ultosc.php',
            'desc' => 'Ultimate Oscillator',
        ),
    'trader_var' =>
        array (
            'file' => 'function.trader-var.php',
            'desc' => 'Variance',
        ),
    'trader_wclprice' =>
        array (
            'file' => 'function.trader-wclprice.php',
            'desc' => 'Weighted Close Price',
        ),
    'trader_willr' =>
        array (
            'file' => 'function.trader-willr.php',
            'desc' => 'Williams\' %R',
        ),
    'trader_wma' =>
        array (
            'file' => 'function.trader-wma.php',
            'desc' => 'Weighted Moving Average',
        ),
    'trait_exists' =>
        array (
            'file' => 'function.trait-exists.php',
            'desc' => 'Checks if the trait exists',
        ),
    'Transliterator::create' =>
        array (
            'file' => 'transliterator.create.php',
            'desc' => 'Create a transliterator',
        ),
    'Transliterator::createFromRules' =>
        array (
            'file' => 'transliterator.createfromrules.php',
            'desc' => 'Create transliterator from rules',
        ),
    'Transliterator::createInverse' =>
        array (
            'file' => 'transliterator.createinverse.php',
            'desc' => 'Create an inverse transliterator',
        ),
    'Transliterator::getErrorCode' =>
        array (
            'file' => 'transliterator.geterrorcode.php',
            'desc' => 'Get last error code',
        ),
    'Transliterator::getErrorMessage' =>
        array (
            'file' => 'transliterator.geterrormessage.php',
            'desc' => 'Get last error message',
        ),
    'Transliterator::listIDs' =>
        array (
            'file' => 'transliterator.listids.php',
            'desc' => 'Get transliterator IDs',
        ),
    'Transliterator::transliterate' =>
        array (
            'file' => 'transliterator.transliterate.php',
            'desc' => 'Transliterate a string',
        ),
    'Transliterator::__construct' =>
        array (
            'file' => 'transliterator.construct.php',
            'desc' => 'Private constructor to deny instantiation',
        ),
    'trigger_error' =>
        array (
            'file' => 'function.trigger-error.php',
            'desc' => 'Generates a user-level error/warning/notice message',
        ),
    'trim' =>
        array (
            'file' => 'function.trim.php',
            'desc' => 'Strip whitespace (or other characters) from the beginning and end of a string',
        ),
    'uasort' =>
        array (
            'file' => 'function.uasort.php',
            'desc' => 'Sort an array with a user-defined comparison function and maintain index association',
        ),
    'ucfirst' =>
        array (
            'file' => 'function.ucfirst.php',
            'desc' => 'Make a string\'s first character uppercase',
        ),
    'UConverter::convert' =>
        array (
            'file' => 'uconverter.convert.php',
            'desc' => 'Convert string from one charset to another',
        ),
    'UConverter::fromUCallback' =>
        array (
            'file' => 'uconverter.fromucallback.php',
            'desc' => 'Default &quot;from&quot; callback function',
        ),
    'UConverter::getAliases' =>
        array (
            'file' => 'uconverter.getaliases.php',
            'desc' => 'Get the aliases of the given name',
        ),
    'UConverter::getAvailable' =>
        array (
            'file' => 'uconverter.getavailable.php',
            'desc' => 'Get the available canonical converter names',
        ),
    'UConverter::getDestinationEncoding' =>
        array (
            'file' => 'uconverter.getdestinationencoding.php',
            'desc' => 'Get the destination encoding',
        ),
    'UConverter::getDestinationType' =>
        array (
            'file' => 'uconverter.getdestinationtype.php',
            'desc' => 'Get the destination converter type',
        ),
    'UConverter::getErrorCode' =>
        array (
            'file' => 'uconverter.geterrorcode.php',
            'desc' => 'Get last error code on the object',
        ),
    'UConverter::getErrorMessage' =>
        array (
            'file' => 'uconverter.geterrormessage.php',
            'desc' => 'Get last error message on the object',
        ),
    'UConverter::getSourceEncoding' =>
        array (
            'file' => 'uconverter.getsourceencoding.php',
            'desc' => 'Get the source encoding',
        ),
    'UConverter::getSourceType' =>
        array (
            'file' => 'uconverter.getsourcetype.php',
            'desc' => 'Get the source convertor type',
        ),
    'UConverter::getStandards' =>
        array (
            'file' => 'uconverter.getstandards.php',
            'desc' => 'Get standards associated to converter names',
        ),
    'UConverter::getSubstChars' =>
        array (
            'file' => 'uconverter.getsubstchars.php',
            'desc' => 'Get substitution chars',
        ),
    'UConverter::reasonText' =>
        array (
            'file' => 'uconverter.reasontext.php',
            'desc' => 'Get string representation of the callback reason',
        ),
    'UConverter::setDestinationEncoding' =>
        array (
            'file' => 'uconverter.setdestinationencoding.php',
            'desc' => 'Set the destination encoding',
        ),
    'UConverter::setSourceEncoding' =>
        array (
            'file' => 'uconverter.setsourceencoding.php',
            'desc' => 'Set the source encoding',
        ),
    'UConverter::setSubstChars' =>
        array (
            'file' => 'uconverter.setsubstchars.php',
            'desc' => 'Set the substitution chars',
        ),
    'UConverter::toUCallback' =>
        array (
            'file' => 'uconverter.toucallback.php',
            'desc' => 'Default &quot;to&quot; callback function',
        ),
    'UConverter::transcode' =>
        array (
            'file' => 'uconverter.transcode.php',
            'desc' => 'Convert string from one charset to another',
        ),
    'UConverter::__construct' =>
        array (
            'file' => 'uconverter.construct.php',
            'desc' => 'Create UConverter object',
        ),
    'ucwords' =>
        array (
            'file' => 'function.ucwords.php',
            'desc' => 'Uppercase the first character of each word in a string',
        ),
    'udm_add_search_limit' =>
        array (
            'file' => 'function.udm-add-search-limit.php',
            'desc' => 'Add various search limits',
        ),
    'udm_alloc_agent' =>
        array (
            'file' => 'function.udm-alloc-agent.php',
            'desc' => 'Allocate mnoGoSearch session',
        ),
    'udm_alloc_agent_array' =>
        array (
            'file' => 'function.udm-alloc-agent-array.php',
            'desc' => 'Allocate mnoGoSearch session',
        ),
    'udm_api_version' =>
        array (
            'file' => 'function.udm-api-version.php',
            'desc' => 'Get mnoGoSearch API version',
        ),
    'udm_cat_list' =>
        array (
            'file' => 'function.udm-cat-list.php',
            'desc' => 'Get all the categories on the same level with the current one',
        ),
    'udm_cat_path' =>
        array (
            'file' => 'function.udm-cat-path.php',
            'desc' => 'Get the path to the current category',
        ),
    'udm_check_charset' =>
        array (
            'file' => 'function.udm-check-charset.php',
            'desc' => 'Check if the given charset is known to mnogosearch',
        ),
    'udm_clear_search_limits' =>
        array (
            'file' => 'function.udm-clear-search-limits.php',
            'desc' => 'Clear all mnoGoSearch search restrictions',
        ),
    'udm_crc32' =>
        array (
            'file' => 'function.udm-crc32.php',
            'desc' => 'Return CRC32 checksum of given string',
        ),
    'udm_errno' =>
        array (
            'file' => 'function.udm-errno.php',
            'desc' => 'Get mnoGoSearch error number',
        ),
    'udm_error' =>
        array (
            'file' => 'function.udm-error.php',
            'desc' => 'Get mnoGoSearch error message',
        ),
    'udm_find' =>
        array (
            'file' => 'function.udm-find.php',
            'desc' => 'Perform search',
        ),
    'udm_free_agent' =>
        array (
            'file' => 'function.udm-free-agent.php',
            'desc' => 'Free mnoGoSearch session',
        ),
    'udm_free_ispell_data' =>
        array (
            'file' => 'function.udm-free-ispell-data.php',
            'desc' => 'Free memory allocated for ispell data',
        ),
    'udm_free_res' =>
        array (
            'file' => 'function.udm-free-res.php',
            'desc' => 'Free mnoGoSearch result',
        ),
    'udm_get_doc_count' =>
        array (
            'file' => 'function.udm-get-doc-count.php',
            'desc' => 'Get total number of documents in database',
        ),
    'udm_get_res_field' =>
        array (
            'file' => 'function.udm-get-res-field.php',
            'desc' => 'Fetch a result field',
        ),
    'udm_get_res_param' =>
        array (
            'file' => 'function.udm-get-res-param.php',
            'desc' => 'Get mnoGoSearch result parameters',
        ),
    'udm_hash32' =>
        array (
            'file' => 'function.udm-hash32.php',
            'desc' => 'Return Hash32 checksum of gived string',
        ),
    'udm_load_ispell_data' =>
        array (
            'file' => 'function.udm-load-ispell-data.php',
            'desc' => 'Load ispell data',
        ),
    'udm_set_agent_param' =>
        array (
            'file' => 'function.udm-set-agent-param.php',
            'desc' => 'Set mnoGoSearch agent session parameters',
        ),
    'uksort' =>
        array (
            'file' => 'function.uksort.php',
            'desc' => 'Sort an array by keys using a user-defined comparison function',
        ),
    'umask' =>
        array (
            'file' => 'function.umask.php',
            'desc' => 'Changes the current umask',
        ),
    'uniqid' =>
        array (
            'file' => 'function.uniqid.php',
            'desc' => 'Generate a unique ID',
        ),
    'unixtojd' =>
        array (
            'file' => 'function.unixtojd.php',
            'desc' => 'Convert Unix timestamp to Julian Day',
        ),
    'unlink' =>
        array (
            'file' => 'function.unlink.php',
            'desc' => 'Deletes a file',
        ),
    'unpack' =>
        array (
            'file' => 'function.unpack.php',
            'desc' => 'Unpack data from binary string',
        ),
    'unregister_tick_function' =>
        array (
            'file' => 'function.unregister-tick-function.php',
            'desc' => 'De-register a function for execution on each tick',
        ),
    'unserialize' =>
        array (
            'file' => 'function.unserialize.php',
            'desc' => 'Creates a PHP value from a stored representation',
        ),
    'unset' =>
        array (
            'file' => 'function.unset.php',
            'desc' => 'Unset a given variable',
        ),
    'untaint' =>
        array (
            'file' => 'function.untaint.php',
            'desc' => 'Untaint strings',
        ),
    'uopz_backup' =>
        array (
            'file' => 'function.uopz-backup.php',
            'desc' => 'Backup a function',
        ),
    'uopz_compose' =>
        array (
            'file' => 'function.uopz-compose.php',
            'desc' => 'Compose a class',
        ),
    'uopz_copy' =>
        array (
            'file' => 'function.uopz-copy.php',
            'desc' => 'Copy a function',
        ),
    'uopz_delete' =>
        array (
            'file' => 'function.uopz-delete.php',
            'desc' => 'Delete a function',
        ),
    'uopz_extend' =>
        array (
            'file' => 'function.uopz-extend.php',
            'desc' => 'Extend a class at runtime',
        ),
    'uopz_flags' =>
        array (
            'file' => 'function.uopz-flags.php',
            'desc' => 'Get or set flags on function or class',
        ),
    'uopz_function' =>
        array (
            'file' => 'function.uopz-function.php',
            'desc' => 'Creates a function at runtime',
        ),
    'uopz_implement' =>
        array (
            'file' => 'function.uopz-implement.php',
            'desc' => 'Implements an interface at runtime',
        ),
    'uopz_overload' =>
        array (
            'file' => 'function.uopz-overload.php',
            'desc' => 'Overload a VM opcode',
        ),
    'uopz_redefine' =>
        array (
            'file' => 'function.uopz-redefine.php',
            'desc' => 'Redefine a constant',
        ),
    'uopz_rename' =>
        array (
            'file' => 'function.uopz-rename.php',
            'desc' => 'Rename a function at runtime',
        ),
    'uopz_restore' =>
        array (
            'file' => 'function.uopz-restore.php',
            'desc' => 'Restore a previously backed up function',
        ),
    'uopz_undefine' =>
        array (
            'file' => 'function.uopz-undefine.php',
            'desc' => 'Undefine a constant',
        ),
    'urldecode' =>
        array (
            'file' => 'function.urldecode.php',
            'desc' => 'Decodes URL-encoded string',
        ),
    'urlencode' =>
        array (
            'file' => 'function.urlencode.php',
            'desc' => 'URL-encodes string',
        ),
    'user_error' =>
        array (
            'file' => 'function.user-error.php',
            'desc' => 'Alias of trigger_error',
        ),
    'use_soap_error_handler' =>
        array (
            'file' => 'function.use-soap-error-handler.php',
            'desc' => 'Set whether to use the SOAP error handler',
        ),
    'usleep' =>
        array (
            'file' => 'function.usleep.php',
            'desc' => 'Delay execution in microseconds',
        ),
    'usort' =>
        array (
            'file' => 'function.usort.php',
            'desc' => 'Sort an array by values using a user-defined comparison function',
        ),
    'utf8_decode' =>
        array (
            'file' => 'function.utf8-decode.php',
            'desc' => 'Converts a string with ISO-8859-1 characters encoded with UTF-8
   to single-byte ISO-8859-1',
        ),
    'utf8_encode' =>
        array (
            'file' => 'function.utf8-encode.php',
            'desc' => 'Encodes an ISO-8859-1 string to UTF-8',
        ),
    'V8Js::executeString' =>
        array (
            'file' => 'v8js.executestring.php',
            'desc' => 'Execute a string as Javascript code',
        ),
    'V8Js::getExtensions' =>
        array (
            'file' => 'v8js.getextensions.php',
            'desc' => 'Return an array of registered extensions',
        ),
    'V8Js::getPendingException' =>
        array (
            'file' => 'v8js.getpendingexception.php',
            'desc' => 'Return pending uncaught Javascript exception',
        ),
    'V8Js::registerExtension' =>
        array (
            'file' => 'v8js.registerextension.php',
            'desc' => 'Register Javascript extensions for V8Js',
        ),
    'V8Js::__construct' =>
        array (
            'file' => 'v8js.construct.php',
            'desc' => 'Construct a new V8Js object',
        ),
    'V8JsException::getJsFileName' =>
        array (
            'file' => 'v8jsexception.getjsfilename.php',
        ),
    'V8JsException::getJsLineNumber' =>
        array (
            'file' => 'v8jsexception.getjslinenumber.php',
        ),
    'V8JsException::getJsSourceLine' =>
        array (
            'file' => 'v8jsexception.getjssourceline.php',
        ),
    'V8JsException::getJsTrace' =>
        array (
            'file' => 'v8jsexception.getjstrace.php',
        ),
    'variant_abs' =>
        array (
            'file' => 'function.variant-abs.php',
            'desc' => 'Returns the absolute value of a variant',
        ),
    'variant_add' =>
        array (
            'file' => 'function.variant-add.php',
            'desc' => '&quot;Adds&quot; two variant values together and returns the result',
        ),
    'variant_and' =>
        array (
            'file' => 'function.variant-and.php',
            'desc' => 'Performs a bitwise AND operation between two variants',
        ),
    'variant_cast' =>
        array (
            'file' => 'function.variant-cast.php',
            'desc' => 'Convert a variant into a new variant object of another type',
        ),
    'variant_cat' =>
        array (
            'file' => 'function.variant-cat.php',
            'desc' => 'concatenates two variant values together and returns the result',
        ),
    'variant_cmp' =>
        array (
            'file' => 'function.variant-cmp.php',
            'desc' => 'Compares two variants',
        ),
    'variant_date_from_timestamp' =>
        array (
            'file' => 'function.variant-date-from-timestamp.php',
            'desc' => 'Returns a variant date representation of a Unix timestamp',
        ),
    'variant_date_to_timestamp' =>
        array (
            'file' => 'function.variant-date-to-timestamp.php',
            'desc' => 'Converts a variant date/time value to Unix timestamp',
        ),
    'variant_div' =>
        array (
            'file' => 'function.variant-div.php',
            'desc' => 'Returns the result from dividing two variants',
        ),
    'variant_eqv' =>
        array (
            'file' => 'function.variant-eqv.php',
            'desc' => 'Performs a bitwise equivalence on two variants',
        ),
    'variant_fix' =>
        array (
            'file' => 'function.variant-fix.php',
            'desc' => 'Returns the integer portion of a variant',
        ),
    'variant_get_type' =>
        array (
            'file' => 'function.variant-get-type.php',
            'desc' => 'Returns the type of a variant object',
        ),
    'variant_idiv' =>
        array (
            'file' => 'function.variant-idiv.php',
            'desc' => 'Converts variants to integers and then returns the result from dividing them',
        ),
    'variant_imp' =>
        array (
            'file' => 'function.variant-imp.php',
            'desc' => 'Performs a bitwise implication on two variants',
        ),
    'variant_int' =>
        array (
            'file' => 'function.variant-int.php',
            'desc' => 'Returns the integer portion of a variant',
        ),
    'variant_mod' =>
        array (
            'file' => 'function.variant-mod.php',
            'desc' => 'Divides two variants and returns only the remainder',
        ),
    'variant_mul' =>
        array (
            'file' => 'function.variant-mul.php',
            'desc' => 'Multiplies the values of the two variants',
        ),
    'variant_neg' =>
        array (
            'file' => 'function.variant-neg.php',
            'desc' => 'Performs logical negation on a variant',
        ),
    'variant_not' =>
        array (
            'file' => 'function.variant-not.php',
            'desc' => 'Performs bitwise not negation on a variant',
        ),
    'variant_or' =>
        array (
            'file' => 'function.variant-or.php',
            'desc' => 'Performs a logical disjunction on two variants',
        ),
    'variant_pow' =>
        array (
            'file' => 'function.variant-pow.php',
            'desc' => 'Returns the result of performing the power function with two variants',
        ),
    'variant_round' =>
        array (
            'file' => 'function.variant-round.php',
            'desc' => 'Rounds a variant to the specified number of decimal places',
        ),
    'variant_set' =>
        array (
            'file' => 'function.variant-set.php',
            'desc' => 'Assigns a new value for a variant object',
        ),
    'variant_set_type' =>
        array (
            'file' => 'function.variant-set-type.php',
            'desc' => 'Convert a variant into another type &quot;in-place&quot;',
        ),
    'variant_sub' =>
        array (
            'file' => 'function.variant-sub.php',
            'desc' => 'Subtracts the value of the right variant from the left variant value',
        ),
    'variant_xor' =>
        array (
            'file' => 'function.variant-xor.php',
            'desc' => 'Performs a logical exclusion on two variants',
        ),
    'VarnishAdmin::auth' =>
        array (
            'file' => 'varnishadmin.auth.php',
            'desc' => 'Authenticate on a varnish instance',
        ),
    'VarnishAdmin::ban' =>
        array (
            'file' => 'varnishadmin.ban.php',
            'desc' => 'Ban URLs using a VCL expression',
        ),
    'VarnishAdmin::banUrl' =>
        array (
            'file' => 'varnishadmin.banurl.php',
            'desc' => 'Ban an URL using a VCL expression',
        ),
    'VarnishAdmin::clearPanic' =>
        array (
            'file' => 'varnishadmin.clearpanic.php',
            'desc' => 'Clear varnish instance panic messages',
        ),
    'VarnishAdmin::connect' =>
        array (
            'file' => 'varnishadmin.connect.php',
            'desc' => 'Connect to a varnish instance administration interface',
        ),
    'VarnishAdmin::disconnect' =>
        array (
            'file' => 'varnishadmin.disconnect.php',
            'desc' => 'Disconnect from a varnish instance administration interface',
        ),
    'VarnishAdmin::getPanic' =>
        array (
            'file' => 'varnishadmin.getpanic.php',
            'desc' => 'Get the last panic message on a varnish instance',
        ),
    'VarnishAdmin::getParams' =>
        array (
            'file' => 'varnishadmin.getparams.php',
            'desc' => 'Fetch current varnish instance configuration parameters',
        ),
    'VarnishAdmin::isRunning' =>
        array (
            'file' => 'varnishadmin.isrunning.php',
            'desc' => 'Check if the varnish slave process is currently running',
        ),
    'VarnishAdmin::setCompat' =>
        array (
            'file' => 'varnishadmin.setcompat.php',
            'desc' => 'Set the class compat configuration param',
        ),
    'VarnishAdmin::setHost' =>
        array (
            'file' => 'varnishadmin.sethost.php',
            'desc' => 'Set the class host configuration param',
        ),
    'VarnishAdmin::setIdent' =>
        array (
            'file' => 'varnishadmin.setident.php',
            'desc' => 'Set the class ident configuration param',
        ),
    'VarnishAdmin::setParam' =>
        array (
            'file' => 'varnishadmin.setparam.php',
            'desc' => 'Set configuration param on the current varnish instance',
        ),
    'VarnishAdmin::setPort' =>
        array (
            'file' => 'varnishadmin.setport.php',
            'desc' => 'Set the class port configuration param',
        ),
    'VarnishAdmin::setSecret' =>
        array (
            'file' => 'varnishadmin.setsecret.php',
            'desc' => 'Set the class secret configuration param',
        ),
    'VarnishAdmin::setTimeout' =>
        array (
            'file' => 'varnishadmin.settimeout.php',
            'desc' => 'Set the class timeout configuration param',
        ),
    'VarnishAdmin::start' =>
        array (
            'file' => 'varnishadmin.start.php',
            'desc' => 'Start varnish worker process',
        ),
    'VarnishAdmin::stop' =>
        array (
            'file' => 'varnishadmin.stop.php',
            'desc' => 'Stop varnish worker process',
        ),
    'VarnishAdmin::__construct' =>
        array (
            'file' => 'varnishadmin.construct.php',
            'desc' => 'VarnishAdmin constructor',
        ),
    'VarnishLog::getLine' =>
        array (
            'file' => 'varnishlog.getline.php',
            'desc' => 'Get next log line',
        ),
    'VarnishLog::getTagName' =>
        array (
            'file' => 'varnishlog.gettagname.php',
            'desc' => 'Get the log tag string representation by its index',
        ),
    'VarnishLog::__construct' =>
        array (
            'file' => 'varnishlog.construct.php',
            'desc' => 'Varnishlog constructor',
        ),
    'VarnishStat::getSnapshot' =>
        array (
            'file' => 'varnishstat.getsnapshot.php',
            'desc' => 'Get the current varnish instance statistics snapshot',
        ),
    'VarnishStat::__construct' =>
        array (
            'file' => 'varnishstat.construct.php',
            'desc' => 'VarnishStat constructor',
        ),
    'var_dump' =>
        array (
            'file' => 'function.var-dump.php',
            'desc' => 'Dumps information about a variable',
        ),
    'var_export' =>
        array (
            'file' => 'function.var-export.php',
            'desc' => 'Outputs or returns a parsable string representation of a variable',
        ),
    'version_compare' =>
        array (
            'file' => 'function.version-compare.php',
            'desc' => 'Compares two &quot;PHP-standardized&quot; version number strings',
        ),
    'vfprintf' =>
        array (
            'file' => 'function.vfprintf.php',
            'desc' => 'Write a formatted string to a stream',
        ),
    'virtual' =>
        array (
            'file' => 'function.virtual.php',
            'desc' => 'Perform an Apache sub-request',
        ),
    'vpopmail_add_alias_domain' =>
        array (
            'file' => 'function.vpopmail-add-alias-domain.php',
            'desc' => 'Add an alias for a virtual domain',
        ),
    'vpopmail_add_alias_domain_ex' =>
        array (
            'file' => 'function.vpopmail-add-alias-domain-ex.php',
            'desc' => 'Add alias to an existing virtual domain',
        ),
    'vpopmail_add_domain' =>
        array (
            'file' => 'function.vpopmail-add-domain.php',
            'desc' => 'Add a new virtual domain',
        ),
    'vpopmail_add_domain_ex' =>
        array (
            'file' => 'function.vpopmail-add-domain-ex.php',
            'desc' => 'Add a new virtual domain',
        ),
    'vpopmail_add_user' =>
        array (
            'file' => 'function.vpopmail-add-user.php',
            'desc' => 'Add a new user to the specified virtual domain',
        ),
    'vpopmail_alias_add' =>
        array (
            'file' => 'function.vpopmail-alias-add.php',
            'desc' => 'Insert a virtual alias',
        ),
    'vpopmail_alias_del' =>
        array (
            'file' => 'function.vpopmail-alias-del.php',
            'desc' => 'Deletes all virtual aliases of a user',
        ),
    'vpopmail_alias_del_domain' =>
        array (
            'file' => 'function.vpopmail-alias-del-domain.php',
            'desc' => 'Deletes all virtual aliases of a domain',
        ),
    'vpopmail_alias_get' =>
        array (
            'file' => 'function.vpopmail-alias-get.php',
            'desc' => 'Get all lines of an alias for a domain',
        ),
    'vpopmail_alias_get_all' =>
        array (
            'file' => 'function.vpopmail-alias-get-all.php',
            'desc' => 'Get all lines of an alias for a domain',
        ),
    'vpopmail_auth_user' =>
        array (
            'file' => 'function.vpopmail-auth-user.php',
            'desc' => 'Attempt to validate a username/domain/password',
        ),
    'vpopmail_del_domain' =>
        array (
            'file' => 'function.vpopmail-del-domain.php',
            'desc' => 'Delete a virtual domain',
        ),
    'vpopmail_del_domain_ex' =>
        array (
            'file' => 'function.vpopmail-del-domain-ex.php',
            'desc' => 'Delete a virtual domain',
        ),
    'vpopmail_del_user' =>
        array (
            'file' => 'function.vpopmail-del-user.php',
            'desc' => 'Delete a user from a virtual domain',
        ),
    'vpopmail_error' =>
        array (
            'file' => 'function.vpopmail-error.php',
            'desc' => 'Get text message for last vpopmail error',
        ),
    'vpopmail_passwd' =>
        array (
            'file' => 'function.vpopmail-passwd.php',
            'desc' => 'Change a virtual user\'s password',
        ),
    'vpopmail_set_user_quota' =>
        array (
            'file' => 'function.vpopmail-set-user-quota.php',
            'desc' => 'Sets a virtual user\'s quota',
        ),
    'vprintf' =>
        array (
            'file' => 'function.vprintf.php',
            'desc' => 'Output a formatted string',
        ),
    'vsprintf' =>
        array (
            'file' => 'function.vsprintf.php',
            'desc' => 'Return a formatted string',
        ),
    'wddx_add_vars' =>
        array (
            'file' => 'function.wddx-add-vars.php',
            'desc' => 'Add variables to a WDDX packet with the specified ID',
        ),
    'wddx_deserialize' =>
        array (
            'file' => 'function.wddx-deserialize.php',
            'desc' => 'Unserializes a WDDX packet',
        ),
    'wddx_packet_end' =>
        array (
            'file' => 'function.wddx-packet-end.php',
            'desc' => 'Ends a WDDX packet with the specified ID',
        ),
    'wddx_packet_start' =>
        array (
            'file' => 'function.wddx-packet-start.php',
            'desc' => 'Starts a new WDDX packet with structure inside it',
        ),
    'wddx_serialize_value' =>
        array (
            'file' => 'function.wddx-serialize-value.php',
            'desc' => 'Serialize a single value into a WDDX packet',
        ),
    'wddx_serialize_vars' =>
        array (
            'file' => 'function.wddx-serialize-vars.php',
            'desc' => 'Serialize variables into a WDDX packet',
        ),
    'WeakMap::count' =>
        array (
            'file' => 'weakmap.count.php',
            'desc' => 'Counts the number of live entries in the map',
        ),
    'WeakMap::current' =>
        array (
            'file' => 'weakmap.current.php',
            'desc' => 'Returns the current value under iteration',
        ),
    'WeakMap::key' =>
        array (
            'file' => 'weakmap.key.php',
            'desc' => 'Returns the current key under iteration.',
        ),
    'WeakMap::next' =>
        array (
            'file' => 'weakmap.next.php',
            'desc' => 'Advances to the next map element',
        ),
    'WeakMap::offsetExists' =>
        array (
            'file' => 'weakmap.offsetexists.php',
            'desc' => 'Checks whether a certain object is in the map',
        ),
    'WeakMap::offsetGet' =>
        array (
            'file' => 'weakmap.offsetget.php',
            'desc' => 'Returns the value pointed to by a certain object',
        ),
    'WeakMap::offsetSet' =>
        array (
            'file' => 'weakmap.offsetset.php',
            'desc' => 'Updates the map with a new key-value pair',
        ),
    'WeakMap::offsetUnset' =>
        array (
            'file' => 'weakmap.offsetunset.php',
            'desc' => 'Removes an entry from the map',
        ),
    'WeakMap::rewind' =>
        array (
            'file' => 'weakmap.rewind.php',
            'desc' => 'Rewinds the iterator to the beginning of the map',
        ),
    'WeakMap::valid' =>
        array (
            'file' => 'weakmap.valid.php',
            'desc' => 'Returns whether the iterator is still on a valid map element',
        ),
    'WeakMap::__construct' =>
        array (
            'file' => 'weakmap.construct.php',
            'desc' => 'Constructs a new map',
        ),
    'Weakref::acquire' =>
        array (
            'file' => 'weakref.acquire.php',
            'desc' => 'Acquires a strong reference on that object',
        ),
    'Weakref::get' =>
        array (
            'file' => 'weakref.get.php',
            'desc' => 'Returns the object pointed to by the weak reference',
        ),
    'Weakref::release' =>
        array (
            'file' => 'weakref.release.php',
            'desc' => 'Releases a previously acquired reference',
        ),
    'Weakref::valid' =>
        array (
            'file' => 'weakref.valid.php',
            'desc' => 'Checks whether the object referenced still exists',
        ),
    'Weakref::__construct' =>
        array (
            'file' => 'weakref.construct.php',
            'desc' => 'Constructs a new weak reference',
        ),
    'win32_continue_service' =>
        array (
            'file' => 'function.win32-continue-service.php',
            'desc' => 'Resumes a paused service',
        ),
    'win32_create_service' =>
        array (
            'file' => 'function.win32-create-service.php',
            'desc' => 'Creates a new service entry in the SCM database',
        ),
    'win32_delete_service' =>
        array (
            'file' => 'function.win32-delete-service.php',
            'desc' => 'Deletes a service entry from the SCM database',
        ),
    'win32_get_last_control_message' =>
        array (
            'file' => 'function.win32-get-last-control-message.php',
            'desc' => 'Returns the last control message that was sent to this service',
        ),
    'win32_pause_service' =>
        array (
            'file' => 'function.win32-pause-service.php',
            'desc' => 'Pauses a service',
        ),
    'win32_ps_list_procs' =>
        array (
            'file' => 'function.win32-ps-list-procs.php',
            'desc' => 'List running processes',
        ),
    'win32_ps_stat_mem' =>
        array (
            'file' => 'function.win32-ps-stat-mem.php',
            'desc' => 'Stat memory utilization',
        ),
    'win32_ps_stat_proc' =>
        array (
            'file' => 'function.win32-ps-stat-proc.php',
            'desc' => 'Stat process',
        ),
    'win32_query_service_status' =>
        array (
            'file' => 'function.win32-query-service-status.php',
            'desc' => 'Queries the status of a service',
        ),
    'win32_set_service_status' =>
        array (
            'file' => 'function.win32-set-service-status.php',
            'desc' => 'Update the service status',
        ),
    'win32_start_service' =>
        array (
            'file' => 'function.win32-start-service.php',
            'desc' => 'Starts a service',
        ),
    'win32_start_service_ctrl_dispatcher' =>
        array (
            'file' => 'function.win32-start-service-ctrl-dispatcher.php',
            'desc' => 'Registers the script with the SCM, so that it can act as the service with the given name',
        ),
    'win32_stop_service' =>
        array (
            'file' => 'function.win32-stop-service.php',
            'desc' => 'Stops a service',
        ),
    'wincache_fcache_fileinfo' =>
        array (
            'file' => 'function.wincache-fcache-fileinfo.php',
            'desc' => 'Retrieves information about files cached in the file cache',
        ),
    'wincache_fcache_meminfo' =>
        array (
            'file' => 'function.wincache-fcache-meminfo.php',
            'desc' => 'Retrieves information about file cache memory usage',
        ),
    'wincache_lock' =>
        array (
            'file' => 'function.wincache-lock.php',
            'desc' => 'Acquires an exclusive lock on a given key',
        ),
    'wincache_ocache_fileinfo' =>
        array (
            'file' => 'function.wincache-ocache-fileinfo.php',
            'desc' => 'Retrieves information about files cached in the opcode cache',
        ),
    'wincache_ocache_meminfo' =>
        array (
            'file' => 'function.wincache-ocache-meminfo.php',
            'desc' => 'Retrieves information about opcode cache memory usage',
        ),
    'wincache_refresh_if_changed' =>
        array (
            'file' => 'function.wincache-refresh-if-changed.php',
            'desc' => 'Refreshes the cache entries for the cached files',
        ),
    'wincache_rplist_fileinfo' =>
        array (
            'file' => 'function.wincache-rplist-fileinfo.php',
            'desc' => 'Retrieves information about resolve file path cache',
        ),
    'wincache_rplist_meminfo' =>
        array (
            'file' => 'function.wincache-rplist-meminfo.php',
            'desc' => 'Retrieves information about memory usage by the resolve file path cache',
        ),
    'wincache_scache_info' =>
        array (
            'file' => 'function.wincache-scache-info.php',
            'desc' => 'Retrieves information about files cached in the session cache',
        ),
    'wincache_scache_meminfo' =>
        array (
            'file' => 'function.wincache-scache-meminfo.php',
            'desc' => 'Retrieves information about session cache memory usage',
        ),
    'wincache_ucache_add' =>
        array (
            'file' => 'function.wincache-ucache-add.php',
            'desc' => 'Adds a variable in user cache only if variable does not already exist in the cache',
        ),
    'wincache_ucache_cas' =>
        array (
            'file' => 'function.wincache-ucache-cas.php',
            'desc' => 'Compares the variable with old value and assigns new value to it',
        ),
    'wincache_ucache_clear' =>
        array (
            'file' => 'function.wincache-ucache-clear.php',
            'desc' => 'Deletes entire content of the user cache',
        ),
    'wincache_ucache_dec' =>
        array (
            'file' => 'function.wincache-ucache-dec.php',
            'desc' => 'Decrements the value associated with the key',
        ),
    'wincache_ucache_delete' =>
        array (
            'file' => 'function.wincache-ucache-delete.php',
            'desc' => 'Deletes variables from the user cache',
        ),
    'wincache_ucache_exists' =>
        array (
            'file' => 'function.wincache-ucache-exists.php',
            'desc' => 'Checks if a variable exists in the user cache',
        ),
    'wincache_ucache_get' =>
        array (
            'file' => 'function.wincache-ucache-get.php',
            'desc' => 'Gets a variable stored in the user cache',
        ),
    'wincache_ucache_inc' =>
        array (
            'file' => 'function.wincache-ucache-inc.php',
            'desc' => 'Increments the value associated with the key',
        ),
    'wincache_ucache_info' =>
        array (
            'file' => 'function.wincache-ucache-info.php',
            'desc' => 'Retrieves information about data stored in the user cache',
        ),
    'wincache_ucache_meminfo' =>
        array (
            'file' => 'function.wincache-ucache-meminfo.php',
            'desc' => 'Retrieves information about user cache memory usage',
        ),
    'wincache_ucache_set' =>
        array (
            'file' => 'function.wincache-ucache-set.php',
            'desc' => 'Adds a variable in user cache and overwrites a variable if it already exists in the cache',
        ),
    'wincache_unlock' =>
        array (
            'file' => 'function.wincache-unlock.php',
            'desc' => 'Releases an exclusive lock on a given key',
        ),
    'wordwrap' =>
        array (
            'file' => 'function.wordwrap.php',
            'desc' => 'Wraps a string to a given number of characters',
        ),
    'Worker::getStacked' =>
        array (
            'file' => 'worker.getstacked.php',
            'desc' => 'Stack Analysis',
        ),
    'Worker::isShutdown' =>
        array (
            'file' => 'worker.isshutdown.php',
            'desc' => 'State Detection',
        ),
    'Worker::isWorking' =>
        array (
            'file' => 'worker.isworking.php',
            'desc' => 'State Detection',
        ),
    'Worker::shutdown' =>
        array (
            'file' => 'worker.shutdown.php',
            'desc' => 'Synchronization',
        ),
    'Worker::stack' =>
        array (
            'file' => 'worker.stack.php',
            'desc' => 'Stacking',
        ),
    'Worker::unstack' =>
        array (
            'file' => 'worker.unstack.php',
            'desc' => 'Stacking',
        ),
    'xattr_get' =>
        array (
            'file' => 'function.xattr-get.php',
            'desc' => 'Get an extended attribute',
        ),
    'xattr_list' =>
        array (
            'file' => 'function.xattr-list.php',
            'desc' => 'Get a list of extended attributes',
        ),
    'xattr_remove' =>
        array (
            'file' => 'function.xattr-remove.php',
            'desc' => 'Remove an extended attribute',
        ),
    'xattr_set' =>
        array (
            'file' => 'function.xattr-set.php',
            'desc' => 'Set an extended attribute',
        ),
    'xattr_supported' =>
        array (
            'file' => 'function.xattr-supported.php',
            'desc' => 'Check if filesystem supports extended attributes',
        ),
    'xdiff_file_bdiff' =>
        array (
            'file' => 'function.xdiff-file-bdiff.php',
            'desc' => 'Make binary diff of two files',
        ),
    'xdiff_file_bdiff_size' =>
        array (
            'file' => 'function.xdiff-file-bdiff-size.php',
            'desc' => 'Read a size of file created by applying a binary diff',
        ),
    'xdiff_file_bpatch' =>
        array (
            'file' => 'function.xdiff-file-bpatch.php',
            'desc' => 'Patch a file with a binary diff',
        ),
    'xdiff_file_diff' =>
        array (
            'file' => 'function.xdiff-file-diff.php',
            'desc' => 'Make unified diff of two files',
        ),
    'xdiff_file_diff_binary' =>
        array (
            'file' => 'function.xdiff-file-diff-binary.php',
            'desc' => 'Alias of xdiff_file_bdiff',
        ),
    'xdiff_file_merge3' =>
        array (
            'file' => 'function.xdiff-file-merge3.php',
            'desc' => 'Merge 3 files into one',
        ),
    'xdiff_file_patch' =>
        array (
            'file' => 'function.xdiff-file-patch.php',
            'desc' => 'Patch a file with an unified diff',
        ),
    'xdiff_file_patch_binary' =>
        array (
            'file' => 'function.xdiff-file-patch-binary.php',
            'desc' => 'Alias of xdiff_file_bpatch',
        ),
    'xdiff_file_rabdiff' =>
        array (
            'file' => 'function.xdiff-file-rabdiff.php',
            'desc' => 'Make binary diff of two files using the Rabin\'s polynomial fingerprinting algorithm',
        ),
    'xdiff_string_bdiff' =>
        array (
            'file' => 'function.xdiff-string-bdiff.php',
            'desc' => 'Make binary diff of two strings',
        ),
    'xdiff_string_bdiff_size' =>
        array (
            'file' => 'function.xdiff-string-bdiff-size.php',
            'desc' => 'Read a size of file created by applying a binary diff',
        ),
    'xdiff_string_bpatch' =>
        array (
            'file' => 'function.xdiff-string-bpatch.php',
            'desc' => 'Patch a string with a binary diff',
        ),
    'xdiff_string_diff' =>
        array (
            'file' => 'function.xdiff-string-diff.php',
            'desc' => 'Make unified diff of two strings',
        ),
    'xdiff_string_diff_binary' =>
        array (
            'file' => 'function.xdiff-string-diff-binary.php',
            'desc' => 'Alias of xdiff_string_bdiff',
        ),
    'xdiff_string_merge3' =>
        array (
            'file' => 'function.xdiff-string-merge3.php',
            'desc' => 'Merge 3 strings into one',
        ),
    'xdiff_string_patch' =>
        array (
            'file' => 'function.xdiff-string-patch.php',
            'desc' => 'Patch a string with an unified diff',
        ),
    'xdiff_string_patch_binary' =>
        array (
            'file' => 'function.xdiff-string-patch-binary.php',
            'desc' => 'Alias of xdiff_string_bpatch',
        ),
    'xdiff_string_rabdiff' =>
        array (
            'file' => 'function.xdiff-string-rabdiff.php',
            'desc' => 'Make binary diff of two strings using the Rabin\'s polynomial fingerprinting algorithm',
        ),
    'xhprof_disable' =>
        array (
            'file' => 'function.xhprof-disable.php',
            'desc' => 'Stops xhprof profiler',
        ),
    'xhprof_enable' =>
        array (
            'file' => 'function.xhprof-enable.php',
            'desc' => 'Start xhprof profiler',
        ),
    'xhprof_sample_disable' =>
        array (
            'file' => 'function.xhprof-sample-disable.php',
            'desc' => 'Stops xhprof sample profiler',
        ),
    'xhprof_sample_enable' =>
        array (
            'file' => 'function.xhprof-sample-enable.php',
            'desc' => 'Start XHProf profiling in sampling mode',
        ),
    'XMLDiff\\Base::diff' =>
        array (
            'file' => 'xmldiff-base.diff.php',
            'desc' => 'Produce diff of two XML documents',
        ),
    'XMLDiff\\Base::merge' =>
        array (
            'file' => 'xmldiff-base.merge.php',
            'desc' => 'Produce new XML document based on diff',
        ),
    'XMLDiff\\Base::__construct' =>
        array (
            'file' => 'xmldiff-base.construct.php',
            'desc' => 'Constructor',
        ),
    'XMLDiff\\DOM::diff' =>
        array (
            'file' => 'xmldiff-dom.diff.php',
            'desc' => 'Diff two DOMDocument objects',
        ),
    'XMLDiff\\DOM::merge' =>
        array (
            'file' => 'xmldiff-dom.merge.php',
            'desc' => 'Produce merged DOMDocument',
        ),
    'XMLDiff\\File::diff' =>
        array (
            'file' => 'xmldiff-file.diff.php',
            'desc' => 'Diff two XML files',
        ),
    'XMLDiff\\File::merge' =>
        array (
            'file' => 'xmldiff-file.merge.php',
            'desc' => 'Produce merged XML document',
        ),
    'XMLDiff\\Memory::diff' =>
        array (
            'file' => 'xmldiff-memory.diff.php',
            'desc' => 'Diff two XML documents',
        ),
    'XMLDiff\\Memory::merge' =>
        array (
            'file' => 'xmldiff-memory.merge.php',
            'desc' => 'Produce merged XML document',
        ),
    'XMLReader::close' =>
        array (
            'file' => 'xmlreader.close.php',
            'desc' => 'Close the XMLReader input',
        ),
    'XMLReader::expand' =>
        array (
            'file' => 'xmlreader.expand.php',
            'desc' => 'Returns a copy of the current node as a DOM object',
        ),
    'XMLReader::getAttribute' =>
        array (
            'file' => 'xmlreader.getattribute.php',
            'desc' => 'Get the value of a named attribute',
        ),
    'XMLReader::getAttributeNo' =>
        array (
            'file' => 'xmlreader.getattributeno.php',
            'desc' => 'Get the value of an attribute by index',
        ),
    'XMLReader::getAttributeNs' =>
        array (
            'file' => 'xmlreader.getattributens.php',
            'desc' => 'Get the value of an attribute by localname and URI',
        ),
    'XMLReader::getParserProperty' =>
        array (
            'file' => 'xmlreader.getparserproperty.php',
            'desc' => 'Indicates if specified property has been set',
        ),
    'XMLReader::isValid' =>
        array (
            'file' => 'xmlreader.isvalid.php',
            'desc' => 'Indicates if the parsed document is valid',
        ),
    'XMLReader::lookupNamespace' =>
        array (
            'file' => 'xmlreader.lookupnamespace.php',
            'desc' => 'Lookup namespace for a prefix',
        ),
    'XMLReader::moveToAttribute' =>
        array (
            'file' => 'xmlreader.movetoattribute.php',
            'desc' => 'Move cursor to a named attribute',
        ),
    'XMLReader::moveToAttributeNo' =>
        array (
            'file' => 'xmlreader.movetoattributeno.php',
            'desc' => 'Move cursor to an attribute by index',
        ),
    'XMLReader::moveToAttributeNs' =>
        array (
            'file' => 'xmlreader.movetoattributens.php',
            'desc' => 'Move cursor to a named attribute',
        ),
    'XMLReader::moveToElement' =>
        array (
            'file' => 'xmlreader.movetoelement.php',
            'desc' => 'Position cursor on the parent Element of current Attribute',
        ),
    'XMLReader::moveToFirstAttribute' =>
        array (
            'file' => 'xmlreader.movetofirstattribute.php',
            'desc' => 'Position cursor on the first Attribute',
        ),
    'XMLReader::moveToNextAttribute' =>
        array (
            'file' => 'xmlreader.movetonextattribute.php',
            'desc' => 'Position cursor on the next Attribute',
        ),
    'XMLReader::next' =>
        array (
            'file' => 'xmlreader.next.php',
            'desc' => 'Move cursor to next node skipping all subtrees',
        ),
    'XMLReader::open' =>
        array (
            'file' => 'xmlreader.open.php',
            'desc' => 'Set the URI containing the XML to parse',
        ),
    'XMLReader::read' =>
        array (
            'file' => 'xmlreader.read.php',
            'desc' => 'Move to next node in document',
        ),
    'XMLReader::readInnerXML' =>
        array (
            'file' => 'xmlreader.readinnerxml.php',
            'desc' => 'Retrieve XML from current node',
        ),
    'XMLReader::readOuterXML' =>
        array (
            'file' => 'xmlreader.readouterxml.php',
            'desc' => 'Retrieve XML from current node, including it self',
        ),
    'XMLReader::readString' =>
        array (
            'file' => 'xmlreader.readstring.php',
            'desc' => 'Reads the contents of the current node as a string',
        ),
    'XMLReader::setParserProperty' =>
        array (
            'file' => 'xmlreader.setparserproperty.php',
            'desc' => 'Set parser options',
        ),
    'XMLReader::setRelaxNGSchema' =>
        array (
            'file' => 'xmlreader.setrelaxngschema.php',
            'desc' => 'Set the filename or URI for a RelaxNG Schema',
        ),
    'XMLReader::setRelaxNGSchemaSource' =>
        array (
            'file' => 'xmlreader.setrelaxngschemasource.php',
            'desc' => 'Set the data containing a RelaxNG Schema',
        ),
    'XMLReader::setSchema' =>
        array (
            'file' => 'xmlreader.setschema.php',
            'desc' => 'Validate document against XSD',
        ),
    'XMLReader::XML' =>
        array (
            'file' => 'xmlreader.xml.php',
            'desc' => 'Set the data containing the XML to parse',
        ),
    'xmlrpc_decode' =>
        array (
            'file' => 'function.xmlrpc-decode.php',
            'desc' => 'Decodes XML into native PHP types',
        ),
    'xmlrpc_decode_request' =>
        array (
            'file' => 'function.xmlrpc-decode-request.php',
            'desc' => 'Decodes XML into native PHP types',
        ),
    'xmlrpc_encode' =>
        array (
            'file' => 'function.xmlrpc-encode.php',
            'desc' => 'Generates XML for a PHP value',
        ),
    'xmlrpc_encode_request' =>
        array (
            'file' => 'function.xmlrpc-encode-request.php',
            'desc' => 'Generates XML for a method request',
        ),
    'xmlrpc_get_type' =>
        array (
            'file' => 'function.xmlrpc-get-type.php',
            'desc' => 'Gets xmlrpc type for a PHP value',
        ),
    'xmlrpc_is_fault' =>
        array (
            'file' => 'function.xmlrpc-is-fault.php',
            'desc' => 'Determines if an array value represents an XMLRPC fault',
        ),
    'xmlrpc_parse_method_descriptions' =>
        array (
            'file' => 'function.xmlrpc-parse-method-descriptions.php',
            'desc' => 'Decodes XML into a list of method descriptions',
        ),
    'xmlrpc_server_add_introspection_data' =>
        array (
            'file' => 'function.xmlrpc-server-add-introspection-data.php',
            'desc' => 'Adds introspection documentation',
        ),
    'xmlrpc_server_call_method' =>
        array (
            'file' => 'function.xmlrpc-server-call-method.php',
            'desc' => 'Parses XML requests and call methods',
        ),
    'xmlrpc_server_create' =>
        array (
            'file' => 'function.xmlrpc-server-create.php',
            'desc' => 'Creates an xmlrpc server',
        ),
    'xmlrpc_server_destroy' =>
        array (
            'file' => 'function.xmlrpc-server-destroy.php',
            'desc' => 'Destroys server resources',
        ),
    'xmlrpc_server_register_introspection_callback' =>
        array (
            'file' => 'function.xmlrpc-server-register-introspection-callback.php',
            'desc' => 'Register a PHP function to generate documentation',
        ),
    'xmlrpc_server_register_method' =>
        array (
            'file' => 'function.xmlrpc-server-register-method.php',
            'desc' => 'Register a PHP function to resource method matching method_name',
        ),
    'xmlrpc_set_type' =>
        array (
            'file' => 'function.xmlrpc-set-type.php',
            'desc' => 'Sets xmlrpc type, base64 or datetime, for a PHP string value',
        ),
    'XMLWriter::endAttribute' =>
        array (
            'file' => 'function.xmlwriter-end-attribute.php',
            'desc' => 'End attribute',
        ),
    'XMLWriter::endCData' =>
        array (
            'file' => 'function.xmlwriter-end-cdata.php',
            'desc' => 'End current CDATA',
        ),
    'XMLWriter::endComment' =>
        array (
            'file' => 'function.xmlwriter-end-comment.php',
            'desc' => 'Create end comment',
        ),
    'XMLWriter::endDocument' =>
        array (
            'file' => 'function.xmlwriter-end-document.php',
            'desc' => 'End current document',
        ),
    'XMLWriter::endDTD' =>
        array (
            'file' => 'function.xmlwriter-end-dtd.php',
            'desc' => 'End current DTD',
        ),
    'XMLWriter::endDTDAttlist' =>
        array (
            'file' => 'function.xmlwriter-end-dtd-attlist.php',
            'desc' => 'End current DTD AttList',
        ),
    'XMLWriter::endDTDElement' =>
        array (
            'file' => 'function.xmlwriter-end-dtd-element.php',
            'desc' => 'End current DTD element',
        ),
    'XMLWriter::endDTDEntity' =>
        array (
            'file' => 'function.xmlwriter-end-dtd-entity.php',
            'desc' => 'End current DTD Entity',
        ),
    'XMLWriter::endElement' =>
        array (
            'file' => 'function.xmlwriter-end-element.php',
            'desc' => 'End current element',
        ),
    'XMLWriter::endPI' =>
        array (
            'file' => 'function.xmlwriter-end-pi.php',
            'desc' => 'End current PI',
        ),
    'XMLWriter::flush' =>
        array (
            'file' => 'function.xmlwriter-flush.php',
            'desc' => 'Flush current buffer',
        ),
    'XMLWriter::fullEndElement' =>
        array (
            'file' => 'function.xmlwriter-full-end-element.php',
            'desc' => 'End current element',
        ),
    'XMLWriter::openMemory' =>
        array (
            'file' => 'function.xmlwriter-open-memory.php',
            'desc' => 'Create new xmlwriter using memory for string output',
        ),
    'XMLWriter::openURI' =>
        array (
            'file' => 'function.xmlwriter-open-uri.php',
            'desc' => 'Create new xmlwriter using source uri for output',
        ),
    'XMLWriter::outputMemory' =>
        array (
            'file' => 'function.xmlwriter-output-memory.php',
            'desc' => 'Returns current buffer',
        ),
    'XMLWriter::setIndent' =>
        array (
            'file' => 'function.xmlwriter-set-indent.php',
            'desc' => 'Toggle indentation on/off',
        ),
    'XMLWriter::setIndentString' =>
        array (
            'file' => 'function.xmlwriter-set-indent-string.php',
            'desc' => 'Set string used for indenting',
        ),
    'XMLWriter::startAttribute' =>
        array (
            'file' => 'function.xmlwriter-start-attribute.php',
            'desc' => 'Create start attribute',
        ),
    'XMLWriter::startAttributeNS' =>
        array (
            'file' => 'function.xmlwriter-start-attribute-ns.php',
            'desc' => 'Create start namespaced attribute',
        ),
    'XMLWriter::startCData' =>
        array (
            'file' => 'function.xmlwriter-start-cdata.php',
            'desc' => 'Create start CDATA tag',
        ),
    'XMLWriter::startComment' =>
        array (
            'file' => 'function.xmlwriter-start-comment.php',
            'desc' => 'Create start comment',
        ),
    'XMLWriter::startDocument' =>
        array (
            'file' => 'function.xmlwriter-start-document.php',
            'desc' => 'Create document tag',
        ),
    'XMLWriter::startDTD' =>
        array (
            'file' => 'function.xmlwriter-start-dtd.php',
            'desc' => 'Create start DTD tag',
        ),
    'XMLWriter::startDTDAttlist' =>
        array (
            'file' => 'function.xmlwriter-start-dtd-attlist.php',
            'desc' => 'Create start DTD AttList',
        ),
    'XMLWriter::startDTDElement' =>
        array (
            'file' => 'function.xmlwriter-start-dtd-element.php',
            'desc' => 'Create start DTD element',
        ),
    'XMLWriter::startDTDEntity' =>
        array (
            'file' => 'function.xmlwriter-start-dtd-entity.php',
            'desc' => 'Create start DTD Entity',
        ),
    'XMLWriter::startElement' =>
        array (
            'file' => 'function.xmlwriter-start-element.php',
            'desc' => 'Create start element tag',
        ),
    'XMLWriter::startElementNS' =>
        array (
            'file' => 'function.xmlwriter-start-element-ns.php',
            'desc' => 'Create start namespaced element tag',
        ),
    'XMLWriter::startPI' =>
        array (
            'file' => 'function.xmlwriter-start-pi.php',
            'desc' => 'Create start PI tag',
        ),
    'XMLWriter::text' =>
        array (
            'file' => 'function.xmlwriter-text.php',
            'desc' => 'Write text',
        ),
    'XMLWriter::writeAttribute' =>
        array (
            'file' => 'function.xmlwriter-write-attribute.php',
            'desc' => 'Write full attribute',
        ),
    'XMLWriter::writeAttributeNS' =>
        array (
            'file' => 'function.xmlwriter-write-attribute-ns.php',
            'desc' => 'Write full namespaced attribute',
        ),
    'XMLWriter::writeCData' =>
        array (
            'file' => 'function.xmlwriter-write-cdata.php',
            'desc' => 'Write full CDATA tag',
        ),
    'XMLWriter::writeComment' =>
        array (
            'file' => 'function.xmlwriter-write-comment.php',
            'desc' => 'Write full comment tag',
        ),
    'XMLWriter::writeDTD' =>
        array (
            'file' => 'function.xmlwriter-write-dtd.php',
            'desc' => 'Write full DTD tag',
        ),
    'XMLWriter::writeDTDAttlist' =>
        array (
            'file' => 'function.xmlwriter-write-dtd-attlist.php',
            'desc' => 'Write full DTD AttList tag',
        ),
    'XMLWriter::writeDTDElement' =>
        array (
            'file' => 'function.xmlwriter-write-dtd-element.php',
            'desc' => 'Write full DTD element tag',
        ),
    'XMLWriter::writeDTDEntity' =>
        array (
            'file' => 'function.xmlwriter-write-dtd-entity.php',
            'desc' => 'Write full DTD Entity tag',
        ),
    'XMLWriter::writeElement' =>
        array (
            'file' => 'function.xmlwriter-write-element.php',
            'desc' => 'Write full element tag',
        ),
    'XMLWriter::writeElementNS' =>
        array (
            'file' => 'function.xmlwriter-write-element-ns.php',
            'desc' => 'Write full namespaced element tag',
        ),
    'XMLWriter::writePI' =>
        array (
            'file' => 'function.xmlwriter-write-pi.php',
            'desc' => 'Writes a PI',
        ),
    'XMLWriter::writeRaw' =>
        array (
            'file' => 'function.xmlwriter-write-raw.php',
            'desc' => 'Write a raw XML text',
        ),
    'xml_error_string' =>
        array (
            'file' => 'function.xml-error-string.php',
            'desc' => 'Get XML parser error string',
        ),
    'xml_get_current_byte_index' =>
        array (
            'file' => 'function.xml-get-current-byte-index.php',
            'desc' => 'Get current byte index for an XML parser',
        ),
    'xml_get_current_column_number' =>
        array (
            'file' => 'function.xml-get-current-column-number.php',
            'desc' => 'Get current column number for an XML parser',
        ),
    'xml_get_current_line_number' =>
        array (
            'file' => 'function.xml-get-current-line-number.php',
            'desc' => 'Get current line number for an XML parser',
        ),
    'xml_get_error_code' =>
        array (
            'file' => 'function.xml-get-error-code.php',
            'desc' => 'Get XML parser error code',
        ),
    'xml_parse' =>
        array (
            'file' => 'function.xml-parse.php',
            'desc' => 'Start parsing an XML document',
        ),
    'xml_parser_create' =>
        array (
            'file' => 'function.xml-parser-create.php',
            'desc' => 'Create an XML parser',
        ),
    'xml_parser_create_ns' =>
        array (
            'file' => 'function.xml-parser-create-ns.php',
            'desc' => 'Create an XML parser with namespace support',
        ),
    'xml_parser_free' =>
        array (
            'file' => 'function.xml-parser-free.php',
            'desc' => 'Free an XML parser',
        ),
    'xml_parser_get_option' =>
        array (
            'file' => 'function.xml-parser-get-option.php',
            'desc' => 'Get options from an XML parser',
        ),
    'xml_parser_set_option' =>
        array (
            'file' => 'function.xml-parser-set-option.php',
            'desc' => 'Set options in an XML parser',
        ),
    'xml_parse_into_struct' =>
        array (
            'file' => 'function.xml-parse-into-struct.php',
            'desc' => 'Parse XML data into an array structure',
        ),
    'xml_set_character_data_handler' =>
        array (
            'file' => 'function.xml-set-character-data-handler.php',
            'desc' => 'Set up character data handler',
        ),
    'xml_set_default_handler' =>
        array (
            'file' => 'function.xml-set-default-handler.php',
            'desc' => 'Set up default handler',
        ),
    'xml_set_element_handler' =>
        array (
            'file' => 'function.xml-set-element-handler.php',
            'desc' => 'Set up start and end element handlers',
        ),
    'xml_set_end_namespace_decl_handler' =>
        array (
            'file' => 'function.xml-set-end-namespace-decl-handler.php',
            'desc' => 'Set up end namespace declaration handler',
        ),
    'xml_set_external_entity_ref_handler' =>
        array (
            'file' => 'function.xml-set-external-entity-ref-handler.php',
            'desc' => 'Set up external entity reference handler',
        ),
    'xml_set_notation_decl_handler' =>
        array (
            'file' => 'function.xml-set-notation-decl-handler.php',
            'desc' => 'Set up notation declaration handler',
        ),
    'xml_set_object' =>
        array (
            'file' => 'function.xml-set-object.php',
            'desc' => 'Use XML Parser within an object',
        ),
    'xml_set_processing_instruction_handler' =>
        array (
            'file' => 'function.xml-set-processing-instruction-handler.php',
            'desc' => 'Set up processing instruction (PI) handler',
        ),
    'xml_set_start_namespace_decl_handler' =>
        array (
            'file' => 'function.xml-set-start-namespace-decl-handler.php',
            'desc' => 'Set up start namespace declaration handler',
        ),
    'xml_set_unparsed_entity_decl_handler' =>
        array (
            'file' => 'function.xml-set-unparsed-entity-decl-handler.php',
            'desc' => 'Set up unparsed entity declaration handler',
        ),
    'XSLTProcessor::getParameter' =>
        array (
            'file' => 'xsltprocessor.getparameter.php',
            'desc' => 'Get value of a parameter',
        ),
    'XsltProcessor::getSecurityPrefs' =>
        array (
            'file' => 'xsltprocessor.getsecurityprefs.php',
            'desc' => 'Get security preferences',
        ),
    'XSLTProcessor::hasExsltSupport' =>
        array (
            'file' => 'xsltprocessor.hasexsltsupport.php',
            'desc' => 'Determine if PHP has EXSLT support',
        ),
    'XSLTProcessor::importStylesheet' =>
        array (
            'file' => 'xsltprocessor.importstylesheet.php',
            'desc' => 'Import stylesheet',
        ),
    'XSLTProcessor::registerPHPFunctions' =>
        array (
            'file' => 'xsltprocessor.registerphpfunctions.php',
            'desc' => 'Enables the ability to use PHP functions as XSLT functions',
        ),
    'XSLTProcessor::removeParameter' =>
        array (
            'file' => 'xsltprocessor.removeparameter.php',
            'desc' => 'Remove parameter',
        ),
    'XSLTProcessor::setParameter' =>
        array (
            'file' => 'xsltprocessor.setparameter.php',
            'desc' => 'Set value for a parameter',
        ),
    'XSLTProcessor::setProfiling' =>
        array (
            'file' => 'xsltprocessor.setprofiling.php',
            'desc' => 'Sets profiling output file',
        ),
    'XsltProcessor::setSecurityPrefs' =>
        array (
            'file' => 'xsltprocessor.setsecurityprefs.php',
            'desc' => 'Set security preferences',
        ),
    'XSLTProcessor::transformToDoc' =>
        array (
            'file' => 'xsltprocessor.transformtodoc.php',
            'desc' => 'Transform to a DOMDocument',
        ),
    'XSLTProcessor::transformToUri' =>
        array (
            'file' => 'xsltprocessor.transformtouri.php',
            'desc' => 'Transform to URI',
        ),
    'XSLTProcessor::transformToXML' =>
        array (
            'file' => 'xsltprocessor.transformtoxml.php',
            'desc' => 'Transform to XML',
        ),
    'XSLTProcessor::__construct' =>
        array (
            'file' => 'xsltprocessor.construct.php',
            'desc' => 'Creates a new XSLTProcessor object',
        ),
    'Yaf_Action_Abstract::execute' =>
        array (
            'file' => 'yaf-action-abstract.execute.php',
            'desc' => 'Action entry point',
        ),
    'Yaf_Action_Abstract::getController' =>
        array (
            'file' => 'yaf-action-abstract.getcontroller.php',
            'desc' => 'Retrieve controller object',
        ),
    'Yaf_Application::app' =>
        array (
            'file' => 'yaf-application.app.php',
            'desc' => 'Retrieve an Application instance',
        ),
    'Yaf_Application::bootstrap' =>
        array (
            'file' => 'yaf-application.bootstrap.php',
            'desc' => 'Call bootstrap',
        ),
    'Yaf_Application::clearLastError' =>
        array (
            'file' => 'yaf-application.clearlasterror.php',
            'desc' => 'Clear the last error info',
        ),
    'Yaf_Application::environ' =>
        array (
            'file' => 'yaf-application.environ.php',
            'desc' => 'Retrive environ',
        ),
    'Yaf_Application::execute' =>
        array (
            'file' => 'yaf-application.execute.php',
            'desc' => 'Execute a callback',
        ),
    'Yaf_Application::getAppDirectory' =>
        array (
            'file' => 'yaf-application.getappdirectory.php',
            'desc' => 'Get the application directory',
        ),
    'Yaf_Application::getConfig' =>
        array (
            'file' => 'yaf-application.getconfig.php',
            'desc' => 'Retrive the config instance',
        ),
    'Yaf_Application::getDispatcher' =>
        array (
            'file' => 'yaf-application.getdispatcher.php',
            'desc' => 'Get Yaf_Dispatcher instance',
        ),
    'Yaf_Application::getLastErrorMsg' =>
        array (
            'file' => 'yaf-application.getlasterrormsg.php',
            'desc' => 'Get message of the last occurred error',
        ),
    'Yaf_Application::getLastErrorNo' =>
        array (
            'file' => 'yaf-application.getlasterrorno.php',
            'desc' => 'Get code of last occurred error',
        ),
    'Yaf_Application::getModules' =>
        array (
            'file' => 'yaf-application.getmodules.php',
            'desc' => 'Get defined module names',
        ),
    'Yaf_Application::run' =>
        array (
            'file' => 'yaf-application.run.php',
            'desc' => 'Start Yaf_Application',
        ),
    'Yaf_Application::setAppDirectory' =>
        array (
            'file' => 'yaf-application.setappdirectory.php',
            'desc' => 'Change the application directory',
        ),
    'Yaf_Application::__clone' =>
        array (
            'file' => 'yaf-application.clone.php',
            'desc' => 'Yaf_Application can not be cloned',
        ),
    'Yaf_Application::__construct' =>
        array (
            'file' => 'yaf-application.construct.php',
            'desc' => 'Yaf_Application constructor',
        ),
    'Yaf_Application::__destruct' =>
        array (
            'file' => 'yaf-application.destruct.php',
        ),
    'Yaf_Application::__sleep' =>
        array (
            'file' => 'yaf-application.sleep.php',
            'desc' => 'Yaf_Application can not be serialized',
        ),
    'Yaf_Application::__wakeup' =>
        array (
            'file' => 'yaf-application.wakeup.php',
            'desc' => 'Yaf_Application can not be unserialized',
        ),
    'Yaf_Config_Abstract::get' =>
        array (
            'file' => 'yaf-config-abstract.get.php',
            'desc' => 'Getter',
        ),
    'Yaf_Config_Abstract::readonly' =>
        array (
            'file' => 'yaf-config-abstract.readonly.php',
            'desc' => 'Find a config whether readonly',
        ),
    'Yaf_Config_Abstract::set' =>
        array (
            'file' => 'yaf-config-abstract.set.php',
            'desc' => 'Setter',
        ),
    'Yaf_Config_Abstract::toArray' =>
        array (
            'file' => 'yaf-config-abstract.toarray.php',
            'desc' => 'Cast to array',
        ),
    'Yaf_Config_Ini::count' =>
        array (
            'file' => 'yaf-config-ini.count.php',
        ),
    'Yaf_Config_Ini::current' =>
        array (
            'file' => 'yaf-config-ini.current.php',
        ),
    'Yaf_Config_Ini::key' =>
        array (
            'file' => 'yaf-config-ini.key.php',
        ),
    'Yaf_Config_Ini::next' =>
        array (
            'file' => 'yaf-config-ini.next.php',
        ),
    'Yaf_Config_Ini::offsetExists' =>
        array (
            'file' => 'yaf-config-ini.offsetexists.php',
        ),
    'Yaf_Config_Ini::offsetGet' =>
        array (
            'file' => 'yaf-config-ini.offsetget.php',
        ),
    'Yaf_Config_Ini::offsetSet' =>
        array (
            'file' => 'yaf-config-ini.offsetset.php',
        ),
    'Yaf_Config_Ini::offsetUnset' =>
        array (
            'file' => 'yaf-config-ini.offsetunset.php',
        ),
    'Yaf_Config_Ini::readonly' =>
        array (
            'file' => 'yaf-config-ini.readonly.php',
        ),
    'Yaf_Config_Ini::rewind' =>
        array (
            'file' => 'yaf-config-ini.rewind.php',
        ),
    'Yaf_Config_Ini::toArray' =>
        array (
            'file' => 'yaf-config-ini.toarray.php',
            'desc' => 'Returns a PHP array',
        ),
    'Yaf_Config_Ini::valid' =>
        array (
            'file' => 'yaf-config-ini.valid.php',
        ),
    'Yaf_Config_Ini::__construct' =>
        array (
            'file' => 'yaf-config-ini.construct.php',
            'desc' => 'Yaf_Config_Ini constructor',
        ),
    'Yaf_Config_Ini::__get' =>
        array (
            'file' => 'yaf-config-ini.get.php',
        ),
    'Yaf_Config_Ini::__isset' =>
        array (
            'file' => 'yaf-config-ini.isset.php',
        ),
    'Yaf_Config_Ini::__set' =>
        array (
            'file' => 'yaf-config-ini.set.php',
        ),
    'Yaf_Config_Simple::count' =>
        array (
            'file' => 'yaf-config-simple.count.php',
        ),
    'Yaf_Config_Simple::current' =>
        array (
            'file' => 'yaf-config-simple.current.php',
        ),
    'Yaf_Config_Simple::key' =>
        array (
            'file' => 'yaf-config-simple.key.php',
        ),
    'Yaf_Config_Simple::next' =>
        array (
            'file' => 'yaf-config-simple.next.php',
        ),
    'Yaf_Config_Simple::offsetExists' =>
        array (
            'file' => 'yaf-config-simple.offsetexists.php',
        ),
    'Yaf_Config_Simple::offsetGet' =>
        array (
            'file' => 'yaf-config-simple.offsetget.php',
        ),
    'Yaf_Config_Simple::offsetSet' =>
        array (
            'file' => 'yaf-config-simple.offsetset.php',
        ),
    'Yaf_Config_Simple::offsetUnset' =>
        array (
            'file' => 'yaf-config-simple.offsetunset.php',
        ),
    'Yaf_Config_Simple::readonly' =>
        array (
            'file' => 'yaf-config-simple.readonly.php',
        ),
    'Yaf_Config_Simple::rewind' =>
        array (
            'file' => 'yaf-config-simple.rewind.php',
        ),
    'Yaf_Config_Simple::toArray' =>
        array (
            'file' => 'yaf-config-simple.toarray.php',
            'desc' => 'Returns a PHP array',
        ),
    'Yaf_Config_Simple::valid' =>
        array (
            'file' => 'yaf-config-simple.valid.php',
        ),
    'Yaf_Config_Simple::__construct' =>
        array (
            'file' => 'yaf-config-simple.construct.php',
        ),
    'Yaf_Config_Simple::__get' =>
        array (
            'file' => 'yaf-config-simple.get.php',
        ),
    'Yaf_Config_Simple::__isset' =>
        array (
            'file' => 'yaf-config-simple.isset.php',
        ),
    'Yaf_Config_Simple::__set' =>
        array (
            'file' => 'yaf-config-simple.set.php',
        ),
    'Yaf_Controller_Abstract::display' =>
        array (
            'file' => 'yaf-controller-abstract.display.php',
        ),
    'Yaf_Controller_Abstract::forward' =>
        array (
            'file' => 'yaf-controller-abstract.forward.php',
            'desc' => 'foward to another action',
        ),
    'Yaf_Controller_Abstract::getInvokeArg' =>
        array (
            'file' => 'yaf-controller-abstract.getinvokearg.php',
        ),
    'Yaf_Controller_Abstract::getInvokeArgs' =>
        array (
            'file' => 'yaf-controller-abstract.getinvokeargs.php',
        ),
    'Yaf_Controller_Abstract::getModuleName' =>
        array (
            'file' => 'yaf-controller-abstract.getmodulename.php',
            'desc' => 'Get module name',
        ),
    'Yaf_Controller_Abstract::getRequest' =>
        array (
            'file' => 'yaf-controller-abstract.getrequest.php',
            'desc' => 'Retrieve current request object',
        ),
    'Yaf_Controller_Abstract::getResponse' =>
        array (
            'file' => 'yaf-controller-abstract.getresponse.php',
            'desc' => 'Retrieve current response object',
        ),
    'Yaf_Controller_Abstract::getView' =>
        array (
            'file' => 'yaf-controller-abstract.getview.php',
            'desc' => 'Retrieve the view engine',
        ),
    'Yaf_Controller_Abstract::getViewpath' =>
        array (
            'file' => 'yaf-controller-abstract.getviewpath.php',
        ),
    'Yaf_Controller_Abstract::init' =>
        array (
            'file' => 'yaf-controller-abstract.init.php',
            'desc' => 'Controller initializer',
        ),
    'Yaf_Controller_Abstract::initView' =>
        array (
            'file' => 'yaf-controller-abstract.initview.php',
        ),
    'Yaf_Controller_Abstract::redirect' =>
        array (
            'file' => 'yaf-controller-abstract.redirect.php',
            'desc' => 'Redirect to a URL',
        ),
    'Yaf_Controller_Abstract::render' =>
        array (
            'file' => 'yaf-controller-abstract.render.php',
            'desc' => 'Render view template',
        ),
    'Yaf_Controller_Abstract::setViewpath' =>
        array (
            'file' => 'yaf-controller-abstract.setviewpath.php',
        ),
    'Yaf_Controller_Abstract::__clone' =>
        array (
            'file' => 'yaf-controller-abstract.clone.php',
            'desc' => 'Yaf_Controller_Abstract can not be cloned',
        ),
    'Yaf_Controller_Abstract::__construct' =>
        array (
            'file' => 'yaf-controller-abstract.construct.php',
            'desc' => 'Yaf_Controller_Abstract constructor',
        ),
    'Yaf_Dispatcher::autoRender' =>
        array (
            'file' => 'yaf-dispatcher.autorender.php',
            'desc' => 'Switch on/off autorendering',
        ),
    'Yaf_Dispatcher::catchException' =>
        array (
            'file' => 'yaf-dispatcher.catchexception.php',
            'desc' => 'Switch on/off exception catching',
        ),
    'Yaf_Dispatcher::disableView' =>
        array (
            'file' => 'yaf-dispatcher.disableview.php',
            'desc' => 'Disable view rendering',
        ),
    'Yaf_Dispatcher::dispatch' =>
        array (
            'file' => 'yaf-dispatcher.dispatch.php',
            'desc' => 'Dispatch a request',
        ),
    'Yaf_Dispatcher::enableView' =>
        array (
            'file' => 'yaf-dispatcher.enableview.php',
            'desc' => 'enable view rendering',
        ),
    'Yaf_Dispatcher::flushInstantly' =>
        array (
            'file' => 'yaf-dispatcher.flushinstantly.php',
            'desc' => 'Switch on/off the instant flushing',
        ),
    'Yaf_Dispatcher::getApplication' =>
        array (
            'file' => 'yaf-dispatcher.getapplication.php',
            'desc' => 'Retrive the application',
        ),
    'Yaf_Dispatcher::getInstance' =>
        array (
            'file' => 'yaf-dispatcher.getinstance.php',
            'desc' => 'Retrive the dispatcher instance',
        ),
    'Yaf_Dispatcher::getRequest' =>
        array (
            'file' => 'yaf-dispatcher.getrequest.php',
            'desc' => 'Retrive the request instance',
        ),
    'Yaf_Dispatcher::getRouter' =>
        array (
            'file' => 'yaf-dispatcher.getrouter.php',
            'desc' => 'Retrive router instance',
        ),
    'Yaf_Dispatcher::initView' =>
        array (
            'file' => 'yaf-dispatcher.initview.php',
            'desc' => 'Initialize view and return it',
        ),
    'Yaf_Dispatcher::registerPlugin' =>
        array (
            'file' => 'yaf-dispatcher.registerplugin.php',
            'desc' => 'Register a plugin',
        ),
    'Yaf_Dispatcher::returnResponse' =>
        array (
            'file' => 'yaf-dispatcher.returnresponse.php',
        ),
    'Yaf_Dispatcher::setDefaultAction' =>
        array (
            'file' => 'yaf-dispatcher.setdefaultaction.php',
            'desc' => 'Change default action name',
        ),
    'Yaf_Dispatcher::setDefaultController' =>
        array (
            'file' => 'yaf-dispatcher.setdefaultcontroller.php',
            'desc' => 'Change default controller name',
        ),
    'Yaf_Dispatcher::setDefaultModule' =>
        array (
            'file' => 'yaf-dispatcher.setdefaultmodule.php',
            'desc' => 'Change default module name',
        ),
    'Yaf_Dispatcher::setErrorHandler' =>
        array (
            'file' => 'yaf-dispatcher.seterrorhandler.php',
            'desc' => 'Set error handler',
        ),
    'Yaf_Dispatcher::setRequest' =>
        array (
            'file' => 'yaf-dispatcher.setrequest.php',
        ),
    'Yaf_Dispatcher::setView' =>
        array (
            'file' => 'yaf-dispatcher.setview.php',
            'desc' => 'Set a custom view engine',
        ),
    'Yaf_Dispatcher::throwException' =>
        array (
            'file' => 'yaf-dispatcher.throwexception.php',
            'desc' => 'Switch on/off exception throwing',
        ),
    'Yaf_Dispatcher::__clone' =>
        array (
            'file' => 'yaf-dispatcher.clone.php',
            'desc' => 'Yaf_Dispatcher can not be cloned',
        ),
    'Yaf_Dispatcher::__construct' =>
        array (
            'file' => 'yaf-dispatcher.construct.php',
            'desc' => 'Yaf_Dispatcher constructor',
        ),
    'Yaf_Dispatcher::__sleep' =>
        array (
            'file' => 'yaf-dispatcher.sleep.php',
            'desc' => 'Yaf_Dispatcher can not be serialized',
        ),
    'Yaf_Dispatcher::__wakeup' =>
        array (
            'file' => 'yaf-dispatcher.wakeup.php',
            'desc' => 'Yaf_Dispatcher can not be unserialized',
        ),
    'Yaf_Exception::getPrevious' =>
        array (
            'file' => 'yaf-exception.getprevious.php',
        ),
    'Yaf_Exception::__construct' =>
        array (
            'file' => 'yaf-exception.construct.php',
        ),
    'Yaf_Loader::autoload' =>
        array (
            'file' => 'yaf-loader.autoload.php',
        ),
    'Yaf_Loader::clearLocalNamespace' =>
        array (
            'file' => 'yaf-loader.clearlocalnamespace.php',
        ),
    'Yaf_Loader::getInstance' =>
        array (
            'file' => 'yaf-loader.getinstance.php',
        ),
    'Yaf_Loader::getLibraryPath' =>
        array (
            'file' => 'yaf-loader.getlibrarypath.php',
            'desc' => 'get the library path',
        ),
    'Yaf_Loader::getLocalNamespace' =>
        array (
            'file' => 'yaf-loader.getlocalnamespace.php',
        ),
    'Yaf_Loader::import' =>
        array (
            'file' => 'yaf-loader.import.php',
        ),
    'Yaf_Loader::isLocalName' =>
        array (
            'file' => 'yaf-loader.islocalname.php',
        ),
    'Yaf_Loader::registerLocalNamespace' =>
        array (
            'file' => 'yaf-loader.registerlocalnamespace.php',
            'desc' => 'register local class prefix',
        ),
    'Yaf_Loader::setLibraryPath' =>
        array (
            'file' => 'yaf-loader.setlibrarypath.php',
            'desc' => 'Change the library path',
        ),
    'Yaf_Loader::__clone' =>
        array (
            'file' => 'yaf-loader.clone.php',
        ),
    'Yaf_Loader::__construct' =>
        array (
            'file' => 'yaf-loader.construct.php',
        ),
    'Yaf_Loader::__sleep' =>
        array (
            'file' => 'yaf-loader.sleep.php',
        ),
    'Yaf_Loader::__wakeup' =>
        array (
            'file' => 'yaf-loader.wakeup.php',
        ),
    'Yaf_Plugin_Abstract::dispatchLoopShutdown' =>
        array (
            'file' => 'yaf-plugin-abstract.dispatchloopshutdown.php',
        ),
    'Yaf_Plugin_Abstract::dispatchLoopStartup' =>
        array (
            'file' => 'yaf-plugin-abstract.dispatchloopstartup.php',
        ),
    'Yaf_Plugin_Abstract::postDispatch' =>
        array (
            'file' => 'yaf-plugin-abstract.postdispatch.php',
        ),
    'Yaf_Plugin_Abstract::preDispatch' =>
        array (
            'file' => 'yaf-plugin-abstract.predispatch.php',
        ),
    'Yaf_Plugin_Abstract::preResponse' =>
        array (
            'file' => 'yaf-plugin-abstract.preresponse.php',
        ),
    'Yaf_Plugin_Abstract::routerShutdown' =>
        array (
            'file' => 'yaf-plugin-abstract.routershutdown.php',
        ),
    'Yaf_Plugin_Abstract::routerStartup' =>
        array (
            'file' => 'yaf-plugin-abstract.routerstartup.php',
            'desc' => 'RouterStartup hook',
        ),
    'Yaf_Registry::del' =>
        array (
            'file' => 'yaf-registry.del.php',
            'desc' => 'Remove an item from registry',
        ),
    'Yaf_Registry::get' =>
        array (
            'file' => 'yaf-registry.get.php',
            'desc' => 'Retrieve an item from registry',
        ),
    'Yaf_Registry::has' =>
        array (
            'file' => 'yaf-registry.has.php',
            'desc' => 'Check whether an item exists',
        ),
    'Yaf_Registry::set' =>
        array (
            'file' => 'yaf-registry.set.php',
            'desc' => 'Add an item into registry',
        ),
    'Yaf_Registry::__clone' =>
        array (
            'file' => 'yaf-registry.clone.php',
        ),
    'Yaf_Registry::__construct' =>
        array (
            'file' => 'yaf-registry.construct.php',
            'desc' => 'Yaf_Registry implements singleton',
        ),
    'Yaf_Request_Abstract::getActionName' =>
        array (
            'file' => 'yaf-request-abstract.getactionname.php',
        ),
    'Yaf_Request_Abstract::getBaseUri' =>
        array (
            'file' => 'yaf-request-abstract.getbaseuri.php',
        ),
    'Yaf_Request_Abstract::getControllerName' =>
        array (
            'file' => 'yaf-request-abstract.getcontrollername.php',
        ),
    'Yaf_Request_Abstract::getEnv' =>
        array (
            'file' => 'yaf-request-abstract.getenv.php',
            'desc' => 'Retrieve ENV varialbe',
        ),
    'Yaf_Request_Abstract::getException' =>
        array (
            'file' => 'yaf-request-abstract.getexception.php',
        ),
    'Yaf_Request_Abstract::getLanguage' =>
        array (
            'file' => 'yaf-request-abstract.getlanguage.php',
        ),
    'Yaf_Request_Abstract::getMethod' =>
        array (
            'file' => 'yaf-request-abstract.getmethod.php',
        ),
    'Yaf_Request_Abstract::getModuleName' =>
        array (
            'file' => 'yaf-request-abstract.getmodulename.php',
        ),
    'Yaf_Request_Abstract::getParam' =>
        array (
            'file' => 'yaf-request-abstract.getparam.php',
        ),
    'Yaf_Request_Abstract::getParams' =>
        array (
            'file' => 'yaf-request-abstract.getparams.php',
        ),
    'Yaf_Request_Abstract::getRequestUri' =>
        array (
            'file' => 'yaf-request-abstract.getrequesturi.php',
        ),
    'Yaf_Request_Abstract::getServer' =>
        array (
            'file' => 'yaf-request-abstract.getserver.php',
            'desc' => 'Retrieve SERVER variable',
        ),
    'Yaf_Request_Abstract::isCli' =>
        array (
            'file' => 'yaf-request-abstract.iscli.php',
        ),
    'Yaf_Request_Abstract::isDispatched' =>
        array (
            'file' => 'yaf-request-abstract.isdispatched.php',
        ),
    'Yaf_Request_Abstract::isGet' =>
        array (
            'file' => 'yaf-request-abstract.isget.php',
        ),
    'Yaf_Request_Abstract::isHead' =>
        array (
            'file' => 'yaf-request-abstract.ishead.php',
        ),
    'Yaf_Request_Abstract::isOptions' =>
        array (
            'file' => 'yaf-request-abstract.isoptions.php',
        ),
    'Yaf_Request_Abstract::isPost' =>
        array (
            'file' => 'yaf-request-abstract.ispost.php',
        ),
    'Yaf_Request_Abstract::isPut' =>
        array (
            'file' => 'yaf-request-abstract.isput.php',
        ),
    'Yaf_Request_Abstract::isRouted' =>
        array (
            'file' => 'yaf-request-abstract.isrouted.php',
        ),
    'Yaf_Request_Abstract::isXmlHttpRequest' =>
        array (
            'file' => 'yaf-request-abstract.isxmlhttprequest.php',
        ),
    'Yaf_Request_Abstract::setActionName' =>
        array (
            'file' => 'yaf-request-abstract.setactionname.php',
        ),
    'Yaf_Request_Abstract::setBaseUri' =>
        array (
            'file' => 'yaf-request-abstract.setbaseuri.php',
            'desc' => 'set base URI',
        ),
    'Yaf_Request_Abstract::setControllerName' =>
        array (
            'file' => 'yaf-request-abstract.setcontrollername.php',
        ),
    'Yaf_Request_Abstract::setDispatched' =>
        array (
            'file' => 'yaf-request-abstract.setdispatched.php',
        ),
    'Yaf_Request_Abstract::setModuleName' =>
        array (
            'file' => 'yaf-request-abstract.setmodulename.php',
        ),
    'Yaf_Request_Abstract::setParam' =>
        array (
            'file' => 'yaf-request-abstract.setparam.php',
        ),
    'Yaf_Request_Abstract::setRequestUri' =>
        array (
            'file' => 'yaf-request-abstract.setrequesturi.php',
        ),
    'Yaf_Request_Abstract::setRouted' =>
        array (
            'file' => 'yaf-request-abstract.setrouted.php',
        ),
    'Yaf_Request_Http::get' =>
        array (
            'file' => 'yaf-request-http.get.php',
            'desc' => 'Retrieve variable from client',
        ),
    'Yaf_Request_Http::getCookie' =>
        array (
            'file' => 'yaf-request-http.getcookie.php',
            'desc' => 'Retrieve Cookie varialbe',
        ),
    'Yaf_Request_Http::getFiles' =>
        array (
            'file' => 'yaf-request-http.getfiles.php',
        ),
    'Yaf_Request_Http::getPost' =>
        array (
            'file' => 'yaf-request-http.getpost.php',
            'desc' => 'Retrieve POST variable',
        ),
    'Yaf_Request_Http::getQuery' =>
        array (
            'file' => 'yaf-request-http.getquery.php',
            'desc' => 'Fetch a query parameter',
        ),
    'Yaf_Request_Http::getRequest' =>
        array (
            'file' => 'yaf-request-http.getrequest.php',
        ),
    'Yaf_Request_Http::isXmlHttpRequest' =>
        array (
            'file' => 'yaf-request-http.isxmlhttprequest.php',
            'desc' => 'Whether a Ajax Request',
        ),
    'Yaf_Request_Http::__clone' =>
        array (
            'file' => 'yaf-request-http.clone.php',
        ),
    'Yaf_Request_Http::__construct' =>
        array (
            'file' => 'yaf-request-http.construct.php',
        ),
    'Yaf_Request_Simple::get' =>
        array (
            'file' => 'yaf-request-simple.get.php',
        ),
    'Yaf_Request_Simple::getCookie' =>
        array (
            'file' => 'yaf-request-simple.getcookie.php',
        ),
    'Yaf_Request_Simple::getFiles' =>
        array (
            'file' => 'yaf-request-simple.getfiles.php',
        ),
    'Yaf_Request_Simple::getPost' =>
        array (
            'file' => 'yaf-request-simple.getpost.php',
        ),
    'Yaf_Request_Simple::getQuery' =>
        array (
            'file' => 'yaf-request-simple.getquery.php',
        ),
    'Yaf_Request_Simple::getRequest' =>
        array (
            'file' => 'yaf-request-simple.getrequest.php',
        ),
    'Yaf_Request_Simple::isXmlHttpRequest' =>
        array (
            'file' => 'yaf-request-simple.isxmlhttprequest.php',
        ),
    'Yaf_Request_Simple::__clone' =>
        array (
            'file' => 'yaf-request-simple.clone.php',
        ),
    'Yaf_Request_Simple::__construct' =>
        array (
            'file' => 'yaf-request-simple.construct.php',
        ),
    'Yaf_Response_Abstract::appendBody' =>
        array (
            'file' => 'yaf-response-abstract.appendbody.php',
            'desc' => 'append to body',
        ),
    'Yaf_Response_Abstract::clearBody' =>
        array (
            'file' => 'yaf-response-abstract.clearbody.php',
        ),
    'Yaf_Response_Abstract::clearHeaders' =>
        array (
            'file' => 'yaf-response-abstract.clearheaders.php',
        ),
    'Yaf_Response_Abstract::getBody' =>
        array (
            'file' => 'yaf-response-abstract.getbody.php',
            'desc' => 'Retrieve a exists content',
        ),
    'Yaf_Response_Abstract::getHeader' =>
        array (
            'file' => 'yaf-response-abstract.getheader.php',
        ),
    'Yaf_Response_Abstract::prependBody' =>
        array (
            'file' => 'yaf-response-abstract.prependbody.php',
        ),
    'Yaf_Response_Abstract::response' =>
        array (
            'file' => 'yaf-response-abstract.response.php',
            'desc' => 'send response',
        ),
    'Yaf_Response_Abstract::setAllHeaders' =>
        array (
            'file' => 'yaf-response-abstract.setallheaders.php',
        ),
    'Yaf_Response_Abstract::setBody' =>
        array (
            'file' => 'yaf-response-abstract.setbody.php',
            'desc' => 'Set content to response',
        ),
    'Yaf_Response_Abstract::setHeader' =>
        array (
            'file' => 'yaf-response-abstract.setheader.php',
        ),
    'Yaf_Response_Abstract::setRedirect' =>
        array (
            'file' => 'yaf-response-abstract.setredirect.php',
        ),
    'Yaf_Response_Abstract::__clone' =>
        array (
            'file' => 'yaf-response-abstract.clone.php',
        ),
    'Yaf_Response_Abstract::__construct' =>
        array (
            'file' => 'yaf-response-abstract.construct.php',
        ),
    'Yaf_Response_Abstract::__destruct' =>
        array (
            'file' => 'yaf-response-abstract.destruct.php',
        ),
    'Yaf_Response_Abstract::__toString' =>
        array (
            'file' => 'yaf-response-abstract.tostring.php',
        ),
    'Yaf_Router::addConfig' =>
        array (
            'file' => 'yaf-router.addconfig.php',
            'desc' => 'Add config-defined routes into Router',
        ),
    'Yaf_Router::addRoute' =>
        array (
            'file' => 'yaf-router.addroute.php',
            'desc' => 'Add new Route into Router',
        ),
    'Yaf_Router::getCurrentRoute' =>
        array (
            'file' => 'yaf-router.getcurrentroute.php',
            'desc' => 'Get the effective route name',
        ),
    'Yaf_Router::getRoute' =>
        array (
            'file' => 'yaf-router.getroute.php',
            'desc' => 'Retrieve a route by name',
        ),
    'Yaf_Router::getRoutes' =>
        array (
            'file' => 'yaf-router.getroutes.php',
            'desc' => 'Retrieve registered routes',
        ),
    'Yaf_Router::route' =>
        array (
            'file' => 'yaf-router.route.php',
        ),
    'Yaf_Router::__construct' =>
        array (
            'file' => 'yaf-router.construct.php',
            'desc' => 'Yaf_Router constructor',
        ),
    'Yaf_Route_Interface::assemble' =>
        array (
            'file' => 'yaf-route-interface.assemble.php',
            'desc' => 'assemble a request',
        ),
    'Yaf_Route_Interface::route' =>
        array (
            'file' => 'yaf-route-interface.route.php',
            'desc' => 'route a request',
        ),
    'Yaf_Route_Map::assemble' =>
        array (
            'file' => 'yaf-route-map.assemble.php',
            'desc' => 'Assemble a url',
        ),
    'Yaf_Route_Map::route' =>
        array (
            'file' => 'yaf-route-map.route.php',
        ),
    'Yaf_Route_Map::__construct' =>
        array (
            'file' => 'yaf-route-map.construct.php',
        ),
    'Yaf_Route_Regex::assemble' =>
        array (
            'file' => 'yaf-route-regex.assemble.php',
            'desc' => 'Assemble a url',
        ),
    'Yaf_Route_Regex::route' =>
        array (
            'file' => 'yaf-route-regex.route.php',
        ),
    'Yaf_Route_Regex::__construct' =>
        array (
            'file' => 'yaf-route-regex.construct.php',
            'desc' => 'Yaf_Route_Regex constructor',
        ),
    'Yaf_Route_Rewrite::assemble' =>
        array (
            'file' => 'yaf-route-rewrite.assemble.php',
            'desc' => 'Assemble a url',
        ),
    'Yaf_Route_Rewrite::route' =>
        array (
            'file' => 'yaf-route-rewrite.route.php',
        ),
    'Yaf_Route_Rewrite::__construct' =>
        array (
            'file' => 'yaf-route-rewrite.construct.php',
            'desc' => 'Yaf_Route_Rewrite constructor',
        ),
    'Yaf_Route_Simple::assemble' =>
        array (
            'file' => 'yaf-route-simple.assemble.php',
            'desc' => 'Assemble a url',
        ),
    'Yaf_Route_Simple::route' =>
        array (
            'file' => 'yaf-route-simple.route.php',
            'desc' => 'Route a request',
        ),
    'Yaf_Route_Simple::__construct' =>
        array (
            'file' => 'yaf-route-simple.construct.php',
            'desc' => 'Yaf_Route_Simple constructor',
        ),
    'Yaf_Route_Static::assemble' =>
        array (
            'file' => 'yaf-route-static.assemble.php',
            'desc' => 'Assemble a url',
        ),
    'Yaf_Route_Static::match' =>
        array (
            'file' => 'yaf-route-static.match.php',
        ),
    'Yaf_Route_Static::route' =>
        array (
            'file' => 'yaf-route-static.route.php',
            'desc' => 'Route a request',
        ),
    'Yaf_Route_Supervar::assemble' =>
        array (
            'file' => 'yaf-route-supervar.assemble.php',
            'desc' => 'Assemble a url',
        ),
    'Yaf_Route_Supervar::route' =>
        array (
            'file' => 'yaf-route-supervar.route.php',
        ),
    'Yaf_Route_Supervar::__construct' =>
        array (
            'file' => 'yaf-route-supervar.construct.php',
        ),
    'Yaf_Session::count' =>
        array (
            'file' => 'yaf-session.count.php',
        ),
    'Yaf_Session::current' =>
        array (
            'file' => 'yaf-session.current.php',
        ),
    'Yaf_Session::del' =>
        array (
            'file' => 'yaf-session.del.php',
        ),
    'Yaf_Session::getInstance' =>
        array (
            'file' => 'yaf-session.getinstance.php',
        ),
    'Yaf_Session::has' =>
        array (
            'file' => 'yaf-session.has.php',
        ),
    'Yaf_Session::key' =>
        array (
            'file' => 'yaf-session.key.php',
        ),
    'Yaf_Session::next' =>
        array (
            'file' => 'yaf-session.next.php',
        ),
    'Yaf_Session::offsetExists' =>
        array (
            'file' => 'yaf-session.offsetexists.php',
        ),
    'Yaf_Session::offsetGet' =>
        array (
            'file' => 'yaf-session.offsetget.php',
        ),
    'Yaf_Session::offsetSet' =>
        array (
            'file' => 'yaf-session.offsetset.php',
        ),
    'Yaf_Session::offsetUnset' =>
        array (
            'file' => 'yaf-session.offsetunset.php',
        ),
    'Yaf_Session::rewind' =>
        array (
            'file' => 'yaf-session.rewind.php',
        ),
    'Yaf_Session::start' =>
        array (
            'file' => 'yaf-session.start.php',
        ),
    'Yaf_Session::valid' =>
        array (
            'file' => 'yaf-session.valid.php',
        ),
    'Yaf_Session::__clone' =>
        array (
            'file' => 'yaf-session.clone.php',
        ),
    'Yaf_Session::__construct' =>
        array (
            'file' => 'yaf-session.construct.php',
        ),
    'Yaf_Session::__get' =>
        array (
            'file' => 'yaf-session.get.php',
        ),
    'Yaf_Session::__isset' =>
        array (
            'file' => 'yaf-session.isset.php',
        ),
    'Yaf_Session::__set' =>
        array (
            'file' => 'yaf-session.set.php',
        ),
    'Yaf_Session::__sleep' =>
        array (
            'file' => 'yaf-session.sleep.php',
        ),
    'Yaf_Session::__unset' =>
        array (
            'file' => 'yaf-session.unset.php',
        ),
    'Yaf_Session::__wakeup' =>
        array (
            'file' => 'yaf-session.wakeup.php',
        ),
    'Yaf_View_Interface::assign' =>
        array (
            'file' => 'yaf-view-interface.assign.php',
            'desc' => 'Assign value to View engine',
        ),
    'Yaf_View_Interface::display' =>
        array (
            'file' => 'yaf-view-interface.display.php',
            'desc' => 'Render and output a template',
        ),
    'Yaf_View_Interface::getScriptPath' =>
        array (
            'file' => 'yaf-view-interface.getscriptpath.php',
        ),
    'Yaf_View_Interface::render' =>
        array (
            'file' => 'yaf-view-interface.render.php',
            'desc' => 'Render a template',
        ),
    'Yaf_View_Interface::setScriptPath' =>
        array (
            'file' => 'yaf-view-interface.setscriptpath.php',
        ),
    'Yaf_View_Simple::assign' =>
        array (
            'file' => 'yaf-view-simple.assign.php',
            'desc' => 'Assign values',
        ),
    'Yaf_View_Simple::assignRef' =>
        array (
            'file' => 'yaf-view-simple.assignref.php',
        ),
    'Yaf_View_Simple::clear' =>
        array (
            'file' => 'yaf-view-simple.clear.php',
            'desc' => 'Clear Assigned values',
        ),
    'Yaf_View_Simple::display' =>
        array (
            'file' => 'yaf-view-simple.display.php',
            'desc' => 'Render and display',
        ),
    'Yaf_View_Simple::eval' =>
        array (
            'file' => 'yaf-view-simple.eval.php',
            'desc' => 'Render template',
        ),
    'Yaf_View_Simple::getScriptPath' =>
        array (
            'file' => 'yaf-view-simple.getscriptpath.php',
            'desc' => 'Get templates directory',
        ),
    'Yaf_View_Simple::render' =>
        array (
            'file' => 'yaf-view-simple.render.php',
            'desc' => 'Render template',
        ),
    'Yaf_View_Simple::setScriptPath' =>
        array (
            'file' => 'yaf-view-simple.setscriptpath.php',
            'desc' => 'Set tempaltes directory',
        ),
    'Yaf_View_Simple::__construct' =>
        array (
            'file' => 'yaf-view-simple.construct.php',
            'desc' => 'Constructor of Yaf_View_Simple',
        ),
    'Yaf_View_Simple::__get' =>
        array (
            'file' => 'yaf-view-simple.get.php',
            'desc' => 'Retrieve assigned variable',
        ),
    'Yaf_View_Simple::__isset' =>
        array (
            'file' => 'yaf-view-simple.isset.php',
        ),
    'Yaf_View_Simple::__set' =>
        array (
            'file' => 'yaf-view-simple.set.php',
            'desc' => 'Set value to engine',
        ),
    'yaml_emit' =>
        array (
            'file' => 'function.yaml-emit.php',
            'desc' => 'Returns the YAML representation of a value',
        ),
    'yaml_emit_file' =>
        array (
            'file' => 'function.yaml-emit-file.php',
            'desc' => 'Send the YAML representation of a value to a file',
        ),
    'yaml_parse' =>
        array (
            'file' => 'function.yaml-parse.php',
            'desc' => 'Parse a YAML stream',
        ),
    'yaml_parse_file' =>
        array (
            'file' => 'function.yaml-parse-file.php',
            'desc' => 'Parse a YAML stream from a file',
        ),
    'yaml_parse_url' =>
        array (
            'file' => 'function.yaml-parse-url.php',
            'desc' => 'Parse a Yaml stream from a URL',
        ),
    'Yar_Client::setOpt' =>
        array (
            'file' => 'yar-client.setopt.php',
            'desc' => 'Set calling contexts',
        ),
    'Yar_Client::__call' =>
        array (
            'file' => 'yar-client.call.php',
            'desc' => 'Call service',
        ),
    'Yar_Client::__construct' =>
        array (
            'file' => 'yar-client.construct.php',
            'desc' => 'Create a client',
        ),
    'Yar_Client_Exception::getType' =>
        array (
            'file' => 'yar-client-exception.gettype.php',
        ),
    'Yar_Concurrent_Client::call' =>
        array (
            'file' => 'yar-concurrent-client.call.php',
            'desc' => 'Register a concurrent call',
        ),
    'Yar_Concurrent_Client::loop' =>
        array (
            'file' => 'yar-concurrent-client.loop.php',
            'desc' => 'Send all calls',
        ),
    'Yar_Server::handle' =>
        array (
            'file' => 'yar-server.handle.php',
            'desc' => 'Start RPC Server',
        ),
    'Yar_Server::__construct' =>
        array (
            'file' => 'yar-server.construct.php',
            'desc' => 'Register a server',
        ),
    'Yar_Server_Exception::getType' =>
        array (
            'file' => 'yar-server-exception.gettype.php',
        ),
    'yaz_addinfo' =>
        array (
            'file' => 'function.yaz-addinfo.php',
            'desc' => 'Returns additional error information',
        ),
    'yaz_ccl_conf' =>
        array (
            'file' => 'function.yaz-ccl-conf.php',
            'desc' => 'Configure CCL parser',
        ),
    'yaz_ccl_parse' =>
        array (
            'file' => 'function.yaz-ccl-parse.php',
            'desc' => 'Invoke CCL Parser',
        ),
    'yaz_close' =>
        array (
            'file' => 'function.yaz-close.php',
            'desc' => 'Close YAZ connection',
        ),
    'yaz_connect' =>
        array (
            'file' => 'function.yaz-connect.php',
            'desc' => 'Prepares for a connection to a Z39.50 server',
        ),
    'yaz_database' =>
        array (
            'file' => 'function.yaz-database.php',
            'desc' => 'Specifies the databases within a session',
        ),
    'yaz_element' =>
        array (
            'file' => 'function.yaz-element.php',
            'desc' => 'Specifies Element-Set Name for retrieval',
        ),
    'yaz_errno' =>
        array (
            'file' => 'function.yaz-errno.php',
            'desc' => 'Returns error number',
        ),
    'yaz_error' =>
        array (
            'file' => 'function.yaz-error.php',
            'desc' => 'Returns error description',
        ),
    'yaz_es' =>
        array (
            'file' => 'function.yaz-es.php',
            'desc' => 'Prepares for an Extended Service Request',
        ),
    'yaz_es_result' =>
        array (
            'file' => 'function.yaz-es-result.php',
            'desc' => 'Inspects Extended Services Result',
        ),
    'yaz_get_option' =>
        array (
            'file' => 'function.yaz-get-option.php',
            'desc' => 'Returns value of option for connection',
        ),
    'yaz_hits' =>
        array (
            'file' => 'function.yaz-hits.php',
            'desc' => 'Returns number of hits for last search',
        ),
    'yaz_itemorder' =>
        array (
            'file' => 'function.yaz-itemorder.php',
            'desc' => 'Prepares for Z39.50 Item Order with an ILL-Request package',
        ),
    'yaz_present' =>
        array (
            'file' => 'function.yaz-present.php',
            'desc' => 'Prepares for retrieval (Z39.50 present)',
        ),
    'yaz_range' =>
        array (
            'file' => 'function.yaz-range.php',
            'desc' => 'Specifies a range of records to retrieve',
        ),
    'yaz_record' =>
        array (
            'file' => 'function.yaz-record.php',
            'desc' => 'Returns a record',
        ),
    'yaz_scan' =>
        array (
            'file' => 'function.yaz-scan.php',
            'desc' => 'Prepares for a scan',
        ),
    'yaz_scan_result' =>
        array (
            'file' => 'function.yaz-scan-result.php',
            'desc' => 'Returns Scan Response result',
        ),
    'yaz_schema' =>
        array (
            'file' => 'function.yaz-schema.php',
            'desc' => 'Specifies schema for retrieval',
        ),
    'yaz_search' =>
        array (
            'file' => 'function.yaz-search.php',
            'desc' => 'Prepares for a search',
        ),
    'yaz_set_option' =>
        array (
            'file' => 'function.yaz-set-option.php',
            'desc' => 'Sets one or more options for connection',
        ),
    'yaz_sort' =>
        array (
            'file' => 'function.yaz-sort.php',
            'desc' => 'Sets sorting criteria',
        ),
    'yaz_syntax' =>
        array (
            'file' => 'function.yaz-syntax.php',
            'desc' => 'Specifies the preferred record syntax for retrieval',
        ),
    'yaz_wait' =>
        array (
            'file' => 'function.yaz-wait.php',
            'desc' => 'Wait for Z39.50 requests to complete',
        ),
    'yp_all' =>
        array (
            'file' => 'function.yp-all.php',
            'desc' => 'Traverse the map and call a function on each entry',
        ),
    'yp_cat' =>
        array (
            'file' => 'function.yp-cat.php',
            'desc' => 'Return an array containing the entire map',
        ),
    'yp_errno' =>
        array (
            'file' => 'function.yp-errno.php',
            'desc' => 'Returns the error code of the previous operation',
        ),
    'yp_err_string' =>
        array (
            'file' => 'function.yp-err-string.php',
            'desc' => 'Returns the error string associated with the given error code',
        ),
    'yp_first' =>
        array (
            'file' => 'function.yp-first.php',
            'desc' => 'Returns the first key-value pair from the named map',
        ),
    'yp_get_default_domain' =>
        array (
            'file' => 'function.yp-get-default-domain.php',
            'desc' => 'Fetches the machine\'s default NIS domain',
        ),
    'yp_master' =>
        array (
            'file' => 'function.yp-master.php',
            'desc' => 'Returns the machine name of the master NIS server for a map',
        ),
    'yp_match' =>
        array (
            'file' => 'function.yp-match.php',
            'desc' => 'Returns the matched line',
        ),
    'yp_next' =>
        array (
            'file' => 'function.yp-next.php',
            'desc' => 'Returns the next key-value pair in the named map',
        ),
    'yp_order' =>
        array (
            'file' => 'function.yp-order.php',
            'desc' => 'Returns the order number for a map',
        ),
    'zend_logo_guid' =>
        array (
            'file' => 'function.zend-logo-guid.php',
            'desc' => 'Gets the Zend guid',
        ),
    'zend_thread_id' =>
        array (
            'file' => 'function.zend-thread-id.php',
            'desc' => 'Returns a unique identifier for the current thread',
        ),
    'zend_version' =>
        array (
            'file' => 'function.zend-version.php',
            'desc' => 'Gets the version of the current Zend engine',
        ),
    'ZipArchive::addEmptyDir' =>
        array (
            'file' => 'ziparchive.addemptydir.php',
            'desc' => 'Add a new directory',
        ),
    'ZipArchive::addFile' =>
        array (
            'file' => 'ziparchive.addfile.php',
            'desc' => 'Adds a file to a ZIP archive from the given path',
        ),
    'ZipArchive::addFromString' =>
        array (
            'file' => 'ziparchive.addfromstring.php',
            'desc' => 'Add a file to a ZIP archive using its contents',
        ),
    'ZipArchive::addGlob' =>
        array (
            'file' => 'ziparchive.addglob.php',
            'desc' => 'Add files from a directory by glob pattern',
        ),
    'ZipArchive::addPattern' =>
        array (
            'file' => 'ziparchive.addpattern.php',
            'desc' => 'Add files from a directory by PCRE pattern',
        ),
    'ZipArchive::close' =>
        array (
            'file' => 'ziparchive.close.php',
            'desc' => 'Close the active archive (opened or newly created)',
        ),
    'ZipArchive::deleteIndex' =>
        array (
            'file' => 'ziparchive.deleteindex.php',
            'desc' => 'delete an entry in the archive using its index',
        ),
    'ZipArchive::deleteName' =>
        array (
            'file' => 'ziparchive.deletename.php',
            'desc' => 'delete an entry in the archive using its name',
        ),
    'ZipArchive::extractTo' =>
        array (
            'file' => 'ziparchive.extractto.php',
            'desc' => 'Extract the archive contents',
        ),
    'ZipArchive::getArchiveComment' =>
        array (
            'file' => 'ziparchive.getarchivecomment.php',
            'desc' => 'Returns the Zip archive comment',
        ),
    'ZipArchive::getCommentIndex' =>
        array (
            'file' => 'ziparchive.getcommentindex.php',
            'desc' => 'Returns the comment of an entry using the entry index',
        ),
    'ZipArchive::getCommentName' =>
        array (
            'file' => 'ziparchive.getcommentname.php',
            'desc' => 'Returns the comment of an entry using the entry name',
        ),
    'ZipArchive::getExternalAttributesIndex' =>
        array (
            'file' => 'ziparchive.getexternalattributesindex.php',
            'desc' => 'Retrieve the external attributes of an entry defined by its index',
        ),
    'ZipArchive::getExternalAttributesName' =>
        array (
            'file' => 'ziparchive.getexternalattributesname.php',
            'desc' => 'Retrieve the external attributes of an entry defined by its name',
        ),
    'ZipArchive::getFromIndex' =>
        array (
            'file' => 'ziparchive.getfromindex.php',
            'desc' => 'Returns the entry contents using its index',
        ),
    'ZipArchive::getFromName' =>
        array (
            'file' => 'ziparchive.getfromname.php',
            'desc' => 'Returns the entry contents using its name',
        ),
    'ZipArchive::getNameIndex' =>
        array (
            'file' => 'ziparchive.getnameindex.php',
            'desc' => 'Returns the name of an entry using its index',
        ),
    'ZipArchive::getStatusString' =>
        array (
            'file' => 'ziparchive.getstatusstring.php',
            'desc' => 'Returns the status error message, system and/or zip messages',
        ),
    'ZipArchive::getStream' =>
        array (
            'file' => 'ziparchive.getstream.php',
            'desc' => 'Get a file handler to the entry defined by its name (read only).',
        ),
    'ZipArchive::locateName' =>
        array (
            'file' => 'ziparchive.locatename.php',
            'desc' => 'Returns the index of the entry in the archive',
        ),
    'ZipArchive::open' =>
        array (
            'file' => 'ziparchive.open.php',
            'desc' => 'Open a ZIP file archive',
        ),
    'ZipArchive::renameIndex' =>
        array (
            'file' => 'ziparchive.renameindex.php',
            'desc' => 'Renames an entry defined by its index',
        ),
    'ZipArchive::renameName' =>
        array (
            'file' => 'ziparchive.renamename.php',
            'desc' => 'Renames an entry defined by its name',
        ),
    'ZipArchive::setArchiveComment' =>
        array (
            'file' => 'ziparchive.setarchivecomment.php',
            'desc' => 'Set the comment of a ZIP archive',
        ),
    'ZipArchive::setCommentIndex' =>
        array (
            'file' => 'ziparchive.setcommentindex.php',
            'desc' => 'Set the comment of an entry defined by its index',
        ),
    'ZipArchive::setCommentName' =>
        array (
            'file' => 'ziparchive.setcommentname.php',
            'desc' => 'Set the comment of an entry defined by its name',
        ),
    'ZipArchive::setExternalAttributesIndex' =>
        array (
            'file' => 'ziparchive.setexternalattributesindex.php',
            'desc' => 'Set the external attributes of an entry defined by its index',
        ),
    'ZipArchive::setExternalAttributesName' =>
        array (
            'file' => 'ziparchive.setexternalattributesname.php',
            'desc' => 'Set the external attributes of an entry defined by its name',
        ),
    'ZipArchive::setPassword' =>
        array (
            'file' => 'ziparchive.setpassword.php',
            'desc' => 'Set the password for the active archive',
        ),
    'ZipArchive::statIndex' =>
        array (
            'file' => 'ziparchive.statindex.php',
            'desc' => 'Get the details of an entry defined by its index.',
        ),
    'ZipArchive::statName' =>
        array (
            'file' => 'ziparchive.statname.php',
            'desc' => 'Get the details of an entry defined by its name.',
        ),
    'ZipArchive::unchangeAll' =>
        array (
            'file' => 'ziparchive.unchangeall.php',
            'desc' => 'Undo all changes done in the archive',
        ),
    'ZipArchive::unchangeArchive' =>
        array (
            'file' => 'ziparchive.unchangearchive.php',
            'desc' => 'Revert all global changes done in the archive.',
        ),
    'ZipArchive::unchangeIndex' =>
        array (
            'file' => 'ziparchive.unchangeindex.php',
            'desc' => 'Revert all changes done to an entry at the given index',
        ),
    'ZipArchive::unchangeName' =>
        array (
            'file' => 'ziparchive.unchangename.php',
            'desc' => 'Revert all changes done to an entry with the given name.',
        ),
    'zip_close' =>
        array (
            'file' => 'function.zip-close.php',
            'desc' => 'Close a ZIP file archive',
        ),
    'zip_entry_close' =>
        array (
            'file' => 'function.zip-entry-close.php',
            'desc' => 'Close a directory entry',
        ),
    'zip_entry_compressedsize' =>
        array (
            'file' => 'function.zip-entry-compressedsize.php',
            'desc' => 'Retrieve the compressed size of a directory entry',
        ),
    'zip_entry_compressionmethod' =>
        array (
            'file' => 'function.zip-entry-compressionmethod.php',
            'desc' => 'Retrieve the compression method of a directory entry',
        ),
    'zip_entry_filesize' =>
        array (
            'file' => 'function.zip-entry-filesize.php',
            'desc' => 'Retrieve the actual file size of a directory entry',
        ),
    'zip_entry_name' =>
        array (
            'file' => 'function.zip-entry-name.php',
            'desc' => 'Retrieve the name of a directory entry',
        ),
    'zip_entry_open' =>
        array (
            'file' => 'function.zip-entry-open.php',
            'desc' => 'Open a directory entry for reading',
        ),
    'zip_entry_read' =>
        array (
            'file' => 'function.zip-entry-read.php',
            'desc' => 'Read from an open directory entry',
        ),
    'zip_open' =>
        array (
            'file' => 'function.zip-open.php',
            'desc' => 'Open a ZIP file archive',
        ),
    'zip_read' =>
        array (
            'file' => 'function.zip-read.php',
            'desc' => 'Read next entry in a ZIP file archive',
        ),
    'zlib://' =>
        array (
            'file' => 'wrappers.compression.php',
            'desc' => 'Compression Streams',
        ),
    'zlib_decode' =>
        array (
            'file' => 'function.zlib-decode.php',
            'desc' => 'Uncompress any raw/gzip/zlib encoded data',
        ),
    'zlib_encode' =>
        array (
            'file' => 'function.zlib-encode.php',
            'desc' => 'Compress data with the specified encoding',
        ),
    'zlib_get_coding_type' =>
        array (
            'file' => 'function.zlib-get-coding-type.php',
            'desc' => 'Returns the coding type used for output compression',
        ),
    'ZMQ::__construct' =>
        array (
            'file' => 'zmq.construct.php',
            'desc' => 'ZMQ constructor',
        ),
    'ZMQContext::getOpt' =>
        array (
            'file' => 'zmqcontext.getopt.php',
            'desc' => 'Get context option',
        ),
    'ZMQContext::getSocket' =>
        array (
            'file' => 'zmqcontext.getsocket.php',
            'desc' => 'Create a new socket',
        ),
    'ZMQContext::isPersistent' =>
        array (
            'file' => 'zmqcontext.ispersistent.php',
            'desc' => 'Whether the context is persistent',
        ),
    'ZMQContext::setOpt' =>
        array (
            'file' => 'zmqcontext.setopt.php',
            'desc' => 'Set a socket option',
        ),
    'ZMQContext::__construct' =>
        array (
            'file' => 'zmqcontext.construct.php',
            'desc' => 'Construct a new ZMQContext object',
        ),
    'ZMQDevice::getIdleTimeout' =>
        array (
            'file' => 'zmqdevice.getidletimeout.php',
            'desc' => 'Get the idle timeout',
        ),
    'ZMQDevice::getTimerTimeout' =>
        array (
            'file' => 'zmqdevice.gettimertimeout.php',
            'desc' => 'Get the timer timeout',
        ),
    'ZMQDevice::run' =>
        array (
            'file' => 'zmqdevice.run.php',
            'desc' => 'Run the new device',
        ),
    'ZMQDevice::setIdleCallback' =>
        array (
            'file' => 'zmqdevice.setidlecallback.php',
            'desc' => 'Set the idle callback function',
        ),
    'ZMQDevice::setIdleTimeout' =>
        array (
            'file' => 'zmqdevice.setidletimeout.php',
            'desc' => 'Set the idle timeout',
        ),
    'ZMQDevice::setTimerCallback' =>
        array (
            'file' => 'zmqdevice.settimercallback.php',
            'desc' => 'Set the timer callback function',
        ),
    'ZMQDevice::setTimerTimeout' =>
        array (
            'file' => 'zmqdevice.settimertimeout.php',
            'desc' => 'Set the timer timeout',
        ),
    'ZMQDevice::__construct' =>
        array (
            'file' => 'zmqdevice.construct.php',
            'desc' => 'Construct a new device',
        ),
    'ZMQPoll::add' =>
        array (
            'file' => 'zmqpoll.add.php',
            'desc' => 'Add item to the poll set',
        ),
    'ZMQPoll::clear' =>
        array (
            'file' => 'zmqpoll.clear.php',
            'desc' => 'Clear the poll set',
        ),
    'ZMQPoll::count' =>
        array (
            'file' => 'zmqpoll.count.php',
            'desc' => 'Count items in the poll set',
        ),
    'ZMQPoll::getLastErrors' =>
        array (
            'file' => 'zmqpoll.getlasterrors.php',
            'desc' => 'Get poll errors',
        ),
    'ZMQPoll::poll' =>
        array (
            'file' => 'zmqpoll.poll.php',
            'desc' => 'Poll the items',
        ),
    'ZMQPoll::remove' =>
        array (
            'file' => 'zmqpoll.remove.php',
            'desc' => 'Remove item from poll set',
        ),
    'ZMQSocket::bind' =>
        array (
            'file' => 'zmqsocket.bind.php',
            'desc' => 'Bind the socket',
        ),
    'ZMQSocket::connect' =>
        array (
            'file' => 'zmqsocket.connect.php',
            'desc' => 'Connect the socket',
        ),
    'ZMQSocket::disconnect' =>
        array (
            'file' => 'zmqsocket.disconnect.php',
            'desc' => 'Disconnect a socket',
        ),
    'ZMQSocket::getEndpoints' =>
        array (
            'file' => 'zmqsocket.getendpoints.php',
            'desc' => 'Get list of endpoints',
        ),
    'ZMQSocket::getPersistentId' =>
        array (
            'file' => 'zmqsocket.getpersistentid.php',
            'desc' => 'Get the persistent id',
        ),
    'ZMQSocket::getSocketType' =>
        array (
            'file' => 'zmqsocket.getsockettype.php',
            'desc' => 'Get the socket type',
        ),
    'ZMQSocket::getSockOpt' =>
        array (
            'file' => 'zmqsocket.getsockopt.php',
            'desc' => 'Get socket option',
        ),
    'ZMQSocket::isPersistent' =>
        array (
            'file' => 'zmqsocket.ispersistent.php',
            'desc' => 'Whether the socket is persistent',
        ),
    'ZMQSocket::recv' =>
        array (
            'file' => 'zmqsocket.recv.php',
            'desc' => 'Receives a message',
        ),
    'ZMQSocket::recvMulti' =>
        array (
            'file' => 'zmqsocket.recvmulti.php',
            'desc' => 'Receives a multipart message',
        ),
    'ZMQSocket::send' =>
        array (
            'file' => 'zmqsocket.send.php',
            'desc' => 'Sends a message',
        ),
    'ZMQSocket::sendmulti' =>
        array (
            'file' => 'zmqsocket.sendmulti.php',
            'desc' => 'Sends a multipart message',
        ),
    'ZMQSocket::setSockOpt' =>
        array (
            'file' => 'zmqsocket.setsockopt.php',
            'desc' => 'Set a socket option',
        ),
    'ZMQSocket::unbind' =>
        array (
            'file' => 'zmqsocket.unbind.php',
            'desc' => 'Unbind the socket',
        ),
    'ZMQSocket::__construct' =>
        array (
            'file' => 'zmqsocket.construct.php',
            'desc' => 'Construct a new ZMQSocket',
        ),
    '__autoload' =>
        array (
            'file' => 'function.autoload.php',
            'desc' => 'Attempt to load undefined class',
        ),
    '__halt_compiler' =>
        array (
            'file' => 'function.halt-compiler.php',
            'desc' => 'Halts the compiler execution',
        ),
);